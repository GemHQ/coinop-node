(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var MultiWallet, PassphraseBoxTest;

PassphraseBoxTest = require('./passphrase_box_browser');

MultiWallet = require('./multiwallet');



},{"./multiwallet":378,"./passphrase_box_browser":379}],2:[function(require,module,exports){
// (public) Constructor
function BigInteger(a, b, c) {
  if (!(this instanceof BigInteger))
    return new BigInteger(a, b, c)

  if (a != null) {
    if ("number" == typeof a) this.fromNumber(a, b, c)
    else if (b == null && "string" != typeof a) this.fromString(a, 256)
    else this.fromString(a, b)
  }
}

var proto = BigInteger.prototype

// duck-typed isBigInteger
proto.__bigi = require('../package.json').version
BigInteger.isBigInteger = function (obj, check_ver) {
  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)
}

// Bits per digit
var dbits

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i, x, w, j, c, n) {
  while (--n >= 0) {
    var v = x * this[i++] + w[j] + c
    c = Math.floor(v / 0x4000000)
    w[j++] = v & 0x3ffffff
  }
  return c
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i, x, w, j, c, n) {
  var xl = x & 0x7fff,
    xh = x >> 15
  while (--n >= 0) {
    var l = this[i] & 0x7fff
    var h = this[i++] >> 15
    var m = xh * l + h * xl
    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)
    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)
    w[j++] = l & 0x3fffffff
  }
  return c
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
  var xl = x & 0x3fff,
    xh = x >> 14
  while (--n >= 0) {
    var l = this[i] & 0x3fff
    var h = this[i++] >> 14
    var m = xh * l + h * xl
    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c
    c = (l >> 28) + (m >> 14) + xh * h
    w[j++] = l & 0xfffffff
  }
  return c
}

// wtf?
BigInteger.prototype.am = am1
dbits = 26

BigInteger.prototype.DB = dbits
BigInteger.prototype.DM = ((1 << dbits) - 1)
var DV = BigInteger.prototype.DV = (1 << dbits)

var BI_FP = 52
BigInteger.prototype.FV = Math.pow(2, BI_FP)
BigInteger.prototype.F1 = BI_FP - dbits
BigInteger.prototype.F2 = 2 * dbits - BI_FP

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz"
var BI_RC = new Array()
var rr, vv
rr = "0".charCodeAt(0)
for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv
rr = "a".charCodeAt(0)
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv
rr = "A".charCodeAt(0)
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv

function int2char(n) {
  return BI_RM.charAt(n)
}

function intAt(s, i) {
  var c = BI_RC[s.charCodeAt(i)]
  return (c == null) ? -1 : c
}

// (protected) copy this to r
function bnpCopyTo(r) {
  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]
  r.t = this.t
  r.s = this.s
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
  this.t = 1
  this.s = (x < 0) ? -1 : 0
  if (x > 0) this[0] = x
  else if (x < -1) this[0] = x + DV
  else this.t = 0
}

// return bigint initialized to value
function nbv(i) {
  var r = new BigInteger()
  r.fromInt(i)
  return r
}

// (protected) set from string and radix
function bnpFromString(s, b) {
  var self = this

  var k
  if (b == 16) k = 4
  else if (b == 8) k = 3
  else if (b == 256) k = 8; // byte array
  else if (b == 2) k = 1
  else if (b == 32) k = 5
  else if (b == 4) k = 2
  else {
    self.fromRadix(s, b)
    return
  }
  self.t = 0
  self.s = 0
  var i = s.length,
    mi = false,
    sh = 0
  while (--i >= 0) {
    var x = (k == 8) ? s[i] & 0xff : intAt(s, i)
    if (x < 0) {
      if (s.charAt(i) == "-") mi = true
      continue
    }
    mi = false
    if (sh == 0)
      self[self.t++] = x
    else if (sh + k > self.DB) {
      self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh
      self[self.t++] = (x >> (self.DB - sh))
    } else
      self[self.t - 1] |= x << sh
    sh += k
    if (sh >= self.DB) sh -= self.DB
  }
  if (k == 8 && (s[0] & 0x80) != 0) {
    self.s = -1
    if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh
  }
  self.clamp()
  if (mi) BigInteger.ZERO.subTo(self, self)
}

// (protected) clamp off excess high words
function bnpClamp() {
  var c = this.s & this.DM
  while (this.t > 0 && this[this.t - 1] == c)--this.t
}

// (public) return string representation in given radix
function bnToString(b) {
  var self = this
  if (self.s < 0) return "-" + self.negate()
    .toString(b)
  var k
  if (b == 16) k = 4
  else if (b == 8) k = 3
  else if (b == 2) k = 1
  else if (b == 32) k = 5
  else if (b == 4) k = 2
  else return self.toRadix(b)
  var km = (1 << k) - 1,
    d, m = false,
    r = "",
    i = self.t
  var p = self.DB - (i * self.DB) % k
  if (i-- > 0) {
    if (p < self.DB && (d = self[i] >> p) > 0) {
      m = true
      r = int2char(d)
    }
    while (i >= 0) {
      if (p < k) {
        d = (self[i] & ((1 << p) - 1)) << (k - p)
        d |= self[--i] >> (p += self.DB - k)
      } else {
        d = (self[i] >> (p -= k)) & km
        if (p <= 0) {
          p += self.DB
          --i
        }
      }
      if (d > 0) m = true
      if (m) r += int2char(d)
    }
  }
  return m ? r : "0"
}

// (public) -this
function bnNegate() {
  var r = new BigInteger()
  BigInteger.ZERO.subTo(this, r)
  return r
}

// (public) |this|
function bnAbs() {
  return (this.s < 0) ? this.negate() : this
}

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
  var r = this.s - a.s
  if (r != 0) return r
  var i = this.t
  r = i - a.t
  if (r != 0) return (this.s < 0) ? -r : r
  while (--i >= 0)
    if ((r = this[i] - a[i]) != 0) return r
  return 0
}

// returns bit length of the integer x
function nbits(x) {
  var r = 1,
    t
  if ((t = x >>> 16) != 0) {
    x = t
    r += 16
  }
  if ((t = x >> 8) != 0) {
    x = t
    r += 8
  }
  if ((t = x >> 4) != 0) {
    x = t
    r += 4
  }
  if ((t = x >> 2) != 0) {
    x = t
    r += 2
  }
  if ((t = x >> 1) != 0) {
    x = t
    r += 1
  }
  return r
}

// (public) return the number of bits in "this"
function bnBitLength() {
  if (this.t <= 0) return 0
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))
}

// (public) return the number of bytes in "this"
function bnByteLength() {
  return this.bitLength() >> 3
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
  var i
  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]
  for (i = n - 1; i >= 0; --i) r[i] = 0
  r.t = this.t + n
  r.s = this.s
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
  for (var i = n; i < this.t; ++i) r[i - n] = this[i]
  r.t = Math.max(this.t - n, 0)
  r.s = this.s
}

// (protected) r = this << n
function bnpLShiftTo(n, r) {
  var self = this
  var bs = n % self.DB
  var cbs = self.DB - bs
  var bm = (1 << cbs) - 1
  var ds = Math.floor(n / self.DB),
    c = (self.s << bs) & self.DM,
    i
  for (i = self.t - 1; i >= 0; --i) {
    r[i + ds + 1] = (self[i] >> cbs) | c
    c = (self[i] & bm) << bs
  }
  for (i = ds - 1; i >= 0; --i) r[i] = 0
  r[ds] = c
  r.t = self.t + ds + 1
  r.s = self.s
  r.clamp()
}

// (protected) r = this >> n
function bnpRShiftTo(n, r) {
  var self = this
  r.s = self.s
  var ds = Math.floor(n / self.DB)
  if (ds >= self.t) {
    r.t = 0
    return
  }
  var bs = n % self.DB
  var cbs = self.DB - bs
  var bm = (1 << bs) - 1
  r[0] = self[ds] >> bs
  for (var i = ds + 1; i < self.t; ++i) {
    r[i - ds - 1] |= (self[i] & bm) << cbs
    r[i - ds] = self[i] >> bs
  }
  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs
  r.t = self.t - ds
  r.clamp()
}

// (protected) r = this - a
function bnpSubTo(a, r) {
  var self = this
  var i = 0,
    c = 0,
    m = Math.min(a.t, self.t)
  while (i < m) {
    c += self[i] - a[i]
    r[i++] = c & self.DM
    c >>= self.DB
  }
  if (a.t < self.t) {
    c -= a.s
    while (i < self.t) {
      c += self[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c += self.s
  } else {
    c += self.s
    while (i < a.t) {
      c -= a[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c -= a.s
  }
  r.s = (c < 0) ? -1 : 0
  if (c < -1) r[i++] = self.DV + c
  else if (c > 0) r[i++] = c
  r.t = i
  r.clamp()
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
  var x = this.abs(),
    y = a.abs()
  var i = x.t
  r.t = i + y.t
  while (--i >= 0) r[i] = 0
  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)
  r.s = 0
  r.clamp()
  if (this.s != a.s) BigInteger.ZERO.subTo(r, r)
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
  var x = this.abs()
  var i = r.t = 2 * x.t
  while (--i >= 0) r[i] = 0
  for (i = 0; i < x.t - 1; ++i) {
    var c = x.am(i, x[i], r, 2 * i, 0, 1)
    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
      r[i + x.t] -= x.DV
      r[i + x.t + 1] = 1
    }
  }
  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)
  r.s = 0
  r.clamp()
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
  var self = this
  var pm = m.abs()
  if (pm.t <= 0) return
  var pt = self.abs()
  if (pt.t < pm.t) {
    if (q != null) q.fromInt(0)
    if (r != null) self.copyTo(r)
    return
  }
  if (r == null) r = new BigInteger()
  var y = new BigInteger(),
    ts = self.s,
    ms = m.s
  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus
  if (nsh > 0) {
    pm.lShiftTo(nsh, y)
    pt.lShiftTo(nsh, r)
  } else {
    pm.copyTo(y)
    pt.copyTo(r)
  }
  var ys = y.t
  var y0 = y[ys - 1]
  if (y0 == 0) return
  var yt = y0 * (1 << self.F1) + ((ys > 1) ? y[ys - 2] >> self.F2 : 0)
  var d1 = self.FV / yt,
    d2 = (1 << self.F1) / yt,
    e = 1 << self.F2
  var i = r.t,
    j = i - ys,
    t = (q == null) ? new BigInteger() : q
  y.dlShiftTo(j, t)
  if (r.compareTo(t) >= 0) {
    r[r.t++] = 1
    r.subTo(t, r)
  }
  BigInteger.ONE.dlShiftTo(ys, t)
  t.subTo(y, y); // "negative" y so we can replace sub with am later
  while (y.t < ys) y[y.t++] = 0
  while (--j >= 0) {
    // Estimate quotient digit
    var qd = (r[--i] == y0) ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out
      y.dlShiftTo(j, t)
      r.subTo(t, r)
      while (r[i] < --qd) r.subTo(t, r)
    }
  }
  if (q != null) {
    r.drShiftTo(ys, q)
    if (ts != ms) BigInteger.ZERO.subTo(q, q)
  }
  r.t = ys
  r.clamp()
  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
  if (ts < 0) BigInteger.ZERO.subTo(r, r)
}

// (public) this mod a
function bnMod(a) {
  var r = new BigInteger()
  this.abs()
    .divRemTo(a, null, r)
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)
  return r
}

// Modular reduction using "classic" algorithm
function Classic(m) {
  this.m = m
}

function cConvert(x) {
  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)
  else return x
}

function cRevert(x) {
  return x
}

function cReduce(x) {
  x.divRemTo(this.m, null, x)
}

function cMulTo(x, y, r) {
  x.multiplyTo(y, r)
  this.reduce(r)
}

function cSqrTo(x, r) {
  x.squareTo(r)
  this.reduce(r)
}

Classic.prototype.convert = cConvert
Classic.prototype.revert = cRevert
Classic.prototype.reduce = cReduce
Classic.prototype.mulTo = cMulTo
Classic.prototype.sqrTo = cSqrTo

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
  if (this.t < 1) return 0
  var x = this[0]
  if ((x & 1) == 0) return 0
  var y = x & 3; // y == 1/x mod 2^2
  y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
  y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
  y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV
  return (y > 0) ? this.DV - y : -y
}

// Montgomery reduction
function Montgomery(m) {
  this.m = m
  this.mp = m.invDigit()
  this.mpl = this.mp & 0x7fff
  this.mph = this.mp >> 15
  this.um = (1 << (m.DB - 15)) - 1
  this.mt2 = 2 * m.t
}

// xR mod m
function montConvert(x) {
  var r = new BigInteger()
  x.abs()
    .dlShiftTo(this.m.t, r)
  r.divRemTo(this.m, null, r)
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)
  return r
}

// x/R mod m
function montRevert(x) {
  var r = new BigInteger()
  x.copyTo(r)
  this.reduce(r)
  return r
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
  while (x.t <= this.mt2) // pad x so am has enough room later
    x[x.t++] = 0
  for (var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x[i]*mp mod DV
    var j = x[i] & 0x7fff
    var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM
    // use am to combine the multiply-shift-add into one call
    j = i + this.m.t
    x[j] += this.m.am(0, u0, x, i, 0, this.m.t)
    // propagate carry
    while (x[j] >= x.DV) {
      x[j] -= x.DV
      x[++j]++
    }
  }
  x.clamp()
  x.drShiftTo(this.m.t, x)
  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
  x.squareTo(r)
  this.reduce(r)
}

// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
  x.multiplyTo(y, r)
  this.reduce(r)
}

Montgomery.prototype.convert = montConvert
Montgomery.prototype.revert = montRevert
Montgomery.prototype.reduce = montReduce
Montgomery.prototype.mulTo = montMulTo
Montgomery.prototype.sqrTo = montSqrTo

// (protected) true iff this is even
function bnpIsEven() {
  return ((this.t > 0) ? (this[0] & 1) : this.s) == 0
}

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e, z) {
  if (e > 0xffffffff || e < 1) return BigInteger.ONE
  var r = new BigInteger(),
    r2 = new BigInteger(),
    g = z.convert(this),
    i = nbits(e) - 1
  g.copyTo(r)
  while (--i >= 0) {
    z.sqrTo(r, r2)
    if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)
    else {
      var t = r
      r = r2
      r2 = t
    }
  }
  return z.revert(r)
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e, m) {
  var z
  if (e < 256 || m.isEven()) z = new Classic(m)
  else z = new Montgomery(m)
  return this.exp(e, z)
}

// protected
proto.copyTo = bnpCopyTo
proto.fromInt = bnpFromInt
proto.fromString = bnpFromString
proto.clamp = bnpClamp
proto.dlShiftTo = bnpDLShiftTo
proto.drShiftTo = bnpDRShiftTo
proto.lShiftTo = bnpLShiftTo
proto.rShiftTo = bnpRShiftTo
proto.subTo = bnpSubTo
proto.multiplyTo = bnpMultiplyTo
proto.squareTo = bnpSquareTo
proto.divRemTo = bnpDivRemTo
proto.invDigit = bnpInvDigit
proto.isEven = bnpIsEven
proto.exp = bnpExp

// public
proto.toString = bnToString
proto.negate = bnNegate
proto.abs = bnAbs
proto.compareTo = bnCompareTo
proto.bitLength = bnBitLength
proto.byteLength = bnByteLength
proto.mod = bnMod
proto.modPowInt = bnModPowInt

// (public)
function bnClone() {
  var r = new BigInteger()
  this.copyTo(r)
  return r
}

// (public) return value as integer
function bnIntValue() {
  if (this.s < 0) {
    if (this.t == 1) return this[0] - this.DV
    else if (this.t == 0) return -1
  } else if (this.t == 1) return this[0]
  else if (this.t == 0) return 0
  // assumes 16 < DB < 32
  return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]
}

// (public) return value as byte
function bnByteValue() {
  return (this.t == 0) ? this.s : (this[0] << 24) >> 24
}

// (public) return value as short (assumes DB>=16)
function bnShortValue() {
  return (this.t == 0) ? this.s : (this[0] << 16) >> 16
}

// (protected) return x s.t. r^x < DV
function bnpChunkSize(r) {
  return Math.floor(Math.LN2 * this.DB / Math.log(r))
}

// (public) 0 if this == 0, 1 if this > 0
function bnSigNum() {
  if (this.s < 0) return -1
  else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0
  else return 1
}

// (protected) convert to radix string
function bnpToRadix(b) {
  if (b == null) b = 10
  if (this.signum() == 0 || b < 2 || b > 36) return "0"
  var cs = this.chunkSize(b)
  var a = Math.pow(b, cs)
  var d = nbv(a),
    y = new BigInteger(),
    z = new BigInteger(),
    r = ""
  this.divRemTo(d, y, z)
  while (y.signum() > 0) {
    r = (a + z.intValue())
      .toString(b)
      .substr(1) + r
    y.divRemTo(d, y, z)
  }
  return z.intValue()
    .toString(b) + r
}

// (protected) convert from radix string
function bnpFromRadix(s, b) {
  var self = this
  self.fromInt(0)
  if (b == null) b = 10
  var cs = self.chunkSize(b)
  var d = Math.pow(b, cs),
    mi = false,
    j = 0,
    w = 0
  for (var i = 0; i < s.length; ++i) {
    var x = intAt(s, i)
    if (x < 0) {
      if (s.charAt(i) == "-" && self.signum() == 0) mi = true
      continue
    }
    w = b * w + x
    if (++j >= cs) {
      self.dMultiply(d)
      self.dAddOffset(w, 0)
      j = 0
      w = 0
    }
  }
  if (j > 0) {
    self.dMultiply(Math.pow(b, j))
    self.dAddOffset(w, 0)
  }
  if (mi) BigInteger.ZERO.subTo(self, self)
}

// (protected) alternate constructor
function bnpFromNumber(a, b, c) {
  var self = this
  if ("number" == typeof b) {
    // new BigInteger(int,int,RNG)
    if (a < 2) self.fromInt(1)
    else {
      self.fromNumber(a, c)
      if (!self.testBit(a - 1)) // force MSB set
        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self)
      if (self.isEven()) self.dAddOffset(1, 0); // force odd
      while (!self.isProbablePrime(b)) {
        self.dAddOffset(2, 0)
        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self)
      }
    }
  } else {
    // new BigInteger(int,RNG)
    var x = new Array(),
      t = a & 7
    x.length = (a >> 3) + 1
    b.nextBytes(x)
    if (t > 0) x[0] &= ((1 << t) - 1)
    else x[0] = 0
    self.fromString(x, 256)
  }
}

// (public) convert to bigendian byte array
function bnToByteArray() {
  var self = this
  var i = self.t,
    r = new Array()
  r[0] = self.s
  var p = self.DB - (i * self.DB) % 8,
    d, k = 0
  if (i-- > 0) {
    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)
      r[k++] = d | (self.s << (self.DB - p))
    while (i >= 0) {
      if (p < 8) {
        d = (self[i] & ((1 << p) - 1)) << (8 - p)
        d |= self[--i] >> (p += self.DB - 8)
      } else {
        d = (self[i] >> (p -= 8)) & 0xff
        if (p <= 0) {
          p += self.DB
          --i
        }
      }
      if ((d & 0x80) != 0) d |= -256
      if (k === 0 && (self.s & 0x80) != (d & 0x80))++k
      if (k > 0 || d != self.s) r[k++] = d
    }
  }
  return r
}

function bnEquals(a) {
  return (this.compareTo(a) == 0)
}

function bnMin(a) {
  return (this.compareTo(a) < 0) ? this : a
}

function bnMax(a) {
  return (this.compareTo(a) > 0) ? this : a
}

// (protected) r = this op a (bitwise)
function bnpBitwiseTo(a, op, r) {
  var self = this
  var i, f, m = Math.min(a.t, self.t)
  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i])
  if (a.t < self.t) {
    f = a.s & self.DM
    for (i = m; i < self.t; ++i) r[i] = op(self[i], f)
    r.t = self.t
  } else {
    f = self.s & self.DM
    for (i = m; i < a.t; ++i) r[i] = op(f, a[i])
    r.t = a.t
  }
  r.s = op(self.s, a.s)
  r.clamp()
}

// (public) this & a
function op_and(x, y) {
  return x & y
}

function bnAnd(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_and, r)
  return r
}

// (public) this | a
function op_or(x, y) {
  return x | y
}

function bnOr(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_or, r)
  return r
}

// (public) this ^ a
function op_xor(x, y) {
  return x ^ y
}

function bnXor(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_xor, r)
  return r
}

// (public) this & ~a
function op_andnot(x, y) {
  return x & ~y
}

function bnAndNot(a) {
  var r = new BigInteger()
  this.bitwiseTo(a, op_andnot, r)
  return r
}

// (public) ~this
function bnNot() {
  var r = new BigInteger()
  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i]
  r.t = this.t
  r.s = ~this.s
  return r
}

// (public) this << n
function bnShiftLeft(n) {
  var r = new BigInteger()
  if (n < 0) this.rShiftTo(-n, r)
  else this.lShiftTo(n, r)
  return r
}

// (public) this >> n
function bnShiftRight(n) {
  var r = new BigInteger()
  if (n < 0) this.lShiftTo(-n, r)
  else this.rShiftTo(n, r)
  return r
}

// return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
  if (x == 0) return -1
  var r = 0
  if ((x & 0xffff) == 0) {
    x >>= 16
    r += 16
  }
  if ((x & 0xff) == 0) {
    x >>= 8
    r += 8
  }
  if ((x & 0xf) == 0) {
    x >>= 4
    r += 4
  }
  if ((x & 3) == 0) {
    x >>= 2
    r += 2
  }
  if ((x & 1) == 0)++r
  return r
}

// (public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
  for (var i = 0; i < this.t; ++i)
    if (this[i] != 0) return i * this.DB + lbit(this[i])
  if (this.s < 0) return this.t * this.DB
  return -1
}

// return number of 1 bits in x
function cbit(x) {
  var r = 0
  while (x != 0) {
    x &= x - 1
    ++r
  }
  return r
}

// (public) return number of set bits
function bnBitCount() {
  var r = 0,
    x = this.s & this.DM
  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)
  return r
}

// (public) true iff nth bit is set
function bnTestBit(n) {
  var j = Math.floor(n / this.DB)
  if (j >= this.t) return (this.s != 0)
  return ((this[j] & (1 << (n % this.DB))) != 0)
}

// (protected) this op (1<<n)
function bnpChangeBit(n, op) {
  var r = BigInteger.ONE.shiftLeft(n)
  this.bitwiseTo(r, op, r)
  return r
}

// (public) this | (1<<n)
function bnSetBit(n) {
  return this.changeBit(n, op_or)
}

// (public) this & ~(1<<n)
function bnClearBit(n) {
  return this.changeBit(n, op_andnot)
}

// (public) this ^ (1<<n)
function bnFlipBit(n) {
  return this.changeBit(n, op_xor)
}

// (protected) r = this + a
function bnpAddTo(a, r) {
  var self = this

  var i = 0,
    c = 0,
    m = Math.min(a.t, self.t)
  while (i < m) {
    c += self[i] + a[i]
    r[i++] = c & self.DM
    c >>= self.DB
  }
  if (a.t < self.t) {
    c += a.s
    while (i < self.t) {
      c += self[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c += self.s
  } else {
    c += self.s
    while (i < a.t) {
      c += a[i]
      r[i++] = c & self.DM
      c >>= self.DB
    }
    c += a.s
  }
  r.s = (c < 0) ? -1 : 0
  if (c > 0) r[i++] = c
  else if (c < -1) r[i++] = self.DV + c
  r.t = i
  r.clamp()
}

// (public) this + a
function bnAdd(a) {
  var r = new BigInteger()
  this.addTo(a, r)
  return r
}

// (public) this - a
function bnSubtract(a) {
  var r = new BigInteger()
  this.subTo(a, r)
  return r
}

// (public) this * a
function bnMultiply(a) {
  var r = new BigInteger()
  this.multiplyTo(a, r)
  return r
}

// (public) this^2
function bnSquare() {
  var r = new BigInteger()
  this.squareTo(r)
  return r
}

// (public) this / a
function bnDivide(a) {
  var r = new BigInteger()
  this.divRemTo(a, r, null)
  return r
}

// (public) this % a
function bnRemainder(a) {
  var r = new BigInteger()
  this.divRemTo(a, null, r)
  return r
}

// (public) [this/a,this%a]
function bnDivideAndRemainder(a) {
  var q = new BigInteger(),
    r = new BigInteger()
  this.divRemTo(a, q, r)
  return new Array(q, r)
}

// (protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)
  ++this.t
  this.clamp()
}

// (protected) this += n << w words, this >= 0
function bnpDAddOffset(n, w) {
  if (n == 0) return
  while (this.t <= w) this[this.t++] = 0
  this[w] += n
  while (this[w] >= this.DV) {
    this[w] -= this.DV
    if (++w >= this.t) this[this.t++] = 0
    ++this[w]
  }
}

// A "null" reducer
function NullExp() {}

function nNop(x) {
  return x
}

function nMulTo(x, y, r) {
  x.multiplyTo(y, r)
}

function nSqrTo(x, r) {
  x.squareTo(r)
}

NullExp.prototype.convert = nNop
NullExp.prototype.revert = nNop
NullExp.prototype.mulTo = nMulTo
NullExp.prototype.sqrTo = nSqrTo

// (public) this^e
function bnPow(e) {
  return this.exp(e, new NullExp())
}

// (protected) r = lower n words of "this * a", a.t <= n
// "this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a, n, r) {
  var i = Math.min(this.t + a.t, n)
  r.s = 0; // assumes a,this >= 0
  r.t = i
  while (i > 0) r[--i] = 0
  var j
  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)
  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)
  r.clamp()
}

// (protected) r = "this * a" without lower n words, n > 0
// "this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a, n, r) {
  --n
  var i = r.t = this.t + a.t - n
  r.s = 0; // assumes a,this >= 0
  while (--i >= 0) r[i] = 0
  for (i = Math.max(n - this.t, 0); i < a.t; ++i)
    r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)
  r.clamp()
  r.drShiftTo(1, r)
}

// Barrett modular reduction
function Barrett(m) {
  // setup Barrett
  this.r2 = new BigInteger()
  this.q3 = new BigInteger()
  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)
  this.mu = this.r2.divide(m)
  this.m = m
}

function barrettConvert(x) {
  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)
  else if (x.compareTo(this.m) < 0) return x
  else {
    var r = new BigInteger()
    x.copyTo(r)
    this.reduce(r)
    return r
  }
}

function barrettRevert(x) {
  return x
}

// x = x mod m (HAC 14.42)
function barrettReduce(x) {
  var self = this
  x.drShiftTo(self.m.t - 1, self.r2)
  if (x.t > self.m.t + 1) {
    x.t = self.m.t + 1
    x.clamp()
  }
  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3)
  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2)
  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1)
  x.subTo(self.r2, x)
  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x)
}

// r = x^2 mod m; x != r
function barrettSqrTo(x, r) {
  x.squareTo(r)
  this.reduce(r)
}

// r = x*y mod m; x,y != r
function barrettMulTo(x, y, r) {
  x.multiplyTo(y, r)
  this.reduce(r)
}

Barrett.prototype.convert = barrettConvert
Barrett.prototype.revert = barrettRevert
Barrett.prototype.reduce = barrettReduce
Barrett.prototype.mulTo = barrettMulTo
Barrett.prototype.sqrTo = barrettSqrTo

// (public) this^e % m (HAC 14.85)
function bnModPow(e, m) {
  var i = e.bitLength(),
    k, r = nbv(1),
    z
  if (i <= 0) return r
  else if (i < 18) k = 1
  else if (i < 48) k = 3
  else if (i < 144) k = 4
  else if (i < 768) k = 5
  else k = 6
  if (i < 8)
    z = new Classic(m)
  else if (m.isEven())
    z = new Barrett(m)
  else
    z = new Montgomery(m)

  // precomputation
  var g = new Array(),
    n = 3,
    k1 = k - 1,
    km = (1 << k) - 1
  g[1] = z.convert(this)
  if (k > 1) {
    var g2 = new BigInteger()
    z.sqrTo(g[1], g2)
    while (n <= km) {
      g[n] = new BigInteger()
      z.mulTo(g2, g[n - 2], g[n])
      n += 2
    }
  }

  var j = e.t - 1,
    w, is1 = true,
    r2 = new BigInteger(),
    t
  i = nbits(e[j]) - 1
  while (j >= 0) {
    if (i >= k1) w = (e[j] >> (i - k1)) & km
    else {
      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)
      if (j > 0) w |= e[j - 1] >> (this.DB + i - k1)
    }

    n = k
    while ((w & 1) == 0) {
      w >>= 1
      --n
    }
    if ((i -= n) < 0) {
      i += this.DB
      --j
    }
    if (is1) { // ret == 1, don't bother squaring or multiplying it
      g[w].copyTo(r)
      is1 = false
    } else {
      while (n > 1) {
        z.sqrTo(r, r2)
        z.sqrTo(r2, r)
        n -= 2
      }
      if (n > 0) z.sqrTo(r, r2)
      else {
        t = r
        r = r2
        r2 = t
      }
      z.mulTo(r2, g[w], r)
    }

    while (j >= 0 && (e[j] & (1 << i)) == 0) {
      z.sqrTo(r, r2)
      t = r
      r = r2
      r2 = t
      if (--i < 0) {
        i = this.DB - 1
        --j
      }
    }
  }
  return z.revert(r)
}

// (public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
  var x = (this.s < 0) ? this.negate() : this.clone()
  var y = (a.s < 0) ? a.negate() : a.clone()
  if (x.compareTo(y) < 0) {
    var t = x
    x = y
    y = t
  }
  var i = x.getLowestSetBit(),
    g = y.getLowestSetBit()
  if (g < 0) return x
  if (i < g) g = i
  if (g > 0) {
    x.rShiftTo(g, x)
    y.rShiftTo(g, y)
  }
  while (x.signum() > 0) {
    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)
    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)
    if (x.compareTo(y) >= 0) {
      x.subTo(y, x)
      x.rShiftTo(1, x)
    } else {
      y.subTo(x, y)
      y.rShiftTo(1, y)
    }
  }
  if (g > 0) y.lShiftTo(g, y)
  return y
}

// (protected) this % n, n < 2^26
function bnpModInt(n) {
  if (n <= 0) return 0
  var d = this.DV % n,
    r = (this.s < 0) ? n - 1 : 0
  if (this.t > 0)
    if (d == 0) r = this[0] % n
    else
      for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n
  return r
}

// (public) 1/this % m (HAC 14.61)
function bnModInverse(m) {
  var ac = m.isEven()
  if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO
  var u = m.clone(),
    v = this.clone()
  var a = nbv(1),
    b = nbv(0),
    c = nbv(0),
    d = nbv(1)
  while (u.signum() != 0) {
    while (u.isEven()) {
      u.rShiftTo(1, u)
      if (ac) {
        if (!a.isEven() || !b.isEven()) {
          a.addTo(this, a)
          b.subTo(m, b)
        }
        a.rShiftTo(1, a)
      } else if (!b.isEven()) b.subTo(m, b)
      b.rShiftTo(1, b)
    }
    while (v.isEven()) {
      v.rShiftTo(1, v)
      if (ac) {
        if (!c.isEven() || !d.isEven()) {
          c.addTo(this, c)
          d.subTo(m, d)
        }
        c.rShiftTo(1, c)
      } else if (!d.isEven()) d.subTo(m, d)
      d.rShiftTo(1, d)
    }
    if (u.compareTo(v) >= 0) {
      u.subTo(v, u)
      if (ac) a.subTo(c, a)
      b.subTo(d, b)
    } else {
      v.subTo(u, v)
      if (ac) c.subTo(a, c)
      d.subTo(b, d)
    }
  }
  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO
  if (d.compareTo(m) >= 0) return d.subtract(m)
  if (d.signum() < 0) d.addTo(m, d)
  else return d
  if (d.signum() < 0) return d.add(m)
  else return d
}

var lowprimes = [
  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
  73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
  157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
  239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
  421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
  509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,
  821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
  919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997
]

var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]

// (public) test primality with certainty >= 1-.5^t
function bnIsProbablePrime(t) {
  var i, x = this.abs()
  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
    for (i = 0; i < lowprimes.length; ++i)
      if (x[0] == lowprimes[i]) return true
    return false
  }
  if (x.isEven()) return false
  i = 1
  while (i < lowprimes.length) {
    var m = lowprimes[i],
      j = i + 1
    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++]
    m = x.modInt(m)
    while (i < j) if (m % lowprimes[i++] == 0) return false
  }
  return x.millerRabin(t)
}

// (protected) true if probably prime (HAC 4.24, Miller-Rabin)
function bnpMillerRabin(t) {
  var n1 = this.subtract(BigInteger.ONE)
  var k = n1.getLowestSetBit()
  if (k <= 0) return false
  var r = n1.shiftRight(k)
  t = (t + 1) >> 1
  if (t > lowprimes.length) t = lowprimes.length
  var a = new BigInteger(null)
  var j, bases = []
  for (var i = 0; i < t; ++i) {
    for (;;) {
      j = lowprimes[Math.floor(Math.random() * lowprimes.length)]
      if (bases.indexOf(j) == -1) break
    }
    bases.push(j)
    a.fromInt(j)
    var y = a.modPow(r, this)
    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
      var j = 1
      while (j++ < k && y.compareTo(n1) != 0) {
        y = y.modPowInt(2, this)
        if (y.compareTo(BigInteger.ONE) == 0) return false
      }
      if (y.compareTo(n1) != 0) return false
    }
  }
  return true
}

// protected
proto.chunkSize = bnpChunkSize
proto.toRadix = bnpToRadix
proto.fromRadix = bnpFromRadix
proto.fromNumber = bnpFromNumber
proto.bitwiseTo = bnpBitwiseTo
proto.changeBit = bnpChangeBit
proto.addTo = bnpAddTo
proto.dMultiply = bnpDMultiply
proto.dAddOffset = bnpDAddOffset
proto.multiplyLowerTo = bnpMultiplyLowerTo
proto.multiplyUpperTo = bnpMultiplyUpperTo
proto.modInt = bnpModInt
proto.millerRabin = bnpMillerRabin

// public
proto.clone = bnClone
proto.intValue = bnIntValue
proto.byteValue = bnByteValue
proto.shortValue = bnShortValue
proto.signum = bnSigNum
proto.toByteArray = bnToByteArray
proto.equals = bnEquals
proto.min = bnMin
proto.max = bnMax
proto.and = bnAnd
proto.or = bnOr
proto.xor = bnXor
proto.andNot = bnAndNot
proto.not = bnNot
proto.shiftLeft = bnShiftLeft
proto.shiftRight = bnShiftRight
proto.getLowestSetBit = bnGetLowestSetBit
proto.bitCount = bnBitCount
proto.testBit = bnTestBit
proto.setBit = bnSetBit
proto.clearBit = bnClearBit
proto.flipBit = bnFlipBit
proto.add = bnAdd
proto.subtract = bnSubtract
proto.multiply = bnMultiply
proto.divide = bnDivide
proto.remainder = bnRemainder
proto.divideAndRemainder = bnDivideAndRemainder
proto.modPow = bnModPow
proto.modInverse = bnModInverse
proto.pow = bnPow
proto.gcd = bnGCD
proto.isProbablePrime = bnIsProbablePrime

// JSBN-specific extension
proto.square = bnSquare

// constants
BigInteger.ZERO = nbv(0)
BigInteger.ONE = nbv(1)
BigInteger.valueOf = nbv

module.exports = BigInteger

},{"../package.json":5}],3:[function(require,module,exports){
(function (Buffer){
// FIXME: Kind of a weird way to throw exceptions, consider removing
var assert = require('assert')
var BigInteger = require('./bigi')

/**
 * Turns a byte array into a big integer.
 *
 * This function will interpret a byte array as a big integer in big
 * endian notation.
 */
BigInteger.fromByteArrayUnsigned = function(byteArray) {
  // BigInteger expects a DER integer conformant byte array
  if (byteArray[0] & 0x80) {
    return new BigInteger([0].concat(byteArray))
  }

  return new BigInteger(byteArray)
}

/**
 * Returns a byte array representation of the big integer.
 *
 * This returns the absolute of the contained value in big endian
 * form. A value of zero results in an empty array.
 */
BigInteger.prototype.toByteArrayUnsigned = function() {
  var byteArray = this.toByteArray()
  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray
}

BigInteger.fromDERInteger = function(byteArray) {
  return new BigInteger(byteArray)
}

/*
 * Converts BigInteger to a DER integer representation.
 *
 * The format for this value uses the most significant bit as a sign
 * bit.  If the most significant bit is already set and the integer is
 * positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/
BigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray

BigInteger.fromBuffer = function(buffer) {
  // BigInteger expects a DER integer conformant byte array
  if (buffer[0] & 0x80) {
    var byteArray = Array.prototype.slice.call(buffer)

    return new BigInteger([0].concat(byteArray))
  }

  return new BigInteger(buffer)
}

BigInteger.fromHex = function(hex) {
  if (hex === '') return BigInteger.ZERO

  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string')
  assert.equal(hex.length % 2, 0, 'Incomplete hex')
  return new BigInteger(hex, 16)
}

BigInteger.prototype.toBuffer = function(size) {
  var byteArray = this.toByteArrayUnsigned()
  var zeros = []

  var padding = size - byteArray.length
  while (zeros.length < padding) zeros.push(0)

  return new Buffer(zeros.concat(byteArray))
}

BigInteger.prototype.toHex = function(size) {
  return this.toBuffer(size).toString('hex')
}

}).call(this,require("buffer").Buffer)
},{"./bigi":2,"assert":174,"buffer":176}],4:[function(require,module,exports){
var BigInteger = require('./bigi')

//addons
require('./convert')

module.exports = BigInteger
},{"./bigi":2,"./convert":3}],5:[function(require,module,exports){
module.exports={
  "name": "bigi",
  "version": "1.4.0",
  "description": "Big integers.",
  "keywords": [
    "cryptography",
    "math",
    "bitcoin",
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "integer",
    "int",
    "number",
    "biginteger",
    "bigint",
    "bignumber",
    "decimal",
    "float"
  ],
  "devDependencies": {
    "mocha": "^1.20.1",
    "jshint": "^2.5.1",
    "coveralls": "^2.10.0",
    "istanbul": "^0.2.11"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/bigi",
    "type": "git"
  },
  "main": "./lib/index.js",
  "scripts": {
    "test": "_mocha -- test/*.js",
    "jshint": "jshint --config jshint.json lib/*.js ; true",
    "unit": "mocha",
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
    "coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"
  },
  "dependencies": {},
  "testling": {
    "files": "test/*.js",
    "harness": "mocha",
    "browsers": [
      "ie/9..latest",
      "firefox/latest",
      "chrome/latest",
      "safari/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "bugs": {
    "url": "https://github.com/cryptocoinjs/bigi/issues"
  },
  "homepage": "https://github.com/cryptocoinjs/bigi",
  "_id": "bigi@1.4.0",
  "dist": {
    "shasum": "90ac1aeac0a531216463bdb58f42c1e05c8407ac",
    "tarball": "http://registry.npmjs.org/bigi/-/bigi-1.4.0.tgz"
  },
  "_from": "bigi@^1.1.0",
  "_npmVersion": "1.4.3",
  "_npmUser": {
    "name": "jp",
    "email": "jprichardson@gmail.com"
  },
  "maintainers": [
    {
      "name": "jp",
      "email": "jprichardson@gmail.com"
    },
    {
      "name": "midnightlightning",
      "email": "boydb@midnightdesign.ws"
    },
    {
      "name": "sidazhang",
      "email": "sidazhang89@gmail.com"
    },
    {
      "name": "nadav",
      "email": "npm@shesek.info"
    }
  ],
  "directories": {},
  "_shasum": "90ac1aeac0a531216463bdb58f42c1e05c8407ac",
  "_resolved": "https://registry.npmjs.org/bigi/-/bigi-1.4.0.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],6:[function(require,module,exports){
(function (Buffer){
'use strict';

var assert = require('assert')
var base58 = require('bs58')
var crypto = require('crypto')

// SHA256(SHA256(buffer))
function sha256x2(buffer) {
  buffer = crypto.createHash('sha256').update(buffer).digest()
  return crypto.createHash('sha256').update(buffer).digest()
}

// Encode a buffer as a base58-check encoded string
function encode(payload) {
  var checksum = sha256x2(payload).slice(0, 4)

  return base58.encode(Buffer.concat([
    payload,
    checksum
  ]))
}

// Decode a base58-check encoded string to a buffer
function decode(string) {
  var buffer = new Buffer(base58.decode(string))

  var payload = buffer.slice(0, -4)
  var checksum = buffer.slice(-4)
  var newChecksum = sha256x2(payload).slice(0, 4)

  assert.deepEqual(newChecksum, checksum, 'Invalid checksum')

  return payload
}

module.exports = {
  encode: encode,
  decode: decode
}

}).call(this,require("buffer").Buffer)
},{"assert":174,"bs58":336,"buffer":176,"crypto":180}],7:[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('sha.js')

var md5 = require('./md5')
var rmd160 = require('ripemd160')
var Transform = require('stream').Transform;
var inherits = require('util').inherits

module.exports = function (alg) {
  if('md5' === alg) return new HashNoConstructor(md5)
  if('rmd160' === alg) return new HashNoConstructor(rmd160)
  return new Hash(createHash(alg))
}
inherits(HashNoConstructor, Transform)

function HashNoConstructor(hash) {
  Transform.call(this);
  this._hash = hash
  this.buffers = []
}

HashNoConstructor.prototype._transform = function (data, _, done) {
  this.buffers.push(data)
  done()
}
HashNoConstructor.prototype._flush = function (done) {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null
  this.push(r)
  done()
}
HashNoConstructor.prototype.update = function (data, enc) {
  this.write(data, enc)
  return this
}

HashNoConstructor.prototype.digest = function (enc) {
  this.end()
  var outData = new Buffer('')
  var chunk
  while ((chunk = this.read())) {
    outData = Buffer.concat([outData, chunk])
  }
  if (enc) {
    outData = outData.toString(enc)
  }
  return outData
}

inherits(Hash, Transform)

function Hash(hash) {
  Transform.call(this);
  this._hash = hash
}

Hash.prototype._transform = function (data, _, done) {
  this._hash.update(data)
  done()
}
Hash.prototype._flush = function (done) {
  this.push(this._hash.digest())
  this._hash = null
  done()
}
Hash.prototype.update = function (data, enc) {
  this.write(data, enc)
  return this
}

Hash.prototype.digest = function (enc) {
  this.end()
  var outData = new Buffer('')
  var chunk
  while ((chunk = this.read())) {
    outData = Buffer.concat([outData, chunk])
  }
  if (enc) {
    outData = outData.toString(enc)
  }
  return outData
}

}).call(this,require("buffer").Buffer)
},{"./md5":11,"buffer":176,"ripemd160":137,"sha.js":139,"stream":330,"util":333}],8:[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('./create-hash')
var Transform = require('stream').Transform;
var inherits = require('util').inherits
var zeroBuffer = new Buffer(128)
zeroBuffer.fill(0)

module.exports = Hmac
inherits(Hmac, Transform)
function Hmac (alg, key) {
  if(!(this instanceof Hmac)) return new Hmac(alg, key)

  Transform.call(this)
  this._opad = opad
  this._alg = alg

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

  if(key.length > blocksize) {
    key = createHash(alg).update(key).digest()
  } else if(key.length < blocksize) {
    key = Buffer.concat([key, zeroBuffer], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for(var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

Hmac.prototype.update = function (data, enc) {
  this.write(data, enc)
  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)
  next()
}

Hmac.prototype._flush = function (next) {
  var h = this._hash.digest()
  this.push(createHash(this._alg).update(this._opad).update(h).digest())
  next()
}

Hmac.prototype.digest = function (enc) {
  this.end()
  var outData = new Buffer('')
  var chunk
  while ((chunk = this.read())) {
    outData = Buffer.concat([outData, chunk])
  }
  if (enc) {
    outData = outData.toString(enc)
  }
  return outData
}


}).call(this,require("buffer").Buffer)
},{"./create-hash":7,"buffer":176,"stream":330,"util":333}],9:[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}

module.exports = { hash: hash };

}).call(this,require("buffer").Buffer)
},{"buffer":176}],10:[function(require,module,exports){
'use strict';
var rng = exports.rng = require('./rng')
var prng = exports.prng = require('./prng');

function error () {
  var m = [].slice.call(arguments).join(' ')
  throw new Error([
    m,
    'we accept pull requests',
    'http://github.com/dominictarr/crypto-browserify'
    ].join('\n'))
}

exports.createHash = require('./create-hash')

exports.createHmac = require('./create-hmac')

exports.randomBytes = function(size, callback) {
  if (callback && callback.call) {
    try {
      callback.call(this, undefined, rng(size))
    } catch (err) { callback(err) }
  } else {
    return rng(size)
  }
}
exports.pseudoRandomBytes = function(size, callback) {
  if (callback && callback.call) {
    try {
      callback.call(this, undefined, prng(size))
    } catch (err) { callback(err) }
  } else {
    return prng(size)
  }
}

function each(a, f) {
  for(var i in a)
    f(a[i], i)
}
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes;
}

var p = require('./pbkdf2')(exports)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync
require('browserify-aes/inject')(exports, module.exports);
require('browserify-sign/inject')(module.exports, exports);
require('diffie-hellman/inject')(exports, module.exports);
require('create-ecdh/inject')(module.exports, exports);
require('public-encrypt/inject')(module.exports, exports);

// the least I can do is make error messages for the rest of the node.js/crypto api.
each([
  'createCredentials'
], function (name) {
  exports[name] = function () {
    error('sorry,', name, 'is not implemented yet')
  }
})

},{"./create-hash":7,"./create-hmac":8,"./pbkdf2":145,"./prng":146,"./rng":147,"browserify-aes/inject":19,"browserify-sign/algos":31,"browserify-sign/inject":32,"create-ecdh/inject":79,"diffie-hellman/inject":104,"public-encrypt/inject":110}],11:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};

},{"./helpers":9}],12:[function(require,module,exports){
(function (Buffer){

module.exports = function (crypto, password, keyLen, ivLen) {
  keyLen = keyLen/8;
  ivLen = ivLen || 0;
  var ki = 0;
  var ii = 0;
  var key = new Buffer(keyLen);
  var iv = new Buffer(ivLen);
  var addmd = 0;
  var md, md_buf;
  var i;
  while (true) {
    md = crypto.createHash('md5');
    if(addmd++ > 0) {
       md.update(md_buf);
    }
    md.update(password);
    md_buf = md.digest();
    i = 0;
    if(keyLen > 0) {
      while(true) {
        if(keyLen === 0) {
          break;
        }
        if(i === md_buf.length) {
          break;
        }
        key[ki++] = md_buf[i];
        keyLen--;
        i++;
       }
    }
    if(ivLen > 0 && i !== md_buf.length) {
      while(true) {
        if(ivLen === 0) {
          break;
        }
        if(i === md_buf.length) {
          break;
        }
       iv[ii++] = md_buf[i];
       ivLen--;
       i++;
     }
   }
   if(keyLen === 0 && ivLen === 0) {
      break;
    }
  }
  for(i=0;i<md_buf.length;i++) {
    md_buf[i] = 0;
  }
  return {
    key: key,
    iv: iv
  };
};
}).call(this,require("buffer").Buffer)
},{"buffer":176}],13:[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32);
function fixup_uint32(x) {
    var ret, x_pos;
    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
    return ret;
}
function scrub_vec(v) {
  var i, _i, _ref;
  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    v[i] = 0;
  }
  return false;
}

function Global() {
  var i;
  this.SBOX = [];
  this.INV_SBOX = [];
  this.SUB_MIX = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 4; i = ++_i) {
      _results.push([]);
    }
    return _results;
  })();
  this.INV_SUB_MIX = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 4; i = ++_i) {
      _results.push([]);
    }
    return _results;
  })();
  this.init();
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
}

Global.prototype.init = function() {
  var d, i, sx, t, x, x2, x4, x8, xi, _i;
  d = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1);
      } else {
        _results.push((i << 1) ^ 0x11b);
      }
    }
    return _results;
  })();
  x = 0;
  xi = 0;
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
    this.SBOX[x] = sx;
    this.INV_SBOX[sx] = x;
    x2 = d[x];
    x4 = d[x2];
    x8 = d[x4];
    t = (d[sx] * 0x101) ^ (sx * 0x1010100);
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);
    this.SUB_MIX[3][x] = t;
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
    this.INV_SUB_MIX[3][sx] = t;
    if (x === 0) {
      x = xi = 1;
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]];
      xi ^= d[d[xi]];
    }
  }
  return true;
};

var G = new Global();


AES.blockSize = 4 * 4;

AES.prototype.blockSize = AES.blockSize;

AES.keySize = 256 / 8;

AES.prototype.keySize = AES.keySize;

 function bufferToArray(buf) {
  var len = buf.length/4;
  var out = new Array(len);
  var i = -1;
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4);
  }
  return out;
 }
function AES(key) {
  this._key = bufferToArray(key);
  this._doReset();
}

AES.prototype._doReset = function() {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;
  keyWords = this._key;
  keySize = keyWords.length;
  this._nRounds = keySize + 6;
  ksRows = (this._nRounds + 1) * 4;
  this._keySchedule = [];
  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
  }
  this._invKeySchedule = [];
  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {
    ksRow = ksRows - invKsRow;
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
  }
  return true;
};

AES.prototype.encryptBlock = function(M) {
  M = bufferToArray(new Buffer(M));
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
  var buf = new Buffer(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[1], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[3], 12);
  return buf;
};

AES.prototype.decryptBlock = function(M) {
  M = bufferToArray(new Buffer(M));
  var temp = [M[3], M[1]];
  M[1] = temp[0];
  M[3] = temp[1];
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
  var buf = new Buffer(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[3], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[1], 12);
  return buf;
};

AES.prototype.scrub = function() {
  scrub_vec(this._keySchedule);
  scrub_vec(this._invKeySchedule);
  scrub_vec(this._key);
};

AES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;

  s0 = M[0] ^ keySchedule[0];
  s1 = M[1] ^ keySchedule[1];
  s2 = M[2] ^ keySchedule[2];
  s3 = M[3] ^ keySchedule[3];
  ksRow = 4;
  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
    s0 = t0;
    s1 = t1;
    s2 = t2;
    s3 = t3;
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ];

};




  exports.AES = AES;
}).call(this,require("buffer").Buffer)
},{"buffer":176}],14:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes');
var Transform = require('./cipherBase');
var inherits = require('inherits');
var GHASH = require('./ghash');
var xor = require('./xor');
inherits(StreamCipher, Transform);
module.exports = StreamCipher;

function StreamCipher(mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv);
  }
  Transform.call(this);
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])]);
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])]);
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  this._cache = new Buffer('');
  this._secCache = new Buffer('');
  this._decrypt = decrypt;
  this._alen = 0;
  this._len = 0;
  iv.copy(this._prev);
  this._mode = mode;
  var h = new Buffer(4);
  h.fill(0);
  this._ghash = new GHASH(this._cipher.encryptBlock(h));
  this._authTag = null;
  this._called = false;
}
StreamCipher.prototype._transform = function (chunk, _, next) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16);
    if (rump <16) {
      rump = new Buffer(rump);
      rump.fill(0);
      this._ghash.update(rump);
    }
  }
  this._called = true;
  var out = this._mode.encrypt(this, chunk);
  if (this._decrypt) {
    this._ghash.update(chunk);
  } else {
    this._ghash.update(out);
  }
  this._len += chunk.length;
  next(null, out);
};
StreamCipher.prototype._flush = function (next) {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data');
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data');
    }
  } else {
    this._authTag = tag;
  }
  this._cipher.scrub();
  next();
};
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag;
  } else {
    throw new Error('Attempting to get auth tag in unsupported state');
  }
};
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag;
  } else {
    throw new Error('Attempting to set auth tag in unsupported state');
  }
};
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf);
    this._alen += buf.length;
  } else {
    throw new Error('Attempting to set AAD in unsupported state');
  }
};
function xorTest(a, b) {
  var out = 0;
  if (a.length !== b.length) {
    out++;
  }
  var len = Math.min(a.length, b.length);
  var i = -1;
  while (++i < len) {
    out += (a[i] ^ b[i]);
  }
  return out;
}



}).call(this,require("buffer").Buffer)
},{"./aes":13,"./cipherBase":15,"./ghash":18,"./xor":30,"buffer":176,"inherits":28}],15:[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform;
var inherits = require('inherits');

module.exports = CipherBase;
inherits(CipherBase, Transform);
function CipherBase() {
  Transform.call(this);
}
CipherBase.prototype.update = function (data, inputEnd, outputEnc) {
  this.write(data, inputEnd);
  var outData = new Buffer('');
  var chunk;
  while ((chunk = this.read())) {
    outData = Buffer.concat([outData, chunk]);
  }
  if (outputEnc) {
    outData = outData.toString(outputEnc);
  }
  return outData;
};
CipherBase.prototype.final = function (outputEnc) {
  this.end();
  var outData = new Buffer('');
  var chunk;
  while ((chunk = this.read())) {
    outData = Buffer.concat([outData, chunk]);
  }
  if (outputEnc) {
    outData = outData.toString(outputEnc);
  }
  return outData;
};
}).call(this,require("buffer").Buffer)
},{"buffer":176,"inherits":28,"stream":330}],16:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes');
var Transform = require('./cipherBase');
var inherits = require('inherits');
var modes = require('./modes');
var StreamCipher = require('./streamCipher');
var AuthCipher = require('./authCipher');
var ebtk = require('./EVP_BytesToKey');

inherits(Decipher, Transform);
function Decipher(mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv);
  }
  Transform.call(this);
  this._cache = new Splitter();
  this._last = void 0;
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  iv.copy(this._prev);
  this._mode = mode;
}
Decipher.prototype._transform = function (data, _, next) {
  this._cache.add(data);
  var chunk;
  var thing;
  while ((chunk = this._cache.get())) {
    thing = this._mode.decrypt(this, chunk);
    this.push(thing);
  }
  next();
};
Decipher.prototype._flush = function (next) {
  var chunk = this._cache.flush();
  if (!chunk) {
    return next;
  }

  this.push(unpad(this._mode.decrypt(this, chunk)));

  next();
};

function Splitter() {
   if (!(this instanceof Splitter)) {
    return new Splitter();
  }
  this.cache = new Buffer('');
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function () {
  if (this.cache.length > 16) {
    var out = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    return out;
  }
  return null;
};
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache;
  }
};
function unpad(last) {
  var padded = last[15];
  var i = -1;
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data');
    }
  }
  if (padded === 16) {
    return;
  }
  return last.slice(0, 16 - padded);
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
};

module.exports = function (crypto) {
  function createDecipheriv(suite, password, iv) {
    var config = modes[suite];
    if (!config) {
      throw new TypeError('invalid suite type');
    }
    if (typeof iv === 'string') {
      iv = new Buffer(iv);
    }
    if (typeof password === 'string') {
      password = new Buffer(password);
    }
    if (password.length !== config.key/8) {
      throw new TypeError('invalid key length ' + password.length);
    }
    if (iv.length !== config.iv) {
      throw new TypeError('invalid iv length ' + iv.length);
    }
    if (config.type === 'stream') {
      return new StreamCipher(modelist[config.mode], password, iv, true);
    } else if (config.type === 'auth') {
      return new AuthCipher(modelist[config.mode], password, iv, true);
    }
    return new Decipher(modelist[config.mode], password, iv);
  }

  function createDecipher (suite, password) {
    var config = modes[suite];
    if (!config) {
      throw new TypeError('invalid suite type');
    }
    var keys = ebtk(crypto, password, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv);
  }
  return {
    createDecipher: createDecipher,
    createDecipheriv: createDecipheriv
  };
};

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":12,"./aes":13,"./authCipher":14,"./cipherBase":15,"./modes":20,"./modes/cbc":21,"./modes/cfb":22,"./modes/cfb1":23,"./modes/cfb8":24,"./modes/ctr":25,"./modes/ecb":26,"./modes/ofb":27,"./streamCipher":29,"buffer":176,"inherits":28}],17:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes');
var Transform = require('./cipherBase');
var inherits = require('inherits');
var modes = require('./modes');
var ebtk = require('./EVP_BytesToKey');
var StreamCipher = require('./streamCipher');
var AuthCipher = require('./authCipher');
inherits(Cipher, Transform);
function Cipher(mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv);
  }
  Transform.call(this);
  this._cache = new Splitter();
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  iv.copy(this._prev);
  this._mode = mode;
}
Cipher.prototype._transform = function (data, _, next) {
  this._cache.add(data);
  var chunk;
  var thing;
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk);
    this.push(thing);
  }
  next();
};
Cipher.prototype._flush = function (next) {
  var chunk = this._cache.flush();
  this.push(this._mode.encrypt(this, chunk));
  this._cipher.scrub();
  next();
};


function Splitter() {
   if (!(this instanceof Splitter)) {
    return new Splitter();
  }
  this.cache = new Buffer('');
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    return out;
  }
  return null;
};
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length;
  var padBuff = new Buffer(len);

  var i = -1;
  while (++i < len) {
    padBuff.writeUInt8(len, i);
  }
  var out = Buffer.concat([this.cache, padBuff]);
  return out;
};
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
};
module.exports = function (crypto) {
  function createCipheriv(suite, password, iv) {
    var config = modes[suite];
    if (!config) {
      throw new TypeError('invalid suite type');
    }
    if (typeof iv === 'string') {
      iv = new Buffer(iv);
    }
    if (typeof password === 'string') {
      password = new Buffer(password);
    }
    if (password.length !== config.key/8) {
      throw new TypeError('invalid key length ' + password.length);
    }
    if (iv.length !== config.iv) {
      throw new TypeError('invalid iv length ' + iv.length);
    }
    if (config.type === 'stream') {
      return new StreamCipher(modelist[config.mode], password, iv);
    } else if (config.type === 'auth') {
      return new AuthCipher(modelist[config.mode], password, iv);
    }
    return new Cipher(modelist[config.mode], password, iv);
  }
  function createCipher (suite, password) {
    var config = modes[suite];
    if (!config) {
      throw new TypeError('invalid suite type');
    }
    var keys = ebtk(crypto, password, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv);
  }
  return {
    createCipher: createCipher,
    createCipheriv: createCipheriv
  };
};

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":12,"./aes":13,"./authCipher":14,"./cipherBase":15,"./modes":20,"./modes/cbc":21,"./modes/cfb":22,"./modes/cfb1":23,"./modes/cfb8":24,"./modes/ctr":25,"./modes/ecb":26,"./modes/ofb":27,"./streamCipher":29,"buffer":176,"inherits":28}],18:[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16);
zeros.fill(0);
module.exports = GHASH;
function GHASH(key){
  this.h = key;
  this.state = new Buffer(16);
  this.state.fill(0);
  this.cache = new Buffer('');
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1;
  while (++i < block.length) {
   this.state[i] ^= block[i];
  }
  this._multiply();
};

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h);
  var Zi = [0, 0, 0, 0];
  var j, xi, lsb_Vi;
  var i = -1;
  while (++i < 128) {
    xi = (this.state[~~(i/8)] & (1 << (7-i%8))) !== 0;
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi);
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0;

    // V_i+1 = V_i >> 1
    for (j=3; j>0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j-1]&1) << 31);
    }
    Vi[0] = Vi[0] >>> 1;

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24);
    }
  }
  this.state = fromArray(Zi);
};
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf]);
  var chunk;
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    this.ghash(chunk);
  }
};
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16));
  }
  this.ghash(fromArray([
     0, abl,
     0, bl
   ]));
  return this.state;
};

function toArray(buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ];
}
function fromArray(out) {
  out = out.map(fixup_uint32);
  var buf = new Buffer(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[1], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[3], 12);
  return buf;
}
var uint_max = Math.pow(2, 32);
function fixup_uint32(x) {
    var ret, x_pos;
    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
    return ret;
}
function xor(a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3],
  ];
}
}).call(this,require("buffer").Buffer)
},{"buffer":176}],19:[function(require,module,exports){
module.exports = function (crypto, exports) {
  exports = exports || {};
  var ciphers = require('./encrypter')(crypto);
  exports.createCipher = ciphers.createCipher;
  exports.createCipheriv = ciphers.createCipheriv;
  var deciphers = require('./decrypter')(crypto);
  exports.createDecipher = deciphers.createDecipher;
  exports.createDecipheriv = deciphers.createDecipheriv;
  var modes = require('./modes');
  function listCiphers () {
    return Object.keys(modes);
  }
  exports.listCiphers = listCiphers;
};


},{"./decrypter":16,"./encrypter":17,"./modes":20}],20:[function(require,module,exports){
exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
};
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
};
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
};
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
};
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
};
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
};
exports['aes128'] = exports['aes-128-cbc'];
exports['aes192'] = exports['aes-192-cbc'];
exports['aes256'] = exports['aes-256-cbc'];
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
};
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
};
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
};
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
};
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
};
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
};
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
};
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
};
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
};
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
};
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
};
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
};
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
};
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
};
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
};
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
};
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
};
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
};
},{}],21:[function(require,module,exports){
var xor = require('../xor');
exports.encrypt = function (self, block) {
  var data = xor(block, self._prev);
  self._prev = self._cipher.encryptBlock(data);
  return self._prev;
};
exports.decrypt = function (self, block) {
  var pad = self._prev;
  self._prev = block;
  var out = self._cipher.decryptBlock(block);
  return xor(out, pad);
};
},{"../xor":30}],22:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor');
exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('');
  var len;
  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev);
      self._prev = new Buffer('');
    }
    if (self._cache.length <= data.length) {
      len = self._cache.length;
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
      data = data.slice(len);
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
      break;
    }
  }
  return out;
};
function encryptStart(self, data, decrypt) {
  var len = data.length;
  var out = xor(data, self._cache);
  self._cache = self._cache.slice(len);
  self._prev = Buffer.concat([self._prev, decrypt?data:out]);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"../xor":30,"buffer":176}],23:[function(require,module,exports){
(function (Buffer){

function encryptByte(self, byte, decrypt) {
  var pad;
  var i = -1;
  var len = 8;
  var out = 0;
  var bit, value;
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev);
    bit = (byte & (1 << (7-i))) ? 0x80:0;
    value = pad[0] ^ bit;
    out += ((value&0x80) >> (i%8));
    self._prev = shiftIn(self._prev, decrypt?bit:value);
  }
  return out;
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = new Buffer(len);
  var i = -1;
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }
  return out;
};
function shiftIn(buffer, value) {
  var len = buffer.length;
  var i = -1;
  var out = new Buffer(buffer.length);
  buffer = Buffer.concat([buffer, new Buffer([value])]);
  while(++i < len) {
    out[i] = buffer[i]<<1 | buffer[i+1]>>(7);
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":176}],24:[function(require,module,exports){
(function (Buffer){
function encryptByte(self, byte, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev);
  var out = pad[0] ^ byte;
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt?byte:out])]);
  return out;
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = new Buffer(len);
  var i = -1;
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }
  return out;
};
}).call(this,require("buffer").Buffer)
},{"buffer":176}],25:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor');
function getBlock(self) {
  var out = self._cipher.encryptBlock(self._prev);
  incr32(self._prev);
  return out;
}
exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)]);
  }
  var pad = self._cache.slice(0, chunk.length);
  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};
function incr32(iv) {
  var len = iv.length;
  var item;
  while (len--) {
    item = iv.readUInt8(len);
    if (item === 255) {
      iv.writeUInt8(0, len);
    } else {
      item++;
      iv.writeUInt8(item, len);
      break;
    }
  }
}
}).call(this,require("buffer").Buffer)
},{"../xor":30,"buffer":176}],26:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block);
};
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block);
};
},{}],27:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor');
function getBlock(self) {
  self._prev = self._cipher.encryptBlock(self._prev);
  return self._prev;
}
exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)]);
  }
  var pad = self._cache.slice(0, chunk.length);
  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};
}).call(this,require("buffer").Buffer)
},{"../xor":30,"buffer":176}],28:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],29:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes');
var Transform = require('./cipherBase');
var inherits = require('inherits');

inherits(StreamCipher, Transform);
module.exports = StreamCipher;
function StreamCipher(mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv);
  }
  Transform.call(this);
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  this._cache = new Buffer('');
  this._secCache = new Buffer('');
  this._decrypt = decrypt;
  iv.copy(this._prev);
  this._mode = mode;
}
StreamCipher.prototype._transform = function (chunk, _, next) {
  next(null, this._mode.encrypt(this, chunk, this._decrypt));
};
StreamCipher.prototype._flush = function (next) {
  this._cipher.scrub();
  next();
};
}).call(this,require("buffer").Buffer)
},{"./aes":13,"./cipherBase":15,"buffer":176,"inherits":28}],30:[function(require,module,exports){
(function (Buffer){
module.exports = xor;
function xor(a, b) {
  var len = Math.min(a.length, b.length);
  var out = new Buffer(len);
  var i = -1;
  while (++i < len) {
    out.writeUInt8(a[i] ^ b[i], i);
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":176}],31:[function(require,module,exports){
(function (Buffer){
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
};
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
};
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
};
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
};
exports['RSA-SHA1'] = {
	sign: 'rsa',
	hash: 'sha1',
	id: new Buffer('3021300906052b0e03021a05000414', 'hex')
};
exports['ecdsa-with-SHA1'] = {
	sign: 'ecdsa',
	hash: 'sha1',
	id: new Buffer('', 'hex')
};
exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
};
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
};
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
};
}).call(this,require("buffer").Buffer)
},{"buffer":176}],32:[function(require,module,exports){
(function (Buffer){
var sign = require('./sign');
var verify = require('./verify');
var stream = require('stream');
var inherits = require('inherits');
var algos = require('./algos');
'use strict';
module.exports = function (exports, crypto) {
	exports.createSign = createSign;
	function createSign(algorithm) {

		return new Sign(algorithm, crypto);
	}
	exports.createVerify = createVerify;
	function createVerify(algorithm) {
		return new Verify(algorithm, crypto);
	}
};
inherits(Sign, stream.Writable);
function Sign(algorithm, crypto) {
	stream.Writable.call(this);
	var data = algos[algorithm];
	if (!data) {
		throw new Error('Unknown message digest');
	}
	this._hash = crypto.createHash(data.hash);
	this._tag = data.id;
	this._crypto = crypto;
}
Sign.prototype._write = function _write(data, _, done) {
	this._hash.update(data);
	done();
};
Sign.prototype.update = function update(data) {
	this.write(data);
	return this;
};

Sign.prototype.sign = function signMethod(key, enc) {
	this.end();
	var hash = this._hash.digest();
	var sig = sign(Buffer.concat([this._tag, hash]), key, this._crypto);
	if (enc) {
		sig = sig.toString(enc);
	}
	return sig;
};

inherits(Verify, stream.Writable);
function Verify(algorithm, crypto) {
	stream.Writable.call(this);
	var data = algos[algorithm];
	if (!data) {
		throw new Error('Unknown message digest');
	}
	this._hash = crypto.createHash(data.hash);
	this._tag = data.id;
}
Verify.prototype._write = function _write(data, _, done) {
	this._hash.update(data);
	done();
};
Verify.prototype.update = function update(data) {
	this.write(data);
	return this;
};

Verify.prototype.verify = function verifyMethod(key, sig, enc) {
	this.end();
	var hash = this._hash.digest();
	if (!Buffer.isBuffer(sig)) {
		sig = new Buffer(sig, enc);
	}
	return verify(sig, Buffer.concat([this._tag, hash]), key);
};
}).call(this,require("buffer").Buffer)
},{"./algos":31,"./sign":76,"./verify":77,"buffer":176,"inherits":56,"stream":330}],33:[function(require,module,exports){
// Utils

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
}

// Could use `inherits` module, but don't want to move from single file
// architecture yet.
function inherits(ctor, superCtor) {
  ctor.super_ = superCtor
  var TempCtor = function () {}
  TempCtor.prototype = superCtor.prototype
  ctor.prototype = new TempCtor()
  ctor.prototype.constructor = ctor
}

// BN

function BN(number, base) {
  // May be `new BN(bn)` ?
  if (number !== null &&
      typeof number === 'object' &&
      Array.isArray(number.words)) {
    return number;
  }

  this.sign = false;
  this.words = null;
  this.length = 0;

  // Reduction context
  this.red = null;

  if (number !== null)
    this._init(number || 0, base || 10);
}
if (typeof module === 'object')
  module.exports = BN;

BN.BN = BN;
BN.wordSize = 26;

BN.prototype._init = function init(number, base) {
  if (typeof number === 'number') {
    if (number < 0) {
      this.sign = true;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    }
    return;
  } else if (typeof number === 'object') {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      this.words[i] = 0;

    // Assume big-endian
    var off = 0;
    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }

    return this.strip();
  }
  if (base === 'hex')
    base = 16;
  assert(base === (base | 0) && base >= 2 && base <= 36);

  number = number.toString().replace(/\s+/g, '');
  var start = 0;
  if (number[0] === '-')
    start++;

  if (base === 16)
    this._parseHex(number, start);
  else
    this._parseBase(number, base, start);

  if (number[0] === '-')
    this.sign = true;

  this.strip();
};

BN.prototype._parseHex = function parseHex(number, start) {
  // Create possibly bigger array to ensure that it fits the number
  this.length = Math.ceil((number.length - start) / 6);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  // Scan 24-bit chunks and add them to the number
  var off = 0;
  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
    var w = parseInt(number.slice(i, i + 6), 16);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    off += 24;
    if (off >= 26) {
      off -= 26;
      j++;
    }
  }
  if (i + 6 !== start) {
    var w = parseInt(number.slice(start, i + 6), 16);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
  }
  this.strip();
};

BN.prototype._parseBase = function parseBase(number, base, start) {
  // Initialize as zero
  this.words = [ 0 ];
  this.length = 1;

  var word = 0;
  var q = 1;
  var p = 0;
  var bigQ = null;
  for (var i = start; i < number.length; i++) {
    var digit;
    var ch = number[i];
    if (base === 10 || ch <= '9')
      digit = ch | 0;
    else if (ch >= 'a')
      digit = ch.charCodeAt(0) - 97 + 10;
    else
      digit = ch.charCodeAt(0) - 65 + 10;
    word *= base;
    word += digit;
    q *= base;
    p++;

    if (q > 0xfffff) {
      assert(q <= 0x3ffffff);
      if (!bigQ)
        bigQ = new BN(q);
      this.mul(bigQ).copy(this);
      this.iadd(new BN(word));
      word = 0;
      q = 1;
      p = 0;
    }
  }
  if (p !== 0) {
    this.mul(new BN(q)).copy(this);
    this.iadd(new BN(word));
  }
};

BN.prototype.copy = function copy(dest) {
  dest.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    dest.words[i] = this.words[i];
  dest.length = this.length;
  dest.sign = this.sign;
  dest.red = this.red;
};

BN.prototype.clone = function clone() {
  var r = new BN(null);
  this.copy(r);
  return r;
};

// Remove leading `0` from `this`
BN.prototype.strip = function strip() {
  while (this.length > 1 && this.words[this.length - 1] === 0)
    this.length--;
  return this._normSign();
};

BN.prototype._normSign = function _normSign() {
  // -0 = 0
  if (this.length === 1 && this.words[0] === 0)
    this.sign = false;
  return this;
};

BN.prototype.inspect = function inspect() {
  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
};

/*

var zeros = [];
var groupSizes = [];
var groupBases = [];

var s = '';
var i = -1;
while (++i < BN.wordSize) {
  zeros[i] = s;
  s += '0';
}
groupSizes[0] = 0;
groupSizes[1] = 0;
groupBases[0] = 0;
groupBases[1] = 0;
var base = 2 - 1;
while (++base < 36 + 1) {
  var groupSize = 0;
  var groupBase = 1;
  // TODO: <=
  while (groupBase < (1 << BN.wordSize) / base) {
    groupBase *= base;
    groupSize += 1;
  }
  groupSizes[base] = groupSize;
  groupBases[base] = groupBase;
}

*/

var zeros = [
  '',
  '0',
  '00',
  '000',
  '0000',
  '00000',
  '000000',
  '0000000',
  '00000000',
  '000000000',
  '0000000000',
  '00000000000',
  '000000000000',
  '0000000000000',
  '00000000000000',
  '000000000000000',
  '0000000000000000',
  '00000000000000000',
  '000000000000000000',
  '0000000000000000000',
  '00000000000000000000',
  '000000000000000000000',
  '0000000000000000000000',
  '00000000000000000000000',
  '000000000000000000000000',
  '0000000000000000000000000'
];

var groupSizes = [
  0, 0,
  25, 16, 12, 11, 10, 9, 8,
  8, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 5, 5,
  5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5
];

var groupBases = [
  0, 0,
  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
];

BN.prototype.toString = function toString(base, padding) {
  base = base || 10;
  if (base === 16 || base === 'hex') {
    var out = '';
    var off = 0;
    var padding = padding | 0 || 1;
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i];
      var word = (((w << off) | carry) & 0xffffff).toString(16);
      carry = (w >>> (24 - off)) & 0xffffff;
      if (carry !== 0 || i !== this.length - 1)
        out = zeros[6 - word.length] + word + out;
      else
        out = word + out;
      off += 2;
      if (off >= 26) {
        off -= 26;
        i--;
      }
    }
    if (carry !== 0)
      out = carry.toString(16) + out;
    while (out.length % padding !== 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else if (base === (base | 0) && base >= 2 && base <= 36) {
    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    var groupSize = groupSizes[base];
    // var groupBase = Math.pow(base, groupSize);
    var groupBase = groupBases[base];
    var out = '';
    var c = this.clone();
    c.sign = false;
    while (c.cmpn(0) !== 0) {
      var r = c.modn(groupBase).toString(base);
      c = c.idivn(groupBase);

      if (c.cmpn(0) !== 0)
        out = zeros[groupSize - r.length] + r + out;
      else
        out = r + out;
    }
    if (this.cmpn(0) === 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else {
    assert(false, 'Base should be between 2 and 36');
  }
};

BN.prototype.toJSON = function toJSON() {
  return this.toString(16);
};

BN.prototype.toArray = function toArray() {
  this.strip();
  var res = new Array(this.byteLength());
  res[0] = 0;

  var q = this.clone();
  for (var i = 0; q.cmpn(0) !== 0; i++) {
    var b = q.andln(0xff);
    q.ishrn(8);

    // Assume big-endian
    res[res.length - i - 1] = b;
  }

  return res;
};

/*
function genCountBits(bits) {
  var arr = [];

  for (var i = bits - 1; i >= 0; i--) {
    var bit = '0x' + (1 << i).toString(16);
    arr.push('w >= ' + bit + ' ? ' + (i + 1));
  }

  return new Function('w', 'return ' + arr.join(' :\n') + ' :\n0;');
};

BN.prototype._countBits = genCountBits(26);
*/

// Sadly chrome apps could not contain `new Function()` calls
BN.prototype._countBits = function _countBits(w) {
  return w >= 0x2000000 ? 26 :
         w >= 0x1000000 ? 25 :
         w >= 0x800000 ? 24 :
         w >= 0x400000 ? 23 :
         w >= 0x200000 ? 22 :
         w >= 0x100000 ? 21 :
         w >= 0x80000 ? 20 :
         w >= 0x40000 ? 19 :
         w >= 0x20000 ? 18 :
         w >= 0x10000 ? 17 :
         w >= 0x8000 ? 16 :
         w >= 0x4000 ? 15 :
         w >= 0x2000 ? 14 :
         w >= 0x1000 ? 13 :
         w >= 0x800 ? 12 :
         w >= 0x400 ? 11 :
         w >= 0x200 ? 10 :
         w >= 0x100 ? 9 :
         w >= 0x80 ? 8 :
         w >= 0x40 ? 7 :
         w >= 0x20 ? 6 :
         w >= 0x10 ? 5 :
         w >= 0x8 ? 4 :
         w >= 0x4 ? 3 :
         w >= 0x2 ? 2 :
         w >= 0x1 ? 1 :
         0;
};

// Return number of used bits in a BN
BN.prototype.bitLength = function bitLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  var hi = this._countBits(w);
  return (this.length - 1) * 26 + hi;
};

BN.prototype.byteLength = function byteLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  return Math.ceil(this.bitLength() / 8);
};

// Return negative clone of `this`
BN.prototype.neg = function neg() {
  if (this.cmpn(0) === 0)
    return this.clone();

  var r = this.clone();
  r.sign = !this.sign;
  return r;
};

// Add `num` to `this` in-place
BN.prototype.iadd = function iadd(num) {
  // negative + positive
  if (this.sign && !num.sign) {
    this.sign = false;
    var r = this.isub(num);
    this.sign = !this.sign;
    return this._normSign();

  // positive + negative
  } else if (!this.sign && num.sign) {
    num.sign = false;
    var r = this.isub(num);
    num.sign = true;
    return r._normSign();
  }

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] + b.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }

  this.length = a.length;
  if (carry !== 0) {
    this.words[this.length] = carry;
    this.length++;
  // Copy the rest of the words
  } else if (a !== this) {
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  }

  return this;
};

// Add `num` to `this`
BN.prototype.add = function add(num) {
  if (num.sign && !this.sign) {
    num.sign = false;
    var res = this.sub(num);
    num.sign = true;
    return res;
  } else if (!num.sign && this.sign) {
    this.sign = false;
    var res = num.sub(this);
    this.sign = true;
    return res;
  }

  if (this.length > num.length)
    return this.clone().iadd(num);
  else
    return num.clone().iadd(this);
};

// Subtract `num` from `this` in-place
BN.prototype.isub = function isub(num) {
  // this - (-num) = this + num
  if (num.sign) {
    num.sign = false;
    var r = this.iadd(num);
    num.sign = true;
    return r._normSign();

  // -this - num = -(this + num)
  } else if (this.sign) {
    this.sign = false;
    this.iadd(num);
    this.sign = true;
    return this._normSign();
  }

  // At this point both numbers are positive
  var cmp = this.cmp(num);

  // Optimization - zeroify
  if (cmp === 0) {
    this.sign = false;
    this.length = 1;
    this.words[0] = 0;
    return this;
  }

  // a > b
  if (cmp > 0) {
    var a = this;
    var b = num;
  } else {
    var a = num;
    var b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] - b.words[i] - carry;
    if (r < 0) {
      r += 0x4000000;
      carry = 1;
    } else {
      carry = 0;
    }
    this.words[i] = r;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] - carry;
    if (r < 0) {
      r += 0x4000000;
      carry = 1;
    } else {
      carry = 0;
    }
    this.words[i] = r;
  }

  // Copy rest of the words
  if (carry === 0 && i < a.length && a !== this)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  this.length = Math.max(this.length, i);

  if (a !== this)
    this.sign = true;

  return this.strip();
};

// Subtract `num` from `this`
BN.prototype.sub = function sub(num) {
  return this.clone().isub(num);
};

/*
// NOTE: This could be potentionally used to generate loop-less multiplications
function _genCombMulTo(alen, blen) {
  var len = alen + blen - 1;
  var src = [
    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
        'mask = 0x3ffffff, shift = 0x4000000;',
    'out.length = ' + len + ';'
  ];
  for (var k = 0; k < len; k++) {
    var minJ = Math.max(0, k - alen + 1);
    var maxJ = Math.min(k, blen - 1);

    for (var j = minJ; j <= maxJ; j++) {
      var i = k - j;
      var mul = 'a[' + i + '] * b[' + j + ']';

      if (j === minJ) {
        src.push('w = ' + mul + ' + c;');
        src.push('c = (w / shift) | 0;');
      } else {
        src.push('w += ' + mul + ';');
        src.push('c += (w / shift) | 0;');
      }
      src.push('w &= mask;');
    }
    src.push('o[' + k + '] = w;');
  }
  src.push('if (c !== 0) {',
           '  o[' + k + '] = c;',
           '  out.length++;',
           '}',
           'return out;');

  return src.join('\n');
}
*/

BN.prototype._smallMulTo = function _smallMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = carry >>> 26;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;
    }
    out.words[k] = rword;
    carry = ncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype._bigMulTo = function _bigMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  var hncarry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = hncarry;
    hncarry = 0;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;

      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }
    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype.mulTo = function mulTo(num, out) {
  var res;
  if (this.length + num.length < 63)
    res = this._smallMulTo(num, out);
  else
    res = this._bigMulTo(num, out);
  return res;
};

// Multiply `this` by `num`
BN.prototype.mul = function mul(num) {
  var out = new BN(null);
  out.words = new Array(this.length + num.length);
  return this.mulTo(num, out);
};

// In-place Multiplication
BN.prototype.imul = function imul(num) {
  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
    this.words[0] = 0;
    this.length = 1;
    return this;
  }

  var tlen = this.length;
  var nlen = num.length;

  this.sign = num.sign !== this.sign;
  this.length = this.length + num.length;
  this.words[this.length - 1] = 0;

  var lastCarry = 0;
  for (var k = this.length - 2; k >= 0; k--) {
    // Sum all words with the same `i + j = k` and accumulate `carry`,
    // note that carry could be >= 0x3ffffff
    var carry = 0;
    var rword = 0;
    var maxJ = Math.min(k, nlen - 1);
    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i];
      var b = num.words[j];
      var r = a * b;

      var lo = r & 0x3ffffff;
      carry += (r / 0x4000000) | 0;
      lo += rword;
      rword = lo & 0x3ffffff;
      carry += lo >>> 26;
    }
    this.words[k] = rword;
    this.words[k + 1] += carry;
    carry = 0;
  }

  // Propagate overflows
  var carry = 0;
  for (var i = 1; i < this.length; i++) {
    var w = this.words[i] + carry;
    this.words[i] = w & 0x3ffffff;
    carry = w >>> 26;
  }

  return this.strip();
};

// `this` * `this`
BN.prototype.sqr = function sqr() {
  return this.mul(this);
};

// `this` * `this` in-place
BN.prototype.isqr = function isqr() {
  return this.mul(this);
};

// Shift-left in-place
BN.prototype.ishln = function ishln(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;
  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

  var o = this.clone();
  if (r !== 0) {
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var newCarry = this.words[i] & carryMask;
      var c = (this.words[i] - newCarry) << r;
      this.words[i] = c | carry;
      carry = newCarry >>> (26 - r);
    }
    if (carry) {
      this.words[i] = carry;
      this.length++;
    }
  }

  if (s !== 0) {
    for (var i = this.length - 1; i >= 0; i--)
      this.words[i + s] = this.words[i];
    for (var i = 0; i < s; i++)
      this.words[i] = 0;
    this.length += s;
  }

  return this.strip();
};

// Shift-right in-place
// NOTE: `hint` is a lowest bit before trailing zeroes
// NOTE: if `extended` is true - { lo: ..., hi: } object will be returned
BN.prototype.ishrn = function ishrn(bits, hint, extended) {
  assert(typeof bits === 'number' && bits >= 0);
  if (hint)
    hint = (hint - (hint % 26)) / 26;
  else
    hint = 0;

  var r = bits % 26;
  var s = Math.min((bits - r) / 26, this.length);
  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  var maskedWords = extended;

  hint -= s;
  hint = Math.max(0, hint);

  // Extended mode, copy masked part
  if (maskedWords) {
    for (var i = 0; i < s; i++)
      maskedWords.words[i] = this.words[i];
    maskedWords.length = s;
  }

  if (s === 0) {
    // No-op, we should not move anything at all
  } else if (this.length > s) {
    this.length -= s;
    for (var i = 0; i < this.length; i++)
      this.words[i] = this.words[i + s];
  } else {
    this.words[0] = 0;
    this.length = 1;
  }

  var carry = 0;
  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= hint); i--) {
    var word = this.words[i];
    this.words[i] = (carry << (26 - r)) | (word >>> r);
    carry = word & mask;
  }

  // Push carried bits as a mask
  if (maskedWords && carry !== 0)
    maskedWords.words[maskedWords.length++] = carry;

  if (this.length === 0) {
    this.words[0] = 0;
    this.length = 1;
  }

  this.strip();
  if (extended)
    return { hi: this, lo: maskedWords };

  return this;
};

// Shift-left
BN.prototype.shln = function shln(bits) {
  return this.clone().ishln(bits);
};

// Shift-right
BN.prototype.shrn = function shrn(bits) {
  return this.clone().ishrn(bits);
};

// Test if n bit is set
BN.prototype.testn = function testn(bit) {
  assert(typeof bit === 'number' && bit >= 0);
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    return false;
  }

  // Check bit and return
  var w = this.words[s];

  return !!(w & q);
};

// Return only lowers bits of number (in-place)
BN.prototype.imaskn = function imaskn(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;

  assert(!this.sign, 'imaskn works only with positive numbers');

  if (r !== 0)
    s++;
  this.length = Math.min(s, this.length);

  if (r !== 0) {
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    this.words[this.length - 1] &= mask;
  }

  return this.strip();
};

// Return only lowers bits of number
BN.prototype.maskn = function maskn(bits) {
  return this.clone().imaskn(bits);
};

// Add plain number `num` to `this`
BN.prototype.iaddn = function iaddn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.isubn(-num);

  // Possible sign change
  if (this.sign) {
    if (this.length === 1 && this.words[0] < num) {
      this.words[0] = num - this.words[0];
      this.sign = false;
      return this;
    }

    this.sign = false;
    this.isubn(num);
    this.sign = true;
    return this;
  }
  this.words[0] += num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    this.words[i] -= 0x4000000;
    if (i === this.length - 1)
      this.words[i + 1] = 1;
    else
      this.words[i + 1]++;
  }
  this.length = Math.max(this.length, i + 1);

  return this;
};

// Subtract plain number `num` from `this`
BN.prototype.isubn = function isubn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.iaddn(-num);

  if (this.sign) {
    this.sign = false;
    this.iaddn(num);
    this.sign = true;
    return this;
  }

  this.words[0] -= num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    this.words[i] += 0x4000000;
    this.words[i + 1] -= 1;
  }

  return this.strip();
};

BN.prototype.addn = function addn(num) {
  return this.clone().iaddn(num);
};

BN.prototype.subn = function subn(num) {
  return this.clone().isubn(num);
};

BN.prototype.iabs = function iabs() {
  this.sign = false;

  return this
};

BN.prototype.abs = function abs() {
  return this.clone().iabs();
};

BN.prototype._wordDiv = function _wordDiv(num, mode) {
  var shift = this.length - num.length;

  var a = this.clone();
  var b = num;

  var q = mode !== 'mod' && new BN(0);
  var sign = false;

  // Approximate quotient at each step
  while (a.length > b.length) {
    // NOTE: a.length is always >= 2, because of the condition .div()
    var hi = a.words[a.length - 1] * 0x4000000 + a.words[a.length - 2];
    var sq = (hi / b.words[b.length - 1]);
    var sqhi = (sq / 0x4000000) | 0;
    var sqlo = sq & 0x3ffffff;
    sq = new BN(null);
    sq.words = [ sqlo, sqhi ];
    sq.length = 2;

    // Collect quotient
    var shift = (a.length - b.length - 1) * 26;
    if (q) {
      var t = sq.shln(shift);
      if (a.sign)
        q.isub(t);
      else
        q.iadd(t);
    }

    sq = sq.mul(b).ishln(shift);
    if (a.sign)
      a.iadd(sq)
    else
      a.isub(sq);
  }
  // At this point a.length <= b.length
  while (a.ucmp(b) >= 0) {
    // NOTE: a.length is always >= 2, because of the condition above
    var hi = a.words[a.length - 1];
    var sq = new BN((hi / b.words[b.length - 1]) | 0);
    var shift = (a.length - b.length) * 26;

    if (q) {
      var t = sq.shln(shift);
      if (a.sign)
        q.isub(t);
      else
        q.iadd(t);
    }

    sq = sq.mul(b).ishln(shift);

    if (a.sign)
      a.iadd(sq);
    else
      a.isub(sq);
  }

  if (a.sign) {
    if (q)
      q.isubn(1);
    a.iadd(b);
  }
  return { div: q ? q : null, mod: a };
};

BN.prototype.divmod = function divmod(num, mode) {
  assert(num.cmpn(0) !== 0);

  if (this.sign && !num.sign) {
    var res = this.neg().divmod(num, mode);
    var div;
    var mod;
    if (mode !== 'mod')
      div = res.div.neg();
    if (mode !== 'div')
      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
    return {
      div: div,
      mod: mod
    };
  } else if (!this.sign && num.sign) {
    var res = this.divmod(num.neg(), mode);
    var div;
    if (mode !== 'mod')
      div = res.div.neg();
    return { div: div, mod: res.mod };
  } else if (this.sign && num.sign) {
    return this.neg().divmod(num.neg(), mode);
  }

  // Both numbers are positive at this point

  // Strip both numbers to approximate shift value
  if (num.length > this.length || this.cmp(num) < 0)
    return { div: new BN(0), mod: this };

  // Very short reduction
  if (num.length === 1) {
    if (mode === 'div')
      return { div: this.divn(num.words[0]), mod: null };
    else if (mode === 'mod')
      return { div: null, mod: new BN(this.modn(num.words[0])) };
    return {
      div: this.divn(num.words[0]),
      mod: new BN(this.modn(num.words[0]))
    };
  }

  return this._wordDiv(num, mode);
};

// Find `this` / `num`
BN.prototype.div = function div(num) {
  return this.divmod(num, 'div').div;
};

// Find `this` % `num`
BN.prototype.mod = function mod(num) {
  return this.divmod(num, 'mod').mod;
};

// Find Round(`this` / `num`)
BN.prototype.divRound = function divRound(num) {
  var dm = this.divmod(num);

  // Fast case - exact division
  if (dm.mod.cmpn(0) === 0)
    return dm.div;

  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

  var half = num.shrn(1);
  var r2 = num.andln(1);
  var cmp = mod.cmp(half);

  // Round down
  if (cmp < 0 || r2 === 1 && cmp === 0)
    return dm.div;

  // Round up
  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
};

BN.prototype.modn = function modn(num) {
  assert(num <= 0x3ffffff);
  var p = (1 << 26) % num;

  var acc = 0;
  for (var i = this.length - 1; i >= 0; i--)
    acc = (p * acc + this.words[i]) % num;

  return acc;
};

// In-place division by number
BN.prototype.idivn = function idivn(num) {
  assert(num <= 0x3ffffff);

  var carry = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var w = this.words[i] + carry * 0x4000000;
    this.words[i] = (w / num) | 0;
    carry = w % num;
  }

  return this.strip();
};

BN.prototype.divn = function divn(num) {
  return this.clone().idivn(num);
};

BN.prototype._egcd = function _egcd(x1, p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var a = this;
  var b = p.clone();

  if (a.sign)
    a = a.mod(p);
  else
    a = a.clone();

  var x2 = new BN(0);
  while (b.isEven())
    b.ishrn(1);
  var delta = b.clone();
  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    while (a.isEven()) {
      a.ishrn(1);
      if (x1.isEven())
        x1.ishrn(1);
      else
        x1.iadd(delta).ishrn(1);
    }
    while (b.isEven()) {
      b.ishrn(1);
      if (x2.isEven())
        x2.ishrn(1);
      else
        x2.iadd(delta).ishrn(1);
    }
    if (a.cmp(b) >= 0) {
      a.isub(b);
      x1.isub(x2);
    } else {
      b.isub(a);
      x2.isub(x1);
    }
  }
  if (a.cmpn(1) === 0)
    return x1;
  else
    return x2;
};

BN.prototype.gcd = function gcd(num) {
  if (this.cmpn(0) === 0)
    return num.clone();
  if (num.cmpn(0) === 0)
    return this.clone();

  var a = this.clone();
  var b = num.clone();
  a.sign = false;
  b.sign = false;

  // Remove common factor of two
  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    a.ishrn(1);
    b.ishrn(1);
  }

  while (a.isEven())
    a.ishrn(1);

  do {
    while (b.isEven())
      b.ishrn(1);

    // Swap `a` and `b` to make `a` always bigger than `b`
    if (a.cmp(b) < 0) {
      var t = a;
      a = b;
      b = t;
    }
    a.isub(a.div(b).mul(b));
  } while (a.cmpn(0) !== 0 && b.cmpn(0) !== 0);
  if (a.cmpn(0) === 0)
    return b.ishln(shift);
  else
    return a.ishln(shift);
};

// Invert number in the field F(num)
BN.prototype.invm = function invm(num) {
  return this._egcd(new BN(1), num).mod(num);
};

BN.prototype.isEven = function isEven(num) {
  return (this.words[0] & 1) === 0;
};

BN.prototype.isOdd = function isOdd(num) {
  return (this.words[0] & 1) === 1;
};

// And first word and num
BN.prototype.andln = function andln(num) {
  return this.words[0] & num;
};

// Increment at the bit position in-line
BN.prototype.bincn = function bincn(bit) {
  assert(typeof bit === 'number');
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    for (var i = this.length; i < s + 1; i++)
      this.words[i] = 0;
    this.words[s] |= q;
    this.length = s + 1;
    return this;
  }

  // Add bit and propagate, if needed
  var carry = q;
  for (var i = s; carry !== 0 && i < this.length; i++) {
    var w = this.words[i];
    w += carry;
    carry = w >>> 26;
    w &= 0x3ffffff;
    this.words[i] = w;
  }
  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }
  return this;
};

BN.prototype.cmpn = function cmpn(num) {
  var sign = num < 0;
  if (sign)
    num = -num;

  if (this.sign && !sign)
    return -1;
  else if (!this.sign && sign)
    return 1;

  num &= 0x3ffffff;
  this.strip();

  var res;
  if (this.length > 1) {
    res = 1;
  } else {
    var w = this.words[0];
    res = w === num ? 0 : w < num ? -1 : 1;
  }
  if (this.sign)
    res = -res;
  return res;
};

// Compare two numbers and return:
// 1 - if `this` > `num`
// 0 - if `this` == `num`
// -1 - if `this` < `num`
BN.prototype.cmp = function cmp(num) {
  if (this.sign && !num.sign)
    return -1;
  else if (!this.sign && num.sign)
    return 1;

  var res = this.ucmp(num);
  if (this.sign)
    return -res;
  else
    return res;
};

// Unsigned comparison
BN.prototype.ucmp = function ucmp(num) {
  // At this point both numbers have the same sign
  if (this.length > num.length)
    return 1;
  else if (this.length < num.length)
    return -1;

  var res = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var a = this.words[i];
    var b = num.words[i];

    if (a === b)
      continue;
    if (a < b)
      res = -1;
    else if (a > b)
      res = 1;
    break;
  }
  return res;
};

//
// A reduce context, could be using montgomery or something better, depending
// on the `m` itself.
//
BN.red = function red(num) {
  return new Red(num);
};

BN.prototype.toRed = function toRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  assert(!this.sign, 'red works only with positives');
  return ctx.convertTo(this)._forceRed(ctx);
};

BN.prototype.fromRed = function fromRed() {
  assert(this.red, 'fromRed works only with numbers in reduction context');
  return this.red.convertFrom(this);
};

BN.prototype._forceRed = function _forceRed(ctx) {
  this.red = ctx;
  return this;
};

BN.prototype.forceRed = function forceRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  return this._forceRed(ctx);
};

BN.prototype.redAdd = function redAdd(num) {
  assert(this.red, 'redAdd works only with red numbers');
  return this.red.add(this, num);
};

BN.prototype.redIAdd = function redIAdd(num) {
  assert(this.red, 'redIAdd works only with red numbers');
  return this.red.iadd(this, num);
};

BN.prototype.redSub = function redSub(num) {
  assert(this.red, 'redSub works only with red numbers');
  return this.red.sub(this, num);
};

BN.prototype.redISub = function redISub(num) {
  assert(this.red, 'redISub works only with red numbers');
  return this.red.isub(this, num);
};

BN.prototype.redShl = function redShl(num) {
  assert(this.red, 'redShl works only with red numbers');
  return this.red.shl(this, num);
};

BN.prototype.redMul = function redMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.mul(this, num);
};

BN.prototype.redIMul = function redIMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.imul(this, num);
};

BN.prototype.redSqr = function redSqr() {
  assert(this.red, 'redSqr works only with red numbers');
  this.red._verify1(this);
  return this.red.sqr(this);
};

BN.prototype.redISqr = function redISqr() {
  assert(this.red, 'redISqr works only with red numbers');
  this.red._verify1(this);
  return this.red.isqr(this);
};

// Square root over p
BN.prototype.redSqrt = function redSqrt() {
  assert(this.red, 'redSqrt works only with red numbers');
  this.red._verify1(this);
  return this.red.sqrt(this);
};

BN.prototype.redInvm = function redInvm() {
  assert(this.red, 'redInvm works only with red numbers');
  this.red._verify1(this);
  return this.red.invm(this);
};

// Return negative clone of `this` % `red modulo`
BN.prototype.redNeg = function redNeg() {
  assert(this.red, 'redNeg works only with red numbers');
  this.red._verify1(this);
  return this.red.neg(this);
};

BN.prototype.redPow = function redPow(num) {
  assert(this.red && !num.red, 'redPow(normalNum)');
  this.red._verify1(this);
  return this.red.pow(this, num);
};

// Prime numbers with efficient reduction
var primes = {
  k256: null,
  p224: null,
  p192: null,
  p25519: null
};

// Pseudo-Mersenne prime
function MPrime(name, p) {
  // P = 2 ^ N - K
  this.name = name;
  this.p = new BN(p, 16);
  this.n = this.p.bitLength();
  this.k = new BN(1).ishln(this.n).isub(this.p);

  this.tmp = this._tmp();
}

MPrime.prototype._tmp = function _tmp() {
  var tmp = new BN(null);
  tmp.words = new Array(Math.ceil(this.n / 13));
  return tmp;
};

MPrime.prototype.ireduce = function ireduce(num) {
  // Assumes that `num` is less than `P^2`
  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  var r = num;
  var rlen;

  do {
    var pair = r.ishrn(this.n, 0, this.tmp);
    r = this.imulK(pair.hi);
    r = r.iadd(pair.lo);
    rlen = r.bitLength();
  } while (rlen > this.n);

  var cmp = rlen < this.n ? -1 : r.cmp(this.p);
  if (cmp === 0) {
    r.words[0] = 0;
    r.length = 1;
  } else if (cmp > 0) {
    r.isub(this.p);
  } else {
    r.strip();
  }

  return r;
};

MPrime.prototype.imulK = function imulK(num) {
  return num.imul(this.k);
};

function K256() {
  MPrime.call(
    this,
    'k256',
    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
}
inherits(K256, MPrime);

K256.prototype.imulK = function imulK(num) {
  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  num.words[num.length] = 0;
  num.words[num.length + 1] = 0;
  num.length += 2;
  for (var i = num.length - 3; i >= 0; i--) {
    var w = num.words[i];
    var hi = w * 0x40;
    var lo = w * 0x3d1;
    hi += (lo / 0x4000000) | 0;
    var uhi = (hi / 0x4000000) | 0;
    hi &= 0x3ffffff;
    lo &= 0x3ffffff;

    num.words[i + 2] += uhi;
    num.words[i + 1] += hi;
    num.words[i] = lo;
  }
  var w = num.words[num.length - 2];
  if (w >= 0x4000000) {
    num.words[num.length - 1] += w >>> 26;
    num.words[num.length - 2] = w & 0x3ffffff;
  }
  if (num.words[num.length - 1] === 0)
    num.length--;
  if (num.words[num.length - 1] === 0)
    num.length--;
  return num;
};

function P224() {
  MPrime.call(
    this,
    'p224',
    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
}
inherits(P224, MPrime);

function P192() {
  MPrime.call(
    this,
    'p192',
    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
}
inherits(P192, MPrime);

function P25519() {
  // 2 ^ 255 - 19
  MPrime.call(
    this,
    '25519',
    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
}
inherits(P25519, MPrime);

P25519.prototype.imulK = function imulK(num) {
  // K = 0x13
  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var hi = num.words[i] * 0x13 + carry;
    var lo = hi & 0x3ffffff;
    hi >>>= 26;

    num.words[i] = lo;
    carry = hi;
  }
  if (carry !== 0)
    num.words[num.length++] = carry;
  return num;
};

// Exported mostly for testing purposes, use plain name instead
BN._prime = function prime(name) {
  // Cached version of prime
  if (primes[name])
    return primes[name];

  var prime;
  if (name === 'k256')
    prime = new K256();
  else if (name === 'p224')
    prime = new P224();
  else if (name === 'p192')
    prime = new P192();
  else if (name === 'p25519')
    prime = new P25519();
  else
    throw new Error('Unknown prime ' + name);
  primes[name] = prime;

  return prime;
}

//
// Base reduction engine
//
function Red(m) {
  if (typeof m === 'string') {
    var prime = BN._prime(m);
    this.m = prime.p;
    this.prime = prime;
  } else {
    this.m = m;
    this.prime = null;
  }
}

Red.prototype._verify1 = function _verify1(a) {
  assert(!a.sign, 'red works only with positives');
  assert(a.red, 'red works only with red numbers');
};

Red.prototype._verify2 = function _verify2(a, b) {
  assert(!a.sign && !b.sign, 'red works only with positives');
  assert(a.red && a.red === b.red,
         'red works only with red numbers');
};

Red.prototype.imod = function imod(a) {
  if (this.prime)
    return this.prime.ireduce(a)._forceRed(this);
  return a.mod(this.m)._forceRed(this);
};

Red.prototype.neg = function neg(a) {
  var r = a.clone();
  r.sign = !r.sign;
  return r.iadd(this.m)._forceRed(this);
};

Red.prototype.add = function add(a, b) {
  this._verify2(a, b);

  var res = a.add(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res._forceRed(this);
};

Red.prototype.iadd = function iadd(a, b) {
  this._verify2(a, b);

  var res = a.iadd(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res;
};

Red.prototype.sub = function sub(a, b) {
  this._verify2(a, b);

  var res = a.sub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res._forceRed(this);
};

Red.prototype.isub = function isub(a, b) {
  this._verify2(a, b);

  var res = a.isub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res;
};

Red.prototype.shl = function shl(a, num) {
  this._verify1(a);
  return this.imod(a.shln(num));
};

Red.prototype.imul = function imul(a, b) {
  this._verify2(a, b);
  return this.imod(a.imul(b));
};

Red.prototype.mul = function mul(a, b) {
  this._verify2(a, b);
  return this.imod(a.mul(b));
};

Red.prototype.isqr = function isqr(a) {
  return this.imul(a, a);
};

Red.prototype.sqr = function sqr(a) {
  return this.mul(a, a);
};

Red.prototype.sqrt = function sqrt(a) {
  if (a.cmpn(0) === 0)
    return a.clone();

  var mod3 = this.m.andln(3);
  assert(mod3 % 2 === 1);

  // Fast case
  if (mod3 === 3) {
    var pow = this.m.add(new BN(1)).ishrn(2);
    var r = this.pow(a, pow);
    return r;
  }

  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  //
  // Find Q and S, that Q * 2 ^ S = (P - 1)
  var q = this.m.subn(1);
  var s = 0;
  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
    s++;
    q.ishrn(1);
  }
  assert(q.cmpn(0) !== 0);

  var one = new BN(1).toRed(this);
  var nOne = one.redNeg();

  // Find quadratic non-residue
  // NOTE: Max is such because of generalized Riemann hypothesis.
  var lpow = this.m.subn(1).ishrn(1);
  var z = this.m.bitLength();
  z = new BN(2 * z * z).toRed(this);
  while (this.pow(z, lpow).cmp(nOne) !== 0)
    z.redIAdd(nOne);

  var c = this.pow(z, q);
  var r = this.pow(a, q.addn(1).ishrn(1));
  var t = this.pow(a, q);
  var m = s;
  while (t.cmp(one) !== 0) {
    var tmp = t;
    for (var i = 0; tmp.cmp(one) !== 0; i++)
      tmp = tmp.redSqr();
    assert(i < m);
    var b = this.pow(c, new BN(1).ishln(m - i - 1));

    r = r.redMul(b);
    c = b.redSqr();
    t = t.redMul(c);
    m = i;
  }

  return r;
};

Red.prototype.invm = function invm(a) {
  var inv = a._egcd(new BN(1), this.m);
  if (inv.sign) {
    inv.sign = false;
    return this.imod(inv).redNeg();
  } else {
    return this.imod(inv);
  }
};

Red.prototype.pow = function pow(a, num) {
  var w = [];
  var q = num.clone();
  while (q.cmpn(0) !== 0) {
    w.push(q.andln(1));
    q.ishrn(1);
  }

  // Skip leading zeroes
  var res = a;
  for (var i = 0; i < w.length; i++, res = this.sqr(res))
    if (w[i] !== 0)
      break;

  if (++i < w.length) {
    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
      if (w[i] === 0)
        continue;
      res = this.mul(res, q);
    }
  }

  return res;
};

Red.prototype.convertTo = function convertTo(num) {
  return num.clone();
};

Red.prototype.convertFrom = function convertFrom(num) {
  var res = num.clone();
  res.red = null;
  return res;
};

//
// Montgomery method engine
//

BN.mont = function mont(num) {
  return new Mont(num);
};

function Mont(m) {
  Red.call(this, m);

  this.shift = this.m.bitLength();
  if (this.shift % 26 !== 0)
    this.shift += 26 - (this.shift % 26);
  this.r = new BN(1).ishln(this.shift);
  this.r2 = this.imod(this.r.sqr());
  this.rinv = this.r.invm(this.m);

  // TODO(indutny): simplify it
  this.minv = this.rinv.mul(this.r)
                       .sub(new BN(1))
                       .div(this.m)
                       .neg()
                       .mod(this.r);
}
inherits(Mont, Red);

Mont.prototype.convertTo = function convertTo(num) {
  return this.imod(num.shln(this.shift));
};

Mont.prototype.convertFrom = function convertFrom(num) {
  var r = this.imod(num.mul(this.rinv));
  r.red = null;
  return r;
};

Mont.prototype.imul = function imul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
    a.words[0] = 0;
    a.length = 1;
    return a;
  }

  var t = a.imul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.mul = function mul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
    return new BN(0)._forceRed(this);

  var t = a.mul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.invm = function invm(a) {
  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  var res = this.imod(a.invm(this.m).mul(this.r2));
  return res._forceRed(this);
};

},{}],34:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
module.exports = crt;
function blind(priv, crypto) {
  var r = getr(priv, crypto);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv, crypto) {
  var blinds = blind(priv, crypto);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).mod(p);
  h.imul(q);
  m2.iadd(h);
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
  if (out.length < len) {
    var prefix = new Buffer(len - out.length);
    prefix.fill(0);
    out = Buffer.concat([prefix, out], len);
  }
  return out;
}
crt.getr = getr;
function getr(priv, crypto) {
  var len = priv.modulus.byteLength();
  var r = new bn(crypto.randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
    r = new bn(crypto.randomBytes(len));
  }
  return r;
}
}).call(this,require("buffer").Buffer)
},{"bn.js":35,"buffer":176}],35:[function(require,module,exports){
// Utils

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
}

// Could use `inherits` module, but don't want to move from single file
// architecture yet.
function inherits(ctor, superCtor) {
  ctor.super_ = superCtor
  var TempCtor = function () {}
  TempCtor.prototype = superCtor.prototype
  ctor.prototype = new TempCtor()
  ctor.prototype.constructor = ctor
}

// BN

function BN(number, base, endian) {
  // May be `new BN(bn)` ?
  if (number !== null &&
      typeof number === 'object' &&
      Array.isArray(number.words)) {
    return number;
  }

  this.sign = false;
  this.words = null;
  this.length = 0;

  // Reduction context
  this.red = null;

  if (base === 'le' || base === 'be') {
    endian = base;
    base = 10;
  }

  if (number !== null)
    this._init(number || 0, base || 10, endian || 'be');
}
if (typeof module === 'object')
  module.exports = BN;

BN.BN = BN;
BN.wordSize = 26;

BN.prototype._init = function init(number, base, endian) {
  if (typeof number === 'number') {
    if (number < 0) {
      this.sign = true;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    }
    return;
  } else if (typeof number === 'object') {
    return this._initArray(number, base, endian);
  }
  if (base === 'hex')
    base = 16;
  assert(base === (base | 0) && base >= 2 && base <= 36);

  number = number.toString().replace(/\s+/g, '');
  var start = 0;
  if (number[0] === '-')
    start++;

  if (base === 16)
    this._parseHex(number, start);
  else
    this._parseBase(number, base, start);

  if (number[0] === '-')
    this.sign = true;

  this.strip();
};

BN.prototype._initArray = function _initArray(number, base, endian) {
  // Perhaps a Uint8Array
  assert(typeof number.length === 'number');
  this.length = Math.ceil(number.length / 3);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  var off = 0;
  if (endian === 'be') {
    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  } else if (endian === 'le') {
    for (var i = 0, j = 0; i < number.length; i += 3) {
      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  }
  return this.strip();
};

BN.prototype._parseHex = function parseHex(number, start) {
  // Create possibly bigger array to ensure that it fits the number
  this.length = Math.ceil((number.length - start) / 6);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  // Scan 24-bit chunks and add them to the number
  var off = 0;
  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
    var w = parseInt(number.slice(i, i + 6), 16);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    off += 24;
    if (off >= 26) {
      off -= 26;
      j++;
    }
  }
  if (i + 6 !== start) {
    var w = parseInt(number.slice(start, i + 6), 16);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
  }
  this.strip();
};

BN.prototype._parseBase = function parseBase(number, base, start) {
  // Initialize as zero
  this.words = [ 0 ];
  this.length = 1;

  var word = 0;
  var q = 1;
  var p = 0;
  var bigQ = null;
  for (var i = start; i < number.length; i++) {
    var digit;
    var ch = number[i];
    if (base === 10 || ch <= '9')
      digit = ch | 0;
    else if (ch >= 'a')
      digit = ch.charCodeAt(0) - 97 + 10;
    else
      digit = ch.charCodeAt(0) - 65 + 10;
    word *= base;
    word += digit;
    q *= base;
    p++;

    if (q > 0xfffff) {
      assert(q <= 0x3ffffff);
      if (!bigQ)
        bigQ = new BN(q);
      this.mul(bigQ).copy(this);
      this.iadd(new BN(word));
      word = 0;
      q = 1;
      p = 0;
    }
  }
  if (p !== 0) {
    this.mul(new BN(q)).copy(this);
    this.iadd(new BN(word));
  }
};

BN.prototype.copy = function copy(dest) {
  dest.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    dest.words[i] = this.words[i];
  dest.length = this.length;
  dest.sign = this.sign;
  dest.red = this.red;
};

BN.prototype.clone = function clone() {
  var r = new BN(null);
  this.copy(r);
  return r;
};

// Remove leading `0` from `this`
BN.prototype.strip = function strip() {
  while (this.length > 1 && this.words[this.length - 1] === 0)
    this.length--;
  return this._normSign();
};

BN.prototype._normSign = function _normSign() {
  // -0 = 0
  if (this.length === 1 && this.words[0] === 0)
    this.sign = false;
  return this;
};

BN.prototype.inspect = function inspect() {
  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
};

/*

var zeros = [];
var groupSizes = [];
var groupBases = [];

var s = '';
var i = -1;
while (++i < BN.wordSize) {
  zeros[i] = s;
  s += '0';
}
groupSizes[0] = 0;
groupSizes[1] = 0;
groupBases[0] = 0;
groupBases[1] = 0;
var base = 2 - 1;
while (++base < 36 + 1) {
  var groupSize = 0;
  var groupBase = 1;
  // TODO: <=
  while (groupBase < (1 << BN.wordSize) / base) {
    groupBase *= base;
    groupSize += 1;
  }
  groupSizes[base] = groupSize;
  groupBases[base] = groupBase;
}

*/

var zeros = [
  '',
  '0',
  '00',
  '000',
  '0000',
  '00000',
  '000000',
  '0000000',
  '00000000',
  '000000000',
  '0000000000',
  '00000000000',
  '000000000000',
  '0000000000000',
  '00000000000000',
  '000000000000000',
  '0000000000000000',
  '00000000000000000',
  '000000000000000000',
  '0000000000000000000',
  '00000000000000000000',
  '000000000000000000000',
  '0000000000000000000000',
  '00000000000000000000000',
  '000000000000000000000000',
  '0000000000000000000000000'
];

var groupSizes = [
  0, 0,
  25, 16, 12, 11, 10, 9, 8,
  8, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 5, 5,
  5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5
];

var groupBases = [
  0, 0,
  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
];

BN.prototype.toString = function toString(base, padding) {
  base = base || 10;
  if (base === 16 || base === 'hex') {
    var out = '';
    var off = 0;
    var padding = padding | 0 || 1;
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i];
      var word = (((w << off) | carry) & 0xffffff).toString(16);
      carry = (w >>> (24 - off)) & 0xffffff;
      if (carry !== 0 || i !== this.length - 1)
        out = zeros[6 - word.length] + word + out;
      else
        out = word + out;
      off += 2;
      if (off >= 26) {
        off -= 26;
        i--;
      }
    }
    if (carry !== 0)
      out = carry.toString(16) + out;
    while (out.length % padding !== 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else if (base === (base | 0) && base >= 2 && base <= 36) {
    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    var groupSize = groupSizes[base];
    // var groupBase = Math.pow(base, groupSize);
    var groupBase = groupBases[base];
    var out = '';
    var c = this.clone();
    c.sign = false;
    while (c.cmpn(0) !== 0) {
      var r = c.modn(groupBase).toString(base);
      c = c.idivn(groupBase);

      if (c.cmpn(0) !== 0)
        out = zeros[groupSize - r.length] + r + out;
      else
        out = r + out;
    }
    if (this.cmpn(0) === 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else {
    assert(false, 'Base should be between 2 and 36');
  }
};

BN.prototype.toJSON = function toJSON() {
  return this.toString(16);
};

BN.prototype.toArray = function toArray() {
  this.strip();
  var res = new Array(this.byteLength());
  res[0] = 0;

  var q = this.clone();
  for (var i = 0; q.cmpn(0) !== 0; i++) {
    var b = q.andln(0xff);
    q.ishrn(8);

    // Assume big-endian
    res[res.length - i - 1] = b;
  }

  return res;
};

/*
function genCountBits(bits) {
  var arr = [];

  for (var i = bits - 1; i >= 0; i--) {
    var bit = '0x' + (1 << i).toString(16);
    arr.push('w >= ' + bit + ' ? ' + (i + 1));
  }

  return new Function('w', 'return ' + arr.join(' :\n') + ' :\n0;');
};

BN.prototype._countBits = genCountBits(26);
*/

// Sadly chrome apps could not contain `new Function()` calls
BN.prototype._countBits = function _countBits(w) {
  return w >= 0x2000000 ? 26 :
         w >= 0x1000000 ? 25 :
         w >= 0x800000 ? 24 :
         w >= 0x400000 ? 23 :
         w >= 0x200000 ? 22 :
         w >= 0x100000 ? 21 :
         w >= 0x80000 ? 20 :
         w >= 0x40000 ? 19 :
         w >= 0x20000 ? 18 :
         w >= 0x10000 ? 17 :
         w >= 0x8000 ? 16 :
         w >= 0x4000 ? 15 :
         w >= 0x2000 ? 14 :
         w >= 0x1000 ? 13 :
         w >= 0x800 ? 12 :
         w >= 0x400 ? 11 :
         w >= 0x200 ? 10 :
         w >= 0x100 ? 9 :
         w >= 0x80 ? 8 :
         w >= 0x40 ? 7 :
         w >= 0x20 ? 6 :
         w >= 0x10 ? 5 :
         w >= 0x8 ? 4 :
         w >= 0x4 ? 3 :
         w >= 0x2 ? 2 :
         w >= 0x1 ? 1 :
         0;
};

// Return number of used bits in a BN
BN.prototype.bitLength = function bitLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  var hi = this._countBits(w);
  return (this.length - 1) * 26 + hi;
};

BN.prototype.byteLength = function byteLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  return Math.ceil(this.bitLength() / 8);
};

// Return negative clone of `this`
BN.prototype.neg = function neg() {
  if (this.cmpn(0) === 0)
    return this.clone();

  var r = this.clone();
  r.sign = !this.sign;
  return r;
};

// Add `num` to `this` in-place
BN.prototype.iadd = function iadd(num) {
  // negative + positive
  if (this.sign && !num.sign) {
    this.sign = false;
    var r = this.isub(num);
    this.sign = !this.sign;
    return this._normSign();

  // positive + negative
  } else if (!this.sign && num.sign) {
    num.sign = false;
    var r = this.isub(num);
    num.sign = true;
    return r._normSign();
  }

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] + b.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }

  this.length = a.length;
  if (carry !== 0) {
    this.words[this.length] = carry;
    this.length++;
  // Copy the rest of the words
  } else if (a !== this) {
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  }

  return this;
};

// Add `num` to `this`
BN.prototype.add = function add(num) {
  if (num.sign && !this.sign) {
    num.sign = false;
    var res = this.sub(num);
    num.sign = true;
    return res;
  } else if (!num.sign && this.sign) {
    this.sign = false;
    var res = num.sub(this);
    this.sign = true;
    return res;
  }

  if (this.length > num.length)
    return this.clone().iadd(num);
  else
    return num.clone().iadd(this);
};

// Subtract `num` from `this` in-place
BN.prototype.isub = function isub(num) {
  // this - (-num) = this + num
  if (num.sign) {
    num.sign = false;
    var r = this.iadd(num);
    num.sign = true;
    return r._normSign();

  // -this - num = -(this + num)
  } else if (this.sign) {
    this.sign = false;
    this.iadd(num);
    this.sign = true;
    return this._normSign();
  }

  // At this point both numbers are positive
  var cmp = this.cmp(num);

  // Optimization - zeroify
  if (cmp === 0) {
    this.sign = false;
    this.length = 1;
    this.words[0] = 0;
    return this;
  }

  // a > b
  if (cmp > 0) {
    var a = this;
    var b = num;
  } else {
    var a = num;
    var b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] - b.words[i] - carry;
    if (r < 0) {
      r += 0x4000000;
      carry = 1;
    } else {
      carry = 0;
    }
    this.words[i] = r;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] - carry;
    if (r < 0) {
      r += 0x4000000;
      carry = 1;
    } else {
      carry = 0;
    }
    this.words[i] = r;
  }

  // Copy rest of the words
  if (carry === 0 && i < a.length && a !== this)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  this.length = Math.max(this.length, i);

  if (a !== this)
    this.sign = true;

  return this.strip();
};

// Subtract `num` from `this`
BN.prototype.sub = function sub(num) {
  return this.clone().isub(num);
};

/*
// NOTE: This could be potentionally used to generate loop-less multiplications
function _genCombMulTo(alen, blen) {
  var len = alen + blen - 1;
  var src = [
    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
        'mask = 0x3ffffff, shift = 0x4000000;',
    'out.length = ' + len + ';'
  ];
  for (var k = 0; k < len; k++) {
    var minJ = Math.max(0, k - alen + 1);
    var maxJ = Math.min(k, blen - 1);

    for (var j = minJ; j <= maxJ; j++) {
      var i = k - j;
      var mul = 'a[' + i + '] * b[' + j + ']';

      if (j === minJ) {
        src.push('w = ' + mul + ' + c;');
        src.push('c = (w / shift) | 0;');
      } else {
        src.push('w += ' + mul + ';');
        src.push('c += (w / shift) | 0;');
      }
      src.push('w &= mask;');
    }
    src.push('o[' + k + '] = w;');
  }
  src.push('if (c !== 0) {',
           '  o[' + k + '] = c;',
           '  out.length++;',
           '}',
           'return out;');

  return src.join('\n');
}
*/

BN.prototype._smallMulTo = function _smallMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = carry >>> 26;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;
    }
    out.words[k] = rword;
    carry = ncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype._bigMulTo = function _bigMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  var hncarry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = hncarry;
    hncarry = 0;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;

      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }
    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype.mulTo = function mulTo(num, out) {
  var res;
  if (this.length + num.length < 63)
    res = this._smallMulTo(num, out);
  else
    res = this._bigMulTo(num, out);
  return res;
};

// Multiply `this` by `num`
BN.prototype.mul = function mul(num) {
  var out = new BN(null);
  out.words = new Array(this.length + num.length);
  return this.mulTo(num, out);
};

// In-place Multiplication
BN.prototype.imul = function imul(num) {
  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
    this.words[0] = 0;
    this.length = 1;
    return this;
  }

  var tlen = this.length;
  var nlen = num.length;

  this.sign = num.sign !== this.sign;
  this.length = this.length + num.length;
  this.words[this.length - 1] = 0;

  var lastCarry = 0;
  for (var k = this.length - 2; k >= 0; k--) {
    // Sum all words with the same `i + j = k` and accumulate `carry`,
    // note that carry could be >= 0x3ffffff
    var carry = 0;
    var rword = 0;
    var maxJ = Math.min(k, nlen - 1);
    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i];
      var b = num.words[j];
      var r = a * b;

      var lo = r & 0x3ffffff;
      carry += (r / 0x4000000) | 0;
      lo += rword;
      rword = lo & 0x3ffffff;
      carry += lo >>> 26;
    }
    this.words[k] = rword;
    this.words[k + 1] += carry;
    carry = 0;
  }

  // Propagate overflows
  var carry = 0;
  for (var i = 1; i < this.length; i++) {
    var w = this.words[i] + carry;
    this.words[i] = w & 0x3ffffff;
    carry = w >>> 26;
  }

  return this.strip();
};

// `this` * `this`
BN.prototype.sqr = function sqr() {
  return this.mul(this);
};

// `this` * `this` in-place
BN.prototype.isqr = function isqr() {
  return this.mul(this);
};

// Shift-left in-place
BN.prototype.ishln = function ishln(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;
  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

  var o = this.clone();
  if (r !== 0) {
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var newCarry = this.words[i] & carryMask;
      var c = (this.words[i] - newCarry) << r;
      this.words[i] = c | carry;
      carry = newCarry >>> (26 - r);
    }
    if (carry) {
      this.words[i] = carry;
      this.length++;
    }
  }

  if (s !== 0) {
    for (var i = this.length - 1; i >= 0; i--)
      this.words[i + s] = this.words[i];
    for (var i = 0; i < s; i++)
      this.words[i] = 0;
    this.length += s;
  }

  return this.strip();
};

// Shift-right in-place
// NOTE: `hint` is a lowest bit before trailing zeroes
// NOTE: if `extended` is true - { lo: ..., hi: } object will be returned
BN.prototype.ishrn = function ishrn(bits, hint, extended) {
  assert(typeof bits === 'number' && bits >= 0);
  if (hint)
    hint = (hint - (hint % 26)) / 26;
  else
    hint = 0;

  var r = bits % 26;
  var s = Math.min((bits - r) / 26, this.length);
  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  var maskedWords = extended;

  hint -= s;
  hint = Math.max(0, hint);

  // Extended mode, copy masked part
  if (maskedWords) {
    for (var i = 0; i < s; i++)
      maskedWords.words[i] = this.words[i];
    maskedWords.length = s;
  }

  if (s === 0) {
    // No-op, we should not move anything at all
  } else if (this.length > s) {
    this.length -= s;
    for (var i = 0; i < this.length; i++)
      this.words[i] = this.words[i + s];
  } else {
    this.words[0] = 0;
    this.length = 1;
  }

  var carry = 0;
  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= hint); i--) {
    var word = this.words[i];
    this.words[i] = (carry << (26 - r)) | (word >>> r);
    carry = word & mask;
  }

  // Push carried bits as a mask
  if (maskedWords && carry !== 0)
    maskedWords.words[maskedWords.length++] = carry;

  if (this.length === 0) {
    this.words[0] = 0;
    this.length = 1;
  }

  this.strip();
  if (extended)
    return { hi: this, lo: maskedWords };

  return this;
};

// Shift-left
BN.prototype.shln = function shln(bits) {
  return this.clone().ishln(bits);
};

// Shift-right
BN.prototype.shrn = function shrn(bits) {
  return this.clone().ishrn(bits);
};

// Test if n bit is set
BN.prototype.testn = function testn(bit) {
  assert(typeof bit === 'number' && bit >= 0);
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    return false;
  }

  // Check bit and return
  var w = this.words[s];

  return !!(w & q);
};

// Return only lowers bits of number (in-place)
BN.prototype.imaskn = function imaskn(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;

  assert(!this.sign, 'imaskn works only with positive numbers');

  if (r !== 0)
    s++;
  this.length = Math.min(s, this.length);

  if (r !== 0) {
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    this.words[this.length - 1] &= mask;
  }

  return this.strip();
};

// Return only lowers bits of number
BN.prototype.maskn = function maskn(bits) {
  return this.clone().imaskn(bits);
};

// Add plain number `num` to `this`
BN.prototype.iaddn = function iaddn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.isubn(-num);

  // Possible sign change
  if (this.sign) {
    if (this.length === 1 && this.words[0] < num) {
      this.words[0] = num - this.words[0];
      this.sign = false;
      return this;
    }

    this.sign = false;
    this.isubn(num);
    this.sign = true;
    return this;
  }
  this.words[0] += num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    this.words[i] -= 0x4000000;
    if (i === this.length - 1)
      this.words[i + 1] = 1;
    else
      this.words[i + 1]++;
  }
  this.length = Math.max(this.length, i + 1);

  return this;
};

// Subtract plain number `num` from `this`
BN.prototype.isubn = function isubn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.iaddn(-num);

  if (this.sign) {
    this.sign = false;
    this.iaddn(num);
    this.sign = true;
    return this;
  }

  this.words[0] -= num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    this.words[i] += 0x4000000;
    this.words[i + 1] -= 1;
  }

  return this.strip();
};

BN.prototype.addn = function addn(num) {
  return this.clone().iaddn(num);
};

BN.prototype.subn = function subn(num) {
  return this.clone().isubn(num);
};

BN.prototype.iabs = function iabs() {
  this.sign = false;

  return this
};

BN.prototype.abs = function abs() {
  return this.clone().iabs();
};

BN.prototype._wordDiv = function _wordDiv(num, mode) {
  var shift = this.length - num.length;

  var a = this.clone();
  var b = num;

  var q = mode !== 'mod' && new BN(0);
  var sign = false;

  // Approximate quotient at each step
  while (a.length > b.length) {
    // NOTE: a.length is always >= 2, because of the condition .div()
    var hi = a.words[a.length - 1] * 0x4000000 + a.words[a.length - 2];
    var sq = (hi / b.words[b.length - 1]);
    var sqhi = (sq / 0x4000000) | 0;
    var sqlo = sq & 0x3ffffff;
    sq = new BN(null);
    sq.words = [ sqlo, sqhi ];
    sq.length = 2;

    // Collect quotient
    var shift = (a.length - b.length - 1) * 26;
    if (q) {
      var t = sq.shln(shift);
      if (a.sign)
        q.isub(t);
      else
        q.iadd(t);
    }

    sq = sq.mul(b).ishln(shift);
    if (a.sign)
      a.iadd(sq)
    else
      a.isub(sq);
  }
  // At this point a.length <= b.length
  while (a.ucmp(b) >= 0) {
    // NOTE: a.length is always >= 2, because of the condition above
    var hi = a.words[a.length - 1];
    var sq = new BN((hi / b.words[b.length - 1]) | 0);
    var shift = (a.length - b.length) * 26;

    if (q) {
      var t = sq.shln(shift);
      if (a.sign)
        q.isub(t);
      else
        q.iadd(t);
    }

    sq = sq.mul(b).ishln(shift);

    if (a.sign)
      a.iadd(sq);
    else
      a.isub(sq);
  }

  if (a.sign) {
    if (q)
      q.isubn(1);
    a.iadd(b);
  }
  return { div: q ? q : null, mod: a };
};

BN.prototype.divmod = function divmod(num, mode) {
  assert(num.cmpn(0) !== 0);

  if (this.sign && !num.sign) {
    var res = this.neg().divmod(num, mode);
    var div;
    var mod;
    if (mode !== 'mod')
      div = res.div.neg();
    if (mode !== 'div')
      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
    return {
      div: div,
      mod: mod
    };
  } else if (!this.sign && num.sign) {
    var res = this.divmod(num.neg(), mode);
    var div;
    if (mode !== 'mod')
      div = res.div.neg();
    return { div: div, mod: res.mod };
  } else if (this.sign && num.sign) {
    return this.neg().divmod(num.neg(), mode);
  }

  // Both numbers are positive at this point

  // Strip both numbers to approximate shift value
  if (num.length > this.length || this.cmp(num) < 0)
    return { div: new BN(0), mod: this };

  // Very short reduction
  if (num.length === 1) {
    if (mode === 'div')
      return { div: this.divn(num.words[0]), mod: null };
    else if (mode === 'mod')
      return { div: null, mod: new BN(this.modn(num.words[0])) };
    return {
      div: this.divn(num.words[0]),
      mod: new BN(this.modn(num.words[0]))
    };
  }

  return this._wordDiv(num, mode);
};

// Find `this` / `num`
BN.prototype.div = function div(num) {
  return this.divmod(num, 'div').div;
};

// Find `this` % `num`
BN.prototype.mod = function mod(num) {
  return this.divmod(num, 'mod').mod;
};

// Find Round(`this` / `num`)
BN.prototype.divRound = function divRound(num) {
  var dm = this.divmod(num);

  // Fast case - exact division
  if (dm.mod.cmpn(0) === 0)
    return dm.div;

  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

  var half = num.shrn(1);
  var r2 = num.andln(1);
  var cmp = mod.cmp(half);

  // Round down
  if (cmp < 0 || r2 === 1 && cmp === 0)
    return dm.div;

  // Round up
  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
};

BN.prototype.modn = function modn(num) {
  assert(num <= 0x3ffffff);
  var p = (1 << 26) % num;

  var acc = 0;
  for (var i = this.length - 1; i >= 0; i--)
    acc = (p * acc + this.words[i]) % num;

  return acc;
};

// In-place division by number
BN.prototype.idivn = function idivn(num) {
  assert(num <= 0x3ffffff);

  var carry = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var w = this.words[i] + carry * 0x4000000;
    this.words[i] = (w / num) | 0;
    carry = w % num;
  }

  return this.strip();
};

BN.prototype.divn = function divn(num) {
  return this.clone().idivn(num);
};

BN.prototype._egcd = function _egcd(x1, p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var a = this;
  var b = p.clone();

  if (a.sign)
    a = a.mod(p);
  else
    a = a.clone();

  var x2 = new BN(0);
  while (b.isEven())
    b.ishrn(1);
  var delta = b.clone();
  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    while (a.isEven()) {
      a.ishrn(1);
      if (x1.isEven())
        x1.ishrn(1);
      else
        x1.iadd(delta).ishrn(1);
    }
    while (b.isEven()) {
      b.ishrn(1);
      if (x2.isEven())
        x2.ishrn(1);
      else
        x2.iadd(delta).ishrn(1);
    }
    if (a.cmp(b) >= 0) {
      a.isub(b);
      x1.isub(x2);
    } else {
      b.isub(a);
      x2.isub(x1);
    }
  }
  if (a.cmpn(1) === 0)
    return x1;
  else
    return x2;
};

BN.prototype.gcd = function gcd(num) {
  if (this.cmpn(0) === 0)
    return num.clone();
  if (num.cmpn(0) === 0)
    return this.clone();

  var a = this.clone();
  var b = num.clone();
  a.sign = false;
  b.sign = false;

  // Remove common factor of two
  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    a.ishrn(1);
    b.ishrn(1);
  }

  while (a.isEven())
    a.ishrn(1);

  do {
    while (b.isEven())
      b.ishrn(1);

    // Swap `a` and `b` to make `a` always bigger than `b`
    if (a.cmp(b) < 0) {
      var t = a;
      a = b;
      b = t;
    }
    a.isub(a.div(b).mul(b));
  } while (a.cmpn(0) !== 0 && b.cmpn(0) !== 0);
  if (a.cmpn(0) === 0)
    return b.ishln(shift);
  else
    return a.ishln(shift);
};

// Invert number in the field F(num)
BN.prototype.invm = function invm(num) {
  return this._egcd(new BN(1), num).mod(num);
};

BN.prototype.isEven = function isEven(num) {
  return (this.words[0] & 1) === 0;
};

BN.prototype.isOdd = function isOdd(num) {
  return (this.words[0] & 1) === 1;
};

// And first word and num
BN.prototype.andln = function andln(num) {
  return this.words[0] & num;
};

// Increment at the bit position in-line
BN.prototype.bincn = function bincn(bit) {
  assert(typeof bit === 'number');
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    for (var i = this.length; i < s + 1; i++)
      this.words[i] = 0;
    this.words[s] |= q;
    this.length = s + 1;
    return this;
  }

  // Add bit and propagate, if needed
  var carry = q;
  for (var i = s; carry !== 0 && i < this.length; i++) {
    var w = this.words[i];
    w += carry;
    carry = w >>> 26;
    w &= 0x3ffffff;
    this.words[i] = w;
  }
  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }
  return this;
};

BN.prototype.cmpn = function cmpn(num) {
  var sign = num < 0;
  if (sign)
    num = -num;

  if (this.sign && !sign)
    return -1;
  else if (!this.sign && sign)
    return 1;

  num &= 0x3ffffff;
  this.strip();

  var res;
  if (this.length > 1) {
    res = 1;
  } else {
    var w = this.words[0];
    res = w === num ? 0 : w < num ? -1 : 1;
  }
  if (this.sign)
    res = -res;
  return res;
};

// Compare two numbers and return:
// 1 - if `this` > `num`
// 0 - if `this` == `num`
// -1 - if `this` < `num`
BN.prototype.cmp = function cmp(num) {
  if (this.sign && !num.sign)
    return -1;
  else if (!this.sign && num.sign)
    return 1;

  var res = this.ucmp(num);
  if (this.sign)
    return -res;
  else
    return res;
};

// Unsigned comparison
BN.prototype.ucmp = function ucmp(num) {
  // At this point both numbers have the same sign
  if (this.length > num.length)
    return 1;
  else if (this.length < num.length)
    return -1;

  var res = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var a = this.words[i];
    var b = num.words[i];

    if (a === b)
      continue;
    if (a < b)
      res = -1;
    else if (a > b)
      res = 1;
    break;
  }
  return res;
};

//
// A reduce context, could be using montgomery or something better, depending
// on the `m` itself.
//
BN.red = function red(num) {
  return new Red(num);
};

BN.prototype.toRed = function toRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  assert(!this.sign, 'red works only with positives');
  return ctx.convertTo(this)._forceRed(ctx);
};

BN.prototype.fromRed = function fromRed() {
  assert(this.red, 'fromRed works only with numbers in reduction context');
  return this.red.convertFrom(this);
};

BN.prototype._forceRed = function _forceRed(ctx) {
  this.red = ctx;
  return this;
};

BN.prototype.forceRed = function forceRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  return this._forceRed(ctx);
};

BN.prototype.redAdd = function redAdd(num) {
  assert(this.red, 'redAdd works only with red numbers');
  return this.red.add(this, num);
};

BN.prototype.redIAdd = function redIAdd(num) {
  assert(this.red, 'redIAdd works only with red numbers');
  return this.red.iadd(this, num);
};

BN.prototype.redSub = function redSub(num) {
  assert(this.red, 'redSub works only with red numbers');
  return this.red.sub(this, num);
};

BN.prototype.redISub = function redISub(num) {
  assert(this.red, 'redISub works only with red numbers');
  return this.red.isub(this, num);
};

BN.prototype.redShl = function redShl(num) {
  assert(this.red, 'redShl works only with red numbers');
  return this.red.shl(this, num);
};

BN.prototype.redMul = function redMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.mul(this, num);
};

BN.prototype.redIMul = function redIMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.imul(this, num);
};

BN.prototype.redSqr = function redSqr() {
  assert(this.red, 'redSqr works only with red numbers');
  this.red._verify1(this);
  return this.red.sqr(this);
};

BN.prototype.redISqr = function redISqr() {
  assert(this.red, 'redISqr works only with red numbers');
  this.red._verify1(this);
  return this.red.isqr(this);
};

// Square root over p
BN.prototype.redSqrt = function redSqrt() {
  assert(this.red, 'redSqrt works only with red numbers');
  this.red._verify1(this);
  return this.red.sqrt(this);
};

BN.prototype.redInvm = function redInvm() {
  assert(this.red, 'redInvm works only with red numbers');
  this.red._verify1(this);
  return this.red.invm(this);
};

// Return negative clone of `this` % `red modulo`
BN.prototype.redNeg = function redNeg() {
  assert(this.red, 'redNeg works only with red numbers');
  this.red._verify1(this);
  return this.red.neg(this);
};

BN.prototype.redPow = function redPow(num) {
  assert(this.red && !num.red, 'redPow(normalNum)');
  this.red._verify1(this);
  return this.red.pow(this, num);
};

// Prime numbers with efficient reduction
var primes = {
  k256: null,
  p224: null,
  p192: null,
  p25519: null
};

// Pseudo-Mersenne prime
function MPrime(name, p) {
  // P = 2 ^ N - K
  this.name = name;
  this.p = new BN(p, 16);
  this.n = this.p.bitLength();
  this.k = new BN(1).ishln(this.n).isub(this.p);

  this.tmp = this._tmp();
}

MPrime.prototype._tmp = function _tmp() {
  var tmp = new BN(null);
  tmp.words = new Array(Math.ceil(this.n / 13));
  return tmp;
};

MPrime.prototype.ireduce = function ireduce(num) {
  // Assumes that `num` is less than `P^2`
  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  var r = num;
  var rlen;

  do {
    var pair = r.ishrn(this.n, 0, this.tmp);
    r = this.imulK(pair.hi);
    r = r.iadd(pair.lo);
    rlen = r.bitLength();
  } while (rlen > this.n);

  var cmp = rlen < this.n ? -1 : r.cmp(this.p);
  if (cmp === 0) {
    r.words[0] = 0;
    r.length = 1;
  } else if (cmp > 0) {
    r.isub(this.p);
  } else {
    r.strip();
  }

  return r;
};

MPrime.prototype.imulK = function imulK(num) {
  return num.imul(this.k);
};

function K256() {
  MPrime.call(
    this,
    'k256',
    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
}
inherits(K256, MPrime);

K256.prototype.imulK = function imulK(num) {
  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  num.words[num.length] = 0;
  num.words[num.length + 1] = 0;
  num.length += 2;
  for (var i = num.length - 3; i >= 0; i--) {
    var w = num.words[i];
    var hi = w * 0x40;
    var lo = w * 0x3d1;
    hi += (lo / 0x4000000) | 0;
    var uhi = (hi / 0x4000000) | 0;
    hi &= 0x3ffffff;
    lo &= 0x3ffffff;

    num.words[i + 2] += uhi;
    num.words[i + 1] += hi;
    num.words[i] = lo;
  }
  var w = num.words[num.length - 2];
  if (w >= 0x4000000) {
    num.words[num.length - 1] += w >>> 26;
    num.words[num.length - 2] = w & 0x3ffffff;
  }
  if (num.words[num.length - 1] === 0)
    num.length--;
  if (num.words[num.length - 1] === 0)
    num.length--;
  return num;
};

function P224() {
  MPrime.call(
    this,
    'p224',
    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
}
inherits(P224, MPrime);

function P192() {
  MPrime.call(
    this,
    'p192',
    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
}
inherits(P192, MPrime);

function P25519() {
  // 2 ^ 255 - 19
  MPrime.call(
    this,
    '25519',
    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
}
inherits(P25519, MPrime);

P25519.prototype.imulK = function imulK(num) {
  // K = 0x13
  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var hi = num.words[i] * 0x13 + carry;
    var lo = hi & 0x3ffffff;
    hi >>>= 26;

    num.words[i] = lo;
    carry = hi;
  }
  if (carry !== 0)
    num.words[num.length++] = carry;
  return num;
};

// Exported mostly for testing purposes, use plain name instead
BN._prime = function prime(name) {
  // Cached version of prime
  if (primes[name])
    return primes[name];

  var prime;
  if (name === 'k256')
    prime = new K256();
  else if (name === 'p224')
    prime = new P224();
  else if (name === 'p192')
    prime = new P192();
  else if (name === 'p25519')
    prime = new P25519();
  else
    throw new Error('Unknown prime ' + name);
  primes[name] = prime;

  return prime;
}

//
// Base reduction engine
//
function Red(m) {
  if (typeof m === 'string') {
    var prime = BN._prime(m);
    this.m = prime.p;
    this.prime = prime;
  } else {
    this.m = m;
    this.prime = null;
  }
}

Red.prototype._verify1 = function _verify1(a) {
  assert(!a.sign, 'red works only with positives');
  assert(a.red, 'red works only with red numbers');
};

Red.prototype._verify2 = function _verify2(a, b) {
  assert(!a.sign && !b.sign, 'red works only with positives');
  assert(a.red && a.red === b.red,
         'red works only with red numbers');
};

Red.prototype.imod = function imod(a) {
  if (this.prime)
    return this.prime.ireduce(a)._forceRed(this);
  return a.mod(this.m)._forceRed(this);
};

Red.prototype.neg = function neg(a) {
  var r = a.clone();
  r.sign = !r.sign;
  return r.iadd(this.m)._forceRed(this);
};

Red.prototype.add = function add(a, b) {
  this._verify2(a, b);

  var res = a.add(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res._forceRed(this);
};

Red.prototype.iadd = function iadd(a, b) {
  this._verify2(a, b);

  var res = a.iadd(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res;
};

Red.prototype.sub = function sub(a, b) {
  this._verify2(a, b);

  var res = a.sub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res._forceRed(this);
};

Red.prototype.isub = function isub(a, b) {
  this._verify2(a, b);

  var res = a.isub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res;
};

Red.prototype.shl = function shl(a, num) {
  this._verify1(a);
  return this.imod(a.shln(num));
};

Red.prototype.imul = function imul(a, b) {
  this._verify2(a, b);
  return this.imod(a.imul(b));
};

Red.prototype.mul = function mul(a, b) {
  this._verify2(a, b);
  return this.imod(a.mul(b));
};

Red.prototype.isqr = function isqr(a) {
  return this.imul(a, a);
};

Red.prototype.sqr = function sqr(a) {
  return this.mul(a, a);
};

Red.prototype.sqrt = function sqrt(a) {
  if (a.cmpn(0) === 0)
    return a.clone();

  var mod3 = this.m.andln(3);
  assert(mod3 % 2 === 1);

  // Fast case
  if (mod3 === 3) {
    var pow = this.m.add(new BN(1)).ishrn(2);
    var r = this.pow(a, pow);
    return r;
  }

  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  //
  // Find Q and S, that Q * 2 ^ S = (P - 1)
  var q = this.m.subn(1);
  var s = 0;
  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
    s++;
    q.ishrn(1);
  }
  assert(q.cmpn(0) !== 0);

  var one = new BN(1).toRed(this);
  var nOne = one.redNeg();

  // Find quadratic non-residue
  // NOTE: Max is such because of generalized Riemann hypothesis.
  var lpow = this.m.subn(1).ishrn(1);
  var z = this.m.bitLength();
  z = new BN(2 * z * z).toRed(this);
  while (this.pow(z, lpow).cmp(nOne) !== 0)
    z.redIAdd(nOne);

  var c = this.pow(z, q);
  var r = this.pow(a, q.addn(1).ishrn(1));
  var t = this.pow(a, q);
  var m = s;
  while (t.cmp(one) !== 0) {
    var tmp = t;
    for (var i = 0; tmp.cmp(one) !== 0; i++)
      tmp = tmp.redSqr();
    assert(i < m);
    var b = this.pow(c, new BN(1).ishln(m - i - 1));

    r = r.redMul(b);
    c = b.redSqr();
    t = t.redMul(c);
    m = i;
  }

  return r;
};

Red.prototype.invm = function invm(a) {
  var inv = a._egcd(new BN(1), this.m);
  if (inv.sign) {
    inv.sign = false;
    return this.imod(inv).redNeg();
  } else {
    return this.imod(inv);
  }
};

Red.prototype.pow = function pow(a, num) {
  var w = [];
  var q = num.clone();
  while (q.cmpn(0) !== 0) {
    w.push(q.andln(1));
    q.ishrn(1);
  }

  // Skip leading zeroes
  var res = a;
  for (var i = 0; i < w.length; i++, res = this.sqr(res))
    if (w[i] !== 0)
      break;

  if (++i < w.length) {
    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
      if (w[i] === 0)
        continue;
      res = this.mul(res, q);
    }
  }

  return res;
};

Red.prototype.convertTo = function convertTo(num) {
  return num.clone();
};

Red.prototype.convertFrom = function convertFrom(num) {
  var res = num.clone();
  res.red = null;
  return res;
};

//
// Montgomery method engine
//

BN.mont = function mont(num) {
  return new Mont(num);
};

function Mont(m) {
  Red.call(this, m);

  this.shift = this.m.bitLength();
  if (this.shift % 26 !== 0)
    this.shift += 26 - (this.shift % 26);
  this.r = new BN(1).ishln(this.shift);
  this.r2 = this.imod(this.r.sqr());
  this.rinv = this.r.invm(this.m);

  // TODO(indutny): simplify it
  this.minv = this.rinv.mul(this.r)
                       .sub(new BN(1))
                       .div(this.m)
                       .neg()
                       .mod(this.r);
}
inherits(Mont, Red);

Mont.prototype.convertTo = function convertTo(num) {
  return this.imod(num.shln(this.shift));
};

Mont.prototype.convertFrom = function convertFrom(num) {
  var r = this.imod(num.mul(this.rinv));
  r.red = null;
  return r;
};

Mont.prototype.imul = function imul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
    a.words[0] = 0;
    a.length = 1;
    return a;
  }

  var t = a.imul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.mul = function mul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
    return new BN(0)._forceRed(this);

  var t = a.mul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.invm = function invm(a) {
  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  var res = this.imod(a.invm(this.m).mul(this.r2));
  return res._forceRed(this);
};

},{}],36:[function(require,module,exports){
var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');

},{"../package.json":55,"./elliptic/curve":39,"./elliptic/curves":42,"./elliptic/ec":43,"./elliptic/hmac-drbg":46,"./elliptic/utils":47,"brorand":48}],37:[function(require,module,exports){
var assert = require('assert');
var bn = require('bn.js');
var elliptic = require('../../elliptic');

var getNAF = elliptic.utils.getNAF;
var getJSF = elliptic.utils.getJSF;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new bn(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

  // Useful for many curves
  this.zero = new bn(0).toRed(this.red);
  this.one = new bn(1).toRed(this.red);
  this.two = new bn(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new bn(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate(point) {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;
  return acc.toP();
};

BaseCurve.BasePoint = BasePoint;

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BasePoint.prototype.precompute = function precompute(power, _beta) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":36,"assert":174,"bn.js":33}],38:[function(require,module,exports){
var assert = require('assert');
var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var getNAF = elliptic.utils.getNAF;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = conf.a != 1;
  this.mOneA = this.twisted && conf.a == -1;
  this.extended = this.mOneA;

  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);
  this.c = new bn(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new bn(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = conf.c == 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y = rhs.redMul(lhs.redInvm()).redSqrt();
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y, curve.one);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = z ? new bn(z, 16) : this.curve.one;
    this.t = t && new bn(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#doubling-dbl-2008-bbjlp
  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      var nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      var ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      var nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      var nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      var ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      var nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    var nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    var ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    var nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#addition-add-2008-bbjlp
  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    var ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    var nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    var ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    var nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this.precomputed && this.precomputed.doubles)
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":36,"../curve":39,"assert":174,"bn.js":33,"inherits":56}],39:[function(require,module,exports){
var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":37,"./edwards":38,"./mont":40,"./short":41}],40:[function(require,module,exports){
var assert = require('assert');
var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var getNAF = elliptic.utils.getNAF;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.i4 = new bn(4).toRed(this.red).redInvm();
  this.two = new bn(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
}

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new bn(x, 16);
    this.z = new bn(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add(p) {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":36,"../curve":39,"assert":174,"bn.js":33,"inherits":56}],41:[function(require,module,exports){
var assert = require('assert');
var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var getNAF = elliptic.utils.getNAF;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new bn(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new bn(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new bn(vec.a, 16),
        b: new bn(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : bn.mont(num);
  var tinv = new bn(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var one = new bn(1).toRed(red);

  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new bn(1);
  var y1 = new bn(0);
  var x2 = new bn(0);
  var y2 = new bn(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    var r = v.sub(q.mul(u));
    var x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.sign) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.sign) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.sign) {
      split.k1.sign = !split.k1.sign;
      p = p.neg(true);
    }
    if (split.k2.sign) {
      split.k2.sign = !split.k2.sign;
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    function endoMul(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    }
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16 ,2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new bn(k, 16);

  if (this.precomputed && this.precomputed.doubles)
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    function negate(p) {
      return p.neg();
    }
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new bn(0);
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = new bn(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  // Z = 1
  if (this.zOne) {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    var nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    var nz = this.y.redAdd(this.y);
  } else {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    var nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    var ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    var nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  // Z = 1
  if (this.zOne) {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    var nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    var nz = this.y.redAdd(this.y);
  } else {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    var nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    var nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    var ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new bn(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":36,"../curve":39,"assert":174,"bn.js":33,"inherits":56}],42:[function(require,module,exports){
var curves = exports;

var assert = require('assert');
var hash = require('hash.js');
var bn = require('bn.js');
var elliptic = require('../elliptic');

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    {
      'doubles': {
        'step': 4,
        'points': [
          [
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
          ],
          [
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
          ],
          [
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
          ],
          [
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
          ],
          [
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
          ],
          [
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
          ],
          [
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
          ],
          [
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
          ],
          [
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
          ],
          [
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
          ],
          [
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
          ],
          [
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
          ],
          [
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
          ],
          [
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
          ],
          [
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
          ],
          [
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
          ],
          [
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
          ],
          [
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
          ],
          [
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
          ],
          [
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
          ],
          [
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
          ],
          [
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
          ],
          [
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
          ],
          [
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
          ],
          [
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
          ],
          [
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
          ],
          [
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
          ],
          [
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
          ],
          [
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
          ],
          [
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
          ],
          [
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
          ],
          [
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
          ],
          [
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
          ],
          [
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
          ],
          [
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
          ],
          [
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
          ],
          [
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
          ],
          [
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
          ],
          [
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
          ],
          [
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
          ],
          [
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
          ],
          [
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
          ],
          [
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
          ],
          [
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
          ],
          [
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
          ],
          [
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
          ],
          [
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
          ],
          [
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
          ],
          [
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
          ],
          [
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
          ],
          [
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
          ],
          [
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
          ],
          [
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
          ],
          [
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
          ],
          [
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
          ],
          [
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
          ],
          [
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
          ],
          [
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
          ],
          [
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
          ],
          [
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
          ],
          [
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
          ],
          [
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
          ],
          [
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
          ],
          [
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
          ],
          [
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
          ]
        ]
      },
      'naf': {
        'wnd': 7,
        'points': [
          [
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
          ],
          [
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
          ],
          [
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
          ],
          [
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
          ],
          [
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
          ],
          [
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
          ],
          [
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
          ],
          [
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
          ],
          [
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
          ],
          [
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
          ],
          [
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
          ],
          [
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
          ],
          [
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
          ],
          [
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
          ],
          [
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
          ],
          [
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
          ],
          [
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
          ],
          [
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
          ],
          [
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
          ],
          [
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
          ],
          [
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
          ],
          [
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
          ],
          [
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
          ],
          [
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
          ],
          [
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
          ],
          [
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
          ],
          [
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
          ],
          [
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
          ],
          [
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
          ],
          [
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
          ],
          [
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
          ],
          [
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
          ],
          [
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
          ],
          [
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
          ],
          [
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
          ],
          [
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
          ],
          [
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
          ],
          [
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
          ],
          [
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
          ],
          [
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
          ],
          [
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
          ],
          [
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
          ],
          [
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
          ],
          [
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
          ],
          [
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
          ],
          [
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
          ],
          [
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
          ],
          [
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
          ],
          [
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
          ],
          [
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
          ],
          [
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
          ],
          [
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
          ],
          [
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
          ],
          [
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
          ],
          [
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
          ],
          [
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
          ],
          [
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
          ],
          [
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
          ],
          [
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
          ],
          [
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
          ],
          [
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
          ],
          [
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
          ],
          [
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
          ],
          [
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
          ],
          [
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
          ],
          [
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
          ],
          [
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
          ],
          [
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
          ],
          [
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
          ],
          [
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
          ],
          [
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
          ],
          [
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
          ],
          [
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
          ],
          [
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
          ],
          [
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
          ],
          [
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
          ],
          [
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
          ],
          [
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
          ],
          [
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
          ],
          [
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
          ],
          [
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
          ],
          [
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
          ],
          [
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
          ],
          [
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
          ],
          [
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
          ],
          [
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
          ],
          [
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
          ],
          [
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
          ],
          [
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
          ],
          [
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
          ],
          [
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
          ],
          [
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
          ],
          [
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
          ],
          [
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
          ],
          [
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
          ],
          [
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
          ],
          [
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
          ],
          [
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
          ],
          [
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
          ],
          [
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
          ],
          [
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
          ],
          [
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
          ],
          [
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
          ],
          [
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
          ],
          [
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
          ],
          [
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
          ],
          [
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
          ],
          [
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
          ],
          [
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
          ],
          [
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
          ],
          [
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
          ],
          [
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
          ],
          [
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
          ],
          [
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
          ],
          [
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
          ],
          [
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
          ],
          [
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
          ],
          [
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
          ],
          [
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
          ],
          [
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
          ],
          [
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
          ],
          [
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
          ],
          [
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
          ],
          [
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
          ],
          [
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
          ],
          [
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
          ],
          [
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
          ]
        ]
      }
    }
  ]
});

},{"../elliptic":36,"assert":174,"bn.js":33,"hash.js":49}],43:[function(require,module,exports){
var assert = require('assert');
var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.shrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(priv, pub) {
  return new KeyPair(this, priv, pub);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new bn(2));
  do {
    var priv = new bn(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyPair(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.shrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, options) {
  key = this.keyPair(key, 'hex');
  msg = this._truncateToN(new bn(msg, 16));
  if (!options)
    options = {};

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray();
  for (var i = bkey.length; i < 21; i++)
    bkey.unshift(0);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray();
  for (var i = nonce.length; i < bytes; i++)
    nonce.unshift(0);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new bn(1));
  do {
    var k = new bn(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var r = kp.getX().mod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0)
      s = this.n.sub(s);

    return new Signature(r, s);
  } while (true);
};

EC.prototype.verify = function verify(msg, signature, key) {
  msg = this._truncateToN(new bn(msg, 16));
  key = this.keyPair(key, 'hex');
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).mod(this.n);
  var u2 = sinv.mul(r).mod(this.n);

  var p = this.g.mulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  return p.getX().mod(this.n).cmp(r) === 0;
};

},{"../../elliptic":36,"./key":44,"./signature":45,"assert":174,"bn.js":33}],44:[function(require,module,exports){
var assert = require('assert');
var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function KeyPair(ec, priv, pub) {
  if (priv instanceof KeyPair)
    return priv;
  if (pub instanceof KeyPair)
    return pub;

  if (!priv) {
    priv = pub;
    pub = null;
  }
  if (priv !== null && typeof priv === 'object') {
    if (priv.x) {
      // KeyPair(public)
      pub = priv;
      priv = null;
    } else if (priv.priv || priv.pub) {
      // KeyPair({ priv: ..., pub: ... })
      pub = priv.pub;
      priv = priv.priv;
    }
  }

  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(public, 'hex')
  if (this._importPublicHex(priv, pub))
    return;

  if (pub === 'hex')
    pub = null;

  // KeyPair(priv, pub)
  if (priv)
    this._importPrivate(priv);
  if (pub)
    this._importPublic(pub);
}
module.exports = KeyPair;

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!enc)
    return this.pub;

  var len = this.ec.curve.p.byteLength();
  var x = this.pub.getX().toArray();

  for (var i = x.length; i < len; i++)
    x.unshift(0);

  if (compact) {
    var res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);
  } else {
    var y = this.pub.getY().toArray();
    for (var i = y.length; i < len; i++)
      y.unshift(0);
    var res = [ 0x04 ].concat(x, y);
  }
  return utils.encode(res, enc);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key) {
  this.priv = new bn(key, 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.mod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key) {
  this.pub = this.ec.curve.point(key.x, key.y);
};

KeyPair.prototype._importPublicHex = function _importPublic(key, enc) {
  key = utils.toArray(key, enc);
  var len = this.ec.curve.p.byteLength();
  if (key[0] === 0x04 && key.length - 1 === 2 * len) {
    this.pub = this.ec.curve.point(
      key.slice(1, 1 + len),
      key.slice(1 + len, 1 + 2 * len));
  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {
    this.pub = this.ec.curve.pointFromX(key[0] === 0x03,
                                        key.slice(1, 1 +len));
  } else {
    return false;
  }

  return true;
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg) {
  return this.ec.sign(msg, this);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":36,"assert":174,"bn.js":33}],45:[function(require,module,exports){
var assert = require('assert');
var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function Signature(r, s) {
  if (r instanceof Signature)
    return r;

  if (this._importDER(r, s))
    return;

  assert(r && s, 'Signature without r or s');
  this.r = new bn(r, 16);
  this.s = new bn(s, 16);
}
module.exports = Signature;

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
    return false;
  var total = data[1];
  if (1 + total > data.length)
    return false;
  var rlen = data[3];
  // Short length notation
  if (rlen >= 0x80)
    return false;
  if (4 + rlen + 2 >= data.length)
    return false;
  if (data[4 + rlen] !== 0x02)
    return false;
  var slen = data[5 + rlen];
  // Short length notation
  if (slen >= 0x80)
    return false;
  if (4 + rlen + 2 + slen > data.length)
    return false;

  this.r = new bn(data.slice(4, 4 + rlen));
  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));

  return true;
};

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  var total = r.length + s.length + 4;
  var res = [ 0x30, total, 0x02, r.length ];
  res = res.concat(r, [ 0x02, s.length ], s);
  return utils.encode(res, enc);
};

},{"../../elliptic":36,"assert":174,"bn.js":33}],46:[function(require,module,exports){
var assert = require('assert');

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":36,"assert":174,"hash.js":49}],47:[function(require,module,exports){
var assert = require('assert');
var bn = require('bn.js');

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.ishrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.ishrn(1);
    k2.ishrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

},{"assert":174,"bn.js":33}],48:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof window === 'object') {
  if (window.crypto && window.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker
  try {
    var crypto = require('cry' + 'pto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{}],49:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":50,"./hash/hmac":51,"./hash/ripemd":52,"./hash/sha":53,"./hash/utils":54}],50:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.endian = 'big';
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this.blockSize / 8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % (this.blockSize / 8);
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg.slice(0, msg.length - r), this.endian);
    for (var i = 0; i < msg.length; i += this.blockSize / 32)
      this._update(msg.slice(i, i + this.blockSize / 32));
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this.blockSize / 8;
  var k = bytes - ((len + 8) % bytes);
  var res = new Array(k + 8);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
  }

  return res;
}

},{"../hash":49}],51:[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  var okey = key.slice();
  for (var i = 0; i < key.length; i++) {
    key[i] ^= 0x36;
    okey[i] ^= 0x5c;
  }

  this.hash = {
    inner: new this.Hash().update(key),
    outer: new this.Hash().update(okey)
  };
};

Hmac.prototype.update = function update(msg, enc) {
  this.hash.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.hash.outer.update(this.hash.inner.digest());
  return this.hash.outer.digest(enc);
};

},{"../hash":49}],52:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;

RIPEMD160.prototype._update = function update(msg) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j]], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j]], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":49}],53:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;

SHA256.prototype._update = function _update(msg) {
  var W = new Array(64);
  for (var i = 0; i < 16; i++)
    W[i] = msg[i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

},{"../hash":49}],54:[function(require,module,exports){
var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 != 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little') {
      w = (w >>> 24) |
          ((w >>> 8) & 0xff00) |
          ((w << 8) & 0xff0000) |
          ((w & 0xff) << 24);
      if (w < 0)
        w += 0x100000000;
    }
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, endian) {
  assert(msg.length % 4 === 0);
  var res = new Array(msg.length / 4);
  for (var i = 0, k = 0; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    if (w < 0)
      w += 0x100000000;
    res[i] = w;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  var r = (a + b) & 0xffffffff;
  if (r < 0)
    r += 0x100000000;
  return r;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  var r = (a + b + c) & 0xffffffff;
  if (r < 0)
    r += 0x100000000;
  return r;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  var r = (a + b + c + d) & 0xffffffff;
  if (r < 0)
    r += 0x100000000;
  return r;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  var r = (a + b + c + d + e) & 0xffffffff;
  if (r < 0)
    r += 0x100000000;
  return r;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

// Shamelessly copied from browserify
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  utils.inherits = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  utils.inherits = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],55:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "0.15.15",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "scripts": {
    "test": "mocha --reporter=spec test/*-test.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "browserify": "^3.44.2",
    "mocha": "^1.18.2",
    "uglify-js": "^2.4.13"
  },
  "dependencies": {
    "bn.js": "^0.15.0",
    "brorand": "^1.0.1",
    "hash.js": "^0.2.0",
    "inherits": "^2.0.1"
  },
  "gitHead": "4bf1f50607285bff4ae19521217dbc801c3d36af",
  "_id": "elliptic@0.15.15",
  "_shasum": "63269184a856d6e00871e84f37a8401ff84e4aea",
  "_from": "elliptic@^0.15.14",
  "_npmVersion": "2.1.6",
  "_nodeVersion": "0.10.33",
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "dist": {
    "shasum": "63269184a856d6e00871e84f37a8401ff84e4aea",
    "tarball": "http://registry.npmjs.org/elliptic/-/elliptic-0.15.15.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-0.15.15.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],56:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"dup":28}],57:[function(require,module,exports){
(function (Buffer){

module.exports = function evp(crypto, password, salt, keyLen) {
  keyLen = keyLen/8;
  var ki = 0;
  var ii = 0;
  var key = new Buffer(keyLen);
  var addmd = 0;
  var md, md_buf;
  var i;
  while (true) {
    md = crypto.createHash('md5');
    if(addmd++ > 0) {
       md.update(md_buf);
    }
    md.update(password);
    md.update(salt);
    md_buf = md.digest();
    i = 0;
    if(keyLen > 0) {
      while(true) {
        if(keyLen === 0) {
          break;
        }
        if(i === md_buf.length) {
          break;
        }
        key[ki++] = md_buf[i++];
        keyLen--;
       }
    }
   if(keyLen === 0) {
      break;
    }
  }
  for(i=0;i<md_buf.length;i++) {
    md_buf[i] = 0;
  }
  return key;
};
}).call(this,require("buffer").Buffer)
},{"buffer":176}],58:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],59:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js');
var rfc3280 = require('asn1.js-rfc3280');

var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  );
});
exports.RSAPrivateKey = RSAPrivateKey;

var RSAPublicKey = asn1.define('RSAPublicKey', function() {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  );
});
exports.RSAPublicKey = RSAPublicKey;

var PublicKey = rfc3280.SubjectPublicKeyInfo;
exports.PublicKey = PublicKey;
var ECPublicKey =  asn1.define('ECPublicKey', function() {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('curve').objid()
    ),
    this.key('subjectPrivateKey').bitstr()
  );
});
exports.ECPublicKey = ECPublicKey;
var ECPrivateWrap =  asn1.define('ECPrivateWrap', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('curve').objid()
    ),
    this.key('subjectPrivateKey').octstr()
  );
});
exports.ECPrivateWrap = ECPrivateWrap;

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(rfc3280.AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  );
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  );
});
var dsaParams = asn1.define('dsaParams', function() {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').seq().obj(
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int()
      )
  );
});
exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
var DSAPublicKey = asn1.define('DSAPublicKey', function() {
  this.seq().obj(
    this.key('algorithm').use(dsaParams),
    this.key('subjectPublicKey').bitstr()
  );
});
exports.DSAPublicKey = DSAPublicKey;
var DSAPrivateWrap =  asn1.define('DSAPrivateWrap', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('parameters').seq().obj(
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int()
      )
    ),
    this.key('subjectPrivateKey').octstr()
  );
});
exports.DSAPrivateWrap = DSAPrivateWrap;
var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  );
});
exports.DSAPrivateKey = DSAPrivateKey;

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  );
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function() {
  this.choice({
    namedCurve: this.objid()
  });
});

var ECPrivateKey2 = asn1.define('ECPrivateKey2', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('publicKey').seq().obj(
      this.key('key').bitstr()
    )
  );
});
exports.ECPrivateKey2 = ECPrivateKey2;

exports.signature = asn1.define('signature', function() {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  );
});
},{"asn1.js":63,"asn1.js-rfc3280":62}],60:[function(require,module,exports){
(function (Buffer){
var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
var startRegex = /^-----BEGIN (.*)-----\n/;
var evp = require('./EVP_BytesToKey');
module.exports = function (okey, password, crypto) {
  var key = okey.toString();
  var match = key.match(findProc);
  if (!match) {
    return okey;
  }
  var suite = 'aes' + match[1];
  var iv = new Buffer(match[2], 'hex');
  var cipherText = new Buffer(match[3].replace(/\n\r?/g, ''), 'base64');
  var cipherKey = evp(crypto, password, iv.slice(0,8), parseInt(match[1]));
  var out = [];
  var cipher = crypto.createDecipheriv(suite, cipherKey, iv);
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  var decrypted = Buffer.concat(out).toString('base64');
  var tag = key.match(startRegex)[1];
  return '-----BEGIN ' + tag + "-----\n" + wrap(decrypted) + "\n" + '-----END ' + tag + "-----\n";
};
// http://stackoverflow.com/a/7033705
function wrap(str) {
  var chunks = [];
  while (str) {
    if (str.length < 64) {
      chunks.push(str);
      break;
    }
    else {
      chunks.push(str.slice(0, 64));
      str = str.slice(64);
    }
  }
  return chunks.join("\n");
}
}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":57,"buffer":176}],61:[function(require,module,exports){
(function (Buffer){
var pemstrip = require('pemstrip');
var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
module.exports = parseKeys;

function parseKeys(buffer, crypto) {
  var password;
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase;
    buffer = buffer.key;
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer);
  }
  if (password) {
    buffer = fixProc(buffer, password, crypto);
  }
  var stripped = pemstrip.strip(buffer);
  var type = stripped.tag;
  var data = new Buffer(stripped.base64, 'base64');
  var subtype,ndata;
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
        case '1.2.840.10045.2.1':
          return {
            type: 'ec',
            data:  asn1.ECPublicKey.decode(data, 'der')
          };
        case '1.2.840.10040.4.1':
          ndata = asn1.DSAPublicKey.decode(data, 'der');
          ndata.algorithm.parameters.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
          return {
            type: 'dsa',
            data: ndata.algorithm.parameters
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der');
      data = decrypt(crypto, data, password);
      //falling through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
        case '1.2.840.10045.2.1':
          ndata =  asn1.ECPrivateWrap.decode(data, 'der');
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          };
        case '1.2.840.10040.4.1':
          ndata =  asn1.DSAPrivateWrap.decode(data, 'der');
          ndata.algorithm.parameters.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
          return {
            type: 'dsa',
            params: ndata.algorithm.parameters
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der');
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der');
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      };
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der');
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      };
    default: throw new Error('unknown key type ' +  type);
  }
}
parseKeys.signature = asn1.signature;
function decrypt(crypto, data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
  var iters = data.algorithm.decrypt.kde.kdeparams.iters;
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
  var iv = data.algorithm.decrypt.cipher.iv;
  var cipherText = data.subjectPrivateKey;
  var keylen = parseInt(algo.split('-')[1], 10)/8;
  var key = crypto.pbkdf2Sync(password, salt, iters, keylen);
  var cipher = crypto.createDecipheriv(algo, key, iv);
  var out = [];
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  return Buffer.concat(out);
}
}).call(this,require("buffer").Buffer)
},{"./aesid.json":58,"./asn1":59,"./fixProc":60,"buffer":176,"pemstrip":75}],62:[function(require,module,exports){
try {
  var asn1 = require('asn1.js');
} catch (e) {
  var asn1 = require('../..');
}

var CRLReason = asn1.define('CRLReason', function() {
  this.enum({
    0: 'unspecified',
    1: 'keyCompromise',
    2: 'CACompromise',
    3: 'affiliationChanged',
    4: 'superseded',
    5: 'cessationOfOperation',
    6: 'certificateHold',
    8: 'removeFromCRL',
    9: 'privilegeWithdrawn',
    10: 'AACompromise'
  });
});
exports.CRLReason = CRLReason;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional().any()
  );
});
exports.AlgorithmIdentifier = AlgorithmIdentifier;

var Certificate = asn1.define('Certificate', function() {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signature').bitstr()
  );
});
exports.Certificate = Certificate;

var TBSCertificate = asn1.define('TBSCertificate', function() {
  this.seq().obj(
    this.key('version').def('v1').explicit(0).use(Version),
    this.key('serialNumber').use(CertificateSerialNumber),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),

    // TODO(indutny): validate that version is v2 or v3
    this.key('issuerUniqueID').optional().explicit(1).use(UniqueIdentifier),
    this.key('subjectUniqueID').optional().explicit(2).use(UniqueIdentifier),

    // TODO(indutny): validate that version is v3
    this.key('extensions').optional().explicit(3).use(Extensions)
  );
});
exports.TBSCertificate = TBSCertificate;

var Version = asn1.define('Version', function() {
  this.int({
    0: 'v1',
    1: 'v2',
    2: 'v3'
  });
});
exports.Version = Version;

var CertificateSerialNumber = asn1.define('CertificateSerialNumber',
                                          function() {
  this.int();
});
exports.CertificateSerialNumber = CertificateSerialNumber;

var Validity = asn1.define('Validity', function() {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  );
});
exports.Validity = Validity;

var Time = asn1.define('Time', function() {
  this.choice({
    utcTime: this.utctime(),
    genTime: this.gentime()
  });
});
exports.Time = Time;

var UniqueIdentifier = asn1.define('UniqueIdentifier', function() {
  this.bitstr();
});
exports.UniqueIdentifier = UniqueIdentifier;

var SubjectPublicKeyInfo = asn1.define('SubjectPublicKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  );
});
exports.SubjectPublicKeyInfo = SubjectPublicKeyInfo;

var Extensions = asn1.define('Extensions', function() {
  this.seqof(Extension);
});
exports.Extensions = Extensions;

var Extension = asn1.define('Extension', function() {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  );
});
exports.Extension = Extension;

var Name = asn1.define('Name', function() {
  this.choice({
    rdn: this.use(RDNSequence)
  });
});
exports.Name = Name;

var RDNSequence = asn1.define('RDNSequence', function() {
  this.seqof(RelativeDistinguishedName);
});
exports.RDNSequence = RDNSequence;

var RelativeDistinguishedName = asn1.define('RelativeDistinguishedName',
                                            function() {
  this.setof(AttributeTypeAndValue);
});
exports.RelativeDistinguishedName = RelativeDistinguishedName;

var AttributeTypeAndValue = asn1.define('AttributeTypeAndValue', function() {
  this.seq().obj(
    this.key('type').use(AttributeType),
    this.key('value').use(AttributeValue)
  );
});
exports.AttributeTypeAndValue = AttributeTypeAndValue;

var AttributeType = asn1.define('AttributeType', function() {
  this.objid();
});
exports.AttributeType = AttributeType;

var AttributeValue = asn1.define('AttributeValue', function() {
  this.any();
});
exports.AttributeValue = AttributeValue;

},{"../..":61,"asn1.js":63}],63:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":64,"./asn1/base":66,"./asn1/constants":70,"./asn1/decoders":72,"./asn1/encoders":74,"bn.js":33}],64:[function(require,module,exports){
var asn1 = require('../asn1');
var util = require('util');
var vm = require('vm');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named = vm.runInThisContext('(function ' + this.name + '(entity) {\n' +
    '  this._initNamed(entity);\n' +
    '})');
  util.inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":63,"util":333,"vm":334}],65:[function(require,module,exports){
var assert = require('assert');
var util = require('util');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
util.inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":66,"assert":174,"buffer":176,"util":333}],66:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":65,"./node":67,"./reporter":68}],67:[function(require,module,exports){
var assert = require('assert');
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(key) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = key;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input));

  var result = state['default'];
  var present = true;

  var prevKey;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    present = this._peekTag(
      input,
      state.explicit !== null ? state.explicit :
          state.implicit !== null ? state.implicit :
              state.tag || 0
    );
    if (input.isError(present))
      return present;
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input);
    else
      result = this._decodeChoice(input);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      var fail = state.children.some(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input);
      });
      if (fail)
        return err;
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0]);
  else if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._decodeStr(input, tag);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1]);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag);
  else if (tag === 'null_')
    return this._decodeNull(input);
  else if (tag === 'bool')
    return this._decodeBool(input);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0]);
  else if (state.use !== null)
    return this._getUse(state.use, input._reporterState.obj)._decode(input);
  else
    return input.error('unknown tag: ' + tag);

  return null;
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;
  var present = true;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // For error reporting
  var prevKey;

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });

    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else
    throw new Error('Unsupported tag: ' + tag);
};

},{"../base":66,"assert":174}],68:[function(require,module,exports){
var util = require('util');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
util.inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  Error.captureStackTrace(this, ReporterError);

  return this;
};

},{"util":333}],69:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":70}],70:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":69}],71:[function(require,module,exports){
var util = require('util');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
util.inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.start();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  return buffer.cut(state);
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der');
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;

    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'ia5str') {
    return buffer.raw().toString();
  } else {
    return this.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values)
    result = values[result.join(' ')];

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return this.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  var res = 0;

  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  if (raw.length > 3)
    return new bignum(raw);

  while (!buffer.isEmpty()) {
    res <<= 8;
    var i = buffer.readUInt8();
    if (buffer.isError(i))
      return i;
    res |= i;
  }

  if (values)
    res = values[res] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num >= 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":63,"util":333}],72:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');

},{"./der":71}],73:[function(require,module,exports){
var util = require('util');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
util.inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'octstr')
    return this._createEncoderBuffer(str);
  else if (tag === 'bitstr')
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  else if (tag === 'ia5str')
    return this._createEncoderBuffer(str);
  return this.reporter.error('Encoding of string type: ' + tag +
                             ' unsupported');
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/\s+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num <= 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      date.getFullYear(),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      date.getFullYear() % 100,
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (bignum !== null && num instanceof bignum) {
    var numArray = num.toArray();
    if(num.sign === false && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":63,"buffer":176,"util":333}],74:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');

},{"./der":73}],75:[function(require,module,exports){
exports.strip = function strip(artifact) {
  artifact = artifact.toString()
  var startRegex = /^-----BEGIN (.*)-----\n/;
  var match = startRegex.exec(artifact);
  var tag = match[1];
  var endRegex = new RegExp("\n-----END " + tag + "-----(\n*)$");
  var base64 = artifact.slice(match[0].length).replace(endRegex, "").replace(/\n/g, "");
  return {tag: tag, base64: base64};
};

// http://stackoverflow.com/a/7033705
var wrap = function wrap(str, l) {
  var chunks = [];
  while (str) {
    if (str.length < l) {
      chunks.push(str);
      break;
    }
    else {
      chunks.push(str.substr(0, l));
      str = str.substr(l);
    }
  }
  return chunks.join("\n");
}

exports.assemble = function assemble(info) {
  var tag = info.tag;
  var base64 = info.base64;
  var startLine = "-----BEGIN " + tag + "-----";
  var endLine = "-----END " + tag + "-----";
  return startLine + "\n" + wrap(base64, 64) + "\n" + endLine + "\n";
}
},{}],76:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var parseKeys = require('parse-asn1');
var bn = require('bn.js');
var elliptic = require('elliptic');
var crt = require("browserify-rsa");
module.exports = sign;
function sign(hash, key, crypto) {
  var priv = parseKeys(key, crypto);
  if (priv.curve) {
    return ecSign(hash, priv, crypto);
  } else if (priv.type === 'dsa') {
    return dsaSign(hash, priv, crypto);
  }
  var len = priv.modulus.byteLength();
  var pad = [ 0, 1 ];
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff);
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  
  var out = crt(pad, priv, crypto);
  return out;
}
function ecSign(hash, priv, crypto) {
  elliptic.rand = crypto.randomBytes;
  var curve;
  if (priv.curve.join('.')  === '1.3.132.0.10') {
    curve = new elliptic.ec('secp256k1');
  }
  var key = curve.genKeyPair();
  key._importPrivate(priv.privateKey);
  var out = key.sign(hash);
  return new Buffer(out.toDER());
}
function dsaSign(hash, priv, crypto) {
  var x = priv.params.priv_key;
  var p = priv.params.p;
  var q = priv.params.q;
  var montq = bn.mont(q);
  var g = priv.params.g;
  var r = new bn(0);
  var k;
  var H = new bn(hash);
  var s = false;
  while (s === false) {
    while (!r.cmpn(0)) {
      k = getKay(q, crypto);
      r = makeR(g, k, p, q);
    }
    s = k.invm(q).imul(H.add(x.imul(r).mod(q)).mod(q)).mod(q);
    if (!s.cmpn(0)) {
      s = false;
      r = new bn(0);
    }
  }
  return toDER(r,s);
}
function toDER(r, s) {
  r = r.toArray();
  s = s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  var total = r.length + s.length + 4;
  var res = [ 0x30, total, 0x02, r.length ];
  res = res.concat(r, [ 0x02, s.length ], s);
  return new Buffer(res);
}
function getKay(q, crypto) {
  var k = new bn(crypto.randomBytes(q.byteLength()));
  while (k.cmp(q) >= 0) {
    k = new bn(crypto.randomBytes(q.byteLength()));
  }
  return k;
}
function makeR(g, k, p, q) {
  return g.toRed(bn.mont(p)).redPow(k).fromRed().mod(q);
}
}).call(this,require("buffer").Buffer)
},{"bn.js":33,"browserify-rsa":34,"buffer":176,"elliptic":36,"parse-asn1":61}],77:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var parseKeys = require('parse-asn1');
var elliptic = require('elliptic');
var bn = require('bn.js');
module.exports = verify;
function verify(sig, hash, key) {
  var pub = parseKeys(key);
  if (pub.type === 'ec') {
    return ecVerify(sig, hash, pub);
  } else if (pub.type === 'dsa') {
    return dsaVerify(sig, hash, pub);
  }
  var len = pub.modulus.byteLength();
  var pad = [ 0, 1 ];
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff);
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  pad = hash;
  var red = bn.mont(pub.modulus);
  sig = new bn(sig).toRed(red);

  sig = sig.redPow(new bn(pub.publicExponent));

  sig = new Buffer(sig.fromRed().toArray());
  sig = sig.slice(sig.length - hash.length);
  var out = 0;
  len = sig.length;
  i = -1;
  while (++i < len) {
    out += (sig[i] ^ hash[i]);
  }
  return !out;
}
function ecVerify(sig, hash, pub) {
  var curve;
  if (pub.data.algorithm.curve.join('.')  === '1.3.132.0.10') {
    curve = new elliptic.ec('secp256k1');
  }
  var pubkey = pub.data.subjectPrivateKey.data;
  return curve.verify(hash.toString('hex'), sig.toString('hex'), pubkey.toString('hex'));
}
function dsaVerify(sig, hash, pub) {
  var p = pub.data.p;
  var q = pub.data.q;
  var g = pub.data.g;
  var y = pub.data.pub_key;
  var unpacked = parseKeys.signature.decode(sig, 'der');
  var s = unpacked.s;
  var r = unpacked.r;
  checkValue(s, q);
  checkValue(r, q);
  var montq = bn.mont(q);
  var montp = bn.mont(p);
  var w =  s.invm(q);
  var v = g.toRed(montp)
  .redPow(new bn(hash).mul(w).mod(q))
  .fromRed()
  .mul(
    y.toRed(montp)
    .redPow(r.mul(w).mod(q))
    .fromRed()
  ).mod(p).mod(q);
  return !v.cmp(r);
}
function checkValue(b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig');
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig');
  }
}
}).call(this,require("buffer").Buffer)
},{"bn.js":33,"buffer":176,"elliptic":36,"parse-asn1":61}],78:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');
module.exports = ECDH;

function ECDH(curve, crypto) {
	elliptic.rand = crypto.randomBytes;
	this.curve = new elliptic.ec(curve);
	this.keys = void 0;
}
ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	other = new BN(other);
	other = other.toString(16);
	var otherPub = this.curve.keyPair(other, 'hex').getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return returnValue(out, enc);
};
ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return returnValue(key, enc);
};
ECDH.prototype.getPrivateKey = function (enc) {
	return returnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	var pkey = new BN(pub);
	pkey = pkey.toArray();
	this.keys._importPublicHex(pkey);
};
ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
};
function returnValue(bn, enc) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}
}).call(this,require("buffer").Buffer)
},{"bn.js":80,"buffer":176,"elliptic":81}],79:[function(require,module,exports){
var ECDH = require('./ecdh');
module.exports = function (crypto, exports) {
	exports.createECDH = function (curve) {
		return new ECDH(curve, crypto);
	};
};
},{"./ecdh":78}],80:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"dup":33}],81:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"../package.json":101,"./elliptic/curve":84,"./elliptic/curves":87,"./elliptic/ec":88,"./elliptic/hmac-drbg":91,"./elliptic/utils":92,"brorand":93,"dup":36}],82:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"../../elliptic":81,"assert":174,"bn.js":80,"dup":37}],83:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"../../elliptic":81,"../curve":84,"assert":174,"bn.js":80,"dup":38,"inherits":100}],84:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"./base":82,"./edwards":83,"./mont":85,"./short":86,"dup":39}],85:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"../../elliptic":81,"../curve":84,"assert":174,"bn.js":80,"dup":40,"inherits":100}],86:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"../../elliptic":81,"../curve":84,"assert":174,"bn.js":80,"dup":41,"inherits":100}],87:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"../elliptic":81,"assert":174,"bn.js":80,"dup":42,"hash.js":94}],88:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"../../elliptic":81,"./key":89,"./signature":90,"assert":174,"bn.js":80,"dup":43}],89:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"../../elliptic":81,"assert":174,"bn.js":80,"dup":44}],90:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"../../elliptic":81,"assert":174,"bn.js":80,"dup":45}],91:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"../elliptic":81,"assert":174,"dup":46,"hash.js":94}],92:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"assert":174,"bn.js":80,"dup":47}],93:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],94:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./hash/common":95,"./hash/hmac":96,"./hash/ripemd":97,"./hash/sha":98,"./hash/utils":99,"dup":49}],95:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"../hash":94,"dup":50}],96:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"../hash":94,"dup":51}],97:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../hash":94,"dup":52}],98:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"../hash":94,"dup":53}],99:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],100:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"dup":28}],101:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"dup":55}],102:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
module.exports = DH;
function setPublicKey(pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this._pub = new BN(pub);
}
function setPrivateKey(priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	this._priv = new BN(priv);
}
var primeCache = {};
function checkPrime(prime, generator) {
	var gen = generator.toString('hex');
	var hex = [gen, prime.toString(16)].join('_');
	if (hex in primeCache) {
		return primeCache[hex];
	}
	var error = 0;
	
	if (prime.isEven() ||
		!primes.simpleSieve ||
		!primes.fermatTest(prime) ||
		!millerRabin.test(prime)) {
		//not a prime so +1
		error += 1;
		
		if (gen === '02' || gen === '05') {
			// we'd be able to check the generator
			// it would fail so +8
			error += 8;
		} else {
			//we wouldn't be able to test the generator
			// so +4
			error += 4;
		}
		primeCache[hex] = error;
		return error;
	}
	if (!millerRabin.test(prime.shrn(1))) {
		//not a safe prime
		error += 2;
	}
	var gen = generator.toString('hex');
	var rem;
	switch (gen) {
		case '02':
		  if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
		  	// unsuidable generator
		  	error += 8;
		  }
		  break;
		case '05':
		  rem = prime.mod(TEN);
		  if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
		  	// prime mod 10 needs to equal 3 or 7
		  	error += 8;
		  } 
		  break;
		default: 
		  error += 4;
	}
	primeCache[hex] = error;
	return error;
}
function defineError (self, error) {
	try {
		Object.defineProperty(self, 'verifyError', {
	    enumerable: true,
	    value: error,
	    writable: false
	  });
	} catch(e) {
		self.verifyError = error;
	}
}
function DH(prime, generator,crypto, malleable) {
	this.setGenerator(generator);
	this.__prime = new BN(prime);
	this._prime = BN.mont(this.__prime);
	this._pub = void 0;
	this._priv = void 0;
	
	if (malleable) {
		this.setPublicKey = setPublicKey;
		this.setPrivateKey = setPrivateKey;
		defineError(this, checkPrime(this.__prime, generator));
	} else {
		defineError(this, 8);
	}
	this._makeNum = function makeNum() {
		return crypto.randomBytes(192);
	};
}
DH.prototype.generateKeys = function () {
	if (!this._priv) {
		this._priv = new BN(this._makeNum());
	}
	this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
	return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
	other = new BN(other);
	other = other.toRed(this._prime);
	var secret = other.redPow(this._priv).fromRed();
	var out = new Buffer(secret.toArray());
	var prime = this.getPrime();
	if (out.length < prime.length) {
		var front = new Buffer(prime.length - out.length);
		front.fill(0);
		out = Buffer.concat([front, out]);
	}
	return out;
};
DH.prototype.getPublicKey = function getPublicKey(enc) {
	return returnValue(this._pub, enc);
};
DH.prototype.getPrivateKey = function getPrivateKey(enc) {
	return returnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
	return returnValue(this.__prime, enc);
};
DH.prototype.getGenerator = function (enc) {
	return returnValue(this._gen, enc);
};
DH.prototype.setGenerator = function (gen, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(gen)) {
		gen = new Buffer(gen, enc);
	}
	this._gen = new BN(gen);
};

function returnValue(bn, enc) {
	var buf = new Buffer(bn.toArray());
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}
}).call(this,require("buffer").Buffer)
},{"./generatePrime":103,"bn.js":105,"buffer":176,"miller-rabin":106}],103:[function(require,module,exports){

module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}
function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0)
      return false;

  return true;
}
function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function findPrime(bits, gen ,crypto) {
  gen = new BN(gen);
  var runs, comp;
  function generateRandom(bits) {
    runs = -1;
    var r = crypto.randomBytes(Math.ceil(bits / 8));
    r[0] |= 0xc0;
    r[r.length - 1] |= 3;
    var rem;
    var out = new BN(r);
    if (!gen.cmp(TWO)) {
      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {
        out.iadd(FOUR);
      }
      comp = {
        major: [TWENTYFOUR],
        minor: [TWELVE]
      };
    } else if (!gen.cmp(FIVE)) {
      rem = out.mod(TEN);
      while (rem.cmp(THREE)) {
        out.iadd(FOUR);
        rem = out.mod(TEN);
      }
      comp = {
        major: [FOUR, SIXTEEN],
        minor: [TWO, EIGHT]
      };
    } else {
      comp = {
        major: [FOUR],
        minor: [TWO]
      }
    }
    return out;
  }
  var num = generateRandom(bits);



  var n2 = num.shrn(1);

  while (true) {
    if (num.bitLength() > bits) {
      num = generateRandom(bits);
      n2 = num.shrn(1);
    }
    runs++;
    if (simpleSieve(n2) &&
      fermatTest(n2) &&
      millerRabin.test(n2) &&
      simpleSieve(num) &&
      fermatTest(num) &&
      millerRabin.test(num)) {
      return num;
    }
    num.iadd(comp.major[runs%comp.major.length]);
    n2.iadd(comp.minor[runs%comp.minor.length]);
  }

}
},{"bn.js":105,"miller-rabin":106}],104:[function(require,module,exports){
(function (Buffer){
var primes = require('./primes.json');
var DH = require('./dh');
var generatePrime = require('./generatePrime');
module.exports = function (crypto, exports) {
	exports.DiffieHellmanGroup =
    exports.createDiffieHellmanGroup =
    exports.getDiffieHellman = DiffieHellmanGroup;
	function DiffieHellmanGroup(mod) {
		return new DH(new Buffer(primes[mod].prime, 'hex'),
			new Buffer(primes[mod].gen, 'hex'), crypto);
	}
	exports.createDiffieHellman = exports.DiffieHellman = DiffieHellman;
	function DiffieHellman(prime, enc, generator, genc) {
		
		if (Buffer.isBuffer(enc) ||
			(typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {
			genc = generator;
			generator = enc
			enc = void 0;
		}
		enc = enc || 'binary';
		genc = genc || 'binary';
		generator = generator || new Buffer([2]);
		if (!Buffer.isBuffer(generator)) {
			generator = new Buffer(generator, genc);
		}
		if (typeof prime === 'number') {
			return new DH(generatePrime(prime, generator, crypto), generator, crypto, true);
		}
		if (!Buffer.isBuffer(prime)) {
			prime = new Buffer(prime, enc);
		}
		
		return new DH(prime, generator, crypto, true);
	};
}
}).call(this,require("buffer").Buffer)
},{"./dh":102,"./generatePrime":103,"./primes.json":108,"buffer":176}],105:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"dup":33}],106:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return prime;
};

},{"bn.js":105,"brorand":107}],107:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],108:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],109:[function(require,module,exports){
(function (Buffer){
module.exports = function(crypto) {
  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
    if ('function' === typeof digest) {
      callback = digest
      digest = undefined
    }

    if ('function' !== typeof callback)
      throw new Error('No callback provided to pbkdf2')

    setTimeout(function() {
      var result

      try {
        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }

      callback(undefined, result)
    })
  }

  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
    if ('number' !== typeof iterations)
      throw new TypeError('Iterations not a number')

    if (iterations < 0)
      throw new TypeError('Bad iterations')

    if ('number' !== typeof keylen)
      throw new TypeError('Key length not a number')

    if (keylen < 0)
      throw new TypeError('Bad key length')

    digest = digest || 'sha1'

    if (!Buffer.isBuffer(password)) password = new Buffer(password)
    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

    var hLen, l = 1, r, T
    var DK = new Buffer(keylen)
    var block1 = new Buffer(salt.length + 4)
    salt.copy(block1, 0, 0, salt.length)

    for (var i = 1; i <= l; i++) {
      block1.writeUInt32BE(i, salt.length)

      var U = crypto.createHmac(digest, password).update(block1).digest()

      if (!hLen) {
        hLen = U.length
        T = new Buffer(hLen)
        l = Math.ceil(keylen / hLen)
        r = keylen - (l - 1) * hLen

        if (keylen > (Math.pow(2, 32) - 1) * hLen)
          throw new TypeError('keylen exceeds maximum length')
      }

      U.copy(T, 0, 0, hLen)

      for (var j = 1; j < iterations; j++) {
        U = crypto.createHmac(digest, password).update(U).digest()

        for (var k = 0; k < hLen; k++) {
          T[k] ^= U[k]
        }
      }

      var destPos = (i - 1) * hLen
      var len = (i == l ? r : hLen)
      T.copy(DK, destPos, 0, len)
    }

    return DK
  }

  return {
    pbkdf2: pbkdf2,
    pbkdf2Sync: pbkdf2Sync
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":176}],110:[function(require,module,exports){

module.exports = function (exports, crypto) {
  exports.publicEncrypt = require('./publicEncrypt')(crypto);
  exports.privateDecrypt = require('./privateDecrypt')(crypto);
};
},{"./privateDecrypt":134,"./publicEncrypt":135}],111:[function(require,module,exports){
(function (Buffer){
module.exports = function (seed, len, crypto) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, crypto.createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":176}],112:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"dup":35}],113:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"bn.js":112,"buffer":176,"dup":34}],114:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"buffer":176,"dup":57}],115:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58}],116:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"asn1.js":120,"asn1.js-rfc3280":119,"dup":59}],117:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"./EVP_BytesToKey":114,"buffer":176,"dup":60}],118:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"./aesid.json":115,"./asn1":116,"./fixProc":117,"buffer":176,"dup":61,"pemstrip":133}],119:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"../..":118,"asn1.js":120,"dup":62}],120:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./asn1/api":121,"./asn1/base":123,"./asn1/constants":127,"./asn1/decoders":129,"./asn1/encoders":131,"bn.js":132,"dup":63}],121:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"../asn1":120,"dup":64,"util":333,"vm":334}],122:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"../base":123,"assert":174,"buffer":176,"dup":65,"util":333}],123:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./buffer":122,"./node":124,"./reporter":125,"dup":66}],124:[function(require,module,exports){
arguments[4][67][0].apply(exports,arguments)
},{"../base":123,"assert":174,"dup":67}],125:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"dup":68,"util":333}],126:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"../constants":127,"dup":69}],127:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"./der":126,"dup":70}],128:[function(require,module,exports){
arguments[4][71][0].apply(exports,arguments)
},{"../../asn1":120,"dup":71,"util":333}],129:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"./der":128,"dup":72}],130:[function(require,module,exports){
arguments[4][73][0].apply(exports,arguments)
},{"../../asn1":120,"buffer":176,"dup":73,"util":333}],131:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"./der":130,"dup":74}],132:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"dup":33}],133:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"dup":75}],134:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
module.exports = function (crypto) {
  return privateDecrypt;
  function privateDecrypt(private_key, enc) {
    var padding;
    if (private_key.padding) {
      padding = private_key.padding;
    } else {
      padding = 4;
    }
    
    var key = parseKeys(private_key, crypto);
    var k = key.modulus.byteLength();
    if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
      throw new Error('decryption error');
    }
    var msg = crt(enc, key, crypto);
    var zBuffer = new Buffer(k - msg.length);
    zBuffer.fill(0);
    msg = Buffer.concat([zBuffer, msg], k);
    if (padding === 4) {
      return oaep(key, msg, crypto);
    } else if (padding === 1) {
      return pkcs1(key, msg, crypto);
    } else if (padding === 3) {
      return msg;
    } else {
      throw new Error('unknown padding');
    }
  }
};

function oaep(key, msg, crypto){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = crypto.createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen, crypto));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1, crypto));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, crypto){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if (p1.toString('hex') !== '0002') {
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  return  msg.slice(i);
}
function compare(a, b){
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":111,"./xor":136,"bn.js":112,"browserify-rsa":113,"buffer":176,"parse-asn1":118}],135:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function (crypto) {
  return publicEncrypt;
  function publicEncrypt(public_key, msg) {
    var padding;
    if (public_key.padding) {
      padding = public_key.padding;
    } else {
      padding = 4;
    }
    var key = parseKeys(public_key);
    var paddedMsg;
    if (padding === 4) {
      paddedMsg = oaep(key, msg, crypto);
    } else if (padding === 1) {
      paddedMsg = pkcs1(key, msg, crypto);
    } else if (padding === 3) {
      paddedMsg = new bn(msg);
      if (paddedMsg.cmp(key.modulus) >= 0) {
        throw new Error('data too long for modulus');
      }
    } else {
      throw new Error('unknown padding');
    }
    var enc = paddedMsg
      .toRed(bn.mont(key.modulus))
      .redPow(new bn(key.publicExponent))
      .fromRed()
      .toArray();
    return new Buffer(enc);
  }
};

function oaep(key, msg, crypto){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = crypto.createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = crypto.randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen, crypto));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen, crypto));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, crypto){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps = nonZero(k - mLen - 3, crypto);
  return new bn(Buffer.concat([new Buffer([0, 2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = crypto.randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = crypto.randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":111,"./xor":136,"bn.js":112,"buffer":176,"parse-asn1":118}],136:[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],137:[function(require,module,exports){
(function (Buffer){

module.exports = ripemd160



/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Constants table
var zl = [
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
var zr = [
    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
var sl = [
     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
var sr = [
    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

var bytesToWords = function (bytes) {
  var words = [];
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32);
  }
  return words;
};

var wordsToBytes = function (words) {
  var bytes = [];
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
  }
  return bytes;
};

var processBlock = function (H, M, offset) {

  // Swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i;
    var M_offset_i = M[offset_i];

    // Swap
    M[offset_i] = (
        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
    );
  }

  // Working variables
  var al, bl, cl, dl, el;
  var ar, br, cr, dr, er;

  ar = al = H[0];
  br = bl = H[1];
  cr = cl = H[2];
  dr = dl = H[3];
  er = el = H[4];
  // Computation
  var t;
  for (var i = 0; i < 80; i += 1) {
    t = (al +  M[offset+zl[i]])|0;
    if (i<16){
        t +=  f1(bl,cl,dl) + hl[0];
    } else if (i<32) {
        t +=  f2(bl,cl,dl) + hl[1];
    } else if (i<48) {
        t +=  f3(bl,cl,dl) + hl[2];
    } else if (i<64) {
        t +=  f4(bl,cl,dl) + hl[3];
    } else {// if (i<80) {
        t +=  f5(bl,cl,dl) + hl[4];
    }
    t = t|0;
    t =  rotl(t,sl[i]);
    t = (t+el)|0;
    al = el;
    el = dl;
    dl = rotl(cl, 10);
    cl = bl;
    bl = t;

    t = (ar + M[offset+zr[i]])|0;
    if (i<16){
        t +=  f5(br,cr,dr) + hr[0];
    } else if (i<32) {
        t +=  f4(br,cr,dr) + hr[1];
    } else if (i<48) {
        t +=  f3(br,cr,dr) + hr[2];
    } else if (i<64) {
        t +=  f2(br,cr,dr) + hr[3];
    } else {// if (i<80) {
        t +=  f1(br,cr,dr) + hr[4];
    }
    t = t|0;
    t =  rotl(t,sr[i]) ;
    t = (t+er)|0;
    ar = er;
    er = dr;
    dr = rotl(cr, 10);
    cr = br;
    br = t;
  }
  // Intermediate hash value
  t    = (H[1] + cl + dr)|0;
  H[1] = (H[2] + dl + er)|0;
  H[2] = (H[3] + el + ar)|0;
  H[3] = (H[4] + al + br)|0;
  H[4] = (H[0] + bl + cr)|0;
  H[0] =  t;
};

function f1(x, y, z) {
  return ((x) ^ (y) ^ (z));
}

function f2(x, y, z) {
  return (((x)&(y)) | ((~x)&(z)));
}

function f3(x, y, z) {
  return (((x) | (~(y))) ^ (z));
}

function f4(x, y, z) {
  return (((x) & (z)) | ((y)&(~(z))));
}

function f5(x, y, z) {
  return ((x) ^ ((y) |(~(z))));
}

function rotl(x,n) {
  return (x<<n) | (x>>>(32-n));
}

function ripemd160(message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

  if (typeof message == 'string')
    message = new Buffer(message, 'utf8');

  var m = bytesToWords(message);

  var nBitsLeft = message.length * 8;
  var nBitsTotal = message.length * 8;

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
  );

  for (var i=0 ; i<m.length; i += 16) {
    processBlock(H, m, i);
  }

  // Swap endian
  for (var i = 0; i < 5; i++) {
      // Shortcut
    var H_i = H[i];

    // Swap
    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
  }

  var digestbytes = wordsToBytes(H);
  return new Buffer(digestbytes);
}



}).call(this,require("buffer").Buffer)
},{"buffer":176}],138:[function(require,module,exports){
(function (Buffer){


//prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.init = function () {
  this._s = 0
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if ("string" === typeof data) {
    enc = enc || "utf8"
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s = (this._s || 0)
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
},{"buffer":176}],139:[function(require,module,exports){
var exports = module.exports = function (alg) {
  var Alg = exports[alg.toLowerCase()]
  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
  return new Alg()
}


exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha1":140,"./sha224":141,"./sha256":142,"./sha384":143,"./sha512":144}],140:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('util').inherits

var Hash = require('./hash')

var A = 0|0
var B = 4|0
var C = 8|0
var D = 12|0
var E = 16|0

var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

var POOL = []

function Sha1 () {
  if(POOL.length)
    return POOL.pop().init()

  if(!(this instanceof Sha1)) return new Sha1()
  this._w = W
  Hash.call(this, 16*4, 14*4)

  this._h = null
  this.init()
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  Hash.prototype.init.call(this)
  return this
}

Sha1.prototype._POOL = POOL
Sha1.prototype._update = function (X) {

  var a, b, c, d, e, _a, _b, _c, _d, _e

  a = _a = this._a
  b = _b = this._b
  c = _c = this._c
  d = _d = this._d
  e = _e = this._e

  var w = this._w

  for(var j = 0; j < 80; j++) {
    var W = w[j] = j < 16 ? X.readInt32BE(j*4)
      : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

    var t = add(
      add(rol(a, 5), sha1_ft(j, b, c, d)),
      add(add(e, W), sha1_kt(j))
    )

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
  }

  this._a = add(a, _a)
  this._b = add(b, _b)
  this._c = add(c, _c)
  this._d = add(d, _d)
  this._e = add(e, _e)
}

Sha1.prototype._hash = function () {
  if(POOL.length < 100) POOL.push(this)
  var H = new Buffer(20)
  //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
  H.writeInt32BE(this._a|0, A)
  H.writeInt32BE(this._b|0, B)
  H.writeInt32BE(this._c|0, C)
  H.writeInt32BE(this._d|0, D)
  H.writeInt32BE(this._e|0, E)
  return H
}

/*
 * Perform the appropriate triplet combination function for the current
 * iteration
 */
function sha1_ft(t, b, c, d) {
  if(t < 20) return (b & c) | ((~b) & d);
  if(t < 40) return b ^ c ^ d;
  if(t < 60) return (b & c) | (b & d) | (c & d);
  return b ^ c ^ d;
}

/*
 * Determine the appropriate additive constant for the current iteration
 */
function sha1_kt(t) {
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
         (t < 60) ? -1894007588 : -899497514;
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 * //dominictarr: this is 10 years old, so maybe this can be dropped?)
 *
 */
function add(x, y) {
  return (x + y ) | 0
//lets see how this goes on testling.
//  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
//  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
//  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol(num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = Sha1


}).call(this,require("buffer").Buffer)
},{"./hash":138,"buffer":176,"util":333}],141:[function(require,module,exports){
(function (Buffer){

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('util').inherits
var SHA256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224() {
  this.init()

  this._w = W //new Array(64)

  Hash.call(this, 16*4, 14*4)
}

inherits(Sha224, SHA256)

Sha224.prototype.init = function () {

  this._a = 0xc1059ed8|0
  this._b = 0x367cd507|0
  this._c = 0x3070dd17|0
  this._d = 0xf70e5939|0
  this._e = 0xffc00b31|0
  this._f = 0x68581511|0
  this._g = 0x64f98fa7|0
  this._h = 0xbefa4fa4|0

  this._len = this._s = 0

  return this
}


Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a,  0)
  H.writeInt32BE(this._b,  4)
  H.writeInt32BE(this._c,  8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
},{"./hash":138,"./sha256":142,"buffer":176,"util":333}],142:[function(require,module,exports){
(function (Buffer){

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('util').inherits

var Hash = require('./hash')

var K = [
    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
  ]

var W = new Array(64)

function Sha256() {
  this.init()

  this._w = W //new Array(64)

  Hash.call(this, 16*4, 14*4)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {

  this._a = 0x6a09e667|0
  this._b = 0xbb67ae85|0
  this._c = 0x3c6ef372|0
  this._d = 0xa54ff53a|0
  this._e = 0x510e527f|0
  this._f = 0x9b05688c|0
  this._g = 0x1f83d9ab|0
  this._h = 0x5be0cd19|0

  this._len = this._s = 0

  return this
}

function S (X, n) {
  return (X >>> n) | (X << (32 - n));
}

function R (X, n) {
  return (X >>> n);
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z));
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z));
}

function Sigma0256 (x) {
  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
}

function Sigma1256 (x) {
  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
}

function Gamma0256 (x) {
  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
}

function Gamma1256 (x) {
  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
}

Sha256.prototype._update = function(M) {

  var W = this._w
  var a, b, c, d, e, f, g, h
  var T1, T2

  a = this._a | 0
  b = this._b | 0
  c = this._c | 0
  d = this._d | 0
  e = this._e | 0
  f = this._f | 0
  g = this._g | 0
  h = this._h | 0

  for (var j = 0; j < 64; j++) {
    var w = W[j] = j < 16
      ? M.readInt32BE(j * 4)
      : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

    T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

    T2 = Sigma0256(a) + Maj(a, b, c);
    h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0

};

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a,  0)
  H.writeInt32BE(this._b,  4)
  H.writeInt32BE(this._c,  8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
},{"./hash":138,"buffer":176,"util":333}],143:[function(require,module,exports){
(function (Buffer){
var inherits = require('util').inherits
var SHA512 = require('./sha512');
var Hash = require('./hash')

var W = new Array(160)

function Sha384() {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {

  this._a = 0xcbbb9d5d|0
  this._b = 0x629a292a|0
  this._c = 0x9159015a|0
  this._d = 0x152fecd8|0
  this._e = 0x67332667|0
  this._f = 0x8eb44a87|0
  this._g = 0xdb0c2e0d|0
  this._h = 0x47b5481d|0

  this._al = 0xc1059ed8|0
  this._bl = 0x367cd507|0
  this._cl = 0x3070dd17|0
  this._dl = 0xf70e5939|0
  this._el = 0xffc00b31|0
  this._fl = 0x68581511|0
  this._gl = 0x64f98fa7|0
  this._hl = 0xbefa4fa4|0

  this._len = this._s = 0

  return this
}



Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
},{"./hash":138,"./sha512":144,"buffer":176,"util":333}],144:[function(require,module,exports){
(function (Buffer){
var inherits = require('util').inherits

var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512() {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {

  this._a = 0x6a09e667|0
  this._b = 0xbb67ae85|0
  this._c = 0x3c6ef372|0
  this._d = 0xa54ff53a|0
  this._e = 0x510e527f|0
  this._f = 0x9b05688c|0
  this._g = 0x1f83d9ab|0
  this._h = 0x5be0cd19|0

  this._al = 0xf3bcc908|0
  this._bl = 0x84caa73b|0
  this._cl = 0xfe94f82b|0
  this._dl = 0x5f1d36f1|0
  this._el = 0xade682d1|0
  this._fl = 0x2b3e6c1f|0
  this._gl = 0xfb41bd6b|0
  this._hl = 0x137e2179|0

  this._len = this._s = 0

  return this
}

function S (X, Xl, n) {
  return (X >>> n) | (Xl << (32 - n))
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z));
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z));
}

Sha512.prototype._update = function(M) {

  var W = this._w
  var a, b, c, d, e, f, g, h
  var al, bl, cl, dl, el, fl, gl, hl

  a = this._a | 0
  b = this._b | 0
  c = this._c | 0
  d = this._d | 0
  e = this._e | 0
  f = this._f | 0
  g = this._g | 0
  h = this._h | 0

  al = this._al | 0
  bl = this._bl | 0
  cl = this._cl | 0
  dl = this._dl | 0
  el = this._el | 0
  fl = this._fl | 0
  gl = this._gl | 0
  hl = this._hl | 0

  for (var i = 0; i < 80; i++) {
    var j = i * 2

    var Wi, Wil

    if (i < 16) {
      Wi = W[j] = M.readInt32BE(j * 4)
      Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

    } else {
      var x  = W[j - 15*2]
      var xl = W[j - 15*2 + 1]
      var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
      var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

      x  = W[j - 2*2]
      xl = W[j - 2*2 + 1]
      var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
      var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

      // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
      var Wi7  = W[j - 7*2]
      var Wi7l = W[j - 7*2 + 1]

      var Wi16  = W[j - 16*2]
      var Wi16l = W[j - 16*2 + 1]

      Wil = gamma0l + Wi7l
      Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
      Wil = Wil + gamma1l
      Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
      Wil = Wil + Wi16l
      Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

      W[j] = Wi
      W[j + 1] = Wil
    }

    var maj = Maj(a, b, c)
    var majl = Maj(al, bl, cl)

    var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
    var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
    var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
    var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

    // t1 = h + sigma1 + ch + K[i] + W[i]
    var Ki = K[j]
    var Kil = K[j + 1]

    var ch = Ch(e, f, g)
    var chl = Ch(el, fl, gl)

    var t1l = hl + sigma1l
    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
    t1l = t1l + chl
    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
    t1l = t1l + Kil
    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
    t1l = t1l + Wil
    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl
    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

    h  = g
    hl = gl
    g  = f
    gl = fl
    f  = e
    fl = el
    el = (dl + t1l) | 0
    e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    d  = c
    dl = cl
    c  = b
    cl = bl
    b  = a
    bl = al
    al = (t1l + t2l) | 0
    a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)
  writeInt64BE(this._g, this._gl, 48)
  writeInt64BE(this._h, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
},{"./hash":138,"buffer":176,"util":333}],145:[function(require,module,exports){
'use strict';
var pbkdf2Export = require('pbkdf2-compat/pbkdf2')

module.exports = function (crypto, exports) {
  exports = exports || {}

  var exported = pbkdf2Export(crypto)

  exports.pbkdf2 = exported.pbkdf2
  exports.pbkdf2Sync = exported.pbkdf2Sync

  return exports
}

},{"pbkdf2-compat/pbkdf2":109}],146:[function(require,module,exports){
(function (global,Buffer){
'use strict';
(function() {
  var g = ('undefined' === typeof window ? global : window) || {}
  var _crypto = (
    g.crypto || g.msCrypto || require('crypto')
  )
  module.exports = function(size) {
    // Modern Browsers
    if(_crypto.getRandomValues) {
      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
      /* This will not work in older browsers.
       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
       */

      _crypto.getRandomValues(bytes);
      return bytes;
    }
    else if (_crypto.pseudoRandomBytes) {
      return _crypto.pseudoRandomBytes(size)
    }
    else
      throw new Error(
        'pseudo random number generation not yet implemented for this browser\n'+
        'use chrome, FireFox or Internet Explorer 11'
      )
  }
}())

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"buffer":176,"crypto":175}],147:[function(require,module,exports){
(function (global,Buffer){
'use strict';
(function() {
  var g = ('undefined' === typeof window ? global : window) || {}
  var _crypto = (
    g.crypto || g.msCrypto || require('crypto')
  )
  module.exports = function(size) {
    // Modern Browsers
    if(_crypto.getRandomValues) {
      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
      /* This will not work in older browsers.
       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
       */

      _crypto.getRandomValues(bytes);
      return bytes;
    }
    else if (_crypto.randomBytes) {
      return _crypto.randomBytes(size)
    }
    else
      throw new Error(
        'secure random number generation not supported by this browser\n'+
        'use chrome, FireFox or Internet Explorer 11'
      )
  }
}())

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"buffer":176,"crypto":175}],148:[function(require,module,exports){
var assert = require('assert')
var BigInteger = require('bigi')

var Point = require('./point')

function Curve(p, a, b, Gx, Gy, n, h) {
  this.p = p
  this.a = a
  this.b = b
  this.G = Point.fromAffine(this, Gx, Gy)
  this.n = n
  this.h = h

  this.infinity = new Point(this, null, null, BigInteger.ZERO)

  // result caching
  this.pOverFour = p.add(BigInteger.ONE).shiftRight(2)
}

Curve.prototype.pointFromX = function(isOdd, x) {
  var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p)
  var beta = alpha.modPow(this.pOverFour, this.p)

  var y = beta
  if (beta.isEven() ^ !isOdd) {
    y = this.p.subtract(y) // -y % p
  }

  return Point.fromAffine(this, x, y)
}

Curve.prototype.isInfinity = function(Q) {
  if (Q === this.infinity) return true

  return Q.z.signum() === 0 && Q.y.signum() !== 0
}

Curve.prototype.isOnCurve = function(Q) {
  if (this.isInfinity(Q)) return true

  var x = Q.affineX
  var y = Q.affineY
  var a = this.a
  var b = this.b
  var p = this.p

  // Check that xQ and yQ are integers in the interval [0, p - 1]
  if (x.signum() < 0 || x.compareTo(p) >= 0) return false
  if (y.signum() < 0 || y.compareTo(p) >= 0) return false

  // and check that y^2 = x^3 + ax + b (mod p)
  var lhs = y.square().mod(p)
  var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p)
  return lhs.equals(rhs)
}

/**
 * Validate an elliptic curve point.
 *
 * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive
 */
Curve.prototype.validate = function(Q) {
  // Check Q != O
  assert(!this.isInfinity(Q), 'Point is at infinity')
  assert(this.isOnCurve(Q), 'Point is not on the curve')

  // Check nQ = O (where Q is a scalar multiple of G)
  var nQ = Q.multiply(this.n)
  assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G')

  return true
}

module.exports = Curve

},{"./point":152,"assert":174,"bigi":4}],149:[function(require,module,exports){
module.exports={
  "secp128r1": {
    "p": "fffffffdffffffffffffffffffffffff",
    "a": "fffffffdfffffffffffffffffffffffc",
    "b": "e87579c11079f43dd824993c2cee5ed3",
    "n": "fffffffe0000000075a30d1b9038a115",
    "h": "01",
    "Gx": "161ff7528b899b2d0c28607ca52c5b86",
    "Gy": "cf5ac8395bafeb13c02da292dded7a83"
  },
  "secp160k1": {
    "p": "fffffffffffffffffffffffffffffffeffffac73",
    "a": "00",
    "b": "07",
    "n": "0100000000000000000001b8fa16dfab9aca16b6b3",
    "h": "01",
    "Gx": "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
    "Gy": "938cf935318fdced6bc28286531733c3f03c4fee"
  },
  "secp160r1": {
    "p": "ffffffffffffffffffffffffffffffff7fffffff",
    "a": "ffffffffffffffffffffffffffffffff7ffffffc",
    "b": "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
    "n": "0100000000000000000001f4c8f927aed3ca752257",
    "h": "01",
    "Gx": "4a96b5688ef573284664698968c38bb913cbfc82",
    "Gy": "23a628553168947d59dcc912042351377ac5fb32"
  },
  "secp192k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffeffffee37",
    "a": "00",
    "b": "03",
    "n": "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
    "h": "01",
    "Gx": "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
    "Gy": "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
  },
  "secp192r1": {
    "p": "fffffffffffffffffffffffffffffffeffffffffffffffff",
    "a": "fffffffffffffffffffffffffffffffefffffffffffffffc",
    "b": "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
    "n": "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
    "h": "01",
    "Gx": "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
    "Gy": "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
  },
  "secp256k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
    "a": "00",
    "b": "07",
    "n": "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
    "h": "01",
    "Gx": "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    "Gy": "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
  },
  "secp256r1": {
    "p": "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
    "a": "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
    "b": "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
    "n": "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
    "h": "01",
    "Gx": "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
    "Gy": "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
  }
}

},{}],150:[function(require,module,exports){
var Point = require('./point')
var Curve = require('./curve')

var getCurveByName = require('./names')

module.exports = {
  Curve: Curve,
  Point: Point,
  getCurveByName: getCurveByName
}

},{"./curve":148,"./names":151,"./point":152}],151:[function(require,module,exports){
var BigInteger = require('bigi')

var curves = require('./curves')
var Curve = require('./curve')

function getCurveByName(name) {
  var curve = curves[name]
  if (!curve) return null

  var p = new BigInteger(curve.p, 16)
  var a = new BigInteger(curve.a, 16)
  var b = new BigInteger(curve.b, 16)
  var n = new BigInteger(curve.n, 16)
  var h = new BigInteger(curve.h, 16)
  var Gx = new BigInteger(curve.Gx, 16)
  var Gy = new BigInteger(curve.Gy, 16)

  return new Curve(p, a, b, Gx, Gy, n, h)
}

module.exports = getCurveByName

},{"./curve":148,"./curves":149,"bigi":4}],152:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var BigInteger = require('bigi')

var THREE = BigInteger.valueOf(3)

function Point(curve, x, y, z) {
  assert.notStrictEqual(z, undefined, 'Missing Z coordinate')

  this.curve = curve
  this.x = x
  this.y = y
  this.z = z
  this._zInv = null

  this.compressed = true
}

Object.defineProperty(Point.prototype, 'zInv', {
  get: function() {
    if (this._zInv === null) {
      this._zInv = this.z.modInverse(this.curve.p)
    }

    return this._zInv
  }
})

Object.defineProperty(Point.prototype, 'affineX', {
  get: function() {
    return this.x.multiply(this.zInv).mod(this.curve.p)
  }
})

Object.defineProperty(Point.prototype, 'affineY', {
  get: function() {
    return this.y.multiply(this.zInv).mod(this.curve.p)
  }
})

Point.fromAffine = function(curve, x, y) {
  return new Point(curve, x, y, BigInteger.ONE)
}

Point.prototype.equals = function(other) {
  if (other === this) return true
  if (this.curve.isInfinity(this)) return this.curve.isInfinity(other)
  if (this.curve.isInfinity(other)) return this.curve.isInfinity(this)

  // u = Y2 * Z1 - Y1 * Z2
  var u = other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p)

  if (u.signum() !== 0) return false

  // v = X2 * Z1 - X1 * Z2
  var v = other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p)

  return v.signum() === 0
}

Point.prototype.negate = function() {
  var y = this.curve.p.subtract(this.y)

  return new Point(this.curve, this.x, y, this.z)
}

Point.prototype.add = function(b) {
  if (this.curve.isInfinity(this)) return b
  if (this.curve.isInfinity(b)) return this

  var x1 = this.x
  var y1 = this.y
  var x2 = b.x
  var y2 = b.y

  // u = Y2 * Z1 - Y1 * Z2
  var u = y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p)
  // v = X2 * Z1 - X1 * Z2
  var v = x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p)

  if (v.signum() === 0) {
    if (u.signum() === 0) {
      return this.twice() // this == b, so double
    }

    return this.curve.infinity // this = -b, so infinity
  }

  var v2 = v.square()
  var v3 = v2.multiply(v)
  var x1v2 = x1.multiply(v2)
  var zu2 = u.square().multiply(this.z)

  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
  var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p)
  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
  var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p)
  // z3 = v^3 * z1 * z2
  var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p)

  return new Point(this.curve, x3, y3, z3)
}

Point.prototype.twice = function() {
  if (this.curve.isInfinity(this)) return this
  if (this.y.signum() === 0) return this.curve.infinity

  var x1 = this.x
  var y1 = this.y

  var y1z1 = y1.multiply(this.z)
  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p)
  var a = this.curve.a

  // w = 3 * x1^2 + a * z1^2
  var w = x1.square().multiply(THREE)

  if (a.signum() !== 0) {
    w = w.add(this.z.square().multiply(a))
  }

  w = w.mod(this.curve.p)
  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
  var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p)
  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
  var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p)
  // z3 = 8 * (y1 * z1)^3
  var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p)

  return new Point(this.curve, x3, y3, z3)
}

// Simple NAF (Non-Adjacent Form) multiplication algorithm
// TODO: modularize the multiplication algorithm
Point.prototype.multiply = function(k) {
  if (this.curve.isInfinity(this)) return this
  if (k.signum() === 0) return this.curve.infinity

  var e = k
  var h = e.multiply(THREE)

  var neg = this.negate()
  var R = this

  for (var i = h.bitLength() - 2; i > 0; --i) {
    R = R.twice()

    var hBit = h.testBit(i)
    var eBit = e.testBit(i)

    if (hBit != eBit) {
      R = R.add(hBit ? this : neg)
    }
  }

  return R
}

// Compute this*j + x*k (simultaneous multiplication)
Point.prototype.multiplyTwo = function(j, x, k) {
  var i

  if (j.bitLength() > k.bitLength())
    i = j.bitLength() - 1
  else
    i = k.bitLength() - 1

  var R = this.curve.infinity
  var both = this.add(x)

  while (i >= 0) {
    R = R.twice()

    var jBit = j.testBit(i)
    var kBit = k.testBit(i)

    if (jBit) {
      if (kBit) {
        R = R.add(both)

      } else {
        R = R.add(this)
      }

    } else {
      if (kBit) {
        R = R.add(x)
      }
    }
    --i
  }

  return R
}

Point.prototype.getEncoded = function(compressed) {
  if (compressed == undefined) compressed = this.compressed
  if (this.curve.isInfinity(this)) return new Buffer('00', 'hex') // Infinity point encoded is simply '00'

  var x = this.affineX
  var y = this.affineY

  var buffer

  // Determine size of q in bytes
  var byteLength = Math.floor((this.curve.p.bitLength() + 7) / 8)

  // 0x02/0x03 | X
  if (compressed) {
    buffer = new Buffer(1 + byteLength)
    buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0)

  // 0x04 | X | Y
  } else {
    buffer = new Buffer(1 + byteLength + byteLength)
    buffer.writeUInt8(0x04, 0)

    y.toBuffer(byteLength).copy(buffer, 1 + byteLength)
  }

  x.toBuffer(byteLength).copy(buffer, 1)

  return buffer
}

Point.decodeFrom = function(curve, buffer) {
  var type = buffer.readUInt8(0)
  var compressed = (type !== 4)

  var x = BigInteger.fromBuffer(buffer.slice(1, 33))
  var byteLength = Math.floor((curve.p.bitLength() + 7) / 8)

  var Q
  if (compressed) {
    assert.equal(buffer.length, byteLength + 1, 'Invalid sequence length')
    assert(type === 0x02 || type === 0x03, 'Invalid sequence tag')

    var isOdd = (type === 0x03)
    Q = curve.pointFromX(isOdd, x)

  } else {
    assert.equal(buffer.length, 1 + byteLength + byteLength, 'Invalid sequence length')

    var y = BigInteger.fromBuffer(buffer.slice(1 + byteLength))
    Q = Point.fromAffine(curve, x, y)
  }

  Q.compressed = compressed
  return Q
}

Point.prototype.toString = function () {
  if (this.curve.isInfinity(this)) return '(INFINITY)'

  return '(' + this.affineX.toString() + ',' + this.affineY.toString() + ')'
}

module.exports = Point

}).call(this,require("buffer").Buffer)
},{"assert":174,"bigi":4,"buffer":176}],153:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var base58check = require('bs58check')
var enforceType = require('./types')
var networks = require('./networks')
var scripts = require('./scripts')

function findScriptTypeByVersion(version) {
  for (var networkName in networks) {
    var network = networks[networkName]

    if (version === network.pubKeyHash) return 'pubkeyhash'
    if (version === network.scriptHash) return 'scripthash'
  }
}

function Address(hash, version) {
  enforceType('Buffer', hash)

  assert.strictEqual(hash.length, 20, 'Invalid hash length')
  assert.strictEqual(version & 0xff, version, 'Invalid version byte')

  this.hash = hash
  this.version = version
}

// Import functions
Address.fromBase58Check = function(string) {
  var payload = base58check.decode(string)
  var version = payload.readUInt8(0)
  var hash = payload.slice(1)

  return new Address(hash, version)
}

Address.fromOutputScript = function(script, network) {
  network = network || networks.bitcoin

  if (scripts.isPubKeyHashOutput(script)) return new Address(script.chunks[2], network.pubKeyHash)
  if (scripts.isScriptHashOutput(script)) return new Address(script.chunks[1], network.scriptHash)

  assert(false, script.toASM() + ' has no matching Address')
}

// Export functions
Address.prototype.toBase58Check = function () {
  var payload = new Buffer(21)
  payload.writeUInt8(this.version, 0)
  this.hash.copy(payload, 1)

  return base58check.encode(payload)
}

Address.prototype.toOutputScript = function() {
  var scriptType = findScriptTypeByVersion(this.version)

  if (scriptType === 'pubkeyhash') return scripts.pubKeyHashOutput(this.hash)
  if (scriptType === 'scripthash') return scripts.scriptHashOutput(this.hash)

  assert(false, this.toString() + ' has no matching Script')
}

Address.prototype.toString = Address.prototype.toBase58Check

module.exports = Address

}).call(this,require("buffer").Buffer)
},{"./networks":165,"./scripts":168,"./types":171,"assert":174,"bs58check":6,"buffer":176}],154:[function(require,module,exports){
var bs58check = require('bs58check')

function decode() {
  console.warn('bs58check will be removed in 2.0.0. require("bs58check") instead.');

  return bs58check.decode.apply(undefined, arguments)
}

function encode() {
  console.warn('bs58check will be removed in 2.0.0. require("bs58check") instead.');

  return bs58check.encode.apply(undefined, arguments)
}

module.exports = {
  decode: decode,
  encode: encode
}

},{"bs58check":6}],155:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var bufferutils = require('./bufferutils')
var crypto = require('./crypto')

var Transaction = require('./transaction')
var Script = require('./script')

function Block() {
  this.version = 1
  this.prevHash = null
  this.merkleRoot = null
  this.timestamp = 0
  this.bits = 0
  this.nonce = 0
}

Block.fromBuffer = function(buffer) {
  assert(buffer.length >= 80, 'Buffer too small (< 80 bytes)')

  var offset = 0
  function readSlice(n) {
    offset += n
    return buffer.slice(offset - n, offset)
  }

  function readUInt32() {
    var i = buffer.readUInt32LE(offset)
    offset += 4
    return i
  }

  var block = new Block()
  block.version = readUInt32()
  block.prevHash = readSlice(32)
  block.merkleRoot = readSlice(32)
  block.timestamp = readUInt32()
  block.bits = readUInt32()
  block.nonce = readUInt32()

  if (buffer.length === 80) return block

  function readUInt64() {
    var i = bufferutils.readUInt64LE(buffer, offset)
    offset += 8
    return i
  }

  function readVarInt() {
    var vi = bufferutils.readVarInt(buffer, offset)
    offset += vi.size
    return vi.number
  }

  function readScript() {
    return Script.fromBuffer(readSlice(readVarInt()))
  }

  function readTransaction() {
    var tx = new Transaction()
    tx.version = readUInt32()

    var vinLen = readVarInt()
    for (var i = 0; i < vinLen; ++i) {
      tx.ins.push({
        hash: readSlice(32),
        index: readUInt32(),
        script: readScript(),
        sequence: readUInt32()
      })
    }

    var voutLen = readVarInt()
    for (i = 0; i < voutLen; ++i) {
      tx.outs.push({
        value: readUInt64(),
        script: readScript(),
      })
    }

    tx.locktime = readUInt32()

    return tx
  }

  var nTransactions = readVarInt()
  block.transactions = []

  for (var i = 0; i < nTransactions; ++i) {
    var tx = readTransaction()
    block.transactions.push(tx)
  }

  return block
}

Block.fromHex = function(hex) {
  return Block.fromBuffer(new Buffer(hex, 'hex'))
}

Block.prototype.getHash = function() {
  return crypto.hash256(this.toBuffer(true))
}

Block.prototype.getId = function() {
  return bufferutils.reverse(this.getHash()).toString('hex')
}

Block.prototype.getUTCDate = function() {
  var date = new Date(0) // epoch
  date.setUTCSeconds(this.timestamp)

  return date
}

Block.prototype.toBuffer = function(headersOnly) {
  var buffer = new Buffer(80)

  var offset = 0
  function writeSlice(slice) {
    slice.copy(buffer, offset)
    offset += slice.length
  }

  function writeUInt32(i) {
    buffer.writeUInt32LE(i, offset)
    offset += 4
  }

  writeUInt32(this.version)
  writeSlice(this.prevHash)
  writeSlice(this.merkleRoot)
  writeUInt32(this.timestamp)
  writeUInt32(this.bits)
  writeUInt32(this.nonce)

  if (headersOnly || !this.transactions) return buffer

  var txLenBuffer = bufferutils.varIntBuffer(this.transactions.length)
  var txBuffers = this.transactions.map(function(tx) {
    return tx.toBuffer()
  })

  return Buffer.concat([buffer, txLenBuffer].concat(txBuffers))
}

Block.prototype.toHex = function(headersOnly) {
  return this.toBuffer(headersOnly).toString('hex')
}

module.exports = Block

}).call(this,require("buffer").Buffer)
},{"./bufferutils":156,"./crypto":157,"./script":167,"./transaction":169,"assert":174,"buffer":176}],156:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var opcodes = require('./opcodes')

// https://github.com/feross/buffer/blob/master/index.js#L1127
function verifuint(value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function pushDataSize(i) {
  return i < opcodes.OP_PUSHDATA1 ? 1
    : i < 0xff        ? 2
    : i < 0xffff      ? 3
    :                   5
}

function readPushDataInt(buffer, offset) {
  var opcode = buffer.readUInt8(offset)
  var number, size

  // ~6 bit
  if (opcode < opcodes.OP_PUSHDATA1) {
    number = opcode
    size = 1

  // 8 bit
  } else if (opcode === opcodes.OP_PUSHDATA1) {
    number = buffer.readUInt8(offset + 1)
    size = 2

  // 16 bit
  } else if (opcode === opcodes.OP_PUSHDATA2) {
    number = buffer.readUInt16LE(offset + 1)
    size = 3

  // 32 bit
  } else {
    assert.equal(opcode, opcodes.OP_PUSHDATA4, 'Unexpected opcode')

    number = buffer.readUInt32LE(offset + 1)
    size = 5

  }

  return {
    opcode: opcode,
    number: number,
    size: size
  }
}

function readUInt64LE(buffer, offset) {
  var a = buffer.readUInt32LE(offset)
  var b = buffer.readUInt32LE(offset + 4)
  b *= 0x100000000

  verifuint(b + a, 0x001fffffffffffff)

  return b + a
}

function readVarInt(buffer, offset) {
  var t = buffer.readUInt8(offset)
  var number, size

  // 8 bit
  if (t < 253) {
    number = t
    size = 1

  // 16 bit
  } else if (t < 254) {
    number = buffer.readUInt16LE(offset + 1)
    size = 3

  // 32 bit
  } else if (t < 255) {
    number = buffer.readUInt32LE(offset + 1)
    size = 5

  // 64 bit
  } else {
    number = readUInt64LE(buffer, offset + 1)
    size = 9
  }

  return {
    number: number,
    size: size
  }
}

function writePushDataInt(buffer, number, offset) {
  var size = pushDataSize(number)

  // ~6 bit
  if (size === 1) {
    buffer.writeUInt8(number, offset)

  // 8 bit
  } else if (size === 2) {
    buffer.writeUInt8(opcodes.OP_PUSHDATA1, offset)
    buffer.writeUInt8(number, offset + 1)

  // 16 bit
  } else if (size === 3) {
    buffer.writeUInt8(opcodes.OP_PUSHDATA2, offset)
    buffer.writeUInt16LE(number, offset + 1)

  // 32 bit
  } else {
    buffer.writeUInt8(opcodes.OP_PUSHDATA4, offset)
    buffer.writeUInt32LE(number, offset + 1)

  }

  return size
}

function writeUInt64LE(buffer, value, offset) {
  verifuint(value, 0x001fffffffffffff)

  buffer.writeInt32LE(value & -1, offset)
  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4)
}

function varIntSize(i) {
  return i < 253      ? 1
    : i < 0x10000     ? 3
    : i < 0x100000000 ? 5
    :                   9
}

function writeVarInt(buffer, number, offset) {
  var size = varIntSize(number)

  // 8 bit
  if (size === 1) {
    buffer.writeUInt8(number, offset)

  // 16 bit
  } else if (size === 3) {
    buffer.writeUInt8(253, offset)
    buffer.writeUInt16LE(number, offset + 1)

  // 32 bit
  } else if (size === 5) {
    buffer.writeUInt8(254, offset)
    buffer.writeUInt32LE(number, offset + 1)

  // 64 bit
  } else {
    buffer.writeUInt8(255, offset)
    writeUInt64LE(buffer, number, offset + 1)
  }

  return size
}

function varIntBuffer(i) {
  var size = varIntSize(i)
  var buffer = new Buffer(size)
  writeVarInt(buffer, i, 0)

  return buffer
}

function reverse(buffer) {
  var buffer2 = new Buffer(buffer)
  Array.prototype.reverse.call(buffer2)
  return buffer2
}

module.exports = {
  pushDataSize: pushDataSize,
  readPushDataInt: readPushDataInt,
  readUInt64LE: readUInt64LE,
  readVarInt: readVarInt,
  reverse: reverse,
  varIntBuffer: varIntBuffer,
  varIntSize: varIntSize,
  writePushDataInt: writePushDataInt,
  writeUInt64LE: writeUInt64LE,
  writeVarInt: writeVarInt
}

}).call(this,require("buffer").Buffer)
},{"./opcodes":166,"assert":174,"buffer":176}],157:[function(require,module,exports){
var crypto = require('crypto')

function hash160(buffer) {
  return ripemd160(sha256(buffer))
}

function hash256(buffer) {
  return sha256(sha256(buffer))
}

function ripemd160(buffer) {
  return crypto.createHash('rmd160').update(buffer).digest()
}

function sha1(buffer) {
  return crypto.createHash('sha1').update(buffer).digest()
}

function sha256(buffer) {
  return crypto.createHash('sha256').update(buffer).digest()
}

// FIXME: Name not consistent with others
function HmacSHA256(buffer, secret) {
  console.warn('Hmac* functions are deprecated for removal in 2.0.0, use node crypto instead')
  return crypto.createHmac('sha256', secret).update(buffer).digest()
}

function HmacSHA512(buffer, secret) {
  console.warn('Hmac* functions are deprecated for removal in 2.0.0, use node crypto instead')
  return crypto.createHmac('sha512', secret).update(buffer).digest()
}

module.exports = {
  ripemd160: ripemd160,
  sha1: sha1,
  sha256: sha256,
  hash160: hash160,
  hash256: hash256,
  HmacSHA256: HmacSHA256,
  HmacSHA512: HmacSHA512
}

},{"crypto":10}],158:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var crypto = require('crypto')
var enforceType = require('./types')

var BigInteger = require('bigi')
var ECSignature = require('./ecsignature')

var ZERO = new Buffer([0])
var ONE = new Buffer([1])

// https://tools.ietf.org/html/rfc6979#section-3.2
function deterministicGenerateK(curve, hash, d) {
  enforceType('Buffer', hash)
  enforceType(BigInteger, d)

  // sanity check
  assert.equal(hash.length, 32, 'Hash must be 256 bit')

  var x = d.toBuffer(32)
  var k = new Buffer(32)
  var v = new Buffer(32)

  // Step B
  v.fill(1)

  // Step C
  k.fill(0)

  // Step D
  k = crypto.createHmac('sha256', k)
    .update(v)
    .update(ZERO)
    .update(x)
    .update(hash)
    .digest()

  // Step E
  v = crypto.createHmac('sha256', k).update(v).digest()

  // Step F
  k = crypto.createHmac('sha256', k)
    .update(v)
    .update(ONE)
    .update(x)
    .update(hash)
    .digest()

  // Step G
  v = crypto.createHmac('sha256', k).update(v).digest()

  // Step H1/H2a, ignored as tlen === qlen (256 bit)
  // Step H2b
  v = crypto.createHmac('sha256', k).update(v).digest()

  var T = BigInteger.fromBuffer(v)

  // Step H3, repeat until T is within the interval [1, n - 1]
  while ((T.signum() <= 0) || (T.compareTo(curve.n) >= 0)) {
    k = crypto.createHmac('sha256', k)
      .update(v)
      .update(ZERO)
      .digest()

    v = crypto.createHmac('sha256', k).update(v).digest()

    T = BigInteger.fromBuffer(v)
  }

  return T
}

function sign(curve, hash, d) {
  var k = deterministicGenerateK(curve, hash, d)

  var n = curve.n
  var G = curve.G
  var Q = G.multiply(k)
  var e = BigInteger.fromBuffer(hash)

  var r = Q.affineX.mod(n)
  assert.notEqual(r.signum(), 0, 'Invalid R value')

  var s = k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n)
  assert.notEqual(s.signum(), 0, 'Invalid S value')

  var N_OVER_TWO = n.shiftRight(1)

  // enforce low S values, see bip62: 'low s values in signatures'
  if (s.compareTo(N_OVER_TWO) > 0) {
    s = n.subtract(s)
  }

  return new ECSignature(r, s)
}

function verifyRaw(curve, e, signature, Q) {
  var n = curve.n
  var G = curve.G

  var r = signature.r
  var s = signature.s

  // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1]
  if (r.signum() <= 0 || r.compareTo(n) >= 0) return false
  if (s.signum() <= 0 || s.compareTo(n) >= 0) return false

  // c = s^-1 mod n
  var c = s.modInverse(n)

  // 1.4.4 Compute u1 = es^−1 mod n
  //               u2 = rs^−1 mod n
  var u1 = e.multiply(c).mod(n)
  var u2 = r.multiply(c).mod(n)

  // 1.4.5 Compute R = (xR, yR) = u1G + u2Q
  var R = G.multiplyTwo(u1, Q, u2)
  var v = R.affineX.mod(n)

  // 1.4.5 (cont.) Enforce R is not at infinity
  if (curve.isInfinity(R)) return false

  // 1.4.8 If v = r, output "valid", and if v != r, output "invalid"
  return v.equals(r)
}

function verify(curve, hash, signature, Q) {
  // 1.4.2 H = Hash(M), already done by the user
  // 1.4.3 e = H
  var e = BigInteger.fromBuffer(hash)

  return verifyRaw(curve, e, signature, Q)
}

/**
  * Recover a public key from a signature.
  *
  * See SEC 1: Elliptic Curve Cryptography, section 4.1.6, "Public
  * Key Recovery Operation".
  *
  * http://www.secg.org/download/aid-780/sec1-v2.pdf
  */
function recoverPubKey(curve, e, signature, i) {
  assert.strictEqual(i & 3, i, 'Recovery param is more than two bits')

  var n = curve.n
  var G = curve.G

  var r = signature.r
  var s = signature.s

  assert(r.signum() > 0 && r.compareTo(n) < 0, 'Invalid r value')
  assert(s.signum() > 0 && s.compareTo(n) < 0, 'Invalid s value')

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = i & 1

  // The more significant bit specifies whether we should use the
  // first or second candidate key.
  var isSecondKey = i >> 1

  // 1.1 Let x = r + jn
  var x = isSecondKey ? r.add(n) : r
  var R = curve.pointFromX(isYOdd, x)

  // 1.4 Check that nR is at infinity
  var nR = R.multiply(n)
  assert(curve.isInfinity(nR), 'nR is not a valid curve point')

  // Compute -e from e
  var eNeg = e.negate().mod(n)

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  var rInv = r.modInverse(n)

  var Q = R.multiplyTwo(s, G, eNeg).multiply(rInv)
  curve.validate(Q)

  return Q
}

/**
  * Calculate pubkey extraction parameter.
  *
  * When extracting a pubkey from a signature, we have to
  * distinguish four different cases. Rather than putting this
  * burden on the verifier, Bitcoin includes a 2-bit value with the
  * signature.
  *
  * This function simply tries all four cases and returns the value
  * that resulted in a successful pubkey recovery.
  */
function calcPubKeyRecoveryParam(curve, e, signature, Q) {
  for (var i = 0; i < 4; i++) {
    var Qprime = recoverPubKey(curve, e, signature, i)

    // 1.6.2 Verify Q
    if (Qprime.equals(Q)) {
      return i
    }
  }

  throw new Error('Unable to find valid recovery factor')
}

module.exports = {
  calcPubKeyRecoveryParam: calcPubKeyRecoveryParam,
  deterministicGenerateK: deterministicGenerateK,
  recoverPubKey: recoverPubKey,
  sign: sign,
  verify: verify,
  verifyRaw: verifyRaw
}

}).call(this,require("buffer").Buffer)
},{"./ecsignature":161,"./types":171,"assert":174,"bigi":4,"buffer":176,"crypto":10}],159:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var base58check = require('bs58check')
var crypto = require('crypto')
var ecdsa = require('./ecdsa')
var enforceType = require('./types')
var networks = require('./networks')

var BigInteger = require('bigi')
var ECPubKey = require('./ecpubkey')

var ecurve = require('ecurve')
var secp256k1 = ecurve.getCurveByName('secp256k1')

function ECKey(d, compressed) {
  assert(d.signum() > 0, 'Private key must be greater than 0')
  assert(d.compareTo(ECKey.curve.n) < 0, 'Private key must be less than the curve order')

  var Q = ECKey.curve.G.multiply(d)

  this.d = d
  this.pub = new ECPubKey(Q, compressed)
}

// Constants
ECKey.curve = secp256k1

// Static constructors
ECKey.fromWIF = function(string) {
  var payload = base58check.decode(string)
  var compressed = false

  // Ignore the version byte
  payload = payload.slice(1)

  if (payload.length === 33) {
    assert.strictEqual(payload[32], 0x01, 'Invalid compression flag')

    // Truncate the compression flag
    payload = payload.slice(0, -1)
    compressed = true
  }

  assert.equal(payload.length, 32, 'Invalid WIF payload length')

  var d = BigInteger.fromBuffer(payload)
  return new ECKey(d, compressed)
}

ECKey.makeRandom = function(compressed, rng) {
  rng = rng || crypto.randomBytes

  var buffer = rng(32)
  enforceType('Buffer', buffer)
  assert.equal(buffer.length, 32, 'Expected 256-bit Buffer from RNG')

  var d = BigInteger.fromBuffer(buffer)
  d = d.mod(ECKey.curve.n)

  return new ECKey(d, compressed)
}

// Export functions
ECKey.prototype.toWIF = function(network) {
  network = network || networks.bitcoin

  var bufferLen = this.pub.compressed ? 34 : 33
  var buffer = new Buffer(bufferLen)

  buffer.writeUInt8(network.wif, 0)
  this.d.toBuffer(32).copy(buffer, 1)

  if (this.pub.compressed) {
    buffer.writeUInt8(0x01, 33)
  }

  return base58check.encode(buffer)
}

// Operations
ECKey.prototype.sign = function(hash) {
  return ecdsa.sign(ECKey.curve, hash, this.d)
}

module.exports = ECKey

}).call(this,require("buffer").Buffer)
},{"./ecdsa":158,"./ecpubkey":160,"./networks":165,"./types":171,"assert":174,"bigi":4,"bs58check":6,"buffer":176,"crypto":10,"ecurve":150}],160:[function(require,module,exports){
(function (Buffer){
var crypto = require('./crypto')
var ecdsa = require('./ecdsa')
var enforceType = require('./types')
var networks = require('./networks')

var Address = require('./address')

var ecurve = require('ecurve')
var secp256k1 = ecurve.getCurveByName('secp256k1')

function ECPubKey(Q, compressed) {
  if (compressed === undefined) compressed = true

  enforceType(ecurve.Point, Q)
  enforceType('Boolean', compressed)

  this.compressed = compressed
  this.Q = Q
}

// Constants
ECPubKey.curve = secp256k1

// Static constructors
ECPubKey.fromBuffer = function(buffer) {
  var Q = ecurve.Point.decodeFrom(ECPubKey.curve, buffer)
  return new ECPubKey(Q, Q.compressed)
}

ECPubKey.fromHex = function(hex) {
  return ECPubKey.fromBuffer(new Buffer(hex, 'hex'))
}

// Operations
ECPubKey.prototype.getAddress = function(network) {
  network = network || networks.bitcoin

  return new Address(crypto.hash160(this.toBuffer()), network.pubKeyHash)
}

ECPubKey.prototype.verify = function(hash, signature) {
  return ecdsa.verify(ECPubKey.curve, hash, signature, this.Q)
}

// Export functions
ECPubKey.prototype.toBuffer = function() {
  return this.Q.getEncoded(this.compressed)
}

ECPubKey.prototype.toHex = function() {
  return this.toBuffer().toString('hex')
}

module.exports = ECPubKey

}).call(this,require("buffer").Buffer)
},{"./address":153,"./crypto":157,"./ecdsa":158,"./networks":165,"./types":171,"buffer":176,"ecurve":150}],161:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var enforceType = require('./types')

var BigInteger = require('bigi')

function ECSignature(r, s) {
  enforceType(BigInteger, r)
  enforceType(BigInteger, s)

  this.r = r
  this.s = s
}

// Import operations
ECSignature.parseCompact = function(buffer) {
  assert.equal(buffer.length, 65, 'Invalid signature length')
  var i = buffer.readUInt8(0) - 27

  // At most 3 bits
  assert.equal(i, i & 7, 'Invalid signature parameter')
  var compressed = !!(i & 4)

  // Recovery param only
  i = i & 3

  var r = BigInteger.fromBuffer(buffer.slice(1, 33))
  var s = BigInteger.fromBuffer(buffer.slice(33))

  return {
    compressed: compressed,
    i: i,
    signature: new ECSignature(r, s)
  }
}

ECSignature.fromDER = function(buffer) {
  assert.equal(buffer.readUInt8(0), 0x30, 'Not a DER sequence')
  assert.equal(buffer.readUInt8(1), buffer.length - 2, 'Invalid sequence length')
  assert.equal(buffer.readUInt8(2), 0x02, 'Expected a DER integer')

  var rLen = buffer.readUInt8(3)
  assert(rLen > 0, 'R length is zero')

  var offset = 4 + rLen
  assert.equal(buffer.readUInt8(offset), 0x02, 'Expected a DER integer (2)')

  var sLen = buffer.readUInt8(offset + 1)
  assert(sLen > 0, 'S length is zero')

  var rB = buffer.slice(4, offset)
  var sB = buffer.slice(offset + 2)
  offset += 2 + sLen

  if (rLen > 1 && rB.readUInt8(0) === 0x00) {
    assert(rB.readUInt8(1) & 0x80, 'R value excessively padded')
  }

  if (sLen > 1 && sB.readUInt8(0) === 0x00) {
    assert(sB.readUInt8(1) & 0x80, 'S value excessively padded')
  }

  assert.equal(offset, buffer.length, 'Invalid DER encoding')
  var r = BigInteger.fromDERInteger(rB)
  var s = BigInteger.fromDERInteger(sB)

  assert(r.signum() >= 0, 'R value is negative')
  assert(s.signum() >= 0, 'S value is negative')

  return new ECSignature(r, s)
}

// FIXME: 0x00, 0x04, 0x80 are SIGHASH_* boundary constants, importing Transaction causes a circular dependency
ECSignature.parseScriptSignature = function(buffer) {
  var hashType = buffer.readUInt8(buffer.length - 1)
  var hashTypeMod = hashType & ~0x80

  assert(hashTypeMod > 0x00 && hashTypeMod < 0x04, 'Invalid hashType')

  return {
    signature: ECSignature.fromDER(buffer.slice(0, -1)),
    hashType: hashType
  }
}

// Export operations
ECSignature.prototype.toCompact = function(i, compressed) {
  if (compressed) i += 4
  i += 27

  var buffer = new Buffer(65)
  buffer.writeUInt8(i, 0)

  this.r.toBuffer(32).copy(buffer, 1)
  this.s.toBuffer(32).copy(buffer, 33)

  return buffer
}

ECSignature.prototype.toDER = function() {
  var rBa = this.r.toDERInteger()
  var sBa = this.s.toDERInteger()

  var sequence = []

  // INTEGER
  sequence.push(0x02, rBa.length)
  sequence = sequence.concat(rBa)

  // INTEGER
  sequence.push(0x02, sBa.length)
  sequence = sequence.concat(sBa)

  // SEQUENCE
  sequence.unshift(0x30, sequence.length)

  return new Buffer(sequence)
}

ECSignature.prototype.toScriptSignature = function(hashType) {
  var hashTypeBuffer = new Buffer(1)
  hashTypeBuffer.writeUInt8(hashType, 0)

  return Buffer.concat([this.toDER(), hashTypeBuffer])
}

module.exports = ECSignature

}).call(this,require("buffer").Buffer)
},{"./types":171,"assert":174,"bigi":4,"buffer":176}],162:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var base58check = require('bs58check')
var bcrypto = require('./crypto')
var crypto = require('crypto')
var enforceType = require('./types')
var networks = require('./networks')

var BigInteger = require('bigi')
var ECKey = require('./eckey')
var ECPubKey = require('./ecpubkey')

var ecurve = require('ecurve')
var curve = ecurve.getCurveByName('secp256k1')

function findBIP32NetworkByVersion(version) {
  for (var name in networks) {
    var network = networks[name]

    if (version === network.bip32.private ||
        version === network.bip32.public) {

      return network
    }
  }

  assert(false, 'Could not find network for ' + version.toString(16))
}

function HDNode(K, chainCode, network) {
  network = network || networks.bitcoin

  enforceType('Buffer', chainCode)

  assert.equal(chainCode.length, 32, 'Expected chainCode length of 32, got ' + chainCode.length)
  assert(network.bip32, 'Unknown BIP32 constants for network')

  this.chainCode = chainCode
  this.depth = 0
  this.index = 0
  this.network = network

  if (K instanceof BigInteger) {
    this.privKey = new ECKey(K, true)
    this.pubKey = this.privKey.pub
  } else {
    this.pubKey = new ECPubKey(K, true)
  }
}

HDNode.MASTER_SECRET = new Buffer('Bitcoin seed')
HDNode.HIGHEST_BIT = 0x80000000
HDNode.LENGTH = 78

HDNode.fromSeedBuffer = function(seed, network) {
  enforceType('Buffer', seed)

  assert(seed.length >= 16, 'Seed should be at least 128 bits')
  assert(seed.length <= 64, 'Seed should be at most 512 bits')

  var I = crypto.createHmac('sha512', HDNode.MASTER_SECRET).update(seed).digest()
  var IL = I.slice(0, 32)
  var IR = I.slice(32)

  // In case IL is 0 or >= n, the master key is invalid
  // This is handled by `new ECKey` in the HDNode constructor
  var pIL = BigInteger.fromBuffer(IL)

  return new HDNode(pIL, IR, network)
}

HDNode.fromSeedHex = function(hex, network) {
  return HDNode.fromSeedBuffer(new Buffer(hex, 'hex'), network)
}

HDNode.fromBase58 = function(string, network) {
  return HDNode.fromBuffer(base58check.decode(string), network, true)
}

// FIXME: remove in 2.x.y
HDNode.fromBuffer = function(buffer, network, __ignoreDeprecation) {
  if (!__ignoreDeprecation) {
    console.warn('HDNode.fromBuffer() is deprecated for removal in 2.x.y, use fromBase58 instead')
  }

  assert.strictEqual(buffer.length, HDNode.LENGTH, 'Invalid buffer length')

  // 4 byte: version bytes
  var version = buffer.readUInt32BE(0)

  if (network) {
    assert(version === network.bip32.private || version === network.bip32.public, 'Network doesn\'t match')

  // auto-detect
  } else {
    network = findBIP32NetworkByVersion(version)
  }

  // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...
  var depth = buffer.readUInt8(4)

  // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)
  var parentFingerprint = buffer.readUInt32BE(5)
  if (depth === 0) {
    assert.strictEqual(parentFingerprint, 0x00000000, 'Invalid parent fingerprint')
  }

  // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
  // This is encoded in MSB order. (0x00000000 if master key)
  var index = buffer.readUInt32BE(9)
  assert(depth > 0 || index === 0, 'Invalid index')

  // 32 bytes: the chain code
  var chainCode = buffer.slice(13, 45)
  var data, hd

  // 33 bytes: private key data (0x00 + k)
  if (version === network.bip32.private) {
    assert.strictEqual(buffer.readUInt8(45), 0x00, 'Invalid private key')
    data = buffer.slice(46, 78)
    var d = BigInteger.fromBuffer(data)
    hd = new HDNode(d, chainCode, network)

  // 33 bytes: public key data (0x02 + X or 0x03 + X)
  } else {
    data = buffer.slice(45, 78)
    var Q = ecurve.Point.decodeFrom(curve, data)
    assert.equal(Q.compressed, true, 'Invalid public key')

    // Verify that the X coordinate in the public point corresponds to a point on the curve.
    // If not, the extended public key is invalid.
    curve.validate(Q)

    hd = new HDNode(Q, chainCode, network)
  }

  hd.depth = depth
  hd.index = index
  hd.parentFingerprint = parentFingerprint

  return hd
}

// FIXME: remove in 2.x.y
HDNode.fromHex = function(hex, network) {
  return HDNode.fromBuffer(new Buffer(hex, 'hex'), network)
}

HDNode.prototype.getIdentifier = function() {
  return bcrypto.hash160(this.pubKey.toBuffer())
}

HDNode.prototype.getFingerprint = function() {
  return this.getIdentifier().slice(0, 4)
}

HDNode.prototype.getAddress = function() {
  return this.pubKey.getAddress(this.network)
}

HDNode.prototype.neutered = function() {
  var neutered = new HDNode(this.pubKey.Q, this.chainCode, this.network)
  neutered.depth = this.depth
  neutered.index = this.index
  neutered.parentFingerprint = this.parentFingerprint

  return neutered
}

HDNode.prototype.toBase58 = function(isPrivate) {
  return base58check.encode(this.toBuffer(isPrivate, true))
}

// FIXME: remove in 2.x.y
HDNode.prototype.toBuffer = function(isPrivate, __ignoreDeprecation) {
  if (isPrivate === undefined) {
    isPrivate = !!this.privKey

  // FIXME: remove in 2.x.y
  } else {
    console.warn('isPrivate flag is deprecated, please use the .neutered() method instead')
  }

  if (!__ignoreDeprecation) {
    console.warn('HDNode.toBuffer() is deprecated for removal in 2.x.y, use toBase58 instead')
  }

  // Version
  var version = isPrivate ? this.network.bip32.private : this.network.bip32.public
  var buffer = new Buffer(HDNode.LENGTH)

  // 4 bytes: version bytes
  buffer.writeUInt32BE(version, 0)

  // Depth
  // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....
  buffer.writeUInt8(this.depth, 4)

  // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)
  var fingerprint = (this.depth === 0) ? 0x00000000 : this.parentFingerprint
  buffer.writeUInt32BE(fingerprint, 5)

  // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
  // This is encoded in Big endian. (0x00000000 if master key)
  buffer.writeUInt32BE(this.index, 9)

  // 32 bytes: the chain code
  this.chainCode.copy(buffer, 13)

  // 33 bytes: the public key or private key data
  if (isPrivate) {
    // FIXME: remove in 2.x.y
    assert(this.privKey, 'Missing private key')

    // 0x00 + k for private keys
    buffer.writeUInt8(0, 45)
    this.privKey.d.toBuffer(32).copy(buffer, 46)
  } else {

    // X9.62 encoding for public keys
    this.pubKey.toBuffer().copy(buffer, 45)
  }

  return buffer
}

// FIXME: remove in 2.x.y
HDNode.prototype.toHex = function(isPrivate) {
  return this.toBuffer(isPrivate).toString('hex')
}

// https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions
HDNode.prototype.derive = function(index) {
  var isHardened = index >= HDNode.HIGHEST_BIT
  var indexBuffer = new Buffer(4)
  indexBuffer.writeUInt32BE(index, 0)

  var data

  // Hardened child
  if (isHardened) {
    assert(this.privKey, 'Could not derive hardened child key')

    // data = 0x00 || ser256(kpar) || ser32(index)
    data = Buffer.concat([
      this.privKey.d.toBuffer(33),
      indexBuffer
    ])

  // Normal child
  } else {
    // data = serP(point(kpar)) || ser32(index)
    //      = serP(Kpar) || ser32(index)
    data = Buffer.concat([
      this.pubKey.toBuffer(),
      indexBuffer
    ])
  }

  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()
  var IL = I.slice(0, 32)
  var IR = I.slice(32)

  var pIL = BigInteger.fromBuffer(IL)

  // In case parse256(IL) >= n, proceed with the next value for i
  if (pIL.compareTo(curve.n) >= 0) {
    return this.derive(index + 1)
  }

  // Private parent key -> private child key
  var hd
  if (this.privKey) {
    // ki = parse256(IL) + kpar (mod n)
    var ki = pIL.add(this.privKey.d).mod(curve.n)

    // In case ki == 0, proceed with the next value for i
    if (ki.signum() === 0) {
      return this.derive(index + 1)
    }

    hd = new HDNode(ki, IR, this.network)

  // Public parent key -> public child key
  } else {
    // Ki = point(parse256(IL)) + Kpar
    //    = G*IL + Kpar
    var Ki = curve.G.multiply(pIL).add(this.pubKey.Q)

    // In case Ki is the point at infinity, proceed with the next value for i
    if (curve.isInfinity(Ki)) {
      return this.derive(index + 1)
    }

    hd = new HDNode(Ki, IR, this.network)
  }

  hd.depth = this.depth + 1
  hd.index = index
  hd.parentFingerprint = this.getFingerprint().readUInt32BE(0)

  return hd
}

HDNode.prototype.deriveHardened = function(index) {
  // Only derives hardened private keys by default
  return this.derive(index + HDNode.HIGHEST_BIT)
}

HDNode.prototype.toString = HDNode.prototype.toBase58

module.exports = HDNode

}).call(this,require("buffer").Buffer)
},{"./crypto":157,"./eckey":159,"./ecpubkey":160,"./networks":165,"./types":171,"assert":174,"bigi":4,"bs58check":6,"buffer":176,"crypto":10,"ecurve":150}],163:[function(require,module,exports){
module.exports = {
  Address: require('./address'),
  base58check: require('./base58check'),
  Block: require('./block'),
  bufferutils: require('./bufferutils'),
  crypto: require('./crypto'),
  ecdsa: require('./ecdsa'),
  ECKey: require('./eckey'),
  ECPubKey: require('./ecpubkey'),
  ECSignature: require('./ecsignature'),
  Message: require('./message'),
  opcodes: require('./opcodes'),
  HDNode: require('./hdnode'),
  Script: require('./script'),
  scripts: require('./scripts'),
  Transaction: require('./transaction'),
  TransactionBuilder: require('./transaction_builder'),
  networks: require('./networks'),
  Wallet: require('./wallet')
}

},{"./address":153,"./base58check":154,"./block":155,"./bufferutils":156,"./crypto":157,"./ecdsa":158,"./eckey":159,"./ecpubkey":160,"./ecsignature":161,"./hdnode":162,"./message":164,"./networks":165,"./opcodes":166,"./script":167,"./scripts":168,"./transaction":169,"./transaction_builder":170,"./wallet":172}],164:[function(require,module,exports){
(function (Buffer){
var bufferutils = require('./bufferutils')
var crypto = require('./crypto')
var ecdsa = require('./ecdsa')
var networks = require('./networks')

var BigInteger = require('bigi')
var ECPubKey = require('./ecpubkey')
var ECSignature = require('./ecsignature')

var ecurve = require('ecurve')
var ecparams = ecurve.getCurveByName('secp256k1')

function magicHash(message, network) {
  var magicPrefix = new Buffer(network.magicPrefix)
  var messageBuffer = new Buffer(message)
  var lengthBuffer = bufferutils.varIntBuffer(messageBuffer.length)

  var buffer = Buffer.concat([magicPrefix, lengthBuffer, messageBuffer])
  return crypto.hash256(buffer)
}

function sign(privKey, message, network) {
  network = network || networks.bitcoin

  var hash = magicHash(message, network)
  var signature = privKey.sign(hash)
  var e = BigInteger.fromBuffer(hash)
  var i = ecdsa.calcPubKeyRecoveryParam(ecparams, e, signature, privKey.pub.Q)

  return signature.toCompact(i, privKey.pub.compressed)
}

// TODO: network could be implied from address
function verify(address, signature, message, network) {
  if (!Buffer.isBuffer(signature)) {
    signature = new Buffer(signature, 'base64')
  }

  network = network || networks.bitcoin

  var hash = magicHash(message, network)
  var parsed = ECSignature.parseCompact(signature)
  var e = BigInteger.fromBuffer(hash)
  var Q = ecdsa.recoverPubKey(ecparams, e, parsed.signature, parsed.i)

  var pubKey = new ECPubKey(Q, parsed.compressed)
  return pubKey.getAddress(network).toString() === address.toString()
}

module.exports = {
  magicHash: magicHash,
  sign: sign,
  verify: verify
}

}).call(this,require("buffer").Buffer)
},{"./bufferutils":156,"./crypto":157,"./ecdsa":158,"./ecpubkey":160,"./ecsignature":161,"./networks":165,"bigi":4,"buffer":176,"ecurve":150}],165:[function(require,module,exports){
// https://en.bitcoin.it/wiki/List_of_address_prefixes
// Dogecoin BIP32 is a proposed standard: https://bitcointalk.org/index.php?topic=409731

var networks = {
  bitcoin: {
    magicPrefix: '\x18Bitcoin Signed Message:\n',
    bip32: {
      public: 0x0488b21e,
      private: 0x0488ade4
    },
    pubKeyHash: 0x00,
    scriptHash: 0x05,
    wif: 0x80,
    dustThreshold: 546, // https://github.com/bitcoin/bitcoin/blob/v0.9.2/src/core.h#L151-L162
    feePerKb: 10000, // https://github.com/bitcoin/bitcoin/blob/v0.9.2/src/main.cpp#L53
    estimateFee: estimateFee('bitcoin')
  },
  testnet: {
    magicPrefix: '\x18Bitcoin Signed Message:\n',
    bip32: {
      public: 0x043587cf,
      private: 0x04358394
    },
    pubKeyHash: 0x6f,
    scriptHash: 0xc4,
    wif: 0xef,
    dustThreshold: 546,
    feePerKb: 10000,
    estimateFee: estimateFee('testnet')
  },
  litecoin: {
    magicPrefix: '\x19Litecoin Signed Message:\n',
    bip32: {
      public: 0x019da462,
      private: 0x019d9cfe
    },
    pubKeyHash: 0x30,
    scriptHash: 0x05,
    wif: 0xb0,
    dustThreshold: 0, // https://github.com/litecoin-project/litecoin/blob/v0.8.7.2/src/main.cpp#L360-L365
    dustSoftThreshold: 100000, // https://github.com/litecoin-project/litecoin/blob/v0.8.7.2/src/main.h#L53
    feePerKb: 100000, // https://github.com/litecoin-project/litecoin/blob/v0.8.7.2/src/main.cpp#L56
    estimateFee: estimateFee('litecoin')
  },
  dogecoin: {
    magicPrefix: '\x19Dogecoin Signed Message:\n',
    bip32: {
      public: 0x02facafd,
      private: 0x02fac398
    },
    pubKeyHash: 0x1e,
    scriptHash: 0x16,
    wif: 0x9e,
    dustThreshold: 0, // https://github.com/dogecoin/dogecoin/blob/v1.7.1/src/core.h#L155-L160
    dustSoftThreshold: 100000000, // https://github.com/dogecoin/dogecoin/blob/v1.7.1/src/main.h#L62
    feePerKb: 100000000, // https://github.com/dogecoin/dogecoin/blob/v1.7.1/src/main.cpp#L58
    estimateFee: estimateFee('dogecoin')
  },
  viacoin: {
    magicPrefix: '\x18Viacoin Signed Message:\n',
    bip32: {
      public: 0x0488b21e,
      private: 0x0488ade4
    },
    pubKeyHash: 0x47,
    scriptHash: 0x21,
    wif: 0xc7,
    dustThreshold: 560,
    dustSoftThreshold: 100000,
    feePerKb: 100000, //
    estimateFee: estimateFee('viacoin')
  },
  viacointestnet: {
    magicPrefix: '\x18Viacoin Signed Message:\n',
    bip32: {
      public: 0x043587cf,
      private: 0x04358394
    },
    pubKeyHash: 0x7f,
    scriptHash: 0xc4,
    wif: 0xff,
    dustThreshold: 560,
    dustSoftThreshold: 100000,
    feePerKb: 100000,
    estimateFee: estimateFee('viacointestnet')
  },
  gamerscoin: {
    magicPrefix: '\x19Gamerscoin Signed Message:\n',
    bip32: {
      public: 0x019da462,
      private: 0x019d9cfe
    },
    pubKeyHash: 0x26,
    scriptHash: 0x05,
    wif: 0xA6,
    dustThreshold: 0, // https://github.com/gamers-coin/gamers-coinv3/blob/master/src/main.cpp#L358-L363
    dustSoftThreshold: 100000, // https://github.com/gamers-coin/gamers-coinv3/blob/master/src/main.cpp#L51
    feePerKb: 100000, // https://github.com/gamers-coin/gamers-coinv3/blob/master/src/main.cpp#L54
    estimateFee: estimateFee('gamerscoin')
  },
  jumbucks: {
    magicPrefix: '\x19Jumbucks Signed Message:\n',
    bip32: {
      public: 0x037a689a,
      private: 0x037a6460
    },
    pubKeyHash: 0x2b,
    scriptHash: 0x05,
    wif: 0xab,
    dustThreshold: 0,
    dustSoftThreshold: 10000,
    feePerKb: 10000,
    estimateFee: estimateFee('jumbucks')
  },
  zetacoin: {
    magicPrefix: '\x18Zetacoin Signed Message:\n',
    bip32: {
      public: 0x0488b21e,
      private: 0x0488ade4
    },
    pubKeyHash: 0x50,
    scriptHash: 0x09,
    wif: 0xe0,
    dustThreshold: 546, // https://github.com/zetacoin/zetacoin/blob/master/src/core.h#L159
    feePerKb: 10000, // https://github.com/zetacoin/zetacoin/blob/master/src/main.cpp#L54
    estimateFee: estimateFee('zetacoin')
  }
}

function estimateFee(type) {
  return function(tx) {
    var network = networks[type]
    var baseFee = network.feePerKb
    var byteSize = tx.toBuffer().length

    var fee = baseFee * Math.ceil(byteSize / 1000)
    if (network.dustSoftThreshold == undefined) return fee

    tx.outs.forEach(function(e){
      if (e.value < network.dustSoftThreshold) {
        fee += baseFee
      }
    })

    return fee
  }
}

module.exports = networks

},{}],166:[function(require,module,exports){
module.exports = {
  // push value
  OP_FALSE     : 0,
  OP_0         : 0,
  OP_PUSHDATA1 : 76,
  OP_PUSHDATA2 : 77,
  OP_PUSHDATA4 : 78,
  OP_1NEGATE   : 79,
  OP_RESERVED  : 80,
  OP_1         : 81,
  OP_TRUE      : 81,
  OP_2         : 82,
  OP_3         : 83,
  OP_4         : 84,
  OP_5         : 85,
  OP_6         : 86,
  OP_7         : 87,
  OP_8         : 88,
  OP_9         : 89,
  OP_10        : 90,
  OP_11        : 91,
  OP_12        : 92,
  OP_13        : 93,
  OP_14        : 94,
  OP_15        : 95,
  OP_16        : 96,

  // control
  OP_NOP       : 97,
  OP_VER       : 98,
  OP_IF        : 99,
  OP_NOTIF     : 100,
  OP_VERIF     : 101,
  OP_VERNOTIF  : 102,
  OP_ELSE      : 103,
  OP_ENDIF     : 104,
  OP_VERIFY    : 105,
  OP_RETURN    : 106,

  // stack ops
  OP_TOALTSTACK   : 107,
  OP_FROMALTSTACK : 108,
  OP_2DROP        : 109,
  OP_2DUP         : 110,
  OP_3DUP         : 111,
  OP_2OVER        : 112,
  OP_2ROT         : 113,
  OP_2SWAP        : 114,
  OP_IFDUP        : 115,
  OP_DEPTH        : 116,
  OP_DROP         : 117,
  OP_DUP          : 118,
  OP_NIP          : 119,
  OP_OVER         : 120,
  OP_PICK         : 121,
  OP_ROLL         : 122,
  OP_ROT          : 123,
  OP_SWAP         : 124,
  OP_TUCK         : 125,

  // splice ops
  OP_CAT          : 126,
  OP_SUBSTR       : 127,
  OP_LEFT         : 128,
  OP_RIGHT        : 129,
  OP_SIZE         : 130,

  // bit logic
  OP_INVERT       : 131,
  OP_AND          : 132,
  OP_OR           : 133,
  OP_XOR          : 134,
  OP_EQUAL        : 135,
  OP_EQUALVERIFY  : 136,
  OP_RESERVED1    : 137,
  OP_RESERVED2    : 138,

  // numeric
  OP_1ADD         : 139,
  OP_1SUB         : 140,
  OP_2MUL         : 141,
  OP_2DIV         : 142,
  OP_NEGATE       : 143,
  OP_ABS          : 144,
  OP_NOT          : 145,
  OP_0NOTEQUAL    : 146,

  OP_ADD          : 147,
  OP_SUB          : 148,
  OP_MUL          : 149,
  OP_DIV          : 150,
  OP_MOD          : 151,
  OP_LSHIFT       : 152,
  OP_RSHIFT       : 153,

  OP_BOOLAND             : 154,
  OP_BOOLOR              : 155,
  OP_NUMEQUAL            : 156,
  OP_NUMEQUALVERIFY      : 157,
  OP_NUMNOTEQUAL         : 158,
  OP_LESSTHAN            : 159,
  OP_GREATERTHAN         : 160,
  OP_LESSTHANOREQUAL     : 161,
  OP_GREATERTHANOREQUAL  : 162,
  OP_MIN                 : 163,
  OP_MAX                 : 164,

  OP_WITHIN              : 165,

  // crypto
  OP_RIPEMD160           : 166,
  OP_SHA1                : 167,
  OP_SHA256              : 168,
  OP_HASH160             : 169,
  OP_HASH256             : 170,
  OP_CODESEPARATOR       : 171,
  OP_CHECKSIG            : 172,
  OP_CHECKSIGVERIFY      : 173,
  OP_CHECKMULTISIG       : 174,
  OP_CHECKMULTISIGVERIFY : 175,

  // expansion
  OP_NOP1  : 176,
  OP_NOP2  : 177,
  OP_NOP3  : 178,
  OP_NOP4  : 179,
  OP_NOP5  : 180,
  OP_NOP6  : 181,
  OP_NOP7  : 182,
  OP_NOP8  : 183,
  OP_NOP9  : 184,
  OP_NOP10 : 185,

  // template matching params
  OP_PUBKEYHASH    : 253,
  OP_PUBKEY        : 254,
  OP_INVALIDOPCODE : 255
}

},{}],167:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var bufferutils = require('./bufferutils')
var crypto = require('./crypto')
var enforceType = require('./types')
var opcodes = require('./opcodes')

function Script(buffer, chunks) {
  enforceType('Buffer', buffer)
  enforceType('Array', chunks)

  this.buffer = buffer
  this.chunks = chunks
}

// Import operations
Script.fromASM = function(asm) {
  var strChunks = asm.split(' ')

  var chunks = strChunks.map(function(strChunk) {
    if (strChunk in opcodes) {
      return opcodes[strChunk]

    } else {
      return new Buffer(strChunk, 'hex')
    }
  })

  return Script.fromChunks(chunks)
}

Script.fromBuffer = function(buffer) {
  var chunks = []

  var i = 0

  while (i < buffer.length) {
    var opcode = buffer.readUInt8(i)

    if ((opcode > opcodes.OP_0) && (opcode <= opcodes.OP_PUSHDATA4)) {
      var d = bufferutils.readPushDataInt(buffer, i)
      i += d.size

      var data = buffer.slice(i, i + d.number)
      i += d.number

      chunks.push(data)

    } else {
      chunks.push(opcode)

      i += 1
    }
  }

  return new Script(buffer, chunks)
}

Script.fromChunks = function(chunks) {
  enforceType('Array', chunks)

  var bufferSize = chunks.reduce(function(accum, chunk) {
    if (Buffer.isBuffer(chunk)) {
      return accum + bufferutils.pushDataSize(chunk.length) + chunk.length
    }

    return accum + 1
  }, 0.0)

  var buffer = new Buffer(bufferSize)
  var offset = 0

  chunks.forEach(function(chunk) {
    if (Buffer.isBuffer(chunk)) {
      offset += bufferutils.writePushDataInt(buffer, chunk.length, offset)

      chunk.copy(buffer, offset)
      offset += chunk.length

    } else {
      buffer.writeUInt8(chunk, offset)
      offset += 1
    }
  })

  assert.equal(offset, buffer.length, 'Could not decode chunks')
  return new Script(buffer, chunks)
}

Script.fromHex = function(hex) {
  return Script.fromBuffer(new Buffer(hex, 'hex'))
}

// Constants
Script.EMPTY = Script.fromChunks([])

// Operations
Script.prototype.getHash = function() {
  return crypto.hash160(this.buffer)
}

// FIXME: doesn't work for data chunks, maybe time to use buffertools.compare...
Script.prototype.without = function(needle) {
  return Script.fromChunks(this.chunks.filter(function(op) {
    return op !== needle
  }))
}

// Export operations
var reverseOps = []
for (var op in opcodes) {
  var code = opcodes[op]
  reverseOps[code] = op
}

Script.prototype.toASM = function() {
  return this.chunks.map(function(chunk) {
    if (Buffer.isBuffer(chunk)) {
      return chunk.toString('hex')

    } else {
      return reverseOps[chunk]
    }
  }).join(' ')
}

Script.prototype.toBuffer = function() {
  return this.buffer
}

Script.prototype.toHex = function() {
  return this.toBuffer().toString('hex')
}

module.exports = Script

}).call(this,require("buffer").Buffer)
},{"./bufferutils":156,"./crypto":157,"./opcodes":166,"./types":171,"assert":174,"buffer":176}],168:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var enforceType = require('./types')
var ops = require('./opcodes')

var ecurve = require('ecurve')
var curve = ecurve.getCurveByName('secp256k1')

var ECSignature = require('./ecsignature')
var Script = require('./script')

function isCanonicalPubKey(buffer) {
  if (!Buffer.isBuffer(buffer)) return false

  try {
    ecurve.Point.decodeFrom(curve, buffer)
  } catch (e) {
    if (!(e.message.match(/Invalid sequence (length|tag)/))) throw e

    return false
  }

  return true
}

function isCanonicalSignature(buffer) {
  if (!Buffer.isBuffer(buffer)) return false

  try {
    ECSignature.parseScriptSignature(buffer)
  } catch(e) {
    if (!(e.message.match(/Not a DER sequence|Invalid sequence length|Expected a DER integer|R length is zero|S length is zero|R value excessively padded|S value excessively padded|R value is negative|S value is negative|Invalid hashType/))) throw e

    return false
  }

  return true
}

function isPubKeyHashInput(script) {
  return script.chunks.length === 2 &&
    isCanonicalSignature(script.chunks[0]) &&
    isCanonicalPubKey(script.chunks[1])
}

function isPubKeyHashOutput(script) {
  return script.chunks.length === 5 &&
    script.chunks[0] === ops.OP_DUP &&
    script.chunks[1] === ops.OP_HASH160 &&
    Buffer.isBuffer(script.chunks[2]) &&
    script.chunks[2].length === 20 &&
    script.chunks[3] === ops.OP_EQUALVERIFY &&
    script.chunks[4] === ops.OP_CHECKSIG
}

function isPubKeyInput(script) {
  return script.chunks.length === 1 &&
    isCanonicalSignature(script.chunks[0])
}

function isPubKeyOutput(script) {
  return script.chunks.length === 2 &&
    isCanonicalPubKey(script.chunks[0]) &&
    script.chunks[1] === ops.OP_CHECKSIG
}

function isScriptHashInput(script) {
  if (script.chunks.length < 2) return false
  var lastChunk = script.chunks[script.chunks.length - 1]

  if (!Buffer.isBuffer(lastChunk)) return false

  var scriptSig = Script.fromChunks(script.chunks.slice(0, -1))
  var scriptPubKey = Script.fromBuffer(lastChunk)

  return classifyInput(scriptSig) === classifyOutput(scriptPubKey)
}

function isScriptHashOutput(script) {
  return script.chunks.length === 3 &&
    script.chunks[0] === ops.OP_HASH160 &&
    Buffer.isBuffer(script.chunks[1]) &&
    script.chunks[1].length === 20 &&
    script.chunks[2] === ops.OP_EQUAL
}

function isMultisigInput(script) {
  return script.chunks[0] === ops.OP_0 &&
    script.chunks.slice(1).every(isCanonicalSignature)
}

function isMultisigOutput(script) {
  if (script.chunks.length < 4) return false
  if (script.chunks[script.chunks.length - 1] !== ops.OP_CHECKMULTISIG) return false

  var mOp = script.chunks[0]
  if (mOp === ops.OP_0) return false
  if (mOp < ops.OP_1) return false
  if (mOp > ops.OP_16) return false

  var nOp = script.chunks[script.chunks.length - 2]
  if (nOp === ops.OP_0) return false
  if (nOp < ops.OP_1) return false
  if (nOp > ops.OP_16) return false

  var m = mOp - (ops.OP_1 - 1)
  var n = nOp - (ops.OP_1 - 1)
  if (n < m) return false

  var pubKeys = script.chunks.slice(1, -2)
  if (n < pubKeys.length) return false

  return pubKeys.every(isCanonicalPubKey)
}

function isNullDataOutput(script) {
  return script.chunks[0] === ops.OP_RETURN
}

function classifyOutput(script) {
  enforceType(Script, script)

  if (isPubKeyHashOutput(script)) {
    return 'pubkeyhash'
  } else if (isScriptHashOutput(script)) {
    return 'scripthash'
  } else if (isMultisigOutput(script)) {
    return 'multisig'
  } else if (isPubKeyOutput(script)) {
    return 'pubkey'
  } else if (isNullDataOutput(script)) {
    return 'nulldata'
  }

  return 'nonstandard'
}

function classifyInput(script) {
  enforceType(Script, script)

  if (isPubKeyHashInput(script)) {
    return 'pubkeyhash'
  } else if (isScriptHashInput(script)) {
    return 'scripthash'
  } else if (isMultisigInput(script)) {
    return 'multisig'
  } else if (isPubKeyInput(script)) {
    return 'pubkey'
  }

  return 'nonstandard'
}

// Standard Script Templates
// {pubKey} OP_CHECKSIG
function pubKeyOutput(pubKey) {
  return Script.fromChunks([
    pubKey.toBuffer(),
    ops.OP_CHECKSIG
  ])
}

// OP_DUP OP_HASH160 {pubKeyHash} OP_EQUALVERIFY OP_CHECKSIG
function pubKeyHashOutput(hash) {
  enforceType('Buffer', hash)

  return Script.fromChunks([
    ops.OP_DUP,
    ops.OP_HASH160,
    hash,
    ops.OP_EQUALVERIFY,
    ops.OP_CHECKSIG
  ])
}

// OP_HASH160 {scriptHash} OP_EQUAL
function scriptHashOutput(hash) {
  enforceType('Buffer', hash)

  return Script.fromChunks([
    ops.OP_HASH160,
    hash,
    ops.OP_EQUAL
  ])
}

// m [pubKeys ...] n OP_CHECKMULTISIG
function multisigOutput(m, pubKeys) {
  enforceType('Array', pubKeys)

  assert(pubKeys.length >= m, 'Not enough pubKeys provided')

  var pubKeyBuffers = pubKeys.map(function(pubKey) {
    return pubKey.toBuffer()
  })
  var n = pubKeys.length

  return Script.fromChunks([].concat(
    (ops.OP_1 - 1) + m,
    pubKeyBuffers,
    (ops.OP_1 - 1) + n,
    ops.OP_CHECKMULTISIG
  ))
}

// {signature}
function pubKeyInput(signature) {
  enforceType('Buffer', signature)

  return Script.fromChunks([signature])
}

// {signature} {pubKey}
function pubKeyHashInput(signature, pubKey) {
  enforceType('Buffer', signature)

  return Script.fromChunks([signature, pubKey.toBuffer()])
}

// <scriptSig> {serialized scriptPubKey script}
function scriptHashInput(scriptSig, scriptPubKey) {
  return Script.fromChunks([].concat(
    scriptSig.chunks,
    scriptPubKey.toBuffer()
  ))
}

// OP_0 [signatures ...]
function multisigInput(signatures, scriptPubKey) {
  if (scriptPubKey) {
    assert(isMultisigOutput(scriptPubKey))

    var mOp = scriptPubKey.chunks[0]
    var nOp = scriptPubKey.chunks[scriptPubKey.chunks.length - 2]
    var m = mOp - (ops.OP_1 - 1)
    var n = nOp - (ops.OP_1 - 1)

    assert(signatures.length >= m, 'Not enough signatures provided')
    assert(signatures.length <= n, 'Too many signatures provided')
  }

  return Script.fromChunks([].concat(ops.OP_0, signatures))
}

function nullDataOutput(data) {
  return Script.fromChunks([ops.OP_RETURN, data])
}

module.exports = {
  isCanonicalPubKey: isCanonicalPubKey,
  isCanonicalSignature: isCanonicalSignature,
  isPubKeyHashInput: isPubKeyHashInput,
  isPubKeyHashOutput: isPubKeyHashOutput,
  isPubKeyInput: isPubKeyInput,
  isPubKeyOutput: isPubKeyOutput,
  isScriptHashInput: isScriptHashInput,
  isScriptHashOutput: isScriptHashOutput,
  isMultisigInput: isMultisigInput,
  isMultisigOutput: isMultisigOutput,
  isNullDataOutput: isNullDataOutput,
  classifyOutput: classifyOutput,
  classifyInput: classifyInput,
  pubKeyOutput: pubKeyOutput,
  pubKeyHashOutput: pubKeyHashOutput,
  scriptHashOutput: scriptHashOutput,
  multisigOutput: multisigOutput,
  pubKeyInput: pubKeyInput,
  pubKeyHashInput: pubKeyHashInput,
  scriptHashInput: scriptHashInput,
  multisigInput: multisigInput,
  dataOutput: function(data) {
    console.warn('dataOutput is deprecated, use nullDataOutput by 2.0.0')
    return nullDataOutput(data)
  },
  nullDataOutput: nullDataOutput
}

}).call(this,require("buffer").Buffer)
},{"./ecsignature":161,"./opcodes":166,"./script":167,"./types":171,"assert":174,"buffer":176,"ecurve":150}],169:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var bufferutils = require('./bufferutils')
var crypto = require('./crypto')
var enforceType = require('./types')
var opcodes = require('./opcodes')
var scripts = require('./scripts')

var Address = require('./address')
var ECSignature = require('./ecsignature')
var Script = require('./script')

function Transaction() {
  this.version = 1
  this.locktime = 0
  this.ins = []
  this.outs = []
}

Transaction.DEFAULT_SEQUENCE = 0xffffffff
Transaction.SIGHASH_ALL = 0x01
Transaction.SIGHASH_NONE = 0x02
Transaction.SIGHASH_SINGLE = 0x03
Transaction.SIGHASH_ANYONECANPAY = 0x80

Transaction.fromBuffer = function(buffer) {
  var offset = 0
  function readSlice(n) {
    offset += n
    return buffer.slice(offset - n, offset)
  }

  function readUInt32() {
    var i = buffer.readUInt32LE(offset)
    offset += 4
    return i
  }

  function readUInt64() {
    var i = bufferutils.readUInt64LE(buffer, offset)
    offset += 8
    return i
  }

  function readVarInt() {
    var vi = bufferutils.readVarInt(buffer, offset)
    offset += vi.size
    return vi.number
  }

  function readScript() {
    return Script.fromBuffer(readSlice(readVarInt()))
  }

  var tx = new Transaction()
  tx.version = readUInt32()

  var vinLen = readVarInt()
  for (var i = 0; i < vinLen; ++i) {
    tx.ins.push({
      hash: readSlice(32),
      index: readUInt32(),
      script: readScript(),
      sequence: readUInt32()
    })
  }

  var voutLen = readVarInt()
  for (i = 0; i < voutLen; ++i) {
    tx.outs.push({
      value: readUInt64(),
      script: readScript(),
    })
  }

  tx.locktime = readUInt32()
  assert.equal(offset, buffer.length, 'Transaction has unexpected data')

  return tx
}

Transaction.fromHex = function(hex) {
  return Transaction.fromBuffer(new Buffer(hex, 'hex'))
}

/**
 * Create a new txIn.
 *
 * Can be called with any of:
 *
 * - A transaction and an index
 * - A transaction hash and an index
 *
 * Note that this method does not sign the created input.
 */
Transaction.prototype.addInput = function(hash, index, sequence, script) {
  if (sequence === undefined) sequence = Transaction.DEFAULT_SEQUENCE
  script = script || Script.EMPTY

  if (typeof hash === 'string') {
    // TxId hex is big-endian, we need little-endian
    hash = bufferutils.reverse(new Buffer(hash, 'hex'))

  } else if (hash instanceof Transaction) {
    hash = hash.getHash()

  }

  enforceType('Buffer', hash)
  enforceType('Number', index)
  enforceType('Number', sequence)
  enforceType(Script, script)

  assert.equal(hash.length, 32, 'Expected hash length of 32, got ' + hash.length)

  // Add the input and return the input's index
  return (this.ins.push({
    hash: hash,
    index: index,
    script: script,
    sequence: sequence
  }) - 1)
}

/**
 * Create a new txOut.
 *
 * Can be called with:
 *
 * - A base58 address string and a value
 * - An Address object and a value
 * - A scriptPubKey Script and a value
 */
Transaction.prototype.addOutput = function(scriptPubKey, value) {
  // Attempt to get a valid address if it's a base58 address string
  if (typeof scriptPubKey === 'string') {
    scriptPubKey = Address.fromBase58Check(scriptPubKey)
  }

  // Attempt to get a valid script if it's an Address object
  if (scriptPubKey instanceof Address) {
    scriptPubKey = scriptPubKey.toOutputScript()
  }

  enforceType(Script, scriptPubKey)
  enforceType('Number', value)

  // Add the output and return the output's index
  return (this.outs.push({
    script: scriptPubKey,
    value: value
  }) - 1)
}

Transaction.prototype.clone = function () {
  var newTx = new Transaction()
  newTx.version = this.version
  newTx.locktime = this.locktime

  newTx.ins = this.ins.map(function(txIn) {
    return {
      hash: txIn.hash,
      index: txIn.index,
      script: txIn.script,
      sequence: txIn.sequence
    }
  })

  newTx.outs = this.outs.map(function(txOut) {
    return {
      script: txOut.script,
      value: txOut.value
    }
  })

  return newTx
}

/**
 * Hash transaction for signing a specific input.
 *
 * Bitcoin uses a different hash for each signed transaction input. This
 * method copies the transaction, makes the necessary changes based on the
 * hashType, serializes and finally hashes the result. This hash can then be
 * used to sign the transaction input in question.
 */
Transaction.prototype.hashForSignature = function(inIndex, prevOutScript, hashType) {
  // FIXME: remove in 2.x.y
  if (arguments[0] instanceof Script) {
    console.warn('hashForSignature(prevOutScript, inIndex, ...) has been deprecated. Use hashForSignature(inIndex, prevOutScript, ...)')

    // swap the arguments (must be stored in tmp, arguments is special)
    var tmp = arguments[0]
    inIndex = arguments[1]
    prevOutScript = tmp
  }

  enforceType('Number', inIndex)
  enforceType(Script, prevOutScript)
  enforceType('Number', hashType)

  assert(inIndex >= 0, 'Invalid vin index')
  assert(inIndex < this.ins.length, 'Invalid vin index')

  var txTmp = this.clone()
  var hashScript = prevOutScript.without(opcodes.OP_CODESEPARATOR)

  // Blank out other inputs' signatures
  txTmp.ins.forEach(function(txIn) {
    txIn.script = Script.EMPTY
  })
  txTmp.ins[inIndex].script = hashScript

  var hashTypeModifier = hashType & 0x1f
  if (hashTypeModifier === Transaction.SIGHASH_NONE) {
    assert(false, 'SIGHASH_NONE not yet supported')

  } else if (hashTypeModifier === Transaction.SIGHASH_SINGLE) {
    assert(false, 'SIGHASH_SINGLE not yet supported')

  }

  if (hashType & Transaction.SIGHASH_ANYONECANPAY) {
    assert(false, 'SIGHASH_ANYONECANPAY not yet supported')
  }

  var hashTypeBuffer = new Buffer(4)
  hashTypeBuffer.writeInt32LE(hashType, 0)

  var buffer = Buffer.concat([txTmp.toBuffer(), hashTypeBuffer])
  return crypto.hash256(buffer)
}

Transaction.prototype.getHash = function () {
  return crypto.hash256(this.toBuffer())
}

Transaction.prototype.getId = function () {
  // TxHash is little-endian, we need big-endian
  return bufferutils.reverse(this.getHash()).toString('hex')
}

Transaction.prototype.toBuffer = function () {
  var txInSize = this.ins.reduce(function(a, x) {
    return a + (40 + bufferutils.varIntSize(x.script.buffer.length) + x.script.buffer.length)
  }, 0)

  var txOutSize = this.outs.reduce(function(a, x) {
    return a + (8 + bufferutils.varIntSize(x.script.buffer.length) + x.script.buffer.length)
  }, 0)

  var buffer = new Buffer(
    8 +
    bufferutils.varIntSize(this.ins.length) +
    bufferutils.varIntSize(this.outs.length) +
    txInSize +
    txOutSize
  )

  var offset = 0
  function writeSlice(slice) {
    slice.copy(buffer, offset)
    offset += slice.length
  }

  function writeUInt32(i) {
    buffer.writeUInt32LE(i, offset)
    offset += 4
  }

  function writeUInt64(i) {
    bufferutils.writeUInt64LE(buffer, i, offset)
    offset += 8
  }

  function writeVarInt(i) {
    var n = bufferutils.writeVarInt(buffer, i, offset)
    offset += n
  }

  writeUInt32(this.version)
  writeVarInt(this.ins.length)

  this.ins.forEach(function(txIn) {
    writeSlice(txIn.hash)
    writeUInt32(txIn.index)
    writeVarInt(txIn.script.buffer.length)
    writeSlice(txIn.script.buffer)
    writeUInt32(txIn.sequence)
  })

  writeVarInt(this.outs.length)
  this.outs.forEach(function(txOut) {
    writeUInt64(txOut.value)
    writeVarInt(txOut.script.buffer.length)
    writeSlice(txOut.script.buffer)
  })

  writeUInt32(this.locktime)

  return buffer
}

Transaction.prototype.toHex = function() {
  return this.toBuffer().toString('hex')
}

Transaction.prototype.setInputScript = function(index, script) {
  this.ins[index].script = script
}

// FIXME: remove in 2.x.y
Transaction.prototype.sign = function(index, privKey, hashType) {
  console.warn("Transaction.prototype.sign is deprecated.  Use TransactionBuilder instead.")

  var prevOutScript = privKey.pub.getAddress().toOutputScript()
  var signature = this.signInput(index, prevOutScript, privKey, hashType)

  var scriptSig = scripts.pubKeyHashInput(signature, privKey.pub)
  this.setInputScript(index, scriptSig)
}

// FIXME: remove in 2.x.y
Transaction.prototype.signInput = function(index, prevOutScript, privKey, hashType) {
  console.warn("Transaction.prototype.signInput is deprecated.  Use TransactionBuilder instead.")

  hashType = hashType || Transaction.SIGHASH_ALL

  var hash = this.hashForSignature(index, prevOutScript, hashType)
  var signature = privKey.sign(hash)

  return signature.toScriptSignature(hashType)
}

// FIXME: remove in 2.x.y
Transaction.prototype.validateInput = function(index, prevOutScript, pubKey, buffer) {
  console.warn("Transaction.prototype.validateInput is deprecated.  Use TransactionBuilder instead.")

  var parsed = ECSignature.parseScriptSignature(buffer)
  var hash = this.hashForSignature(index, prevOutScript, parsed.hashType)

  return pubKey.verify(hash, parsed.signature)
}

module.exports = Transaction

}).call(this,require("buffer").Buffer)
},{"./address":153,"./bufferutils":156,"./crypto":157,"./ecsignature":161,"./opcodes":166,"./script":167,"./scripts":168,"./types":171,"assert":174,"buffer":176}],170:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var scripts = require('./scripts')

var ECPubKey = require('./ecpubkey')
var ECSignature = require('./ecsignature')
var Script = require('./script')
var Transaction = require('./transaction')

function TransactionBuilder() {
  this.prevOutMap = {}
  this.prevOutScripts = {}
  this.prevOutTypes = {}

  this.signatures = []
  this.tx = new Transaction()
}

// Static constructors
TransactionBuilder.fromTransaction = function(transaction) {
  var txb = new TransactionBuilder()

  // Extract/add inputs
  transaction.ins.forEach(function(txIn) {
    txb.addInput(txIn.hash, txIn.index, txIn.sequence)
  })

  // Extract/add outputs
  transaction.outs.forEach(function(txOut) {
    txb.addOutput(txOut.script, txOut.value)
  })

  // Extract/add signatures
  transaction.ins.forEach(function(txIn, i) {
    // Ignore empty scripts
    if (txIn.script.buffer.length === 0) return

    assert(!Array.prototype.every.call(txIn.hash, function(x) {
      return x === 0
    }), 'coinbase inputs not supported')

    var redeemScript
    var scriptSig = txIn.script
    var scriptType = scripts.classifyInput(scriptSig)

    // Re-classify if P2SH
    if (scriptType === 'scripthash') {
      redeemScript = Script.fromBuffer(scriptSig.chunks.slice(-1)[0])
      scriptSig = Script.fromChunks(scriptSig.chunks.slice(0, -1))

      scriptType = scripts.classifyInput(scriptSig)
      assert.equal(scripts.classifyOutput(redeemScript), scriptType, 'Non-matching scriptSig and scriptPubKey in input')
    }

    // Extract hashType, pubKeys and signatures
    var hashType, pubKeys, signatures

    switch (scriptType) {
      case 'pubkeyhash':
        var parsed = ECSignature.parseScriptSignature(scriptSig.chunks[0])
        var pubKey = ECPubKey.fromBuffer(scriptSig.chunks[1])

        hashType = parsed.hashType
        pubKeys = [pubKey]
        signatures = [parsed.signature]

        break

      case 'multisig':
        var scriptSigs = scriptSig.chunks.slice(1) // ignore OP_0
        var parsed = scriptSigs.map(function(scriptSig) {
          return ECSignature.parseScriptSignature(scriptSig)
        })

        hashType = parsed[0].hashType
        pubKeys = []
        signatures = parsed.map(function(p) { return p.signature })

        break

      case 'pubkey':
        var parsed = ECSignature.parseScriptSignature(scriptSig.chunks[0])

        hashType = parsed.hashType
        pubKeys = []
        signatures = [parsed.signature]

        break

      default:
        assert(false, scriptType + ' inputs not supported')
    }

    txb.signatures[i] = {
      hashType: hashType,
      pubKeys: pubKeys,
      redeemScript: redeemScript,
      scriptType: scriptType,
      signatures: signatures
    }
  })

  return txb
}

// Operations
TransactionBuilder.prototype.addInput = function(prevTx, index, sequence, prevOutScript) {
  var prevOutHash

  if (typeof prevTx === 'string') {
    prevOutHash = new Buffer(prevTx, 'hex')

    // TxId hex is big-endian, we want little-endian hash
    Array.prototype.reverse.call(prevOutHash)

  } else if (prevTx instanceof Transaction) {
    prevOutHash = prevTx.getHash()
    prevOutScript = prevTx.outs[index].script

  } else {
    prevOutHash = prevTx

  }

  var prevOutType
  if (prevOutScript !== undefined) {
    prevOutType = scripts.classifyOutput(prevOutScript)

    assert.notEqual(prevOutType, 'nonstandard', 'PrevOutScript not supported (nonstandard)')
  }

  assert(this.signatures.every(function(input) {
    return input.hashType & Transaction.SIGHASH_ANYONECANPAY
  }), 'No, this would invalidate signatures')

  var prevOut = prevOutHash.toString('hex') + ':' + index
  assert(!(prevOut in this.prevOutMap), 'Transaction is already an input')

  var vout = this.tx.addInput(prevOutHash, index, sequence)
  this.prevOutMap[prevOut] = true
  this.prevOutScripts[vout] = prevOutScript
  this.prevOutTypes[vout] = prevOutType

  return vout
}

TransactionBuilder.prototype.addOutput = function(scriptPubKey, value) {
  assert(this.signatures.every(function(signature) {
    return (signature.hashType & 0x1f) === Transaction.SIGHASH_SINGLE
  }), 'No, this would invalidate signatures')

  return this.tx.addOutput(scriptPubKey, value)
}

TransactionBuilder.prototype.build = function() {
  return this.__build(false)
}

TransactionBuilder.prototype.buildIncomplete = function() {
  return this.__build(true)
}

TransactionBuilder.prototype.__build = function(allowIncomplete) {
  if (!allowIncomplete) {
    assert(this.tx.ins.length > 0, 'Transaction has no inputs')
    assert(this.tx.outs.length > 0, 'Transaction has no outputs')
    assert(this.signatures.length > 0, 'Transaction has no signatures')
    assert.equal(this.signatures.length, this.tx.ins.length, 'Transaction is missing signatures')
  }

  var tx = this.tx.clone()

  // Create script signatures from signature meta-data
  this.signatures.forEach(function(input, index) {
    var scriptSig
    var scriptType = input.scriptType

    var signatures = input.signatures.map(function(signature) {
      return signature.toScriptSignature(input.hashType)
    })

    switch (scriptType) {
      case 'pubkeyhash':
        var signature = signatures[0]
        var pubKey = input.pubKeys[0]
        scriptSig = scripts.pubKeyHashInput(signature, pubKey)

        break

      case 'multisig':
        var redeemScript = allowIncomplete ? undefined : input.redeemScript
        scriptSig = scripts.multisigInput(signatures, redeemScript)

        break

      case 'pubkey':
        var signature = signatures[0]
        scriptSig = scripts.pubKeyInput(signature)

        break

      default:
        assert(false, scriptType + ' not supported')
    }

    if (input.redeemScript) {
      scriptSig = scripts.scriptHashInput(scriptSig, input.redeemScript)
    }

    tx.setInputScript(index, scriptSig)
  })

  return tx
}

TransactionBuilder.prototype.sign = function(index, privKey, redeemScript, hashType) {
  assert(this.tx.ins.length >= index, 'No input at index: ' + index)
  hashType = hashType || Transaction.SIGHASH_ALL

  var prevOutScript = this.prevOutScripts[index]
  var prevOutType = this.prevOutTypes[index]

  var scriptType, hash
  if (redeemScript) {
    prevOutScript = prevOutScript || scripts.scriptHashOutput(redeemScript.getHash())
    prevOutType = prevOutType || 'scripthash'

    assert.equal(prevOutType, 'scripthash', 'PrevOutScript must be P2SH')

    scriptType = scripts.classifyOutput(redeemScript)

    assert.notEqual(scriptType, 'scripthash', 'RedeemScript can\'t be P2SH')
    assert.notEqual(scriptType, 'nonstandard', 'RedeemScript not supported (nonstandard)')

    hash = this.tx.hashForSignature(index, redeemScript, hashType)

  } else {
    prevOutScript = prevOutScript || privKey.pub.getAddress().toOutputScript()
    prevOutType = prevOutType || 'pubkeyhash'

    assert.notEqual(prevOutType, 'scripthash', 'PrevOutScript is P2SH, missing redeemScript')

    scriptType = prevOutType

    hash = this.tx.hashForSignature(index, prevOutScript, hashType)
  }

  this.prevOutScripts[index] = prevOutScript
  this.prevOutTypes[index] = prevOutType

  if (!(index in this.signatures)) {
    this.signatures[index] = {
      hashType: hashType,
      pubKeys: [],
      redeemScript: redeemScript,
      scriptType: scriptType,
      signatures: []
    }
  } else {
    assert.equal(scriptType, 'multisig', scriptType + ' doesn\'t support multiple signatures')
  }

  var input = this.signatures[index]
  assert.equal(input.hashType, hashType, 'Inconsistent hashType')
  assert.deepEqual(input.redeemScript, redeemScript, 'Inconsistent redeemScript')

  var signature = privKey.sign(hash)
  input.pubKeys.push(privKey.pub)
  input.signatures.push(signature)
}

module.exports = TransactionBuilder

}).call(this,require("buffer").Buffer)
},{"./ecpubkey":160,"./ecsignature":161,"./script":167,"./scripts":168,"./transaction":169,"assert":174,"buffer":176}],171:[function(require,module,exports){
(function (Buffer){
module.exports = function enforce(type, value) {
  switch (type) {
    case 'Array': {
      if (Array.isArray(value)) return
      break
    }

    case 'Boolean': {
      if (typeof value === 'boolean') return
      break
    }

    case 'Buffer': {
      if (Buffer.isBuffer(value)) return
      break
    }

    case 'Number': {
      if (typeof value === 'number') return
      break
    }

    case 'String': {
      if (typeof value === 'string') return
      break
    }

    default: {
      if (getName(value.constructor) === getName(type)) return
    }
  }

  throw new TypeError('Expected ' + (getName(type) || type) + ', got ' + value)
}

function getName(fn) {
  // Why not fn.name: https://kangax.github.io/compat-table/es6/#function_name_property
  var match = fn.toString().match(/function (.*?)\(/)
  return match ? match[1] : null
}

}).call(this,require("buffer").Buffer)
},{"buffer":176}],172:[function(require,module,exports){
(function (Buffer){
var assert = require('assert')
var bufferutils = require('./bufferutils')
var crypto = require('crypto')
var enforceType = require('./types')
var networks = require('./networks')

var Address = require('./address')
var HDNode = require('./hdnode')
var TransactionBuilder = require('./transaction_builder')
var Script = require('./script')

function Wallet(seed, network) {
  console.warn('Wallet is deprecated and will be removed in 2.0.0, see #296')

  seed = seed || crypto.randomBytes(32)
  network = network || networks.bitcoin

  // Stored in a closure to make accidental serialization less likely
  var masterKey = HDNode.fromSeedBuffer(seed, network)

  // HD first-level child derivation method should be hardened
  // See https://bitcointalk.org/index.php?topic=405179.msg4415254#msg4415254
  var accountZero = masterKey.deriveHardened(0)
  var externalAccount = accountZero.derive(0)
  var internalAccount = accountZero.derive(1)

  this.addresses = []
  this.changeAddresses = []
  this.network = network
  this.unspents = []

  // FIXME: remove in 2.0.0
  this.unspentMap = {}

  // FIXME: remove in 2.0.0
  var me = this
  this.newMasterKey = function(seed) {
    console.warn('newMasterKey is deprecated, please make a new Wallet instance instead')

    seed = seed || crypto.randomBytes(32)
    masterKey = HDNode.fromSeedBuffer(seed, network)

    accountZero = masterKey.deriveHardened(0)
    externalAccount = accountZero.derive(0)
    internalAccount = accountZero.derive(1)

    me.addresses = []
    me.changeAddresses = []

    me.unspents = []
    me.unspentMap = {}
  }

  this.getMasterKey = function() { return masterKey }
  this.getAccountZero = function() { return accountZero }
  this.getExternalAccount = function() { return externalAccount }
  this.getInternalAccount = function() { return internalAccount }
}

Wallet.prototype.createTransaction = function(to, value, options) {
  // FIXME: remove in 2.0.0
  if (typeof options !== 'object') {
    if (options !== undefined) {
      console.warn('Non options object parameters are deprecated, use options object instead')

      options = {
        fixedFee: arguments[2],
        changeAddress: arguments[3]
      }
    }
  }

  options = options || {}

  assert(value > this.network.dustThreshold, value + ' must be above dust threshold (' + this.network.dustThreshold + ' Satoshis)')

  var changeAddress = options.changeAddress
  var fixedFee = options.fixedFee
  var minConf = options.minConf === undefined ? 0 : options.minConf // FIXME: change minConf:1 by default in 2.0.0

  // filter by minConf, then pending and sort by descending value
  var unspents = this.unspents.filter(function(unspent) {
    return unspent.confirmations >= minConf
  }).filter(function(unspent) {
    return !unspent.pending
  }).sort(function(o1, o2) {
    return o2.value - o1.value
  })

  var accum = 0
  var addresses = []
  var subTotal = value

  var txb = new TransactionBuilder()
  txb.addOutput(to, value)

  for (var i = 0; i < unspents.length; ++i) {
    var unspent = unspents[i]
    addresses.push(unspent.address)

    txb.addInput(unspent.txHash, unspent.index)

    var fee = fixedFee === undefined ? estimatePaddedFee(txb.buildIncomplete(), this.network) : fixedFee

    accum += unspent.value
    subTotal = value + fee

    if (accum >= subTotal) {
      var change = accum - subTotal

      if (change > this.network.dustThreshold) {
        txb.addOutput(changeAddress || this.getChangeAddress(), change)
      }

      break
    }
  }

  assert(accum >= subTotal, 'Not enough funds (incl. fee): ' + accum + ' < ' + subTotal)

  return this.signWith(txb, addresses).build()
}

// FIXME: remove in 2.0.0
Wallet.prototype.processPendingTx = function(tx){
  this.__processTx(tx, true)
}

// FIXME: remove in 2.0.0
Wallet.prototype.processConfirmedTx = function(tx){
  this.__processTx(tx, false)
}

// FIXME: remove in 2.0.0
Wallet.prototype.__processTx = function(tx, isPending) {
  console.warn('processTransaction is considered harmful, see issue #260 for more information')

  var txId = tx.getId()
  var txHash = tx.getHash()

  tx.outs.forEach(function(txOut, i) {
    var address

    try {
      address = Address.fromOutputScript(txOut.script, this.network).toString()
    } catch(e) {
      if (!(e.message.match(/has no matching Address/))) throw e
    }

    var myAddresses = this.addresses.concat(this.changeAddresses)
    if (myAddresses.indexOf(address) > -1) {
      var lookup = txId + ':' + i
      if (lookup in this.unspentMap) return

      // its unique, add it
      var unspent = {
        address: address,
        confirmations: 0, // no way to determine this without more information
        index: i,
        txHash: txHash,
        txId: txId,
        value: txOut.value,
        pending: isPending
      }

      this.unspentMap[lookup] = unspent
      this.unspents.push(unspent)
    }
  }, this)

  tx.ins.forEach(function(txIn, i) {
    // copy and convert to big-endian hex
    var txInId = bufferutils.reverse(txIn.hash).toString('hex')

    var lookup = txInId + ':' + txIn.index
    if (!(lookup in this.unspentMap)) return

    var unspent = this.unspentMap[lookup]

    if (isPending) {
      unspent.pending = true
      unspent.spent = true

    } else {
      delete this.unspentMap[lookup]

      this.unspents = this.unspents.filter(function(unspent2) {
        return unspent !== unspent2
      })
    }
  }, this)
}

Wallet.prototype.generateAddress = function() {
  var k = this.addresses.length
  var address = this.getExternalAccount().derive(k).getAddress()

  this.addresses.push(address.toString())

  return this.getReceiveAddress()
}

Wallet.prototype.generateChangeAddress = function() {
  var k = this.changeAddresses.length
  var address = this.getInternalAccount().derive(k).getAddress()

  this.changeAddresses.push(address.toString())

  return this.getChangeAddress()
}

Wallet.prototype.getAddress = function() {
  if (this.addresses.length === 0) {
    this.generateAddress()
  }

  return this.addresses[this.addresses.length - 1]
}

Wallet.prototype.getBalance = function(minConf) {
  minConf = minConf || 0

  return this.unspents.filter(function(unspent) {
    return unspent.confirmations >= minConf

  // FIXME: remove spent filter in 2.0.0
  }).filter(function(unspent) {
    return !unspent.spent
  }).reduce(function(accum, unspent) {
    return accum + unspent.value
  }, 0)
}

Wallet.prototype.getChangeAddress = function() {
  if (this.changeAddresses.length === 0) {
    this.generateChangeAddress()
  }

  return this.changeAddresses[this.changeAddresses.length - 1]
}

Wallet.prototype.getInternalPrivateKey = function(index) {
  return this.getInternalAccount().derive(index).privKey
}

Wallet.prototype.getPrivateKey = function(index) {
  return this.getExternalAccount().derive(index).privKey
}

Wallet.prototype.getPrivateKeyForAddress = function(address) {
  var index

  if ((index = this.addresses.indexOf(address)) > -1) {
    return this.getPrivateKey(index)
  }

  if ((index = this.changeAddresses.indexOf(address)) > -1) {
    return this.getInternalPrivateKey(index)
  }

  assert(false, 'Unknown address. Make sure the address is from the keychain and has been generated')
}

Wallet.prototype.getUnspentOutputs = function(minConf) {
  minConf = minConf || 0

  return this.unspents.filter(function(unspent) {
    return unspent.confirmations >= minConf

  // FIXME: remove spent filter in 2.0.0
  }).filter(function(unspent) {
    return !unspent.spent
  }).map(function(unspent) {
    return {
      address: unspent.address,
      confirmations: unspent.confirmations,
      index: unspent.index,
      txId: unspent.txId,
      value: unspent.value,

      // FIXME: remove in 2.0.0
      hash: unspent.txId,
      pending: unspent.pending
    }
  })
}

Wallet.prototype.setUnspentOutputs = function(unspents) {
  this.unspentMap = {}
  this.unspents = unspents.map(function(unspent) {
    // FIXME: remove unspent.hash in 2.0.0
    var txId = unspent.txId || unspent.hash
    var index = unspent.index

    // FIXME: remove in 2.0.0
    if (unspent.hash !== undefined) {
      console.warn('unspent.hash is deprecated, use unspent.txId instead')
    }

    // FIXME: remove in 2.0.0
    if (index === undefined) {
      console.warn('unspent.outputIndex is deprecated, use unspent.index instead')
      index = unspent.outputIndex
    }

    enforceType('String', txId)
    enforceType('Number', index)
    enforceType('Number', unspent.value)

    assert.equal(txId.length, 64, 'Expected valid txId, got ' + txId)
    assert.doesNotThrow(function() { Address.fromBase58Check(unspent.address) }, 'Expected Base58 Address, got ' + unspent.address)
    assert(isFinite(index), 'Expected finite index, got ' + index)

    // FIXME: remove branch in 2.0.0
    if (unspent.confirmations !== undefined) {
      enforceType('Number', unspent.confirmations)
    }

    var txHash = bufferutils.reverse(new Buffer(txId, 'hex'))

    unspent = {
      address: unspent.address,
      confirmations: unspent.confirmations || 0,
      index: index,
      txHash: txHash,
      txId: txId,
      value: unspent.value,

      // FIXME: remove in 2.0.0
      pending: unspent.pending || false
    }

    // FIXME: remove in 2.0.0
    this.unspentMap[txId + ':' + index] = unspent

    return unspent
  }, this)
}

Wallet.prototype.signWith = function(tx, addresses) {
  addresses.forEach(function(address, i) {
    var privKey = this.getPrivateKeyForAddress(address)

    tx.sign(i, privKey)
  }, this)

  return tx
}

function estimatePaddedFee(tx, network) {
  var tmpTx = tx.clone()
  tmpTx.addOutput(Script.EMPTY, network.dustSoftThreshold || 0)

  return network.estimateFee(tmpTx)
}

// FIXME: 1.0.0 shims, remove in 2.0.0
Wallet.prototype.getReceiveAddress = Wallet.prototype.getAddress
Wallet.prototype.createTx = Wallet.prototype.createTransaction

module.exports = Wallet

}).call(this,require("buffer").Buffer)
},{"./address":153,"./bufferutils":156,"./hdnode":162,"./networks":165,"./script":167,"./transaction_builder":170,"./types":171,"assert":174,"buffer":176,"crypto":10}],173:[function(require,module,exports){

},{}],174:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":333}],175:[function(require,module,exports){
arguments[4][173][0].apply(exports,arguments)
},{"dup":173}],176:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding) {
  var self = this
  if (!(self instanceof Buffer)) return new Buffer(subject, encoding)

  var type = typeof subject
  var length

  if (type === 'number') {
    length = +subject
  } else if (type === 'string') {
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) {
    // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data)) subject = subject.data
    length = +subject.length
  } else {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (length > kMaxLength) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum size: 0x' +
      kMaxLength.toString(16) + ' bytes')
  }

  if (length < 0) length = 0
  else length >>>= 0 // coerce to uint32

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    self = Buffer._augment(new Uint8Array(length)) // eslint-disable-line consistent-this
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    self.length = length
    self._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    self._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++) {
        self[i] = subject.readUInt8(i)
      }
    } else {
      for (i = 0; i < length; i++) {
        self[i] = ((subject[i] % 256) + 256) % 256
      }
    }
  } else if (type === 'string') {
    self.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT) {
    for (i = 0; i < length; i++) {
      self[i] = 0
    }
  }

  if (length > 0 && length <= Buffer.poolSize) self.parent = rootParent

  return self
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, totalLength) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function byteLength (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function toString (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0

  if (length < 0 || offset < 0 || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) >>> 0 & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) >>> 0 & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(
      this, value, offset, byteLength,
      Math.pow(2, 8 * byteLength - 1) - 1,
      -Math.pow(2, 8 * byteLength - 1)
    )
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(
      this, value, offset, byteLength,
      Math.pow(2, 8 * byteLength - 1) - 1,
      -Math.pow(2, 8 * byteLength - 1)
    )
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, target_start, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (target_start >= target.length) target_start = target.length
  if (!target_start) target_start = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (target_start < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - target_start < end - start) {
    end = target.length - target_start + start
  }

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  var i = 0

  for (; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (leadSurrogate) {
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        } else {
          // valid surrogate pair
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      } else {
        // no lead yet

        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else {
          // valid lead
          leadSurrogate = codePoint
          continue
        }
      }
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":177,"ieee754":178,"is-array":179}],177:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],178:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],179:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],180:[function(require,module,exports){
'use strict';

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')

exports.createHash = exports.Hash = require('create-hash')

exports.createHmac = exports.Hmac = require('create-hmac')

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes;
}

var p = require('pbkdf2-compat')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-aes');
[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key];
})

var dh = require('diffie-hellman');
[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key];
})

require('browserify-sign/inject')(module.exports, exports);

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt');

[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key];
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
  }
})

},{"browserify-aes":184,"browserify-sign/algos":199,"browserify-sign/inject":200,"create-ecdh":246,"create-hash":268,"create-hmac":279,"diffie-hellman":280,"pbkdf2-compat":287,"public-encrypt":288,"randombytes":371}],181:[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5');
module.exports = EVP_BytesToKey;
function EVP_BytesToKey(password, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary');
  }
  keyLen = keyLen/8;
  ivLen = ivLen || 0;
  var ki = 0;
  var ii = 0;
  var key = new Buffer(keyLen);
  var iv = new Buffer(ivLen);
  var addmd = 0;
  var md_buf;
  var i;
  var bufs =  [];
  while (true) {
    if(addmd++ > 0) {
       bufs.push(md_buf);
    }
    bufs.push(password);
    md_buf = md5(Buffer.concat(bufs));
    bufs = [];
    i = 0;
    if(keyLen > 0) {
      while(true) {
        if(keyLen === 0) {
          break;
        }
        if(i === md_buf.length) {
          break;
        }
        key[ki++] = md_buf[i];
        keyLen--;
        i++;
       }
    }
    if(ivLen > 0 && i !== md_buf.length) {
      while(true) {
        if(ivLen === 0) {
          break;
        }
        if(i === md_buf.length) {
          break;
        }
       iv[ii++] = md_buf[i];
       ivLen--;
       i++;
     }
   }
   if(keyLen === 0 && ivLen === 0) {
      break;
    }
  }
  for(i=0;i<md_buf.length;i++) {
    md_buf[i] = 0;
  }
  return {
    key: key,
    iv: iv
  };
}
}).call(this,require("buffer").Buffer)
},{"buffer":176,"create-hash/md5":270}],182:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"buffer":176,"dup":13}],183:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes');
var Transform = require('./cipherBase');
var inherits = require('inherits');
var GHASH = require('./ghash');
var xor = require('./xor');
inherits(StreamCipher, Transform);
module.exports = StreamCipher;

function StreamCipher(mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv);
  }
  Transform.call(this);
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])]);
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])]);
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  this._cache = new Buffer('');
  this._secCache = new Buffer('');
  this._decrypt = decrypt;
  this._alen = 0;
  this._len = 0;
  iv.copy(this._prev);
  this._mode = mode;
  var h = new Buffer(4);
  h.fill(0);
  this._ghash = new GHASH(this._cipher.encryptBlock(h));
  this._authTag = null;
  this._called = false;
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16);
    if (rump <16) {
      rump = new Buffer(rump);
      rump.fill(0);
      this._ghash.update(rump);
    }
  }
  this._called = true;
  var out = this._mode.encrypt(this, chunk);
  if (this._decrypt) {
    this._ghash.update(chunk);
  } else {
    this._ghash.update(out);
  }
  this._len += chunk.length;
  return out;
};
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data');
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data');
    }
  } else {
    this._authTag = tag;
  }
  this._cipher.scrub();
};
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag;
  } else {
    throw new Error('Attempting to get auth tag in unsupported state');
  }
};
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag;
  } else {
    throw new Error('Attempting to set auth tag in unsupported state');
  }
};
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf);
    this._alen += buf.length;
  } else {
    throw new Error('Attempting to set AAD in unsupported state');
  }
};
function xorTest(a, b) {
  var out = 0;
  if (a.length !== b.length) {
    out++;
  }
  var len = Math.min(a.length, b.length);
  var i = -1;
  while (++i < len) {
    out += (a[i] ^ b[i]);
  }
  return out;
}



}).call(this,require("buffer").Buffer)
},{"./aes":182,"./cipherBase":185,"./ghash":188,"./xor":198,"buffer":176,"inherits":315}],184:[function(require,module,exports){
var ciphers = require('./encrypter');
exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
var deciphers = require('./decrypter');
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
var modes = require('./modes');
function getCiphers () {
  return Object.keys(modes);
}
exports.listCiphers = exports.getCiphers = getCiphers;

},{"./decrypter":186,"./encrypter":187,"./modes":189}],185:[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform;
var inherits = require('inherits');

module.exports = CipherBase;
inherits(CipherBase, Transform);
function CipherBase() {
  Transform.call(this);
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc);
  }
  var outData = this._update(data);
  if (outputEnc) {
    outData = outData.toString(outputEnc);
  }
  return outData;
};
CipherBase.prototype._transform = function (data, _, next) {
  this.push(this._update(data));
  next();
};
CipherBase.prototype._flush = function (next) {
  try {
    this.push(this._final());
  } catch(e) {
    return next(e);
  }
  next();
};
CipherBase.prototype.final = function (outputEnc) {
  var outData = this._final() || new Buffer('');
  if (outputEnc) {
    outData = outData.toString(outputEnc);
  }
  return outData;
};
}).call(this,require("buffer").Buffer)
},{"buffer":176,"inherits":315,"stream":330}],186:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes');
var Transform = require('./cipherBase');
var inherits = require('inherits');
var modes = require('./modes');
var StreamCipher = require('./streamCipher');
var AuthCipher = require('./authCipher');
var ebtk = require('./EVP_BytesToKey');

inherits(Decipher, Transform);
function Decipher(mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv);
  }
  Transform.call(this);
  this._cache = new Splitter();
  this._last = void 0;
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  iv.copy(this._prev);
  this._mode = mode;
  this._autopadding = true;
}
Decipher.prototype._update = function (data) {
  this._cache.add(data);
  var chunk;
  var thing;
  var out = [];
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk);
    out.push(thing);
  }
  return Buffer.concat(out);
};
Decipher.prototype._final = function () {
  var chunk = this._cache.flush();
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk));
  } else if (chunk) {
    throw new Error('data not multiple of block length');
  }
};
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
};
function Splitter() {
   if (!(this instanceof Splitter)) {
    return new Splitter();
  }
  this.cache = new Buffer('');
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function (autoPadding) {
  var out;
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  }
  return null;
};
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache;
  }
};
function unpad(last) {
  var padded = last[15];
  var i = -1;
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data');
    }
  }
  if (padded === 16) {
    return;
  }
  return last.slice(0, 16 - padded);
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
};


function createDecipheriv(suite, password, iv) {
  var config = modes[suite.toLowerCase()];
  if (!config) {
    throw new TypeError('invalid suite type');
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv);
  }
  if (typeof password === 'string') {
    password = new Buffer(password);
  }
  if (password.length !== config.key/8) {
    throw new TypeError('invalid key length ' + password.length);
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length);
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true);
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true);
  }
  return new Decipher(modelist[config.mode], password, iv);
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()];
  if (!config) {
    throw new TypeError('invalid suite type');
  }
  var keys = ebtk(password, config.key, config.iv);
  return createDecipheriv(suite, keys.key, keys.iv);
}
exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;
}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":181,"./aes":182,"./authCipher":183,"./cipherBase":185,"./modes":189,"./modes/cbc":190,"./modes/cfb":191,"./modes/cfb1":192,"./modes/cfb8":193,"./modes/ctr":194,"./modes/ecb":195,"./modes/ofb":196,"./streamCipher":197,"buffer":176,"inherits":315}],187:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes');
var Transform = require('./cipherBase');
var inherits = require('inherits');
var modes = require('./modes');
var ebtk = require('./EVP_BytesToKey');
var StreamCipher = require('./streamCipher');
var AuthCipher = require('./authCipher');
inherits(Cipher, Transform);
function Cipher(mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv);
  }
  Transform.call(this);
  this._cache = new Splitter();
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  iv.copy(this._prev);
  this._mode = mode;
  this._autopadding = true;
}
Cipher.prototype._update = function (data) {
  this._cache.add(data);
  var chunk;
  var thing;
  var out = [];
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk);
    out.push(thing);
  }
  return Buffer.concat(out);
};
Cipher.prototype._final = function () {
  var chunk = this._cache.flush();
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk);
    this._cipher.scrub();
    return chunk;
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub();
    throw new Error('data not multiple of block length');
  }
};
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
};

function Splitter() {
   if (!(this instanceof Splitter)) {
    return new Splitter();
  }
  this.cache = new Buffer('');
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    return out;
  }
  return null;
};
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length;
  var padBuff = new Buffer(len);

  var i = -1;
  while (++i < len) {
    padBuff.writeUInt8(len, i);
  }
  var out = Buffer.concat([this.cache, padBuff]);
  return out;
};
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
};

function createCipheriv(suite, password, iv) {
  var config = modes[suite.toLowerCase()];
  if (!config) {
    throw new TypeError('invalid suite type');
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv);
  }
  if (typeof password === 'string') {
    password = new Buffer(password);
  }
  if (password.length !== config.key/8) {
    throw new TypeError('invalid key length ' + password.length);
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length);
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv);
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv);
  }
  return new Cipher(modelist[config.mode], password, iv);
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()];
  if (!config) {
    throw new TypeError('invalid suite type');
  }
  var keys = ebtk(password, config.key, config.iv);
  return createCipheriv(suite, keys.key, keys.iv);
}

exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;
}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":181,"./aes":182,"./authCipher":183,"./cipherBase":185,"./modes":189,"./modes/cbc":190,"./modes/cfb":191,"./modes/cfb1":192,"./modes/cfb8":193,"./modes/ctr":194,"./modes/ecb":195,"./modes/ofb":196,"./streamCipher":197,"buffer":176,"inherits":315}],188:[function(require,module,exports){
arguments[4][18][0].apply(exports,arguments)
},{"buffer":176,"dup":18}],189:[function(require,module,exports){
arguments[4][20][0].apply(exports,arguments)
},{"dup":20}],190:[function(require,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"../xor":198,"dup":21}],191:[function(require,module,exports){
arguments[4][22][0].apply(exports,arguments)
},{"../xor":198,"buffer":176,"dup":22}],192:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"buffer":176,"dup":23}],193:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"buffer":176,"dup":24}],194:[function(require,module,exports){
arguments[4][25][0].apply(exports,arguments)
},{"../xor":198,"buffer":176,"dup":25}],195:[function(require,module,exports){
arguments[4][26][0].apply(exports,arguments)
},{"dup":26}],196:[function(require,module,exports){
arguments[4][27][0].apply(exports,arguments)
},{"../xor":198,"buffer":176,"dup":27}],197:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes');
var Transform = require('./cipherBase');
var inherits = require('inherits');

inherits(StreamCipher, Transform);
module.exports = StreamCipher;
function StreamCipher(mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv);
  }
  Transform.call(this);
  this._cipher = new aes.AES(key);
  this._prev = new Buffer(iv.length);
  this._cache = new Buffer('');
  this._secCache = new Buffer('');
  this._decrypt = decrypt;
  iv.copy(this._prev);
  this._mode = mode;
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt);
};
StreamCipher.prototype._final = function () {
  this._cipher.scrub();
};
}).call(this,require("buffer").Buffer)
},{"./aes":182,"./cipherBase":185,"buffer":176,"inherits":315}],198:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"buffer":176,"dup":30}],199:[function(require,module,exports){
(function (Buffer){
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
};
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
};
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
};
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
};
exports['RSA-SHA1'] = {
	sign: 'rsa',
	hash: 'sha1',
	id: new Buffer('3021300906052b0e03021a05000414', 'hex')
};
exports['ecdsa-with-SHA1'] = {
	sign: 'ecdsa',
	hash: 'sha1',
	id: new Buffer('', 'hex')
};
exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
};
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
};
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
};
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
};
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
};
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
};
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
};
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
};
}).call(this,require("buffer").Buffer)
},{"buffer":176}],200:[function(require,module,exports){
(function (Buffer){
var sign = require('./sign');
var verify = require('./verify');
var stream = require('stream');
var inherits = require('inherits');
var _algos = require('./algos');
var algos = {};
Object.keys(_algos).forEach(function (key) {
	algos[key] = algos[key.toLowerCase()] = _algos[key];
});
'use strict';
module.exports = function (exports, crypto) {
	exports.createSign = exports.Sign = createSign;
	function createSign(algorithm) {

		return new Sign(algorithm, crypto);
	}
	exports.createVerify = exports.Verify = createVerify;
	function createVerify(algorithm) {
		return new Verify(algorithm, crypto);
	}
};
inherits(Sign, stream.Writable);
function Sign(algorithm, crypto) {
	stream.Writable.call(this);
	var data = algos[algorithm];
	if (!data) {
		throw new Error('Unknown message digest');
	}
	this._hashType = data.hash;
	this._hash = crypto.createHash(data.hash);
	this._tag = data.id;
	this._crypto = crypto;
}
Sign.prototype._write = function _write(data, _, done) {
	this._hash.update(data);
	done();
};
Sign.prototype.update = function update(data) {
	this.write(data);
	return this;
};

Sign.prototype.sign = function signMethod(key, enc) {
	this.end();
	var hash = this._hash.digest();
	var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._crypto);
	if (enc) {
		sig = sig.toString(enc);
	}
	return sig;
};

inherits(Verify, stream.Writable);
function Verify(algorithm, crypto) {
	stream.Writable.call(this);
	var data = algos[algorithm];
	if (!data) {
		throw new Error('Unknown message digest');
	}
	this._hash = crypto.createHash(data.hash);
	this._tag = data.id;
}
Verify.prototype._write = function _write(data, _, done) {
	this._hash.update(data);
	done();
};
Verify.prototype.update = function update(data) {
	this.write(data);
	return this;
};

Verify.prototype.verify = function verifyMethod(key, sig, enc) {
	this.end();
	var hash = this._hash.digest();
	if (!Buffer.isBuffer(sig)) {
		sig = new Buffer(sig, enc);
	}
	return verify(sig, Buffer.concat([this._tag, hash]), key);
};
}).call(this,require("buffer").Buffer)
},{"./algos":199,"./sign":243,"./verify":244,"buffer":176,"inherits":315,"stream":330}],201:[function(require,module,exports){
(function(module, exports) {

'use strict';

// Utils

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

// Could use `inherits` module, but don't want to move from single file
// architecture yet.
function inherits(ctor, superCtor) {
  ctor.super_ = superCtor;
  var TempCtor = function () {};
  TempCtor.prototype = superCtor.prototype;
  ctor.prototype = new TempCtor();
  ctor.prototype.constructor = ctor;
}

// BN

function BN(number, base, endian) {
  // May be `new BN(bn)` ?
  if (number !== null &&
      typeof number === 'object' &&
      Array.isArray(number.words)) {
    return number;
  }

  this.sign = false;
  this.words = null;
  this.length = 0;

  // Reduction context
  this.red = null;

  if (base === 'le' || base === 'be') {
    endian = base;
    base = 10;
  }

  if (number !== null)
    this._init(number || 0, base || 10, endian || 'be');
}
if (typeof module === 'object')
  module.exports = BN;
else
  exports.BN = BN;

BN.BN = BN;
BN.wordSize = 26;

BN.prototype._init = function init(number, base, endian) {
  if (typeof number === 'number') {
    if (number < 0) {
      this.sign = true;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    }
    return;
  } else if (typeof number === 'object') {
    return this._initArray(number, base, endian);
  }
  if (base === 'hex')
    base = 16;
  assert(base === (base | 0) && base >= 2 && base <= 36);

  number = number.toString().replace(/\s+/g, '');
  var start = 0;
  if (number[0] === '-')
    start++;

  if (base === 16)
    this._parseHex(number, start);
  else
    this._parseBase(number, base, start);

  if (number[0] === '-')
    this.sign = true;

  this.strip();
};

BN.prototype._initArray = function _initArray(number, base, endian) {
  // Perhaps a Uint8Array
  assert(typeof number.length === 'number');
  this.length = Math.ceil(number.length / 3);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  var off = 0;
  if (endian === 'be') {
    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  } else if (endian === 'le') {
    for (var i = 0, j = 0; i < number.length; i += 3) {
      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  }
  return this.strip();
};

function parseHex(str, start, end) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r <<= 4;

    // 'a' - 'f'
    if (c >= 49 && c <= 54)
      r |= c - 49 + 0xa;

    // 'A' - 'F'
    else if (c >= 17 && c <= 22)
      r |= c - 17 + 0xa;

    // '0' - '9'
    else
      r |= c & 0xf;
  }
  return r;
}

BN.prototype._parseHex = function _parseHex(number, start) {
  // Create possibly bigger array to ensure that it fits the number
  this.length = Math.ceil((number.length - start) / 6);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  // Scan 24-bit chunks and add them to the number
  var off = 0;
  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
    var w = parseHex(number, i, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    off += 24;
    if (off >= 26) {
      off -= 26;
      j++;
    }
  }
  if (i + 6 !== start) {
    var w = parseHex(number, start, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
  }
  this.strip();
};

function parseBase(str, start, end, mul) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r *= mul;

    // 'a'
    if (c >= 49)
      r += c - 49 + 0xa;

    // 'A'
    else if (c >= 17)
      r += c - 17 + 0xa;

    // '0' - '9'
    else
      r += c;
  }
  return r;
}

BN.prototype._parseBase = function _parseBase(number, base, start) {
  // Initialize as zero
  this.words = [ 0 ];
  this.length = 1;

  // Find length of limb in base
  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
    limbLen++;
  limbLen--;
  limbPow = (limbPow / base) | 0;

  var total = number.length - start;
  var mod = total % limbLen;
  var end = Math.min(total, total - mod) + start;

  var word = 0;
  for (var i = start; i < end; i += limbLen) {
    word = parseBase(number, i, i + limbLen, base);

    this.imuln(limbPow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }

  if (mod !== 0) {
    var pow = 1;
    var word = parseBase(number, i, number.length, base);

    for (var i = 0; i < mod; i++)
      pow *= base;
    this.imuln(pow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }
};

BN.prototype.copy = function copy(dest) {
  dest.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    dest.words[i] = this.words[i];
  dest.length = this.length;
  dest.sign = this.sign;
  dest.red = this.red;
};

BN.prototype.clone = function clone() {
  var r = new BN(null);
  this.copy(r);
  return r;
};

// Remove leading `0` from `this`
BN.prototype.strip = function strip() {
  while (this.length > 1 && this.words[this.length - 1] === 0)
    this.length--;
  return this._normSign();
};

BN.prototype._normSign = function _normSign() {
  // -0 = 0
  if (this.length === 1 && this.words[0] === 0)
    this.sign = false;
  return this;
};

BN.prototype.inspect = function inspect() {
  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
};

/*

var zeros = [];
var groupSizes = [];
var groupBases = [];

var s = '';
var i = -1;
while (++i < BN.wordSize) {
  zeros[i] = s;
  s += '0';
}
groupSizes[0] = 0;
groupSizes[1] = 0;
groupBases[0] = 0;
groupBases[1] = 0;
var base = 2 - 1;
while (++base < 36 + 1) {
  var groupSize = 0;
  var groupBase = 1;
  while (groupBase < (1 << BN.wordSize) / base) {
    groupBase *= base;
    groupSize += 1;
  }
  groupSizes[base] = groupSize;
  groupBases[base] = groupBase;
}

*/

var zeros = [
  '',
  '0',
  '00',
  '000',
  '0000',
  '00000',
  '000000',
  '0000000',
  '00000000',
  '000000000',
  '0000000000',
  '00000000000',
  '000000000000',
  '0000000000000',
  '00000000000000',
  '000000000000000',
  '0000000000000000',
  '00000000000000000',
  '000000000000000000',
  '0000000000000000000',
  '00000000000000000000',
  '000000000000000000000',
  '0000000000000000000000',
  '00000000000000000000000',
  '000000000000000000000000',
  '0000000000000000000000000'
];

var groupSizes = [
  0, 0,
  25, 16, 12, 11, 10, 9, 8,
  8, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 5, 5,
  5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5
];

var groupBases = [
  0, 0,
  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
];

BN.prototype.toString = function toString(base, padding) {
  base = base || 10;
  if (base === 16 || base === 'hex') {
    var out = '';
    var off = 0;
    var padding = padding | 0 || 1;
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i];
      var word = (((w << off) | carry) & 0xffffff).toString(16);
      carry = (w >>> (24 - off)) & 0xffffff;
      if (carry !== 0 || i !== this.length - 1)
        out = zeros[6 - word.length] + word + out;
      else
        out = word + out;
      off += 2;
      if (off >= 26) {
        off -= 26;
        i--;
      }
    }
    if (carry !== 0)
      out = carry.toString(16) + out;
    while (out.length % padding !== 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else if (base === (base | 0) && base >= 2 && base <= 36) {
    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    var groupSize = groupSizes[base];
    // var groupBase = Math.pow(base, groupSize);
    var groupBase = groupBases[base];
    var out = '';
    var c = this.clone();
    c.sign = false;
    while (c.cmpn(0) !== 0) {
      var r = c.modn(groupBase).toString(base);
      c = c.idivn(groupBase);

      if (c.cmpn(0) !== 0)
        out = zeros[groupSize - r.length] + r + out;
      else
        out = r + out;
    }
    if (this.cmpn(0) === 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else {
    assert(false, 'Base should be between 2 and 36');
  }
};

BN.prototype.toJSON = function toJSON() {
  return this.toString(16);
};

BN.prototype.toArray = function toArray() {
  this.strip();
  var res = new Array(this.byteLength());
  res[0] = 0;

  var q = this.clone();
  for (var i = 0; q.cmpn(0) !== 0; i++) {
    var b = q.andln(0xff);
    q.ishrn(8);

    // Assume big-endian
    res[res.length - i - 1] = b;
  }

  return res;
};

/*
function genCountBits(bits) {
  var arr = [];

  for (var i = bits - 1; i >= 0; i--) {
    var bit = '0x' + (1 << i).toString(16);
    arr.push('w >= ' + bit + ' ? ' + (i + 1));
  }

  return new Function('w', 'return ' + arr.join(' :\n') + ' :\n0;');
};

BN.prototype._countBits = genCountBits(26);
*/

// Sadly chrome apps could not contain `new Function()` calls
BN.prototype._countBits = function _countBits(w) {
  return w >= 0x2000000 ? 26 :
         w >= 0x1000000 ? 25 :
         w >= 0x800000 ? 24 :
         w >= 0x400000 ? 23 :
         w >= 0x200000 ? 22 :
         w >= 0x100000 ? 21 :
         w >= 0x80000 ? 20 :
         w >= 0x40000 ? 19 :
         w >= 0x20000 ? 18 :
         w >= 0x10000 ? 17 :
         w >= 0x8000 ? 16 :
         w >= 0x4000 ? 15 :
         w >= 0x2000 ? 14 :
         w >= 0x1000 ? 13 :
         w >= 0x800 ? 12 :
         w >= 0x400 ? 11 :
         w >= 0x200 ? 10 :
         w >= 0x100 ? 9 :
         w >= 0x80 ? 8 :
         w >= 0x40 ? 7 :
         w >= 0x20 ? 6 :
         w >= 0x10 ? 5 :
         w >= 0x8 ? 4 :
         w >= 0x4 ? 3 :
         w >= 0x2 ? 2 :
         w >= 0x1 ? 1 :
         0;
};

// Return number of used bits in a BN
BN.prototype.bitLength = function bitLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  var hi = this._countBits(w);
  return (this.length - 1) * 26 + hi;
};

BN.prototype.byteLength = function byteLength() {
  return Math.ceil(this.bitLength() / 8);
};

// Return negative clone of `this`
BN.prototype.neg = function neg() {
  if (this.cmpn(0) === 0)
    return this.clone();

  var r = this.clone();
  r.sign = !this.sign;
  return r;
};


// Or `num` with `this` in-place
BN.prototype.ior = function ior(num) {
  this.sign = this.sign || num.sign;

  while (this.length < num.length)
    this.words[this.length++] = 0;

  for (var i = 0; i < num.length; i++)
    this.words[i] = this.words[i] | num.words[i];

  return this.strip();
};


// Or `num` with `this`
BN.prototype.or = function or(num) {
  if (this.length > num.length)
    return this.clone().ior(num);
  else
    return num.clone().ior(this);
};


// And `num` with `this` in-place
BN.prototype.iand = function iand(num) {
  this.sign = this.sign && num.sign;

  // b = min-length(num, this)
  var b;
  if (this.length > num.length)
    b = num;
  else
    b = this;

  for (var i = 0; i < b.length; i++)
    this.words[i] = this.words[i] & num.words[i];

  this.length = b.length;

  return this.strip();
};


// And `num` with `this`
BN.prototype.and = function and(num) {
  if (this.length > num.length)
    return this.clone().iand(num);
  else
    return num.clone().iand(this);
};


// Xor `num` with `this` in-place
BN.prototype.ixor = function ixor(num) {
  this.sign = this.sign || num.sign;

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  for (var i = 0; i < b.length; i++)
    this.words[i] = a.words[i] ^ b.words[i];

  if (this !== a)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];

  this.length = a.length;

  return this.strip();
};


// Xor `num` with `this`
BN.prototype.xor = function xor(num) {
  if (this.length > num.length)
    return this.clone().ixor(num);
  else
    return num.clone().ixor(this);
};


// Set `bit` of `this`
BN.prototype.setn = function setn(bit, val) {
  assert(typeof bit === 'number' && bit >= 0);

  var off = (bit / 26) | 0;
  var wbit = bit % 26;

  while (this.length <= off)
    this.words[this.length++] = 0;

  if (val)
    this.words[off] = this.words[off] | (1 << wbit);
  else
    this.words[off] = this.words[off] & ~(1 << wbit);

  return this.strip();
};


// Add `num` to `this` in-place
BN.prototype.iadd = function iadd(num) {
  // negative + positive
  if (this.sign && !num.sign) {
    this.sign = false;
    var r = this.isub(num);
    this.sign = !this.sign;
    return this._normSign();

  // positive + negative
  } else if (!this.sign && num.sign) {
    num.sign = false;
    var r = this.isub(num);
    num.sign = true;
    return r._normSign();
  }

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] + b.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }

  this.length = a.length;
  if (carry !== 0) {
    this.words[this.length] = carry;
    this.length++;
  // Copy the rest of the words
  } else if (a !== this) {
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  }

  return this;
};

// Add `num` to `this`
BN.prototype.add = function add(num) {
  if (num.sign && !this.sign) {
    num.sign = false;
    var res = this.sub(num);
    num.sign = true;
    return res;
  } else if (!num.sign && this.sign) {
    this.sign = false;
    var res = num.sub(this);
    this.sign = true;
    return res;
  }

  if (this.length > num.length)
    return this.clone().iadd(num);
  else
    return num.clone().iadd(this);
};

// Subtract `num` from `this` in-place
BN.prototype.isub = function isub(num) {
  // this - (-num) = this + num
  if (num.sign) {
    num.sign = false;
    var r = this.iadd(num);
    num.sign = true;
    return r._normSign();

  // -this - num = -(this + num)
  } else if (this.sign) {
    this.sign = false;
    this.iadd(num);
    this.sign = true;
    return this._normSign();
  }

  // At this point both numbers are positive
  var cmp = this.cmp(num);

  // Optimization - zeroify
  if (cmp === 0) {
    this.sign = false;
    this.length = 1;
    this.words[0] = 0;
    return this;
  }

  // a > b
  var a;
  var b;
  if (cmp > 0) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] - b.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }

  // Copy rest of the words
  if (carry === 0 && i < a.length && a !== this)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  this.length = Math.max(this.length, i);

  if (a !== this)
    this.sign = true;

  return this.strip();
};

// Subtract `num` from `this`
BN.prototype.sub = function sub(num) {
  return this.clone().isub(num);
};

/*
// NOTE: This could be potentionally used to generate loop-less multiplications
function _genCombMulTo(alen, blen) {
  var len = alen + blen - 1;
  var src = [
    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
        'mask = 0x3ffffff, shift = 0x4000000;',
    'out.length = ' + len + ';'
  ];
  for (var k = 0; k < len; k++) {
    var minJ = Math.max(0, k - alen + 1);
    var maxJ = Math.min(k, blen - 1);

    for (var j = minJ; j <= maxJ; j++) {
      var i = k - j;
      var mul = 'a[' + i + '] * b[' + j + ']';

      if (j === minJ) {
        src.push('w = ' + mul + ' + c;');
        src.push('c = (w / shift) | 0;');
      } else {
        src.push('w += ' + mul + ';');
        src.push('c += (w / shift) | 0;');
      }
      src.push('w &= mask;');
    }
    src.push('o[' + k + '] = w;');
  }
  src.push('if (c !== 0) {',
           '  o[' + k + '] = c;',
           '  out.length++;',
           '}',
           'return out;');

  return src.join('\n');
}
*/

BN.prototype._smallMulTo = function _smallMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = carry >>> 26;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;
    }
    out.words[k] = rword;
    carry = ncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype._bigMulTo = function _bigMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  var hncarry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = hncarry;
    hncarry = 0;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;

      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }
    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype.mulTo = function mulTo(num, out) {
  var res;
  if (this.length + num.length < 63)
    res = this._smallMulTo(num, out);
  else
    res = this._bigMulTo(num, out);
  return res;
};

// Multiply `this` by `num`
BN.prototype.mul = function mul(num) {
  var out = new BN(null);
  out.words = new Array(this.length + num.length);
  return this.mulTo(num, out);
};

// In-place Multiplication
BN.prototype.imul = function imul(num) {
  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
    this.words[0] = 0;
    this.length = 1;
    return this;
  }

  var tlen = this.length;
  var nlen = num.length;

  this.sign = num.sign !== this.sign;
  this.length = this.length + num.length;
  this.words[this.length - 1] = 0;

  for (var k = this.length - 2; k >= 0; k--) {
    // Sum all words with the same `i + j = k` and accumulate `carry`,
    // note that carry could be >= 0x3ffffff
    var carry = 0;
    var rword = 0;
    var maxJ = Math.min(k, nlen - 1);
    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i];
      var b = num.words[j];
      var r = a * b;

      var lo = r & 0x3ffffff;
      carry += (r / 0x4000000) | 0;
      lo += rword;
      rword = lo & 0x3ffffff;
      carry += lo >>> 26;
    }
    this.words[k] = rword;
    this.words[k + 1] += carry;
    carry = 0;
  }

  // Propagate overflows
  var carry = 0;
  for (var i = 1; i < this.length; i++) {
    var w = this.words[i] + carry;
    this.words[i] = w & 0x3ffffff;
    carry = w >>> 26;
  }

  return this.strip();
};

BN.prototype.imuln = function imuln(num) {
  assert(typeof num === 'number');

  // Carry
  var carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = this.words[i] * num;
    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
    carry >>= 26;
    carry += (w / 0x4000000) | 0;
    // NOTE: lo is 27bit maximum
    carry += lo >>> 26;
    this.words[i] = lo & 0x3ffffff;
  }

  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }

  return this;
};

// `this` * `this`
BN.prototype.sqr = function sqr() {
  return this.mul(this);
};

// `this` * `this` in-place
BN.prototype.isqr = function isqr() {
  return this.mul(this);
};

// Shift-left in-place
BN.prototype.ishln = function ishln(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;
  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

  if (r !== 0) {
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var newCarry = this.words[i] & carryMask;
      var c = (this.words[i] - newCarry) << r;
      this.words[i] = c | carry;
      carry = newCarry >>> (26 - r);
    }
    if (carry) {
      this.words[i] = carry;
      this.length++;
    }
  }

  if (s !== 0) {
    for (var i = this.length - 1; i >= 0; i--)
      this.words[i + s] = this.words[i];
    for (var i = 0; i < s; i++)
      this.words[i] = 0;
    this.length += s;
  }

  return this.strip();
};

// Shift-right in-place
// NOTE: `hint` is a lowest bit before trailing zeroes
// NOTE: if `extended` is true - { lo: ..., hi: } object will be returned
BN.prototype.ishrn = function ishrn(bits, hint, extended) {
  assert(typeof bits === 'number' && bits >= 0);
  if (hint)
    hint = (hint - (hint % 26)) / 26;
  else
    hint = 0;

  var r = bits % 26;
  var s = Math.min((bits - r) / 26, this.length);
  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  var maskedWords = extended;

  hint -= s;
  hint = Math.max(0, hint);

  // Extended mode, copy masked part
  if (maskedWords) {
    for (var i = 0; i < s; i++)
      maskedWords.words[i] = this.words[i];
    maskedWords.length = s;
  }

  if (s === 0) {
    // No-op, we should not move anything at all
  } else if (this.length > s) {
    this.length -= s;
    for (var i = 0; i < this.length; i++)
      this.words[i] = this.words[i + s];
  } else {
    this.words[0] = 0;
    this.length = 1;
  }

  var carry = 0;
  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= hint); i--) {
    var word = this.words[i];
    this.words[i] = (carry << (26 - r)) | (word >>> r);
    carry = word & mask;
  }

  // Push carried bits as a mask
  if (maskedWords && carry !== 0)
    maskedWords.words[maskedWords.length++] = carry;

  if (this.length === 0) {
    this.words[0] = 0;
    this.length = 1;
  }

  this.strip();
  if (extended)
    return { hi: this, lo: maskedWords };

  return this;
};

// Shift-left
BN.prototype.shln = function shln(bits) {
  return this.clone().ishln(bits);
};

// Shift-right
BN.prototype.shrn = function shrn(bits) {
  return this.clone().ishrn(bits);
};

// Test if n bit is set
BN.prototype.testn = function testn(bit) {
  assert(typeof bit === 'number' && bit >= 0);
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    return false;
  }

  // Check bit and return
  var w = this.words[s];

  return !!(w & q);
};

// Return only lowers bits of number (in-place)
BN.prototype.imaskn = function imaskn(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;

  assert(!this.sign, 'imaskn works only with positive numbers');

  if (r !== 0)
    s++;
  this.length = Math.min(s, this.length);

  if (r !== 0) {
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    this.words[this.length - 1] &= mask;
  }

  return this.strip();
};

// Return only lowers bits of number
BN.prototype.maskn = function maskn(bits) {
  return this.clone().imaskn(bits);
};

// Add plain number `num` to `this`
BN.prototype.iaddn = function iaddn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.isubn(-num);

  // Possible sign change
  if (this.sign) {
    if (this.length === 1 && this.words[0] < num) {
      this.words[0] = num - this.words[0];
      this.sign = false;
      return this;
    }

    this.sign = false;
    this.isubn(num);
    this.sign = true;
    return this;
  }

  // Add without checks
  return this._iaddn(num);
};

BN.prototype._iaddn = function _iaddn(num) {
  this.words[0] += num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    this.words[i] -= 0x4000000;
    if (i === this.length - 1)
      this.words[i + 1] = 1;
    else
      this.words[i + 1]++;
  }
  this.length = Math.max(this.length, i + 1);

  return this;
};

// Subtract plain number `num` from `this`
BN.prototype.isubn = function isubn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.iaddn(-num);

  if (this.sign) {
    this.sign = false;
    this.iaddn(num);
    this.sign = true;
    return this;
  }

  this.words[0] -= num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    this.words[i] += 0x4000000;
    this.words[i + 1] -= 1;
  }

  return this.strip();
};

BN.prototype.addn = function addn(num) {
  return this.clone().iaddn(num);
};

BN.prototype.subn = function subn(num) {
  return this.clone().isubn(num);
};

BN.prototype.iabs = function iabs() {
  this.sign = false;

  return this;
};

BN.prototype.abs = function abs() {
  return this.clone().iabs();
};

BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
  // Bigger storage is needed
  var len = num.length + shift;
  var i;
  if (this.words.length < len) {
    var t = new Array(len);
    for (var i = 0; i < this.length; i++)
      t[i] = this.words[i];
    this.words = t;
  } else {
    i = this.length;
  }

  // Zeroify rest
  this.length = Math.max(this.length, len);
  for (; i < this.length; i++)
    this.words[i] = 0;

  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var w = this.words[i + shift] + carry;
    var right = num.words[i] * mul;
    w -= right & 0x3ffffff;
    carry = (w >> 26) - ((right / 0x4000000) | 0);
    this.words[i + shift] = w & 0x3ffffff;
  }
  for (; i < this.length - shift; i++) {
    var w = this.words[i + shift] + carry;
    carry = w >> 26;
    this.words[i + shift] = w & 0x3ffffff;
  }

  if (carry === 0)
    return this.strip();

  // Subtraction overflow
  assert(carry === -1);
  carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = -this.words[i] + carry;
    carry = w >> 26;
    this.words[i] = w & 0x3ffffff;
  }
  this.sign = true;

  return this.strip();
};

BN.prototype._wordDiv = function _wordDiv(num, mode) {
  var shift = this.length - num.length;

  var a = this.clone();
  var b = num;

  // Normalize
  var bhi = b.words[b.length - 1];
  for (var shift = 0; bhi < 0x2000000; shift++)
    bhi <<= 1;
  if (shift !== 0) {
    b = b.shln(shift);
    a.ishln(shift);
    bhi = b.words[b.length - 1];
  }

  // Initialize quotient
  var m = a.length - b.length;
  var q;

  if (mode !== 'mod') {
    q = new BN(null);
    q.length = m + 1;
    q.words = new Array(q.length);
    for (var i = 0; i < q.length; i++)
      q.words[i] = 0;
  }

  var diff = a.clone()._ishlnsubmul(b, 1, m);
  if (!diff.sign) {
    a = diff;
    if (q)
      q.words[m] = 1;
  }

  for (var j = m - 1; j >= 0; j--) {
    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
    // (0x7ffffff)
    qj = Math.min((qj / bhi) | 0, 0x3ffffff);

    a._ishlnsubmul(b, qj, j);
    while (a.sign) {
      qj--;
      a.sign = false;
      a._ishlnsubmul(b, 1, j);
      a.sign = !a.sign;
    }
    if (q)
      q.words[j] = qj;
  }
  if (q)
    q.strip();
  a.strip();

  // Denormalize
  if (mode !== 'div' && shift !== 0)
    a.ishrn(shift);
  return { div: q ? q : null, mod: a };
};

BN.prototype.divmod = function divmod(num, mode) {
  assert(num.cmpn(0) !== 0);

  if (this.sign && !num.sign) {
    var res = this.neg().divmod(num, mode);
    var div;
    var mod;
    if (mode !== 'mod')
      div = res.div.neg();
    if (mode !== 'div')
      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
    return {
      div: div,
      mod: mod
    };
  } else if (!this.sign && num.sign) {
    var res = this.divmod(num.neg(), mode);
    var div;
    if (mode !== 'mod')
      div = res.div.neg();
    return { div: div, mod: res.mod };
  } else if (this.sign && num.sign) {
    return this.neg().divmod(num.neg(), mode);
  }

  // Both numbers are positive at this point

  // Strip both numbers to approximate shift value
  if (num.length > this.length || this.cmp(num) < 0)
    return { div: new BN(0), mod: this };

  // Very short reduction
  if (num.length === 1) {
    if (mode === 'div')
      return { div: this.divn(num.words[0]), mod: null };
    else if (mode === 'mod')
      return { div: null, mod: new BN(this.modn(num.words[0])) };
    return {
      div: this.divn(num.words[0]),
      mod: new BN(this.modn(num.words[0]))
    };
  }

  return this._wordDiv(num, mode);
};

// Find `this` / `num`
BN.prototype.div = function div(num) {
  return this.divmod(num, 'div').div;
};

// Find `this` % `num`
BN.prototype.mod = function mod(num) {
  return this.divmod(num, 'mod').mod;
};

// Find Round(`this` / `num`)
BN.prototype.divRound = function divRound(num) {
  var dm = this.divmod(num);

  // Fast case - exact division
  if (dm.mod.cmpn(0) === 0)
    return dm.div;

  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

  var half = num.shrn(1);
  var r2 = num.andln(1);
  var cmp = mod.cmp(half);

  // Round down
  if (cmp < 0 || r2 === 1 && cmp === 0)
    return dm.div;

  // Round up
  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
};

BN.prototype.modn = function modn(num) {
  assert(num <= 0x3ffffff);
  var p = (1 << 26) % num;

  var acc = 0;
  for (var i = this.length - 1; i >= 0; i--)
    acc = (p * acc + this.words[i]) % num;

  return acc;
};

// In-place division by number
BN.prototype.idivn = function idivn(num) {
  assert(num <= 0x3ffffff);

  var carry = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var w = this.words[i] + carry * 0x4000000;
    this.words[i] = (w / num) | 0;
    carry = w % num;
  }

  return this.strip();
};

BN.prototype.divn = function divn(num) {
  return this.clone().idivn(num);
};

BN.prototype._egcd = function _egcd(x1, p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var a = this;
  var b = p.clone();

  if (a.sign)
    a = a.mod(p);
  else
    a = a.clone();

  var x2 = new BN(0);
  while (b.isEven())
    b.ishrn(1);
  var delta = b.clone();
  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    while (a.isEven()) {
      a.ishrn(1);
      if (x1.isEven())
        x1.ishrn(1);
      else
        x1.iadd(delta).ishrn(1);
    }
    while (b.isEven()) {
      b.ishrn(1);
      if (x2.isEven())
        x2.ishrn(1);
      else
        x2.iadd(delta).ishrn(1);
    }
    if (a.cmp(b) >= 0) {
      a.isub(b);
      x1.isub(x2);
    } else {
      b.isub(a);
      x2.isub(x1);
    }
  }
  if (a.cmpn(1) === 0)
    return x1;
  else
    return x2;
};

BN.prototype.gcd = function gcd(num) {
  if (this.cmpn(0) === 0)
    return num.clone();
  if (num.cmpn(0) === 0)
    return this.clone();

  var a = this.clone();
  var b = num.clone();
  a.sign = false;
  b.sign = false;

  // Remove common factor of two
  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    a.ishrn(1);
    b.ishrn(1);
  }

  while (a.isEven())
    a.ishrn(1);

  do {
    while (b.isEven())
      b.ishrn(1);

    // Swap `a` and `b` to make `a` always bigger than `b`
    if (a.cmp(b) < 0) {
      var t = a;
      a = b;
      b = t;
    }
    a.isub(a.div(b).mul(b));
  } while (a.cmpn(0) !== 0 && b.cmpn(0) !== 0);
  if (a.cmpn(0) === 0)
    return b.ishln(shift);
  else
    return a.ishln(shift);
};

// Invert number in the field F(num)
BN.prototype.invm = function invm(num) {
  return this._egcd(new BN(1), num).mod(num);
};

BN.prototype.isEven = function isEven() {
  return (this.words[0] & 1) === 0;
};

BN.prototype.isOdd = function isOdd() {
  return (this.words[0] & 1) === 1;
};

// And first word and num
BN.prototype.andln = function andln(num) {
  return this.words[0] & num;
};

// Increment at the bit position in-line
BN.prototype.bincn = function bincn(bit) {
  assert(typeof bit === 'number');
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    for (var i = this.length; i < s + 1; i++)
      this.words[i] = 0;
    this.words[s] |= q;
    this.length = s + 1;
    return this;
  }

  // Add bit and propagate, if needed
  var carry = q;
  for (var i = s; carry !== 0 && i < this.length; i++) {
    var w = this.words[i];
    w += carry;
    carry = w >>> 26;
    w &= 0x3ffffff;
    this.words[i] = w;
  }
  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }
  return this;
};

BN.prototype.cmpn = function cmpn(num) {
  var sign = num < 0;
  if (sign)
    num = -num;

  if (this.sign && !sign)
    return -1;
  else if (!this.sign && sign)
    return 1;

  num &= 0x3ffffff;
  this.strip();

  var res;
  if (this.length > 1) {
    res = 1;
  } else {
    var w = this.words[0];
    res = w === num ? 0 : w < num ? -1 : 1;
  }
  if (this.sign)
    res = -res;
  return res;
};

// Compare two numbers and return:
// 1 - if `this` > `num`
// 0 - if `this` == `num`
// -1 - if `this` < `num`
BN.prototype.cmp = function cmp(num) {
  if (this.sign && !num.sign)
    return -1;
  else if (!this.sign && num.sign)
    return 1;

  var res = this.ucmp(num);
  if (this.sign)
    return -res;
  else
    return res;
};

// Unsigned comparison
BN.prototype.ucmp = function ucmp(num) {
  // At this point both numbers have the same sign
  if (this.length > num.length)
    return 1;
  else if (this.length < num.length)
    return -1;

  var res = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var a = this.words[i];
    var b = num.words[i];

    if (a === b)
      continue;
    if (a < b)
      res = -1;
    else if (a > b)
      res = 1;
    break;
  }
  return res;
};

//
// A reduce context, could be using montgomery or something better, depending
// on the `m` itself.
//
BN.red = function red(num) {
  return new Red(num);
};

BN.prototype.toRed = function toRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  assert(!this.sign, 'red works only with positives');
  return ctx.convertTo(this)._forceRed(ctx);
};

BN.prototype.fromRed = function fromRed() {
  assert(this.red, 'fromRed works only with numbers in reduction context');
  return this.red.convertFrom(this);
};

BN.prototype._forceRed = function _forceRed(ctx) {
  this.red = ctx;
  return this;
};

BN.prototype.forceRed = function forceRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  return this._forceRed(ctx);
};

BN.prototype.redAdd = function redAdd(num) {
  assert(this.red, 'redAdd works only with red numbers');
  return this.red.add(this, num);
};

BN.prototype.redIAdd = function redIAdd(num) {
  assert(this.red, 'redIAdd works only with red numbers');
  return this.red.iadd(this, num);
};

BN.prototype.redSub = function redSub(num) {
  assert(this.red, 'redSub works only with red numbers');
  return this.red.sub(this, num);
};

BN.prototype.redISub = function redISub(num) {
  assert(this.red, 'redISub works only with red numbers');
  return this.red.isub(this, num);
};

BN.prototype.redShl = function redShl(num) {
  assert(this.red, 'redShl works only with red numbers');
  return this.red.shl(this, num);
};

BN.prototype.redMul = function redMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.mul(this, num);
};

BN.prototype.redIMul = function redIMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.imul(this, num);
};

BN.prototype.redSqr = function redSqr() {
  assert(this.red, 'redSqr works only with red numbers');
  this.red._verify1(this);
  return this.red.sqr(this);
};

BN.prototype.redISqr = function redISqr() {
  assert(this.red, 'redISqr works only with red numbers');
  this.red._verify1(this);
  return this.red.isqr(this);
};

// Square root over p
BN.prototype.redSqrt = function redSqrt() {
  assert(this.red, 'redSqrt works only with red numbers');
  this.red._verify1(this);
  return this.red.sqrt(this);
};

BN.prototype.redInvm = function redInvm() {
  assert(this.red, 'redInvm works only with red numbers');
  this.red._verify1(this);
  return this.red.invm(this);
};

// Return negative clone of `this` % `red modulo`
BN.prototype.redNeg = function redNeg() {
  assert(this.red, 'redNeg works only with red numbers');
  this.red._verify1(this);
  return this.red.neg(this);
};

BN.prototype.redPow = function redPow(num) {
  assert(this.red && !num.red, 'redPow(normalNum)');
  this.red._verify1(this);
  return this.red.pow(this, num);
};

// Prime numbers with efficient reduction
var primes = {
  k256: null,
  p224: null,
  p192: null,
  p25519: null
};

// Pseudo-Mersenne prime
function MPrime(name, p) {
  // P = 2 ^ N - K
  this.name = name;
  this.p = new BN(p, 16);
  this.n = this.p.bitLength();
  this.k = new BN(1).ishln(this.n).isub(this.p);

  this.tmp = this._tmp();
}

MPrime.prototype._tmp = function _tmp() {
  var tmp = new BN(null);
  tmp.words = new Array(Math.ceil(this.n / 13));
  return tmp;
};

MPrime.prototype.ireduce = function ireduce(num) {
  // Assumes that `num` is less than `P^2`
  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  var r = num;
  var rlen;

  do {
    var pair = r.ishrn(this.n, 0, this.tmp);
    r = this.imulK(pair.hi);
    r = r.iadd(pair.lo);
    rlen = r.bitLength();
  } while (rlen > this.n);

  var cmp = rlen < this.n ? -1 : r.cmp(this.p);
  if (cmp === 0) {
    r.words[0] = 0;
    r.length = 1;
  } else if (cmp > 0) {
    r.isub(this.p);
  } else {
    r.strip();
  }

  return r;
};

MPrime.prototype.imulK = function imulK(num) {
  return num.imul(this.k);
};

function K256() {
  MPrime.call(
    this,
    'k256',
    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
}
inherits(K256, MPrime);

K256.prototype.imulK = function imulK(num) {
  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  num.words[num.length] = 0;
  num.words[num.length + 1] = 0;
  num.length += 2;

  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  var hi;
  var lo = 0;
  for (var i = 0; i < num.length; i++) {
    var w = num.words[i];
    hi = w * 0x40;
    lo += w * 0x3d1;
    hi += (lo / 0x4000000) | 0;
    lo &= 0x3ffffff;

    num.words[i] = lo;

    lo = hi;
  }

  // Fast length reduction
  if (num.words[num.length - 1] === 0) {
    num.length--;
    if (num.words[num.length - 1] === 0)
      num.length--;
  }
  return num;
};

function P224() {
  MPrime.call(
    this,
    'p224',
    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
}
inherits(P224, MPrime);

function P192() {
  MPrime.call(
    this,
    'p192',
    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
}
inherits(P192, MPrime);

function P25519() {
  // 2 ^ 255 - 19
  MPrime.call(
    this,
    '25519',
    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
}
inherits(P25519, MPrime);

P25519.prototype.imulK = function imulK(num) {
  // K = 0x13
  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var hi = num.words[i] * 0x13 + carry;
    var lo = hi & 0x3ffffff;
    hi >>>= 26;

    num.words[i] = lo;
    carry = hi;
  }
  if (carry !== 0)
    num.words[num.length++] = carry;
  return num;
};

// Exported mostly for testing purposes, use plain name instead
BN._prime = function prime(name) {
  // Cached version of prime
  if (primes[name])
    return primes[name];

  var prime;
  if (name === 'k256')
    prime = new K256();
  else if (name === 'p224')
    prime = new P224();
  else if (name === 'p192')
    prime = new P192();
  else if (name === 'p25519')
    prime = new P25519();
  else
    throw new Error('Unknown prime ' + name);
  primes[name] = prime;

  return prime;
};

//
// Base reduction engine
//
function Red(m) {
  if (typeof m === 'string') {
    var prime = BN._prime(m);
    this.m = prime.p;
    this.prime = prime;
  } else {
    this.m = m;
    this.prime = null;
  }
}

Red.prototype._verify1 = function _verify1(a) {
  assert(!a.sign, 'red works only with positives');
  assert(a.red, 'red works only with red numbers');
};

Red.prototype._verify2 = function _verify2(a, b) {
  assert(!a.sign && !b.sign, 'red works only with positives');
  assert(a.red && a.red === b.red,
         'red works only with red numbers');
};

Red.prototype.imod = function imod(a) {
  if (this.prime)
    return this.prime.ireduce(a)._forceRed(this);
  return a.mod(this.m)._forceRed(this);
};

Red.prototype.neg = function neg(a) {
  var r = a.clone();
  r.sign = !r.sign;
  return r.iadd(this.m)._forceRed(this);
};

Red.prototype.add = function add(a, b) {
  this._verify2(a, b);

  var res = a.add(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res._forceRed(this);
};

Red.prototype.iadd = function iadd(a, b) {
  this._verify2(a, b);

  var res = a.iadd(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res;
};

Red.prototype.sub = function sub(a, b) {
  this._verify2(a, b);

  var res = a.sub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res._forceRed(this);
};

Red.prototype.isub = function isub(a, b) {
  this._verify2(a, b);

  var res = a.isub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res;
};

Red.prototype.shl = function shl(a, num) {
  this._verify1(a);
  return this.imod(a.shln(num));
};

Red.prototype.imul = function imul(a, b) {
  this._verify2(a, b);
  return this.imod(a.imul(b));
};

Red.prototype.mul = function mul(a, b) {
  this._verify2(a, b);
  return this.imod(a.mul(b));
};

Red.prototype.isqr = function isqr(a) {
  return this.imul(a, a);
};

Red.prototype.sqr = function sqr(a) {
  return this.mul(a, a);
};

Red.prototype.sqrt = function sqrt(a) {
  if (a.cmpn(0) === 0)
    return a.clone();

  var mod3 = this.m.andln(3);
  assert(mod3 % 2 === 1);

  // Fast case
  if (mod3 === 3) {
    var pow = this.m.add(new BN(1)).ishrn(2);
    var r = this.pow(a, pow);
    return r;
  }

  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  //
  // Find Q and S, that Q * 2 ^ S = (P - 1)
  var q = this.m.subn(1);
  var s = 0;
  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
    s++;
    q.ishrn(1);
  }
  assert(q.cmpn(0) !== 0);

  var one = new BN(1).toRed(this);
  var nOne = one.redNeg();

  // Find quadratic non-residue
  // NOTE: Max is such because of generalized Riemann hypothesis.
  var lpow = this.m.subn(1).ishrn(1);
  var z = this.m.bitLength();
  z = new BN(2 * z * z).toRed(this);
  while (this.pow(z, lpow).cmp(nOne) !== 0)
    z.redIAdd(nOne);

  var c = this.pow(z, q);
  var r = this.pow(a, q.addn(1).ishrn(1));
  var t = this.pow(a, q);
  var m = s;
  while (t.cmp(one) !== 0) {
    var tmp = t;
    for (var i = 0; tmp.cmp(one) !== 0; i++)
      tmp = tmp.redSqr();
    assert(i < m);
    var b = this.pow(c, new BN(1).ishln(m - i - 1));

    r = r.redMul(b);
    c = b.redSqr();
    t = t.redMul(c);
    m = i;
  }

  return r;
};

Red.prototype.invm = function invm(a) {
  var inv = a._egcd(new BN(1), this.m);
  if (inv.sign) {
    inv.sign = false;
    return this.imod(inv).redNeg();
  } else {
    return this.imod(inv);
  }
};

Red.prototype.pow = function pow(a, num) {
  var w = [];
  var q = num.clone();
  while (q.cmpn(0) !== 0) {
    w.push(q.andln(1));
    q.ishrn(1);
  }

  // Skip leading zeroes
  var res = a;
  for (var i = 0; i < w.length; i++, res = this.sqr(res))
    if (w[i] !== 0)
      break;

  if (++i < w.length) {
    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
      if (w[i] === 0)
        continue;
      res = this.mul(res, q);
    }
  }

  return res;
};

Red.prototype.convertTo = function convertTo(num) {
  return num.clone();
};

Red.prototype.convertFrom = function convertFrom(num) {
  var res = num.clone();
  res.red = null;
  return res;
};

//
// Montgomery method engine
//

BN.mont = function mont(num) {
  return new Mont(num);
};

function Mont(m) {
  Red.call(this, m);

  this.shift = this.m.bitLength();
  if (this.shift % 26 !== 0)
    this.shift += 26 - (this.shift % 26);
  this.r = new BN(1).ishln(this.shift);
  this.r2 = this.imod(this.r.sqr());
  this.rinv = this.r.invm(this.m);

  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  this.minv.sign = true;
  this.minv = this.minv.mod(this.r);
}
inherits(Mont, Red);

Mont.prototype.convertTo = function convertTo(num) {
  return this.imod(num.shln(this.shift));
};

Mont.prototype.convertFrom = function convertFrom(num) {
  var r = this.imod(num.mul(this.rinv));
  r.red = null;
  return r;
};

Mont.prototype.imul = function imul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
    a.words[0] = 0;
    a.length = 1;
    return a;
  }

  var t = a.imul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.mul = function mul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
    return new BN(0)._forceRed(this);

  var t = a.mul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.invm = function invm(a) {
  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  var res = this.imod(a.invm(this.m).mul(this.r2));
  return res._forceRed(this);
};

})(typeof module === 'undefined' || module, this);

},{}],202:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"bn.js":201,"buffer":176,"dup":34}],203:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"../package.json":222,"./elliptic/curve":206,"./elliptic/curves":209,"./elliptic/ec":210,"./elliptic/hmac-drbg":213,"./elliptic/utils":214,"brorand":215,"dup":36}],204:[function(require,module,exports){
var bn = require('bn.js');
var elliptic = require('../../elliptic');

var getNAF = elliptic.utils.getNAF;
var getJSF = elliptic.utils.getJSF;
var assert = elliptic.utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new bn(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

  // Useful for many curves
  this.zero = new bn(0).toRed(this.red);
  this.one = new bn(1).toRed(this.red);
  this.two = new bn(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new bn(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate(point) {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;
  return acc.toP();
};

BaseCurve.BasePoint = BasePoint;

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BasePoint.prototype.precompute = function precompute(power, _beta) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":203,"bn.js":201}],205:[function(require,module,exports){
var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var getNAF = elliptic.utils.getNAF;
var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = conf.a != 1;
  this.mOneA = this.twisted && conf.a == -1;
  this.extended = this.mOneA;

  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);
  this.c = new bn(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new bn(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = conf.c == 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y = rhs.redMul(lhs.redInvm()).redSqrt();
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y, curve.one);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = z ? new bn(z, 16) : this.curve.one;
    this.t = t && new bn(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#doubling-dbl-2008-bbjlp
  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      var nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      var ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      var nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      var nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      var ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      var nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    var nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    var ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    var nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#addition-add-2008-bbjlp
  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    var ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    var nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    var ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    var nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this.precomputed && this.precomputed.doubles)
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":203,"../curve":206,"bn.js":201,"inherits":315}],206:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"./base":204,"./edwards":205,"./mont":207,"./short":208,"dup":39}],207:[function(require,module,exports){
var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var getNAF = elliptic.utils.getNAF;
var assert = elliptic.utils.assert;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.i4 = new bn(4).toRed(this.red).redInvm();
  this.two = new bn(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
}

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new bn(x, 16);
    this.z = new bn(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add(p) {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":203,"../curve":206,"bn.js":201,"inherits":315}],208:[function(require,module,exports){
var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var getNAF = elliptic.utils.getNAF;
var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new bn(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new bn(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new bn(vec.a, 16),
        b: new bn(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : bn.mont(num);
  var tinv = new bn(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var one = new bn(1).toRed(red);

  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new bn(1);
  var y1 = new bn(0);
  var x2 = new bn(0);
  var y2 = new bn(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    var r = v.sub(q.mul(u));
    var x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.sign) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.sign) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.sign) {
      split.k1.sign = !split.k1.sign;
      p = p.neg(true);
    }
    if (split.k2.sign) {
      split.k2.sign = !split.k2.sign;
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    function endoMul(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    }
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16 ,2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new bn(k, 16);

  if (this.precomputed && this.precomputed.doubles)
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    function negate(p) {
      return p.neg();
    }
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new bn(0);
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = new bn(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  // Z = 1
  if (this.zOne) {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    var nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    var nz = this.y.redAdd(this.y);
  } else {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    var nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    var ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    var nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  // Z = 1
  if (this.zOne) {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    var nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    var nz = this.y.redAdd(this.y);
  } else {
    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    var nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    var nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    var ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new bn(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":203,"../curve":206,"bn.js":201,"inherits":315}],209:[function(require,module,exports){
var curves = exports;

var hash = require('hash.js');
var bn = require('bn.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    {
      'doubles': {
        'step': 4,
        'points': [
          [
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
          ],
          [
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
          ],
          [
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
          ],
          [
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
          ],
          [
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
          ],
          [
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
          ],
          [
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
          ],
          [
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
          ],
          [
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
          ],
          [
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
          ],
          [
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
          ],
          [
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
          ],
          [
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
          ],
          [
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
          ],
          [
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
          ],
          [
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
          ],
          [
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
          ],
          [
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
          ],
          [
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
          ],
          [
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
          ],
          [
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
          ],
          [
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
          ],
          [
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
          ],
          [
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
          ],
          [
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
          ],
          [
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
          ],
          [
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
          ],
          [
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
          ],
          [
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
          ],
          [
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
          ],
          [
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
          ],
          [
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
          ],
          [
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
          ],
          [
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
          ],
          [
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
          ],
          [
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
          ],
          [
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
          ],
          [
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
          ],
          [
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
          ],
          [
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
          ],
          [
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
          ],
          [
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
          ],
          [
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
          ],
          [
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
          ],
          [
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
          ],
          [
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
          ],
          [
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
          ],
          [
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
          ],
          [
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
          ],
          [
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
          ],
          [
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
          ],
          [
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
          ],
          [
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
          ],
          [
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
          ],
          [
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
          ],
          [
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
          ],
          [
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
          ],
          [
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
          ],
          [
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
          ],
          [
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
          ],
          [
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
          ],
          [
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
          ],
          [
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
          ],
          [
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
          ],
          [
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
          ]
        ]
      },
      'naf': {
        'wnd': 7,
        'points': [
          [
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
          ],
          [
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
          ],
          [
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
          ],
          [
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
          ],
          [
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
          ],
          [
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
          ],
          [
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
          ],
          [
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
          ],
          [
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
          ],
          [
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
          ],
          [
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
          ],
          [
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
          ],
          [
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
          ],
          [
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
          ],
          [
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
          ],
          [
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
          ],
          [
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
          ],
          [
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
          ],
          [
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
          ],
          [
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
          ],
          [
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
          ],
          [
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
          ],
          [
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
          ],
          [
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
          ],
          [
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
          ],
          [
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
          ],
          [
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
          ],
          [
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
          ],
          [
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
          ],
          [
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
          ],
          [
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
          ],
          [
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
          ],
          [
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
          ],
          [
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
          ],
          [
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
          ],
          [
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
          ],
          [
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
          ],
          [
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
          ],
          [
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
          ],
          [
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
          ],
          [
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
          ],
          [
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
          ],
          [
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
          ],
          [
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
          ],
          [
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
          ],
          [
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
          ],
          [
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
          ],
          [
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
          ],
          [
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
          ],
          [
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
          ],
          [
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
          ],
          [
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
          ],
          [
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
          ],
          [
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
          ],
          [
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
          ],
          [
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
          ],
          [
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
          ],
          [
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
          ],
          [
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
          ],
          [
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
          ],
          [
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
          ],
          [
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
          ],
          [
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
          ],
          [
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
          ],
          [
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
          ],
          [
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
          ],
          [
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
          ],
          [
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
          ],
          [
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
          ],
          [
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
          ],
          [
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
          ],
          [
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
          ],
          [
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
          ],
          [
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
          ],
          [
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
          ],
          [
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
          ],
          [
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
          ],
          [
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
          ],
          [
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
          ],
          [
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
          ],
          [
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
          ],
          [
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
          ],
          [
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
          ],
          [
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
          ],
          [
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
          ],
          [
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
          ],
          [
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
          ],
          [
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
          ],
          [
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
          ],
          [
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
          ],
          [
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
          ],
          [
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
          ],
          [
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
          ],
          [
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
          ],
          [
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
          ],
          [
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
          ],
          [
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
          ],
          [
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
          ],
          [
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
          ],
          [
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
          ],
          [
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
          ],
          [
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
          ],
          [
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
          ],
          [
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
          ],
          [
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
          ],
          [
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
          ],
          [
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
          ],
          [
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
          ],
          [
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
          ],
          [
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
          ],
          [
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
          ],
          [
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
          ],
          [
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
          ],
          [
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
          ],
          [
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
          ],
          [
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
          ],
          [
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
          ],
          [
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
          ],
          [
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
          ],
          [
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
          ],
          [
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
          ],
          [
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
          ],
          [
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
          ],
          [
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
          ],
          [
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
          ],
          [
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
          ],
          [
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
          ]
        ]
      }
    }
  ]
});

},{"../elliptic":203,"bn.js":201,"hash.js":216}],210:[function(require,module,exports){
var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.shrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(priv, pub) {
  return new KeyPair(this, priv, pub);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new bn(2));
  do {
    var priv = new bn(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyPair(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.shrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, options) {
  key = this.keyPair(key, 'hex');
  msg = this._truncateToN(new bn(msg, 16));
  if (!options)
    options = {};

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray();
  for (var i = bkey.length; i < 21; i++)
    bkey.unshift(0);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray();
  for (var i = nonce.length; i < bytes; i++)
    nonce.unshift(0);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new bn(1));
  do {
    var k = new bn(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var r = kp.getX().mod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0)
      s = this.n.sub(s);

    return new Signature(r, s);
  } while (true);
};

EC.prototype.verify = function verify(msg, signature, key) {
  msg = this._truncateToN(new bn(msg, 16));
  key = this.keyPair(key, 'hex');
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).mod(this.n);
  var u2 = sinv.mul(r).mod(this.n);

  var p = this.g.mulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  return p.getX().mod(this.n).cmp(r) === 0;
};

},{"../../elliptic":203,"./key":211,"./signature":212,"bn.js":201}],211:[function(require,module,exports){
var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, priv, pub) {
  if (priv instanceof KeyPair)
    return priv;
  if (pub instanceof KeyPair)
    return pub;

  if (!priv) {
    priv = pub;
    pub = null;
  }
  if (priv !== null && typeof priv === 'object') {
    if (priv.x) {
      // KeyPair(public)
      pub = priv;
      priv = null;
    } else if (priv.priv || priv.pub) {
      // KeyPair({ priv: ..., pub: ... })
      pub = priv.pub;
      priv = priv.priv;
    }
  }

  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(public, 'hex')
  if (this._importPublicHex(priv, pub))
    return;

  if (pub === 'hex')
    pub = null;

  // KeyPair(priv, pub)
  if (priv)
    this._importPrivate(priv);
  if (pub)
    this._importPublic(pub);
}
module.exports = KeyPair;

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!enc)
    return this.pub;

  var len = this.ec.curve.p.byteLength();
  var x = this.pub.getX().toArray();

  for (var i = x.length; i < len; i++)
    x.unshift(0);

  if (compact) {
    var res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);
  } else {
    var y = this.pub.getY().toArray();
    for (var i = y.length; i < len; i++)
      y.unshift(0);
    var res = [ 0x04 ].concat(x, y);
  }
  return utils.encode(res, enc);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key) {
  this.priv = new bn(key, 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.mod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key) {
  this.pub = this.ec.curve.point(key.x, key.y);
};

KeyPair.prototype._importPublicHex = function _importPublic(key, enc) {
  key = utils.toArray(key, enc);
  var len = this.ec.curve.p.byteLength();
  if (key[0] === 0x04 && key.length - 1 === 2 * len) {
    this.pub = this.ec.curve.point(
      key.slice(1, 1 + len),
      key.slice(1 + len, 1 + 2 * len));
  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {
    this.pub = this.ec.curve.pointFromX(key[0] === 0x03,
                                        key.slice(1, 1 +len));
  } else {
    return false;
  }

  return true;
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg) {
  return this.ec.sign(msg, this);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":203,"bn.js":201}],212:[function(require,module,exports){
var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(r, s) {
  if (r instanceof Signature)
    return r;

  if (this._importDER(r, s))
    return;

  assert(r && s, 'Signature without r or s');
  this.r = new bn(r, 16);
  this.s = new bn(s, 16);
}
module.exports = Signature;

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
    return false;
  var total = data[1];
  if (1 + total > data.length)
    return false;
  var rlen = data[3];
  // Short length notation
  if (rlen >= 0x80)
    return false;
  if (4 + rlen + 2 >= data.length)
    return false;
  if (data[4 + rlen] !== 0x02)
    return false;
  var slen = data[5 + rlen];
  // Short length notation
  if (slen >= 0x80)
    return false;
  if (4 + rlen + 2 + slen > data.length)
    return false;

  this.r = new bn(data.slice(4, 4 + rlen));
  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));

  return true;
};

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  var total = r.length + s.length + 4;
  var res = [ 0x30, total, 0x02, r.length ];
  res = res.concat(r, [ 0x02, s.length ], s);
  return utils.encode(res, enc);
};

},{"../../elliptic":203,"bn.js":201}],213:[function(require,module,exports){
var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":203,"hash.js":216}],214:[function(require,module,exports){
var bn = require('bn.js');

var utils = exports;

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.ishrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.ishrn(1);
    k2.ishrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

},{"bn.js":201}],215:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],216:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":217,"./hash/hmac":218,"./hash/ripemd":219,"./hash/sha":220,"./hash/utils":221}],217:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":216}],218:[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":216}],219:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":216}],220:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":216}],221:[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":315}],222:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "1.0.1",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "scripts": {
    "test": "mocha --reporter=spec test/*-test.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "browserify": "^3.44.2",
    "mocha": "^1.18.2",
    "uglify-js": "^2.4.13"
  },
  "dependencies": {
    "bn.js": "^1.0.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "gitHead": "17dc013761dd1efcfb868e2b06b0b897627b40be",
  "_id": "elliptic@1.0.1",
  "_shasum": "d180376b66a17d74995c837796362ac4d22aefe3",
  "_from": "elliptic@>=1.0.0 <2.0.0",
  "_npmVersion": "1.4.28",
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "dist": {
    "shasum": "d180376b66a17d74995c837796362ac4d22aefe3",
    "tarball": "http://registry.npmjs.org/elliptic/-/elliptic-1.0.1.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-1.0.1.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],223:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"buffer":176,"dup":57}],224:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58}],225:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"asn1.js":229,"asn1.js-rfc3280":228,"dup":59}],226:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"./EVP_BytesToKey":223,"buffer":176,"dup":60}],227:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"./aesid.json":224,"./asn1":225,"./fixProc":226,"buffer":176,"dup":61,"pemstrip":242}],228:[function(require,module,exports){
try {
  var asn1 = require('asn1.js');
} catch (e) {
  var asn1 = require('../' + '..');
}

var CRLReason = asn1.define('CRLReason', function() {
  this.enum({
    0: 'unspecified',
    1: 'keyCompromise',
    2: 'CACompromise',
    3: 'affiliationChanged',
    4: 'superseded',
    5: 'cessationOfOperation',
    6: 'certificateHold',
    8: 'removeFromCRL',
    9: 'privilegeWithdrawn',
    10: 'AACompromise'
  });
});
exports.CRLReason = CRLReason;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional().any()
  );
});
exports.AlgorithmIdentifier = AlgorithmIdentifier;

var Certificate = asn1.define('Certificate', function() {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signature').bitstr()
  );
});
exports.Certificate = Certificate;

var TBSCertificate = asn1.define('TBSCertificate', function() {
  this.seq().obj(
    this.key('version').def('v1').explicit(0).use(Version),
    this.key('serialNumber').use(CertificateSerialNumber),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),

    // TODO(indutny): validate that version is v2 or v3
    this.key('issuerUniqueID').optional().explicit(1).use(UniqueIdentifier),
    this.key('subjectUniqueID').optional().explicit(2).use(UniqueIdentifier),

    // TODO(indutny): validate that version is v3
    this.key('extensions').optional().explicit(3).use(Extensions)
  );
});
exports.TBSCertificate = TBSCertificate;

var Version = asn1.define('Version', function() {
  this.int({
    0: 'v1',
    1: 'v2',
    2: 'v3'
  });
});
exports.Version = Version;

var CertificateSerialNumber = asn1.define('CertificateSerialNumber',
                                          function() {
  this.int();
});
exports.CertificateSerialNumber = CertificateSerialNumber;

var Validity = asn1.define('Validity', function() {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  );
});
exports.Validity = Validity;

var Time = asn1.define('Time', function() {
  this.choice({
    utcTime: this.utctime(),
    genTime: this.gentime()
  });
});
exports.Time = Time;

var UniqueIdentifier = asn1.define('UniqueIdentifier', function() {
  this.bitstr();
});
exports.UniqueIdentifier = UniqueIdentifier;

var SubjectPublicKeyInfo = asn1.define('SubjectPublicKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  );
});
exports.SubjectPublicKeyInfo = SubjectPublicKeyInfo;

var Extensions = asn1.define('Extensions', function() {
  this.seqof(Extension);
});
exports.Extensions = Extensions;

var Extension = asn1.define('Extension', function() {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  );
});
exports.Extension = Extension;

var Name = asn1.define('Name', function() {
  this.choice({
    rdn: this.use(RDNSequence)
  });
});
exports.Name = Name;

var RDNSequence = asn1.define('RDNSequence', function() {
  this.seqof(RelativeDistinguishedName);
});
exports.RDNSequence = RDNSequence;

var RelativeDistinguishedName = asn1.define('RelativeDistinguishedName',
                                            function() {
  this.setof(AttributeTypeAndValue);
});
exports.RelativeDistinguishedName = RelativeDistinguishedName;

var AttributeTypeAndValue = asn1.define('AttributeTypeAndValue', function() {
  this.seq().obj(
    this.key('type').use(AttributeType),
    this.key('value').use(AttributeValue)
  );
});
exports.AttributeTypeAndValue = AttributeTypeAndValue;

var AttributeType = asn1.define('AttributeType', function() {
  this.objid();
});
exports.AttributeType = AttributeType;

var AttributeValue = asn1.define('AttributeValue', function() {
  this.any();
});
exports.AttributeValue = AttributeValue;

},{"asn1.js":229}],229:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./asn1/api":230,"./asn1/base":232,"./asn1/constants":236,"./asn1/decoders":238,"./asn1/encoders":240,"bn.js":201,"dup":63}],230:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');
var vm = require('vm');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named = vm.runInThisContext('(function ' + this.name + '(entity) {\n' +
    '  this._initNamed(entity);\n' +
    '})');
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":229,"inherits":315,"vm":334}],231:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":232,"buffer":176,"inherits":315}],232:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./buffer":231,"./node":233,"./reporter":234,"dup":66}],233:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input));

  var result = state['default'];
  var present = true;

  var prevKey;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    present = this._peekTag(
      input,
      state.explicit !== null ? state.explicit :
          state.implicit !== null ? state.implicit :
              state.tag || 0
    );
    if (input.isError(present))
      return present;
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input);
    else
      result = this._decodeChoice(input);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      var fail = state.children.some(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input);
      });
      if (fail)
        return err;
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0]);
  else if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._decodeStr(input, tag);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1]);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag);
  else if (tag === 'null_')
    return this._decodeNull(input);
  else if (tag === 'bool')
    return this._decodeBool(input);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0]);
  else if (state.use !== null)
    return this._getUse(state.use, input._reporterState.obj)._decode(input);
  else
    return input.error('unknown tag: ' + tag);

  return null;
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;
  var present = true;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // For error reporting
  var prevKey;

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });

    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else
    throw new Error('Unsupported tag: ' + tag);
};

},{"../base":232,"minimalistic-assert":241}],234:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  Error.captureStackTrace(this, ReporterError);

  return this;
};

},{"inherits":315}],235:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"../constants":236,"dup":69}],236:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"./der":235,"dup":70}],237:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.start();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  return buffer.cut(state);
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der');
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;

    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'ia5str') {
    return buffer.raw().toString();
  } else {
    return this.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values)
    result = values[result.join(' ')];

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return this.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  var res = 0;

  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  if (raw.length > 3)
    return new bignum(raw);

  while (!buffer.isEmpty()) {
    res <<= 8;
    var i = buffer.readUInt8();
    if (buffer.isError(i))
      return i;
    res |= i;
  }

  if (values)
    res = values[res] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num >= 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":229,"inherits":315}],238:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"./der":237,"dup":72}],239:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'octstr')
    return this._createEncoderBuffer(str);
  else if (tag === 'bitstr')
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  else if (tag === 'ia5str')
    return this._createEncoderBuffer(str);
  return this.reporter.error('Encoding of string type: ' + tag +
                             ' unsupported');
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/\s+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num <= 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      date.getFullYear(),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      date.getFullYear() % 100,
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (bignum !== null && num instanceof bignum) {
    var numArray = num.toArray();
    if(num.sign === false && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":229,"buffer":176,"inherits":315}],240:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"./der":239,"dup":74}],241:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],242:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"dup":75}],243:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var parseKeys = require('parse-asn1');
var bn = require('bn.js');
var elliptic = require('elliptic');
var crt = require("browserify-rsa");
module.exports = sign;
function sign(hash, key, hashType, crypto) {
  var priv = parseKeys(key, crypto);
  if (priv.curve) {
    return ecSign(hash, priv, crypto);
  } else if (priv.type === 'dsa') {
    return dsaSign(hash, priv, hashType, crypto);
  }
  var len = priv.modulus.byteLength();
  var pad = [ 0, 1 ];
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff);
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  
  var out = crt(pad, priv, crypto);
  return out;
}
function ecSign(hash, priv, crypto) {
  elliptic.rand = crypto.randomBytes;
  var curve;
  if (priv.curve.join('.')  === '1.3.132.0.10') {
    curve = new elliptic.ec('secp256k1');
  }
  var key = curve.genKeyPair();
  key._importPrivate(priv.privateKey);
  var out = key.sign(hash);
  return new Buffer(out.toDER());
}
function dsaSign(hash, priv, algo, crypto) {
  var x = priv.params.priv_key;
  var p = priv.params.p;
  var q = priv.params.q;
  var montq = bn.mont(q);
  var g = priv.params.g;
  var r = new bn(0);
  var k;
  var H = bits2int(hash, q).mod(q);
  var s = false;
  var kv = getKay(x, q, hash, algo, crypto);
  while (s === false) {
    k = makeKey(q, kv, algo, crypto);
    r = makeR(g, k, p, q);
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
    if (!s.cmpn(0)) {
      s = false;
      r = new bn(0);
    }
  }
  return toDER(r,s);
}
function toDER(r, s) {
  r = r.toArray();
  s = s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [0].concat(s);

  var total = r.length + s.length + 4;
  var res = [ 0x30, total, 0x02, r.length ];
  res = res.concat(r, [ 0x02, s.length ], s);
  return new Buffer(res);
}
module.exports.getKay = getKay;
function getKay(x, q, hash, algo, crypto) {
  x = new Buffer(x.toArray());
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length);
    zeros.fill(0);
    x = Buffer.concat([zeros, x]);
  }
  var hlen = hash.length;
  var hbits = bits2octets(hash, q);
  var v = new Buffer(hlen);
  v.fill(1);
  var k = new Buffer(hlen);
  k.fill(0);
  k = crypto.createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest();
  v = crypto.createHmac(algo, k)
    .update(v)
    .digest();
  k = crypto.createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest();
  v = crypto.createHmac(algo, k)
    .update(v)
    .digest();
  return {
    k:k,
    v:v
  };
}
function bits2int(obits, q) {
  bits = new bn(obits);
  var shift = obits.length * 8 - q.bitLength();
  if (shift > 0) {
    bits.ishrn(shift);
  }
  return bits;
}
function bits2octets (bits, q) {
  bits = bits2int(bits, q);
  bits = bits.mod(q);
  var out = new Buffer(bits.toArray());
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length);
    zeros.fill(0);
    out = Buffer.concat([zeros, out]);
  }
  return out;
}
module.exports.makeKey = makeKey;
function makeKey(q, kv, algo, crypto) {
  var t;
  var k;
  while (true) {
    t = new Buffer('');
    while (t.length * 8 < q.bitLength()) {
      kv.v = crypto.createHmac(algo, kv.k)
        .update(kv.v)
        .digest();
      t = Buffer.concat([t, kv.v]);
    }
    k = bits2int(t, q);
    kv.k =  crypto.createHmac(algo, kv.k)
        .update(kv.v)
        .update(new Buffer([0]))
        .digest();
    kv.v = crypto.createHmac(algo, kv.k)
        .update(kv.v)
        .digest();
    if (k.cmp(q) === -1) {
      return k;
    }
  }
}
function makeR(g, k, p, q) {
  return g.toRed(bn.mont(p)).redPow(k).fromRed().mod(q);
}
}).call(this,require("buffer").Buffer)
},{"bn.js":201,"browserify-rsa":202,"buffer":176,"elliptic":203,"parse-asn1":227}],244:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"bn.js":201,"buffer":176,"dup":77,"elliptic":203,"parse-asn1":227}],245:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	other = new BN(other);
	other = other.toString(16);
	var otherPub = this.curve.keyPair(other, 'hex').getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	var pkey = new BN(pub);
	pkey = pkey.toArray();
	this.keys._importPublicHex(pkey);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}
}).call(this,require("buffer").Buffer)
},{"bn.js":247,"buffer":176,"elliptic":248}],246:[function(require,module,exports){
var createECDH = require('crypto').createECDH;

module.exports = createECDH || require('./browser');
},{"./browser":245,"crypto":180}],247:[function(require,module,exports){
arguments[4][201][0].apply(exports,arguments)
},{"dup":201}],248:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"../package.json":267,"./elliptic/curve":251,"./elliptic/curves":254,"./elliptic/ec":255,"./elliptic/hmac-drbg":258,"./elliptic/utils":259,"brorand":260,"dup":36}],249:[function(require,module,exports){
arguments[4][204][0].apply(exports,arguments)
},{"../../elliptic":248,"bn.js":247,"dup":204}],250:[function(require,module,exports){
arguments[4][205][0].apply(exports,arguments)
},{"../../elliptic":248,"../curve":251,"bn.js":247,"dup":205,"inherits":315}],251:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"./base":249,"./edwards":250,"./mont":252,"./short":253,"dup":39}],252:[function(require,module,exports){
arguments[4][207][0].apply(exports,arguments)
},{"../../elliptic":248,"../curve":251,"bn.js":247,"dup":207,"inherits":315}],253:[function(require,module,exports){
arguments[4][208][0].apply(exports,arguments)
},{"../../elliptic":248,"../curve":251,"bn.js":247,"dup":208,"inherits":315}],254:[function(require,module,exports){
arguments[4][209][0].apply(exports,arguments)
},{"../elliptic":248,"bn.js":247,"dup":209,"hash.js":261}],255:[function(require,module,exports){
arguments[4][210][0].apply(exports,arguments)
},{"../../elliptic":248,"./key":256,"./signature":257,"bn.js":247,"dup":210}],256:[function(require,module,exports){
arguments[4][211][0].apply(exports,arguments)
},{"../../elliptic":248,"bn.js":247,"dup":211}],257:[function(require,module,exports){
arguments[4][212][0].apply(exports,arguments)
},{"../../elliptic":248,"bn.js":247,"dup":212}],258:[function(require,module,exports){
arguments[4][213][0].apply(exports,arguments)
},{"../elliptic":248,"dup":213,"hash.js":261}],259:[function(require,module,exports){
arguments[4][214][0].apply(exports,arguments)
},{"bn.js":247,"dup":214}],260:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],261:[function(require,module,exports){
arguments[4][216][0].apply(exports,arguments)
},{"./hash/common":262,"./hash/hmac":263,"./hash/ripemd":264,"./hash/sha":265,"./hash/utils":266,"dup":216}],262:[function(require,module,exports){
arguments[4][217][0].apply(exports,arguments)
},{"../hash":261,"dup":217}],263:[function(require,module,exports){
arguments[4][218][0].apply(exports,arguments)
},{"../hash":261,"dup":218}],264:[function(require,module,exports){
arguments[4][219][0].apply(exports,arguments)
},{"../hash":261,"dup":219}],265:[function(require,module,exports){
arguments[4][220][0].apply(exports,arguments)
},{"../hash":261,"dup":220}],266:[function(require,module,exports){
arguments[4][221][0].apply(exports,arguments)
},{"dup":221,"inherits":315}],267:[function(require,module,exports){
arguments[4][222][0].apply(exports,arguments)
},{"dup":222}],268:[function(require,module,exports){
(function (Buffer){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Transform = require('stream').Transform

function HashNoConstructor(hash) {
  Transform.call(this)

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Transform)

HashNoConstructor.prototype._transform = function (data, _, next) {
  this.buffers.push(data)

  next()
}

HashNoConstructor.prototype._flush = function (next) {
  this.push(this.digest())
  next()
}

HashNoConstructor.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this.buffers.push(data)
  return this
}

HashNoConstructor.prototype.digest = function (enc) {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return enc ? r.toString(enc) : r
}

function Hash(hash) {
  Transform.call(this)

  this._hash = hash
}

inherits(Hash, Transform)

Hash.prototype._transform = function (data, enc, next) {
  if (enc) data = new Buffer(data, enc)

  this._hash.update(data)

  next()
}

Hash.prototype._flush = function (next) {
  this.push(this._hash.digest())
  this._hash = null

  next()
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Hash.prototype.digest = function (enc) {
  var outData = this._hash.digest()

  return enc ? outData.toString(enc) : outData
}

module.exports = function createHash (alg) {
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
},{"./md5":270,"buffer":176,"inherits":315,"ripemd160":271,"sha.js":273,"stream":330}],269:[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("buffer").Buffer)
},{"buffer":176}],270:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
},{"./helpers":269}],271:[function(require,module,exports){
(function (Buffer){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]

var zr = [
    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]

var sl = [
     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]

var sr = [
    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]


var hl =  [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr =  [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords(bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes(words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock(H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i;
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (var i = 0; i < 80; i += 1) {
    t = (al +  M[offset+zl[i]])|0
    if (i<16){
        t +=  f1(bl,cl,dl) + hl[0]
    } else if (i<32) {
        t +=  f2(bl,cl,dl) + hl[1]
    } else if (i<48) {
        t +=  f3(bl,cl,dl) + hl[2]
    } else if (i<64) {
        t +=  f4(bl,cl,dl) + hl[3]
    } else {// if (i<80) {
        t +=  f5(bl,cl,dl) + hl[4]
    }
    t = t|0
    t =  rotl(t,sl[i])
    t = (t+el)|0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset+zr[i]])|0
    if (i<16) {
      t +=  f5(br,cr,dr) + hr[0]
    } else if (i<32) {
      t +=  f4(br,cr,dr) + hr[1]
    } else if (i<48) {
      t +=  f3(br,cr,dr) + hr[2]
    } else if (i<64) {
      t +=  f2(br,cr,dr) + hr[3]
    } else {// if (i<80) {
      t +=  f1(br,cr,dr) + hr[4]
    }

    t = t|0
    t =  rotl(t,sr[i]) 
    t = (t+er)|0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t    = (H[1] + cl + dr)|0
  H[1] = (H[2] + dl + er)|0
  H[2] = (H[3] + el + ar)|0
  H[3] = (H[4] + al + br)|0
  H[4] = (H[0] + bl + cr)|0
  H[0] =  t
}

function f1(x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2(x, y, z) {
  return (((x)&(y)) | ((~x)&(z)))
}

function f3(x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4(x, y, z) {
  return (((x) & (z)) | ((y)&(~(z))))
}

function f5(x, y, z) {
  return ((x) ^ ((y) |(~(z))))
}

function rotl(x,n) {
  return (x<<n) | (x>>>(32-n))
}

function ripemd160(message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message == 'string')
    message = new Buffer(message, 'utf8')

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
  )

  for (var i=0 ; i<m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (var i = 0; i < 5; i++) {
      // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("buffer").Buffer)
},{"buffer":176}],272:[function(require,module,exports){
(function (Buffer){
//prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if ("string" === typeof data) {
    enc = enc || "utf8"
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
},{"buffer":176}],273:[function(require,module,exports){
arguments[4][139][0].apply(exports,arguments)
},{"./sha1":274,"./sha224":275,"./sha256":276,"./sha384":277,"./sha512":278,"dup":139}],274:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha1() {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol(num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt));
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0, k

  function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
  function loop(w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a|0, 0)
  H.writeInt32BE(this._b|0, 4)
  H.writeInt32BE(this._c|0, 8)
  H.writeInt32BE(this._d|0, 12)
  H.writeInt32BE(this._e|0, 16)

  return H
}

module.exports = Sha1


}).call(this,require("buffer").Buffer)
},{"./hash":272,"buffer":176,"inherits":315}],275:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var SHA256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224() {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, SHA256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8|0
  this._b = 0x367cd507|0
  this._c = 0x3070dd17|0
  this._d = 0xf70e5939|0
  this._e = 0xffc00b31|0
  this._f = 0x68581511|0
  this._g = 0x64f98fa7|0
  this._h = 0xbefa4fa4|0

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a,  0)
  H.writeInt32BE(this._b,  4)
  H.writeInt32BE(this._c,  8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
},{"./hash":272,"./sha256":276,"buffer":176,"inherits":315}],276:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256() {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667|0
  this._b = 0xbb67ae85|0
  this._c = 0x3c6ef372|0
  this._d = 0xa54ff53a|0
  this._e = 0x510e527f|0
  this._f = 0x9b05688c|0
  this._g = 0x1f83d9ab|0
  this._h = 0x5be0cd19|0

  return this
}

function S (X, n) {
  return (X >>> n) | (X << (32 - n));
}

function R (X, n) {
  return (X >>> n);
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z));
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z));
}

function Sigma0256 (x) {
  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
}

function Sigma1256 (x) {
  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
}

function Gamma0256 (x) {
  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
}

function Gamma1256 (x) {
  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
}

Sha256.prototype._update = function(M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var j = 0

  function calcW() { return Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16] }
  function loop(w) {
    W[j] = w

    var T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w
    var T2 = Sigma0256(a) + Maj(a, b, c);

    h = g;
    g = f;
    f = e;
    e = d + T1;
    d = c;
    c = b;
    b = a;
    a = T1 + T2;

    j++
  }

  while (j < 16) loop(M.readInt32BE(j * 4))
  while (j < 64) loop(calcW())

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
};

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a,  0)
  H.writeInt32BE(this._b,  4)
  H.writeInt32BE(this._c,  8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
},{"./hash":272,"buffer":176,"inherits":315}],277:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var SHA512 = require('./sha512');
var Hash = require('./hash')

var W = new Array(160)

function Sha384() {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._a = 0xcbbb9d5d|0
  this._b = 0x629a292a|0
  this._c = 0x9159015a|0
  this._d = 0x152fecd8|0
  this._e = 0x67332667|0
  this._f = 0x8eb44a87|0
  this._g = 0xdb0c2e0d|0
  this._h = 0x47b5481d|0

  this._al = 0xc1059ed8|0
  this._bl = 0x367cd507|0
  this._cl = 0x3070dd17|0
  this._dl = 0xf70e5939|0
  this._el = 0xffc00b31|0
  this._fl = 0x68581511|0
  this._gl = 0x64f98fa7|0
  this._hl = 0xbefa4fa4|0

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
},{"./hash":272,"./sha512":278,"buffer":176,"inherits":315}],278:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512() {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._a = 0x6a09e667|0
  this._b = 0xbb67ae85|0
  this._c = 0x3c6ef372|0
  this._d = 0xa54ff53a|0
  this._e = 0x510e527f|0
  this._f = 0x9b05688c|0
  this._g = 0x1f83d9ab|0
  this._h = 0x5be0cd19|0

  this._al = 0xf3bcc908|0
  this._bl = 0x84caa73b|0
  this._cl = 0xfe94f82b|0
  this._dl = 0x5f1d36f1|0
  this._el = 0xade682d1|0
  this._fl = 0x2b3e6c1f|0
  this._gl = 0xfb41bd6b|0
  this._hl = 0x137e2179|0

  return this
}

function S (X, Xl, n) {
  return (X >>> n) | (Xl << (32 - n))
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z));
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z));
}

Sha512.prototype._update = function(M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  var i = 0, j = 0
  var Wi, Wil
  function calcW() {
    var x  = W[j - 15*2]
    var xl = W[j - 15*2 + 1]
    var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
    var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

    x  = W[j - 2*2]
    xl = W[j - 2*2 + 1]
    var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
    var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7  = W[j - 7*2]
    var Wi7l = W[j - 7*2 + 1]

    var Wi16  = W[j - 16*2]
    var Wi16l = W[j - 16*2 + 1]

    Wil = gamma0l + Wi7l
    Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
    Wil = Wil + gamma1l
    Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
    Wil = Wil + Wi16l
    Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
  }

  function loop() {
    W[j] = Wi
    W[j + 1] = Wil

    var maj = Maj(a, b, c)
    var majl = Maj(al, bl, cl)

    var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
    var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
    var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
    var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

    // t1 = h + sigma1 + ch + K[i] + W[i]
    var Ki = K[j]
    var Kil = K[j + 1]

    var ch = Ch(e, f, g)
    var chl = Ch(el, fl, gl)

    var t1l = hl + sigma1l
    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
    t1l = t1l + chl
    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
    t1l = t1l + Kil
    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
    t1l = t1l + Wil
    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl
    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

    h  = g
    hl = gl
    g  = f
    gl = fl
    f  = e
    fl = el
    el = (dl + t1l) | 0
    e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    d  = c
    dl = cl
    c  = b
    cl = bl
    b  = a
    bl = al
    al = (t1l + t2l) | 0
    a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

    i++
    j += 2
  }

  while (i < 16) {
    Wi = M.readInt32BE(j * 4)
    Wil = M.readInt32BE(j * 4 + 4)

    loop()
  }

  while (i < 80) {
    calcW()
    loop()
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)
  writeInt64BE(this._g, this._gl, 48)
  writeInt64BE(this._h, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
},{"./hash":272,"buffer":176,"inherits":315}],279:[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)

  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("buffer").Buffer)
},{"buffer":176,"create-hash/browser":268,"inherits":315,"stream":330}],280:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes');

var DH = require('./lib/dh');

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {
    genc = generator;
    generator = enc;
    enc = undefined;
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

}).call(this,require("buffer").Buffer)
},{"./lib/dh":281,"./lib/generatePrime":282,"./lib/primes":283,"buffer":176}],281:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;
  
  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;
    
    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      } 
      break;
    default: 
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function defineError (self, error) {
  try {
    Object.defineProperty(self, 'verifyError', {
      enumerable: true,
      value: error,
      writable: false
    });
  } catch(e) {
    self.verifyError = error;
  }
}
function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = void 0;
  this._priv = void 0;
  
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
    defineError(this, checkPrime(this.__prime, generator));
  } else {
    defineError(this, 8);
  }
}

DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
}).call(this,require("buffer").Buffer)
},{"./generatePrime":282,"bn.js":284,"buffer":176,"miller-rabin":285,"randombytes":371}],282:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);
  var runs, comp;
  function generateRandom(bits) {
    runs = -1;
    var out = new BN(randomBytes(Math.ceil(bits / 8)));
    while (out.bitLength() > bits) {
      out.ishrn(1);
    }
    if (out.isEven()) {
      out.iadd(ONE);
    }
    if (!out.testn(1)) {
      out.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {
        out.iadd(FOUR);
      }
      comp = {
        major: [TWENTYFOUR],
        minor: [TWELVE]
      };
    } else if (!gen.cmp(FIVE)) {
      rem = out.mod(TEN);
      while (rem.cmp(THREE)) {
        out.iadd(FOUR);
        rem = out.mod(TEN);
      }
      comp = {
        major: [FOUR, SIXTEEN],
        minor: [TWO, EIGHT]
      };
    } else {
      comp = {
        major: [FOUR],
        minor: [TWO]
      };
    }
    return out;
  }
  var num = generateRandom(bits);

  var n2 = num.shrn(1);

  while (true) {
    while (num.bitLength() > bits) {
      num = generateRandom(bits);
      n2 = num.shrn(1);
    }
    runs++;
    if (simpleSieve(n2) &&  simpleSieve(num) &&
      fermatTest(n2) &&  fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
    num.iadd(comp.major[runs%comp.major.length]);
    n2.iadd(comp.minor[runs%comp.minor.length]);
  }

}
},{"bn.js":284,"miller-rabin":285,"randombytes":371}],283:[function(require,module,exports){
arguments[4][108][0].apply(exports,arguments)
},{"dup":108}],284:[function(require,module,exports){
arguments[4][201][0].apply(exports,arguments)
},{"dup":201}],285:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"bn.js":284,"brorand":286,"dup":106}],286:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],287:[function(require,module,exports){
(function (Buffer){
var createHmac = require('create-hmac')

exports.pbkdf2 = pbkdf2
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  if (typeof callback !== 'function') {
    throw new Error('No callback provided to pbkdf2')
  }

  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)
  setTimeout(function () {
    callback(undefined, result)
  })
}

exports.pbkdf2Sync = pbkdf2Sync
function pbkdf2Sync (password, salt, iterations, keylen, digest) {
  if (typeof iterations !== 'number')
    throw new TypeError('Iterations not a number')

  if (iterations < 0)
    throw new TypeError('Bad iterations')

  if (typeof keylen !== 'number')
    throw new TypeError('Key length not a number')

  if (keylen < 0)
    throw new TypeError('Bad key length')

  digest = digest || 'sha1'

  if (!Buffer.isBuffer(password)) password = new Buffer(password)
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen

      if (keylen > (Math.pow(2, 32) - 1) * hLen)
        throw new TypeError('keylen exceeds maximum length')
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()

      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k]
      }
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

}).call(this,require("buffer").Buffer)
},{"buffer":176,"create-hmac":279}],288:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":310,"./publicEncrypt":311}],289:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":176,"create-hash":268}],290:[function(require,module,exports){
arguments[4][201][0].apply(exports,arguments)
},{"dup":201}],291:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).mod(p);
  h.imul(q);
  m2.iadd(h);
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
  if (out.length < len) {
    var prefix = new Buffer(len - out.length);
    prefix.fill(0);
    out = Buffer.concat([prefix, out], len);
  }
  return out;
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}
}).call(this,require("buffer").Buffer)
},{"bn.js":290,"buffer":176,"randombytes":371}],292:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function evp(password, salt, keyLen) {
  keyLen = keyLen/8;
  var ki = 0;
  var ii = 0;
  var key = new Buffer(keyLen);
  var addmd = 0;
  var md, md_buf;
  var i;
  while (true) {
    md = createHash('md5');
    if(addmd++ > 0) {
       md.update(md_buf);
    }
    md.update(password);
    md.update(salt);
    md_buf = md.digest();
    i = 0;
    if(keyLen > 0) {
      while(true) {
        if(keyLen === 0) {
          break;
        }
        if(i === md_buf.length) {
          break;
        }
        key[ki++] = md_buf[i++];
        keyLen--;
       }
    }
   if(keyLen === 0) {
      break;
    }
  }
  for(i=0;i<md_buf.length;i++) {
    md_buf[i] = 0;
  }
  return key;
};
}).call(this,require("buffer").Buffer)
},{"buffer":176,"create-hash":268}],293:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"dup":58}],294:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js');

var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  );
});
exports.RSAPrivateKey = RSAPrivateKey;

var RSAPublicKey = asn1.define('RSAPublicKey', function() {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  );
});
exports.RSAPublicKey = RSAPublicKey;

var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  );
});
exports.PublicKey = PublicKey;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int()
      ).optional()
  );
});

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  );
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  );
});

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  );
});
exports.DSAPrivateKey = DSAPrivateKey;

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  );
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function() {
  this.choice({
    namedCurve: this.objid()
  });
});

exports.signature = asn1.define('signature', function() {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  );
});

},{"asn1.js":297}],295:[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
var startRegex =/^-----BEGIN (.*) KEY-----\n/m;
var fullRegex = /^-----BEGIN (.*) KEY-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1 KEY-----$/m;
var evp = require('./EVP_BytesToKey');
var ciphers = require('browserify-aes');
module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;
  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/\n\r?/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/\n\r?/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }
  var tag = key.match(startRegex)[1] + ' KEY';
  return {
    tag: tag,
    data: decrypted
  };
};
// http://stackoverflow.com/a/7033705
function wrap(str) {
  var chunks = [];
  while (str) {
    if (str.length < 64) {
      chunks.push(str);
      break;
    }
    else {
      chunks.push(str.slice(0, 64));
      str = str.slice(64);
    }
  }
  return chunks.join("\n");
}
}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":292,"browserify-aes":184,"buffer":176}],296:[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var compat = require('pbkdf2-compat');
module.exports = parseKeys;

function parseKeys(buffer) {
  var password;
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase;
    buffer = buffer.key;
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer);
  }

  var stripped = fixProc(buffer, password);

  var type = stripped.tag;
  var data = stripped.data;
  var subtype,ndata;
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
        case '1.2.840.10045.2.1':
        ndata.subjectPrivateKey = ndata.subjectPublicKey;
          return {
            type: 'ec',
            data:  ndata
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der');
      data = decrypt(data, password);
      //falling through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der');
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der');
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      };
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der');
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      };
    default: throw new Error('unknown key type ' +  type);
  }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
  var iters = data.algorithm.decrypt.kde.kdeparams.iters;
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
  var iv = data.algorithm.decrypt.cipher.iv;
  var cipherText = data.subjectPrivateKey;
  var keylen = parseInt(algo.split('-')[1], 10)/8;
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);
  var cipher = ciphers.createDecipheriv(algo, key, iv);
  var out = [];
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  return Buffer.concat(out);
}
}).call(this,require("buffer").Buffer)
},{"./aesid.json":293,"./asn1":294,"./fixProc":295,"browserify-aes":184,"buffer":176,"pbkdf2-compat":287}],297:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./asn1/api":298,"./asn1/base":300,"./asn1/constants":304,"./asn1/decoders":306,"./asn1/encoders":308,"bn.js":290,"dup":63}],298:[function(require,module,exports){
arguments[4][230][0].apply(exports,arguments)
},{"../asn1":297,"dup":230,"inherits":315,"vm":334}],299:[function(require,module,exports){
arguments[4][231][0].apply(exports,arguments)
},{"../base":300,"buffer":176,"dup":231,"inherits":315}],300:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./buffer":299,"./node":301,"./reporter":302,"dup":66}],301:[function(require,module,exports){
arguments[4][233][0].apply(exports,arguments)
},{"../base":300,"dup":233,"minimalistic-assert":309}],302:[function(require,module,exports){
arguments[4][234][0].apply(exports,arguments)
},{"dup":234,"inherits":315}],303:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"../constants":304,"dup":69}],304:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"./der":303,"dup":70}],305:[function(require,module,exports){
arguments[4][237][0].apply(exports,arguments)
},{"../../asn1":297,"dup":237,"inherits":315}],306:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"./der":305,"dup":72}],307:[function(require,module,exports){
arguments[4][239][0].apply(exports,arguments)
},{"../../asn1":297,"buffer":176,"dup":239,"inherits":315}],308:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"./der":307,"dup":74}],309:[function(require,module,exports){
arguments[4][241][0].apply(exports,arguments)
},{"dup":241}],310:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":289,"./withPublic":312,"./xor":313,"bn.js":290,"browserify-rsa":291,"buffer":176,"create-hash":268,"parse-asn1":296}],311:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":289,"./withPublic":312,"./xor":313,"bn.js":290,"browserify-rsa":291,"buffer":176,"create-hash":268,"parse-asn1":296,"randombytes":371}],312:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
},{"bn.js":290,"buffer":176}],313:[function(require,module,exports){
arguments[4][136][0].apply(exports,arguments)
},{"dup":136}],314:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],315:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"dup":28}],316:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],317:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":318}],318:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],319:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":320}],320:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":322,"./_stream_writable":324,"_process":318,"core-util-is":325,"inherits":315}],321:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":323,"core-util-is":325,"inherits":315}],322:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":320,"_process":318,"buffer":176,"core-util-is":325,"events":314,"inherits":315,"isarray":316,"stream":330,"string_decoder/":331,"util":175}],323:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":320,"core-util-is":325,"inherits":315}],324:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":320,"_process":318,"buffer":176,"core-util-is":325,"inherits":315,"stream":330}],325:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)
},{"buffer":176}],326:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":321}],327:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":320,"./lib/_stream_passthrough.js":321,"./lib/_stream_readable.js":322,"./lib/_stream_transform.js":323,"./lib/_stream_writable.js":324,"stream":330}],328:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":323}],329:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":324}],330:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":314,"inherits":315,"readable-stream/duplex.js":319,"readable-stream/passthrough.js":326,"readable-stream/readable.js":327,"readable-stream/transform.js":328,"readable-stream/writable.js":329}],331:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":176}],332:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],333:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":332,"_process":318,"inherits":315}],334:[function(require,module,exports){
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":335}],335:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],336:[function(require,module,exports){
// Base58 encoding/decoding
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc

var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
var ALPHABET_MAP = {}
for(var i = 0; i < ALPHABET.length; i++) {
  ALPHABET_MAP[ALPHABET.charAt(i)] = i
}
var BASE = 58

function encode(buffer) {
  if (buffer.length === 0) return ''

  var i, j, digits = [0]
  for (i = 0; i < buffer.length; i++) {
    for (j = 0; j < digits.length; j++) digits[j] <<= 8

    digits[0] += buffer[i]

    var carry = 0
    for (j = 0; j < digits.length; ++j) {
      digits[j] += carry

      carry = (digits[j] / BASE) | 0
      digits[j] %= BASE
    }

    while (carry) {
      digits.push(carry % BASE)

      carry = (carry / BASE) | 0
    }
  }

  // deal with leading zeros
  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) digits.push(0)

  // convert digits to a string
  var stringOutput = ""
  for (var i = digits.length - 1; i >= 0; i--) {
    stringOutput = stringOutput + ALPHABET[digits[i]]
  }
  return stringOutput
}

function decode(string) {
  if (string.length === 0) return []

  var i, j, bytes = [0]
  for (i = 0; i < string.length; i++) {
    var c = string[i]
    if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character')

    for (j = 0; j < bytes.length; j++) bytes[j] *= BASE
    bytes[0] += ALPHABET_MAP[c]

    var carry = 0
    for (j = 0; j < bytes.length; ++j) {
      bytes[j] += carry

      carry = bytes[j] >> 8
      bytes[j] &= 0xff
    }

    while (carry) {
      bytes.push(carry & 0xff)

      carry >>= 8
    }
  }

  // deal with leading zeros
  for (i = 0; string[i] === '1' && i < string.length - 1; i++) bytes.push(0)

  return bytes.reverse()
}

module.exports = {
  encode: encode,
  decode: decode
}

},{}],337:[function(require,module,exports){
module.exports = require('./lib/chai');

},{"./lib/chai":338}],338:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var used = []
  , exports = module.exports = {};

/*!
 * Chai version
 */

exports.version = '1.10.0';

/*!
 * Assertion Error
 */

exports.AssertionError = require('assertion-error');

/*!
 * Utils for plugins (not exported)
 */

var util = require('./chai/utils');

/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */

exports.use = function (fn) {
  if (!~used.indexOf(fn)) {
    fn(this, util);
    used.push(fn);
  }

  return this;
};

/*!
 * Configuration
 */

var config = require('./chai/config');
exports.config = config;

/*!
 * Primary `Assertion` prototype
 */

var assertion = require('./chai/assertion');
exports.use(assertion);

/*!
 * Core Assertions
 */

var core = require('./chai/core/assertions');
exports.use(core);

/*!
 * Expect interface
 */

var expect = require('./chai/interface/expect');
exports.use(expect);

/*!
 * Should interface
 */

var should = require('./chai/interface/should');
exports.use(should);

/*!
 * Assert interface
 */

var assert = require('./chai/interface/assert');
exports.use(assert);

},{"./chai/assertion":339,"./chai/config":340,"./chai/core/assertions":341,"./chai/interface/assert":342,"./chai/interface/expect":343,"./chai/interface/should":344,"./chai/utils":355,"assertion-error":364}],339:[function(require,module,exports){
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = require('./config');
var NOOP = function() { };

module.exports = function (_chai, util) {
  /*!
   * Module dependencies.
   */

  var AssertionError = _chai.AssertionError
    , flag = util.flag;

  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;

  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * @api private
   */

  function Assertion (obj, msg, stack) {
    flag(this, 'ssfi', stack || arguments.callee);
    flag(this, 'object', obj);
    flag(this, 'message', msg);
  }

  Object.defineProperty(Assertion, 'includeStack', {
    get: function() {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      return config.includeStack;
    },
    set: function(value) {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      config.includeStack = value;
    }
  });

  Object.defineProperty(Assertion, 'showDiff', {
    get: function() {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      return config.showDiff;
    },
    set: function(value) {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      config.showDiff = value;
    }
  });

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.addChainableNoop = function(name, fn) {
    util.addChainableMethod(this.prototype, name, NOOP, fn);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  /*!
   * ### .assert(expression, message, negateMessage, expected, actual)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String or Function} message or function that returns message to display if fails
   * @param {String or Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @api private
   */

  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (true !== showDiff) showDiff = false;
    if (true !== config.showDiff) showDiff = false;

    if (!ok) {
      var msg = util.getMessage(this, arguments)
        , actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
          actual: actual
        , expected: expected
        , showDiff: showDiff
      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
    }
  };

  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */

  Object.defineProperty(Assertion.prototype, '_obj',
    { get: function () {
        return flag(this, 'object');
      }
    , set: function (val) {
        flag(this, 'object', val);
      }
  });
};

},{"./config":340}],340:[function(require,module,exports){
module.exports = {

  /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */

   includeStack: false,

  /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */

  showDiff: true,

  /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded,
   * the value is truncated.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */

  truncateThreshold: 40

};

},{}],341:[function(require,module,exports){
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, _) {
  var Assertion = chai.Assertion
    , toString = Object.prototype.toString
    , flag = _.flag;

  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to
   * improve the readability of your assertions. They
   * do not provide testing capabilities unless they
   * have been overwritten by a plugin.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   *
   * @name language chains
   * @api public
   */

  [ 'to', 'be', 'been'
  , 'is', 'and', 'has', 'have'
  , 'with', 'that', 'at'
  , 'of', 'same' ].forEach(function (chain) {
    Assertion.addProperty(chain, function () {
      return this;
    });
  });

  /**
   * ### .not
   *
   * Negates any of assertions following in the chain.
   *
   *     expect(foo).to.not.equal('bar');
   *     expect(goodFn).to.not.throw(Error);
   *     expect({ foo: 'baz' }).to.have.property('foo')
   *       .and.not.equal('bar');
   *
   * @name not
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });

  /**
   * ### .deep
   *
   * Sets the `deep` flag, later used by the `equal` and
   * `property` assertions.
   *
   *     expect(foo).to.deep.equal({ bar: 'baz' });
   *     expect({ foo: { bar: { baz: 'quux' } } })
   *       .to.have.deep.property('foo.bar.baz', 'quux');
   *
   * @name deep
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });

  /**
   * ### .a(type)
   *
   * The `a` and `an` assertions are aliases that can be
   * used either as language chains or to assert a value's
   * type.
   *
   *     // typeof
   *     expect('test').to.be.a('string');
   *     expect({ foo: 'bar' }).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *
   *     // language chain
   *     expect(foo).to.be.an.instanceof(Foo);
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} message _optional_
   * @api public
   */

  function an (type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object')
      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

    this.assert(
        type === _.type(obj)
      , 'expected #{this} to be ' + article + type
      , 'expected #{this} not to be ' + article + type
    );
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);

  /**
   * ### .include(value)
   *
   * The `include` and `contain` assertions can be used as either property
   * based language chains or as methods to assert the inclusion of an object
   * in an array or a substring in a string. When used as language chains,
   * they toggle the `contain` flag for the `keys` assertion.
   *
   *     expect([1,2,3]).to.include(2);
   *     expect('foobar').to.contain('foo');
   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');
   *
   * @name include
   * @alias contain
   * @param {Object|String|Number} obj
   * @param {String} message _optional_
   * @api public
   */

  function includeChainingBehavior () {
    flag(this, 'contains', true);
  }

  function include (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var expected = false;
    if (_.type(obj) === 'array' && _.type(val) === 'object') {
      for (var i in obj) {
        if (_.eql(obj[i], val)) {
          expected = true;
          break;
        }
      }
    } else if (_.type(val) === 'object') {
      if (!flag(this, 'negate')) {
        for (var k in val) new Assertion(obj).property(k, val[k]);
        return;
      }
      var subset = {}
      for (var k in val) subset[k] = obj[k]
      expected = _.eql(subset, val);
    } else {
      expected = obj && ~obj.indexOf(val)
    }
    this.assert(
        expected
      , 'expected #{this} to include ' + _.inspect(val)
      , 'expected #{this} to not include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);

  /**
   * ### .ok
   *
   * Asserts that the target is truthy.
   *
   *     expect('everthing').to.be.ok;
   *     expect(1).to.be.ok;
   *     expect(false).to.not.be.ok;
   *     expect(undefined).to.not.be.ok;
   *     expect(null).to.not.be.ok;
   *
   * Can also be used as a function, which prevents some linter errors.
   *
   *     expect('everthing').to.be.ok();
   *     
   * @name ok
   * @api public
   */

  Assertion.addChainableNoop('ok', function () {
    this.assert(
        flag(this, 'object')
      , 'expected #{this} to be truthy'
      , 'expected #{this} to be falsy');
  });

  /**
   * ### .true
   *
   * Asserts that the target is `true`.
   *
   *     expect(true).to.be.true;
   *     expect(1).to.not.be.true;
   *
   * Can also be used as a function, which prevents some linter errors.
   *
   *     expect(true).to.be.true();
   *
   * @name true
   * @api public
   */

  Assertion.addChainableNoop('true', function () {
    this.assert(
        true === flag(this, 'object')
      , 'expected #{this} to be true'
      , 'expected #{this} to be false'
      , this.negate ? false : true
    );
  });

  /**
   * ### .false
   *
   * Asserts that the target is `false`.
   *
   *     expect(false).to.be.false;
   *     expect(0).to.not.be.false;
   *
   * Can also be used as a function, which prevents some linter errors.
   *
   *     expect(false).to.be.false();
   *
   * @name false
   * @api public
   */

  Assertion.addChainableNoop('false', function () {
    this.assert(
        false === flag(this, 'object')
      , 'expected #{this} to be false'
      , 'expected #{this} to be true'
      , this.negate ? true : false
    );
  });

  /**
   * ### .null
   *
   * Asserts that the target is `null`.
   *
   *     expect(null).to.be.null;
   *     expect(undefined).not.to.be.null;
   *
   * Can also be used as a function, which prevents some linter errors.
   *
   *     expect(null).to.be.null();
   *
   * @name null
   * @api public
   */

  Assertion.addChainableNoop('null', function () {
    this.assert(
        null === flag(this, 'object')
      , 'expected #{this} to be null'
      , 'expected #{this} not to be null'
    );
  });

  /**
   * ### .undefined
   *
   * Asserts that the target is `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *     expect(null).to.not.be.undefined;
   *
   * Can also be used as a function, which prevents some linter errors.
   *
   *     expect(undefined).to.be.undefined();
   *
   * @name undefined
   * @api public
   */

  Assertion.addChainableNoop('undefined', function () {
    this.assert(
        undefined === flag(this, 'object')
      , 'expected #{this} to be undefined'
      , 'expected #{this} not to be undefined'
    );
  });

  /**
   * ### .exist
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi'
   *       , bar = null
   *       , baz;
   *
   *     expect(foo).to.exist;
   *     expect(bar).to.not.exist;
   *     expect(baz).to.not.exist;
   *
   * Can also be used as a function, which prevents some linter errors.
   *
   *     expect(foo).to.exist();
   *
   * @name exist
   * @api public
   */

  Assertion.addChainableNoop('exist', function () {
    this.assert(
        null != flag(this, 'object')
      , 'expected #{this} to exist'
      , 'expected #{this} to not exist'
    );
  });


  /**
   * ### .empty
   *
   * Asserts that the target's length is `0`. For arrays, it checks
   * the `length` property. For objects, it gets the count of
   * enumerable keys.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *     expect({}).to.be.empty;
   *
   * Can also be used as a function, which prevents some linter errors.
   *
   *     expect([]).to.be.empty();
   *
   * @name empty
   * @api public
   */

  Assertion.addChainableNoop('empty', function () {
    var obj = flag(this, 'object')
      , expected = obj;

    if (Array.isArray(obj) || 'string' === typeof object) {
      expected = obj.length;
    } else if (typeof obj === 'object') {
      expected = Object.keys(obj).length;
    }

    this.assert(
        !expected
      , 'expected #{this} to be empty'
      , 'expected #{this} not to be empty'
    );
  });

  /**
   * ### .arguments
   *
   * Asserts that the target is an arguments object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   * Can also be used as a function, which prevents some linter errors.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments();
   *     }
   *
   * @name arguments
   * @alias Arguments
   * @api public
   */

  function checkArguments () {
    var obj = flag(this, 'object')
      , type = Object.prototype.toString.call(obj);
    this.assert(
        '[object Arguments]' === type
      , 'expected #{this} to be arguments but got ' + type
      , 'expected #{this} to not be arguments'
    );
  }

  Assertion.addChainableNoop('arguments', checkArguments);
  Assertion.addChainableNoop('Arguments', checkArguments);

  /**
   * ### .equal(value)
   *
   * Asserts that the target is strictly equal (`===`) to `value`.
   * Alternately, if the `deep` flag is set, asserts that
   * the target is deeply equal to `value`.
   *
   *     expect('hello').to.equal('hello');
   *     expect(42).to.equal(42);
   *     expect(1).to.not.equal(true);
   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });
   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @alias deep.equal
   * @param {Mixed} value
   * @param {String} message _optional_
   * @api public
   */

  function assertEqual (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'deep')) {
      return this.eql(val);
    } else {
      this.assert(
          val === obj
        , 'expected #{this} to equal #{exp}'
        , 'expected #{this} to not equal #{exp}'
        , val
        , this._obj
        , true
      );
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);

  /**
   * ### .eql(value)
   *
   * Asserts that the target is deeply equal to `value`.
   *
   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });
   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} value
   * @param {String} message _optional_
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(
        _.eql(obj, flag(this, 'object'))
      , 'expected #{this} to deeply equal #{exp}'
      , 'expected #{this} to not deeply equal #{exp}'
      , obj
      , this._obj
      , true
    );
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);

  /**
   * ### .above(value)
   *
   * Asserts that the target is greater than `value`.
   *
   *     expect(10).to.be.above(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertAbove (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len > n
        , 'expected #{this} to have a length above #{exp} but got #{act}'
        , 'expected #{this} to not have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj > n
        , 'expected #{this} to be above ' + n
        , 'expected #{this} to be at most ' + n
      );
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);

  /**
   * ### .least(value)
   *
   * Asserts that the target is greater than or equal to `value`.
   *
   *     expect(10).to.be.at.least(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.least(2);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);
   *
   * @name least
   * @alias gte
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertLeast (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= n
        , 'expected #{this} to have a length at least #{exp} but got #{act}'
        , 'expected #{this} to have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj >= n
        , 'expected #{this} to be at least ' + n
        , 'expected #{this} to be below ' + n
      );
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);

  /**
   * ### .below(value)
   *
   * Asserts that the target is less than `value`.
   *
   *     expect(5).to.be.below(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertBelow (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len < n
        , 'expected #{this} to have a length below #{exp} but got #{act}'
        , 'expected #{this} to not have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj < n
        , 'expected #{this} to be below ' + n
        , 'expected #{this} to be at least ' + n
      );
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);

  /**
   * ### .most(value)
   *
   * Asserts that the target is less than or equal to `value`.
   *
   *     expect(5).to.be.at.most(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.most(4);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);
   *
   * @name most
   * @alias lte
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertMost (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len <= n
        , 'expected #{this} to have a length at most #{exp} but got #{act}'
        , 'expected #{this} to have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj <= n
        , 'expected #{this} to be at most ' + n
        , 'expected #{this} to be above ' + n
      );
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);

  /**
   * ### .within(start, finish)
   *
   * Asserts that the target is within a range.
   *
   *     expect(7).to.be.within(5,10);
   *
   * Can also be used in conjunction with `length` to
   * assert a length range. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * @name within
   * @param {Number} start lowerbound inclusive
   * @param {Number} finish upperbound inclusive
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , range = start + '..' + finish;
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= start && len <= finish
        , 'expected #{this} to have a length within ' + range
        , 'expected #{this} to not have a length within ' + range
      );
    } else {
      this.assert(
          obj >= start && obj <= finish
        , 'expected #{this} to be within ' + range
        , 'expected #{this} to not be within ' + range
      );
    }
  });

  /**
   * ### .instanceof(constructor)
   *
   * Asserts that the target is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , Chai = new Tea('chai');
   *
   *     expect(Chai).to.be.an.instanceof(Tea);
   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} message _optional_
   * @alias instanceOf
   * @api public
   */

  function assertInstanceOf (constructor, msg) {
    if (msg) flag(this, 'message', msg);
    var name = _.getName(constructor);
    this.assert(
        flag(this, 'object') instanceof constructor
      , 'expected #{this} to be an instance of ' + name
      , 'expected #{this} to not be an instance of ' + name
    );
  };

  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);

  /**
   * ### .property(name, [value])
   *
   * Asserts that the target has a property `name`, optionally asserting that
   * the value of that property is strictly equal to  `value`.
   * If the `deep` flag is set, you can use dot- and bracket-notation for deep
   * references into objects and arrays.
   *
   *     // simple referencing
   *     var obj = { foo: 'bar' };
   *     expect(obj).to.have.property('foo');
   *     expect(obj).to.have.property('foo', 'bar');
   *
   *     // deep referencing
   *     var deepObj = {
   *         green: { tea: 'matcha' }
   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]
   *     };

   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');
   *
   * You can also use an array as the starting point of a `deep.property`
   * assertion, or traverse nested arrays.
   *
   *     var arr = [
   *         [ 'chai', 'matcha', 'konacha' ]
   *       , [ { tea: 'chai' }
   *         , { tea: 'matcha' }
   *         , { tea: 'konacha' } ]
   *     ];
   *
   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');
   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');
   *
   * Furthermore, `property` changes the subject of the assertion
   * to be the value of that property from the original object. This
   * permits for further chainable assertions on that property.
   *
   *     expect(obj).to.have.property('foo')
   *       .that.is.a('string');
   *     expect(deepObj).to.have.property('green')
   *       .that.is.an('object')
   *       .that.deep.equals({ tea: 'matcha' });
   *     expect(deepObj).to.have.property('teas')
   *       .that.is.an('array')
   *       .with.deep.property('[2]')
   *         .that.deep.equals({ tea: 'konacha' });
   *
   * @name property
   * @alias deep.property
   * @param {String} name
   * @param {Mixed} value (optional)
   * @param {String} message _optional_
   * @returns value of property for chaining
   * @api public
   */

  Assertion.addMethod('property', function (name, val, msg) {
    if (msg) flag(this, 'message', msg);

    var descriptor = flag(this, 'deep') ? 'deep property ' : 'property '
      , negate = flag(this, 'negate')
      , obj = flag(this, 'object')
      , value = flag(this, 'deep')
        ? _.getPathValue(name, obj)
        : obj[name];

    if (negate && undefined !== val) {
      if (undefined === value) {
        msg = (msg != null) ? msg + ': ' : '';
        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));
      }
    } else {
      this.assert(
          undefined !== value
        , 'expected #{this} to have a ' + descriptor + _.inspect(name)
        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (undefined !== val) {
      this.assert(
          val === value
        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'
        , val
        , value
      );
    }

    flag(this, 'object', value);
  });


  /**
   * ### .ownProperty(name)
   *
   * Asserts that the target has an own property `name`.
   *
   *     expect('test').to.have.ownProperty('length');
   *
   * @name ownProperty
   * @alias haveOwnProperty
   * @param {String} name
   * @param {String} message _optional_
   * @api public
   */

  function assertOwnProperty (name, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        obj.hasOwnProperty(name)
      , 'expected #{this} to have own property ' + _.inspect(name)
      , 'expected #{this} to not have own property ' + _.inspect(name)
    );
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

  /**
   * ### .length(value)
   *
   * Asserts that the target's `length` property has
   * the expected value.
   *
   *     expect([ 1, 2, 3]).to.have.length(3);
   *     expect('foobar').to.have.length(6);
   *
   * Can also be used as a chain precursor to a value
   * comparison for the length property.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * @name length
   * @alias lengthOf
   * @param {Number} length
   * @param {String} message _optional_
   * @api public
   */

  function assertLengthChain () {
    flag(this, 'doLength', true);
  }

  function assertLength (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).to.have.property('length');
    var len = obj.length;

    this.assert(
        len == n
      , 'expected #{this} to have a length of #{exp} but got #{act}'
      , 'expected #{this} to not have a length of #{act}'
      , n
      , len
    );
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addMethod('lengthOf', assertLength);

  /**
   * ### .match(regexp)
   *
   * Asserts that the target matches a regular expression.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * @name match
   * @param {RegExp} RegularExpression
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('match', function (re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        re.exec(obj)
      , 'expected #{this} to match ' + re
      , 'expected #{this} not to match ' + re
    );
  });

  /**
   * ### .string(string)
   *
   * Asserts that the string target contains another string.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * @name string
   * @param {String} string
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('string');

    this.assert(
        ~obj.indexOf(str)
      , 'expected #{this} to contain ' + _.inspect(str)
      , 'expected #{this} to not contain ' + _.inspect(str)
    );
  });


  /**
   * ### .keys(key1, [key2], [...])
   *
   * Asserts that the target has exactly the given keys, or
   * asserts the inclusion of some keys when using the
   * `include` or `contain` modifiers.
   *
   *     expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);
   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');
   *
   * @name keys
   * @alias key
   * @param {String...|Array} keys
   * @api public
   */

  function assertKeys (keys) {
    var obj = flag(this, 'object')
      , str
      , ok = true;

    keys = keys instanceof Array
      ? keys
      : Array.prototype.slice.call(arguments);

    if (!keys.length) throw new Error('keys required');

    var actual = Object.keys(obj)
      , expected = keys
      , len = keys.length;

    // Inclusion
    ok = keys.every(function(key){
      return ~actual.indexOf(key);
    });

    // Strict
    if (!flag(this, 'negate') && !flag(this, 'contains')) {
      ok = ok && keys.length == actual.length;
    }

    // Key string
    if (len > 1) {
      keys = keys.map(function(key){
        return _.inspect(key);
      });
      var last = keys.pop();
      str = keys.join(', ') + ', and ' + last;
    } else {
      str = _.inspect(keys[0]);
    }

    // Form
    str = (len > 1 ? 'keys ' : 'key ') + str;

    // Have / include
    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

    // Assertion
    this.assert(
        ok
      , 'expected #{this} to ' + str
      , 'expected #{this} to not ' + str
      , expected.sort()
      , actual.sort()
      , true
    );
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);

  /**
   * ### .throw(constructor)
   *
   * Asserts that the function target will throw a specific error, or specific type of error
   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test
   * for the error's message.
   *
   *     var err = new ReferenceError('This is a bad function.');
   *     var fn = function () { throw err; }
   *     expect(fn).to.throw(ReferenceError);
   *     expect(fn).to.throw(Error);
   *     expect(fn).to.throw(/bad function/);
   *     expect(fn).to.not.throw('good function');
   *     expect(fn).to.throw(ReferenceError, /bad function/);
   *     expect(fn).to.throw(err);
   *     expect(fn).to.not.throw(new RangeError('Out of range.'));
   *
   * Please note that when a throw expectation is negated, it will check each
   * parameter independently, starting with error constructor type. The appropriate way
   * to check for the existence of a type of error but for a message that does not match
   * is to use `and`.
   *
   *     expect(fn).to.throw(ReferenceError)
   *        .and.not.throw(/good function/);
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {ErrorConstructor} constructor
   * @param {String|RegExp} expected error message
   * @param {String} message _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @api public
   */

  function assertThrows (constructor, errMsg, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('function');

    var thrown = false
      , desiredError = null
      , name = null
      , thrownError = null;

    if (arguments.length === 0) {
      errMsg = null;
      constructor = null;
    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {
      errMsg = constructor;
      constructor = null;
    } else if (constructor && constructor instanceof Error) {
      desiredError = constructor;
      constructor = null;
      errMsg = null;
    } else if (typeof constructor === 'function') {
      name = constructor.prototype.name || constructor.name;
      if (name === 'Error' && constructor !== Error) {
        name = (new constructor()).name;
      }
    } else {
      constructor = null;
    }

    try {
      obj();
    } catch (err) {
      // first, check desired error
      if (desiredError) {
        this.assert(
            err === desiredError
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp}'
          , (desiredError instanceof Error ? desiredError.toString() : desiredError)
          , (err instanceof Error ? err.toString() : err)
        );

        flag(this, 'object', err);
        return this;
      }

      // next, check constructor
      if (constructor) {
        this.assert(
            err instanceof constructor
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp} but #{act} was thrown'
          , name
          , (err instanceof Error ? err.toString() : err)
        );

        if (!errMsg) {
          flag(this, 'object', err);
          return this;
        }
      }

      // next, check message
      var message = 'object' === _.type(err) && "message" in err
        ? err.message
        : '' + err;

      if ((message != null) && errMsg && errMsg instanceof RegExp) {
        this.assert(
            errMsg.exec(message)
          , 'expected #{this} to throw error matching #{exp} but got #{act}'
          , 'expected #{this} to throw error not matching #{exp}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {
        this.assert(
            ~message.indexOf(errMsg)
          , 'expected #{this} to throw error including #{exp} but got #{act}'
          , 'expected #{this} to throw error not including #{act}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else {
        thrown = true;
        thrownError = err;
      }
    }

    var actuallyGot = ''
      , expectedThrown = name !== null
        ? name
        : desiredError
          ? '#{exp}' //_.inspect(desiredError)
          : 'an error';

    if (thrown) {
      actuallyGot = ' but #{act} was thrown'
    }

    this.assert(
        thrown === true
      , 'expected #{this} to throw ' + expectedThrown + actuallyGot
      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot
      , (desiredError instanceof Error ? desiredError.toString() : desiredError)
      , (thrownError instanceof Error ? thrownError.toString() : thrownError)
    );

    flag(this, 'object', thrownError);
  };

  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);

  /**
   * ### .respondTo(method)
   *
   * Asserts that the object or class target will respond to a method.
   *
   *     Klass.prototype.bar = function(){};
   *     expect(Klass).to.respondTo('bar');
   *     expect(obj).to.respondTo('bar');
   *
   * To check if a constructor will respond to a static function,
   * set the `itself` flag.
   *
   *     Klass.baz = function(){};
   *     expect(Klass).itself.to.respondTo('baz');
   *
   * @name respondTo
   * @param {String} method
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('respondTo', function (method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , itself = flag(this, 'itself')
      , context = ('function' === _.type(obj) && !itself)
        ? obj.prototype[method]
        : obj[method];

    this.assert(
        'function' === typeof context
      , 'expected #{this} to respond to ' + _.inspect(method)
      , 'expected #{this} to not respond to ' + _.inspect(method)
    );
  });

  /**
   * ### .itself
   *
   * Sets the `itself` flag, later used by the `respondTo` assertion.
   *
   *     function Foo() {}
   *     Foo.bar = function() {}
   *     Foo.prototype.baz = function() {}
   *
   *     expect(Foo).itself.to.respondTo('bar');
   *     expect(Foo).itself.not.to.respondTo('baz');
   *
   * @name itself
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });

  /**
   * ### .satisfy(method)
   *
   * Asserts that the target passes a given truth test.
   *
   *     expect(1).to.satisfy(function(num) { return num > 0; });
   *
   * @name satisfy
   * @param {Function} matcher
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('satisfy', function (matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var result = matcher(obj);
    this.assert(
        result
      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
      , this.negate ? false : true
      , result
    );
  });

  /**
   * ### .closeTo(expected, delta)
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *
   * @name closeTo
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('closeTo', function (expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    new Assertion(obj, msg).is.a('number');
    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {
      throw new Error('the arguments to closeTo must be numbers');
    }

    this.assert(
        Math.abs(obj - expected) <= delta
      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
    );
  });

  function isSubsetOf(subset, superset, cmp) {
    return subset.every(function(elem) {
      if (!cmp) return superset.indexOf(elem) !== -1;

      return superset.some(function(elem2) {
        return cmp(elem, elem2);
      });
    })
  }

  /**
   * ### .members(set)
   *
   * Asserts that the target is a superset of `set`,
   * or that the target and `set` have the same strictly-equal (===) members.
   * Alternately, if the `deep` flag is set, set members are compared for deep
   * equality.
   *
   *     expect([1, 2, 3]).to.include.members([3, 2]);
   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);
   *
   *     expect([4, 2]).to.have.members([2, 4]);
   *     expect([5, 2]).to.not.have.members([5, 2, 1]);
   *
   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);
   *
   * @name members
   * @param {Array} set
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    new Assertion(obj).to.be.an('array');
    new Assertion(subset).to.be.an('array');

    var cmp = flag(this, 'deep') ? _.eql : undefined;

    if (flag(this, 'contains')) {
      return this.assert(
          isSubsetOf(subset, obj, cmp)
        , 'expected #{this} to be a superset of #{act}'
        , 'expected #{this} to not be a superset of #{act}'
        , obj
        , subset
      );
    }

    this.assert(
        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)
        , 'expected #{this} to have the same members as #{act}'
        , 'expected #{this} to not have the same members as #{act}'
        , obj
        , subset
    );
  });
};

},{}],342:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */


module.exports = function (chai, util) {

  /*!
   * Chai dependencies.
   */

  var Assertion = chai.Assertion
    , flag = util.flag;

  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null, null, chai.assert);
    test.assert(
        express
      , errmsg
      , '[ negation message unavailable ]'
    );
  };

  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @api public
   */

  assert.fail = function (actual, expected, message, operator) {
    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, assert.fail);
  };

  /**
   * ### .ok(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.ok('everything', 'everything is ok');
   *     assert.ok(false, 'this will fail');
   *
   * @name ok
   * @param {Mixed} object to test
   * @param {String} message
   * @api public
   */

  assert.ok = function (val, msg) {
    new Assertion(val, msg).is.ok;
  };

  /**
   * ### .notOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.notOk('everything', 'this will fail');
   *     assert.notOk(false, 'this will pass');
   *
   * @name notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @api public
   */

  assert.notOk = function (val, msg) {
    new Assertion(val, msg).is.not.ok;
  };

  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.equal);

    test.assert(
        exp == flag(test, 'object')
      , 'expected #{this} to equal #{exp}'
      , 'expected #{this} to not equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.notEqual);

    test.assert(
        exp != flag(test, 'object')
      , 'expected #{this} to not equal #{exp}'
      , 'expected #{this} to equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.equal(exp);
  };

  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.equal(exp);
  };

  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.deepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.eql(exp);
  };

  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.eql(exp);
  };

  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isTrue = function (val, msg) {
    new Assertion(val, msg).is['true'];
  };

  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isFalse = function (val, msg) {
    new Assertion(val, msg).is['false'];
  };

  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNull = function (val, msg) {
    new Assertion(val, msg).to.equal(null);
  };

  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg).to.not.equal(null);
  };

  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg).to.equal(undefined);
  };

  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isDefined = function (val, msg) {
    new Assertion(val, msg).to.not.equal(undefined);
  };

  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isFunction = function (val, msg) {
    new Assertion(val, msg).to.be.a('function');
  };

  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('function');
  };

  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object (as revealed by
   * `Object.prototype.toString`).
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isObject = function (val, msg) {
    new Assertion(val, msg).to.be.a('object');
  };

  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object.
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('object');
  };

  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isArray = function (val, msg) {
    new Assertion(val, msg).to.be.an('array');
  };

  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg).to.not.be.an('array');
  };

  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isString = function (val, msg) {
    new Assertion(val, msg).to.be.a('string');
  };

  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotString = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('string');
  };

  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @api public
   */

  assert.isNumber = function (val, msg) {
    new Assertion(val, msg).to.be.a('number');
  };

  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('number');
  };

  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg).to.be.a('boolean');
  };

  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('boolean');
  };

  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @api public
   */

  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.a(type);
  };

  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @api public
   */

  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.a(type);
  };

  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @api public
   */

  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.instanceOf(type);
  };

  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @api public
   */

  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.instanceOf(type);
  };

  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Works
   * for strings and arrays.
   *
   *     assert.include('foobar', 'bar', 'foobar contains string "bar"');
   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @api public
   */

  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.include).include(inc);
  };

  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Works
   * for strings and arrays.
   *i
   *     assert.notInclude('foobar', 'baz', 'string not include substring');
   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @api public
   */

  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notInclude).not.include(inc);
  };

  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @api public
   */

  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg).to.match(re);
  };

  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @api public
   */

  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg).to.not.match(re);
  };

  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.property(prop);
  };

  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.property(prop);
  };

  /**
   * ### .deepProperty(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`, which can be a
   * string using dot- and bracket-notation for deep reference.
   *
   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name deepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.deepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop);
  };

  /**
   * ### .notDeepProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for deep reference.
   *
   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notDeepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notDeepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop);
  };

  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`.
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.property(prop, val);
  };

  /**
   * ### .propertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`.
   *
   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');
   *
   * @name propertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.propertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.property(prop, val);
  };

  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for deep
   * reference.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop, val);
  };

  /**
   * ### .deepPropertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`. `property` can use dot- and
   * bracket-notation for deep reference.
   *
   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *
   * @name deepPropertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepPropertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop, val);
  };

  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` property with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 5, 'string has length of 6');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @api public
   */

  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg).to.have.length(len);
  };

  /**
   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])
   *
   * Asserts that `function` will throw an error that is an instance of
   * `constructor`, or alternately that it will throw an error with message
   * matching `regexp`.
   *
   *     assert.throw(fn, 'function throws a reference error');
   *     assert.throw(fn, /function throws a reference error/);
   *     assert.throw(fn, ReferenceError);
   *     assert.throw(fn, ReferenceError, 'function throws a reference error');
   *     assert.throw(fn, ReferenceError, /function throws a reference error/);
   *
   * @name throws
   * @alias throw
   * @alias Throw
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @api public
   */

  assert.Throw = function (fn, errt, errs, msg) {
    if ('string' === typeof errt || errt instanceof RegExp) {
      errs = errt;
      errt = null;
    }

    var assertErr = new Assertion(fn, msg).to.Throw(errt, errs);
    return flag(assertErr, 'object');
  };

  /**
   * ### .doesNotThrow(function, [constructor/regexp], [message])
   *
   * Asserts that `function` will _not_ throw an error that is an instance of
   * `constructor`, or alternately that it will not throw an error with message
   * matching `regexp`.
   *
   *     assert.doesNotThrow(fn, Error, 'function does not throw');
   *
   * @name doesNotThrow
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @api public
   */

  assert.doesNotThrow = function (fn, type, msg) {
    if ('string' === typeof type) {
      msg = type;
      type = null;
    }

    new Assertion(fn, msg).to.not.Throw(type);
  };

  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @api public
   */

  assert.operator = function (val, operator, val2, msg) {
    if (!~['==', '===', '>', '>=', '<', '<=', '!=', '!=='].indexOf(operator)) {
      throw new Error('Invalid operator "' + operator + '"');
    }
    var test = new Assertion(eval(val + operator + val2), msg);
    test.assert(
        true === flag(test, 'object')
      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
  };

  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @api public
   */

  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg).to.be.closeTo(exp, delta);
  };

  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members.
   * Order is not taken into account.
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @api public
   */

  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg).to.have.same.members(set2);
  }

  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset`.
   * Order is not taken into account.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @api public
   */

  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg).to.include.members(subset);
  }

  /*!
   * Undocumented / untested
   */

  assert.ifError = function (val, msg) {
    new Assertion(val, msg).to.not.be.ok;
  };

  /*!
   * Aliases.
   */

  (function alias(name, as){
    assert[as] = assert[name];
    return alias;
  })
  ('Throw', 'throw')
  ('Throw', 'throws');
};

},{}],343:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };
};


},{}],344:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould () {
    // explicitly define this method as function as to have it's name to include as `ssfi`
    function shouldGetter() {
      if (this instanceof String || this instanceof Number) {
        return new Assertion(this.constructor(this), null, shouldGetter);
      } else if (this instanceof Boolean) {
        return new Assertion(this == true, null, shouldGetter);
      }
      return new Assertion(this, null, shouldGetter);
    }
    function shouldSetter(value) {
      // See https://github.com/chaijs/chai/issues/86: this makes
      // `whatever.should = someValue` actually set `someValue`, which is
      // especially useful for `global.should = require('chai').should()`.
      //
      // Note that we have to use [[DefineProperty]] instead of [[Put]]
      // since otherwise we would trigger this very setter!
      Object.defineProperty(this, 'should', {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    }
    // modify Object.prototype to have `should`
    Object.defineProperty(Object.prototype, 'should', {
      set: shouldSetter
      , get: shouldGetter
      , configurable: true
    });

    var should = {};

    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };

    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };

    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }

    // negation
    should.not = {}

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };

    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };

    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    }

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];

    return should;
  };

  chai.should = loadShould;
  chai.Should = loadShould;
};

},{}],345:[function(require,module,exports){
/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var transferFlags = require('./transferFlags');
var flag = require('./flag');
var config = require('../config');

/*!
 * Module variables
 */

// Check whether `__proto__` is supported
var hasProtoSupport = '__proto__' in Object;

// Without `__proto__` support, this module will need to add properties to a function.
// However, some Function.prototype methods cannot be overwritten,
// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).
var excludeNames = /^(?:length|name|arguments|caller)$/;

// Cache `Function` properties
var call  = Function.prototype.call,
    apply = Function.prototype.apply;

/**
 * ### addChainableMethod (ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @name addChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () { };
  }

  var chainableBehavior = {
      method: method
    , chainingBehavior: chainingBehavior
  };

  // save the methods so we can overwrite them later, if we need to.
  if (!ctx.__methods) {
    ctx.__methods = {};
  }
  ctx.__methods[name] = chainableBehavior;

  Object.defineProperty(ctx, name,
    { get: function () {
        chainableBehavior.chainingBehavior.call(this);

        var assert = function assert() {
          var old_ssfi = flag(this, 'ssfi');
          if (old_ssfi && config.includeStack === false)
            flag(this, 'ssfi', assert);
          var result = chainableBehavior.method.apply(this, arguments);
          return result === undefined ? this : result;
        };

        // Use `__proto__` if available
        if (hasProtoSupport) {
          // Inherit all properties from the object by replacing the `Function` prototype
          var prototype = assert.__proto__ = Object.create(this);
          // Restore the `call` and `apply` methods from `Function`
          prototype.call = call;
          prototype.apply = apply;
        }
        // Otherwise, redefine all properties (slow!)
        else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (!excludeNames.test(asserterName)) {
              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
              Object.defineProperty(assert, asserterName, pd);
            }
          });
        }

        transferFlags(this, assert);
        return assert;
      }
    , configurable: true
  });
};

},{"../config":340,"./flag":348,"./transferFlags":362}],346:[function(require,module,exports){
/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = require('../config');

/**
 * ### .addMethod (ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @name addMethod
 * @api public
 */
var flag = require('./flag');

module.exports = function (ctx, name, method) {
  ctx[name] = function () {
    var old_ssfi = flag(this, 'ssfi');
    if (old_ssfi && config.includeStack === false)
      flag(this, 'ssfi', ctx[name]);
    var result = method.apply(this, arguments);
    return result === undefined ? this : result;
  };
};

},{"../config":340,"./flag":348}],347:[function(require,module,exports){
/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### addProperty (ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @name addProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  Object.defineProperty(ctx, name,
    { get: function () {
        var result = getter.call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};

},{}],348:[function(require,module,exports){
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### flag(object ,key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object (constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @name flag
 * @api private
 */

module.exports = function (obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));
  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};

},{}],349:[function(require,module,exports){
/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 */

module.exports = function (obj, args) {
  return args.length > 4 ? args[4] : obj._obj;
};

},{}],350:[function(require,module,exports){
/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @name getEnumerableProperties
 * @api public
 */

module.exports = function getEnumerableProperties(object) {
  var result = [];
  for (var name in object) {
    result.push(name);
  }
  return result;
};

},{}],351:[function(require,module,exports){
/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = require('./flag')
  , getActual = require('./getActual')
  , inspect = require('./inspect')
  , objDisplay = require('./objDisplay');

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @name getMessage
 * @api public
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , val = flag(obj, 'object')
    , expected = args[3]
    , actual = getActual(obj, args)
    , msg = negate ? args[2] : args[1]
    , flagMsg = flag(obj, 'message');

  if(typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg
    .replace(/#{this}/g, objDisplay(val))
    .replace(/#{act}/g, objDisplay(actual))
    .replace(/#{exp}/g, objDisplay(expected));

  return flagMsg ? flagMsg + ': ' + msg : msg;
};

},{"./flag":348,"./getActual":349,"./inspect":356,"./objDisplay":357}],352:[function(require,module,exports){
/*!
 * Chai - getName utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getName(func)
 *
 * Gets the name of a function, in a cross-browser way.
 *
 * @param {Function} a function (usually a constructor)
 */

module.exports = function (func) {
  if (func.name) return func.name;

  var match = /^\s?function ([^(]*)\(/.exec(func);
  return match && match[1] ? match[1] : "";
};

},{}],353:[function(require,module,exports){
/*!
 * Chai - getPathValue utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

/**
 * ### .getPathValue(path, object)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue('prop1.str', obj); // Hello
 *     getPathValue('prop1.att[2]', obj); // b
 *     getPathValue('prop2.arr[0].nested', obj); // Universe
 *
 * @param {String} path
 * @param {Object} object
 * @returns {Object} value or `undefined`
 * @name getPathValue
 * @api public
 */

var getPathValue = module.exports = function (path, obj) {
  var parsed = parsePath(path);
  return _getPathValue(parsed, obj);
};

/*!
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `_getPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be as near infinitely deep and nested
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */

function parsePath (path) {
  var str = path.replace(/\[/g, '.[')
    , parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function (value) {
    var re = /\[(\d+)\]$/
      , mArr = re.exec(value)
    if (mArr) return { i: parseFloat(mArr[1]) };
    else return { p: value };
  });
};

/*!
 * ## _getPathValue(parsed, obj)
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(parsed, obj);
 *
 * @param {Object} parsed definition from `parsePath`.
 * @param {Object} object to search against
 * @returns {Object|Undefined} value
 * @api private
 */

function _getPathValue (parsed, obj) {
  var tmp = obj
    , res;
  for (var i = 0, l = parsed.length; i < l; i++) {
    var part = parsed[i];
    if (tmp) {
      if ('undefined' !== typeof part.p)
        tmp = tmp[part.p];
      else if ('undefined' !== typeof part.i)
        tmp = tmp[part.i];
      if (i == (l - 1)) res = tmp;
    } else {
      res = undefined;
    }
  }
  return res;
};

},{}],354:[function(require,module,exports){
/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @name getProperties
 * @api public
 */

module.exports = function getProperties(object) {
  var result = Object.getOwnPropertyNames(subject);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(subject);
  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};

},{}],355:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Main exports
 */

var exports = module.exports = {};

/*!
 * test utility
 */

exports.test = require('./test');

/*!
 * type utility
 */

exports.type = require('./type');

/*!
 * message utility
 */

exports.getMessage = require('./getMessage');

/*!
 * actual utility
 */

exports.getActual = require('./getActual');

/*!
 * Inspect util
 */

exports.inspect = require('./inspect');

/*!
 * Object Display util
 */

exports.objDisplay = require('./objDisplay');

/*!
 * Flag utility
 */

exports.flag = require('./flag');

/*!
 * Flag transferring utility
 */

exports.transferFlags = require('./transferFlags');

/*!
 * Deep equal utility
 */

exports.eql = require('deep-eql');

/*!
 * Deep path value
 */

exports.getPathValue = require('./getPathValue');

/*!
 * Function name
 */

exports.getName = require('./getName');

/*!
 * add Property
 */

exports.addProperty = require('./addProperty');

/*!
 * add Method
 */

exports.addMethod = require('./addMethod');

/*!
 * overwrite Property
 */

exports.overwriteProperty = require('./overwriteProperty');

/*!
 * overwrite Method
 */

exports.overwriteMethod = require('./overwriteMethod');

/*!
 * Add a chainable method
 */

exports.addChainableMethod = require('./addChainableMethod');

/*!
 * Overwrite chainable method
 */

exports.overwriteChainableMethod = require('./overwriteChainableMethod');


},{"./addChainableMethod":345,"./addMethod":346,"./addProperty":347,"./flag":348,"./getActual":349,"./getMessage":351,"./getName":352,"./getPathValue":353,"./inspect":356,"./objDisplay":357,"./overwriteChainableMethod":358,"./overwriteMethod":359,"./overwriteProperty":360,"./test":361,"./transferFlags":362,"./type":363,"deep-eql":365}],356:[function(require,module,exports){
// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

var getName = require('./getName');
var getProperties = require('./getProperties');
var getEnumerableProperties = require('./getEnumerableProperties');

module.exports = inspect;

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 */
function inspect(obj, showHidden, depth, colors) {
  var ctx = {
    showHidden: showHidden,
    seen: [],
    stylize: function (str) { return str; }
  };
  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}

// Returns true if object is a DOM element.
var isDOMElement = function (object) {
  if (typeof HTMLElement === 'object') {
    return object instanceof HTMLElement;
  } else {
    return object &&
      typeof object === 'object' &&
      object.nodeType === 1 &&
      typeof object.nodeName === 'string';
  }
};

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (value && typeof value.inspect === 'function' &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes);
    if (typeof ret !== 'string') {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // If this is a DOM element, try to get the outer HTML.
  if (isDOMElement(value)) {
    if ('outerHTML' in value) {
      return value.outerHTML;
      // This value does not have an outerHTML attribute,
      //   it could still be an XML element
    } else {
      // Attempt to serialize it
      try {
        if (document.xmlVersion) {
          var xmlSerializer = new XMLSerializer();
          return xmlSerializer.serializeToString(value);
        } else {
          // Firefox 11- do not support outerHTML
          //   It does, however, support innerHTML
          //   Use the following to render the element
          var ns = "http://www.w3.org/1999/xhtml";
          var container = document.createElementNS(ns, '_');

          container.appendChild(value.cloneNode(false));
          html = container.innerHTML
            .replace('><', '>' + value.innerHTML + '<');
          container.innerHTML = '';
          return html;
        }
      } catch (err) {
        // This could be a non-native DOM implementation,
        //   continue with the normal flow:
        //   printing the element as if it is an object.
      }
    }
  }

  // Look up the keys of the object.
  var visibleKeys = getEnumerableProperties(value);
  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

  // Some type of object without properties can be shortcutted.
  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
  // a `stack` plus `description` property; ignore those for consistency.
  if (keys.length === 0 || (isError(value) && (
      (keys.length === 1 && keys[0] === 'stack') ||
      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
     ))) {
    if (typeof value === 'function') {
      var name = getName(value);
      var nameSuffix = name ? ': ' + name : '';
      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (typeof value === 'function') {
    var name = getName(value);
    var nameSuffix = name ? ': ' + name : '';
    base = ' [Function' + nameSuffix + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    return formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  switch (typeof value) {
    case 'undefined':
      return ctx.stylize('undefined', 'undefined');

    case 'string':
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');

    case 'number':
      if (value === 0 && (1/value) === -Infinity) {
        return ctx.stylize('-0', 'number');
      }
      return ctx.stylize('' + value, 'number');

    case 'boolean':
      return ctx.stylize('' + value, 'boolean');
  }
  // For some reason typeof null is "object", so special case here.
  if (value === null) {
    return ctx.stylize('null', 'null');
  }
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str;
  if (value.__lookupGetter__) {
    if (value.__lookupGetter__(key)) {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
  }
  if (visibleKeys.indexOf(key) < 0) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(value[key]) < 0) {
      if (recurseTimes === null) {
        str = formatValue(ctx, value[key], null);
      } else {
        str = formatValue(ctx, value[key], recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (typeof name === 'undefined') {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function isArray(ar) {
  return Array.isArray(ar) ||
         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}

function isRegExp(re) {
  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}

function isDate(d) {
  return typeof d === 'object' && objectToString(d) === '[object Date]';
}

function isError(e) {
  return typeof e === 'object' && objectToString(e) === '[object Error]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{"./getEnumerableProperties":350,"./getName":352,"./getProperties":354}],357:[function(require,module,exports){
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var inspect = require('./inspect');
var config = require('../config');

/**
 * ### .objDisplay (object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @api public
 */

module.exports = function (obj) {
  var str = inspect(obj)
    , type = Object.prototype.toString.call(obj);

  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === ''
        ? '[Function]'
        : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj)
        , kstr = keys.length > 2
          ? keys.splice(0, 2).join(', ') + ', ...'
          : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};

},{"../config":340,"./inspect":356}],358:[function(require,module,exports){
/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteChainableMethod (ctx, name, fn)
 *
 * Overwites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.length(3);
 *     expect(myFoo).to.have.length.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @name overwriteChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];

  var _chainingBehavior = chainableBehavior.chainingBehavior;
  chainableBehavior.chainingBehavior = function () {
    var result = chainingBehavior(_chainingBehavior).call(this);
    return result === undefined ? this : result;
  };

  var _method = chainableBehavior.method;
  chainableBehavior.method = function () {
    var result = method(_method).apply(this, arguments);
    return result === undefined ? this : result;
  };
};

},{}],359:[function(require,module,exports){
/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteMethod (ctx, name, fn)
 *
 * Overwites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @name overwriteMethod
 * @api public
 */

module.exports = function (ctx, name, method) {
  var _method = ctx[name]
    , _super = function () { return this; };

  if (_method && 'function' === typeof _method)
    _super = _method;

  ctx[name] = function () {
    var result = method(_super).apply(this, arguments);
    return result === undefined ? this : result;
  }
};

},{}],360:[function(require,module,exports){
/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteProperty (ctx, name, fn)
 *
 * Overwites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @name overwriteProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name)
    , _super = function () {};

  if (_get && 'function' === typeof _get.get)
    _super = _get.get

  Object.defineProperty(ctx, name,
    { get: function () {
        var result = getter(_super).call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};

},{}],361:[function(require,module,exports){
/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = require('./flag');

/**
 * # test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , expr = args[0];
  return negate ? !expr : expr;
};

},{"./flag":348}],362:[function(require,module,exports){
/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, and `message`)
 * will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAsseriton = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags too; usually a new assertion
 * @param {Boolean} includeAll
 * @name getAllFlags
 * @api private
 */

module.exports = function (assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll ||
        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {
      object.__flags[flag] = flags[flag];
    }
  }
};

},{}],363:[function(require,module,exports){
/*!
 * Chai - type utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Detectable javascript natives
 */

var natives = {
    '[object Arguments]': 'arguments'
  , '[object Array]': 'array'
  , '[object Date]': 'date'
  , '[object Function]': 'function'
  , '[object Number]': 'number'
  , '[object RegExp]': 'regexp'
  , '[object String]': 'string'
};

/**
 * ### type(object)
 *
 * Better implementation of `typeof` detection that can
 * be used cross-browser. Handles the inconsistencies of
 * Array, `null`, and `undefined` detection.
 *
 *     utils.type({}) // 'object'
 *     utils.type(null) // `null'
 *     utils.type(undefined) // `undefined`
 *     utils.type([]) // `array`
 *
 * @param {Mixed} object to detect type of
 * @name type
 * @api private
 */

module.exports = function (obj) {
  var str = Object.prototype.toString.call(obj);
  if (natives[str]) return natives[str];
  if (obj === null) return 'null';
  if (obj === undefined) return 'undefined';
  if (obj === Object(obj)) return 'object';
  return typeof obj;
};

},{}],364:[function(require,module,exports){
/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */

function exclude () {
  var excludes = [].slice.call(arguments);

  function excludeProps (res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude () {
    var args = [].slice.call(arguments)
      , i = 0
      , res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
};

/*!
 * Primary Exports
 */

module.exports = AssertionError;

/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError (message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
    , props = extend(_props || {});

  // default values
  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false;

  // copy from properties
  for (var key in props) {
    this[key] = props[key];
  }

  // capture stack trace
  ssf = ssf || arguments.callee;
  if (ssf && Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  }
}

/*!
 * Inherit from Error.prototype
 */

AssertionError.prototype = Object.create(Error.prototype);

/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';

/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;

/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack')
    , props = extend({ name: this.name }, this);

  // include stack if exists and not turned off
  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};

},{}],365:[function(require,module,exports){
module.exports = require('./lib/eql');

},{"./lib/eql":366}],366:[function(require,module,exports){
/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var type = require('type-detect');

/*!
 * Buffer.isBuffer browser shim
 */

var Buffer;
try { Buffer = require('buffer').Buffer; }
catch(ex) {
  Buffer = {};
  Buffer.isBuffer = function() { return false; }
}

/*!
 * Primary Export
 */

module.exports = deepEqual;

/**
 * Assert super-strict (egal) equality between
 * two objects of any type.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @param {Array} memoised (optional)
 * @return {Boolean} equal match
 */

function deepEqual(a, b, m) {
  if (sameValue(a, b)) {
    return true;
  } else if ('date' === type(a)) {
    return dateEqual(a, b);
  } else if ('regexp' === type(a)) {
    return regexpEqual(a, b);
  } else if (Buffer.isBuffer(a)) {
    return bufferEqual(a, b);
  } else if ('arguments' === type(a)) {
    return argumentsEqual(a, b, m);
  } else if (!typeEqual(a, b)) {
    return false;
  } else if (('object' !== type(a) && 'object' !== type(b))
  && ('array' !== type(a) && 'array' !== type(b))) {
    return sameValue(a, b);
  } else {
    return objectEqual(a, b, m);
  }
}

/*!
 * Strict (egal) equality test. Ensures that NaN always
 * equals NaN and `-0` does not equal `+0`.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} equal match
 */

function sameValue(a, b) {
  if (a === b) return a !== 0 || 1 / a === 1 / b;
  return a !== a && b !== b;
}

/*!
 * Compare the types of two given objects and
 * return if they are equal. Note that an Array
 * has a type of `array` (not `object`) and arguments
 * have a type of `arguments` (not `array`/`object`).
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function typeEqual(a, b) {
  return type(a) === type(b);
}

/*!
 * Compare two Date objects by asserting that
 * the time values are equal using `saveValue`.
 *
 * @param {Date} a
 * @param {Date} b
 * @return {Boolean} result
 */

function dateEqual(a, b) {
  if ('date' !== type(b)) return false;
  return sameValue(a.getTime(), b.getTime());
}

/*!
 * Compare two regular expressions by converting them
 * to string and checking for `sameValue`.
 *
 * @param {RegExp} a
 * @param {RegExp} b
 * @return {Boolean} result
 */

function regexpEqual(a, b) {
  if ('regexp' !== type(b)) return false;
  return sameValue(a.toString(), b.toString());
}

/*!
 * Assert deep equality of two `arguments` objects.
 * Unfortunately, these must be sliced to arrays
 * prior to test to ensure no bad behavior.
 *
 * @param {Arguments} a
 * @param {Arguments} b
 * @param {Array} memoize (optional)
 * @return {Boolean} result
 */

function argumentsEqual(a, b, m) {
  if ('arguments' !== type(b)) return false;
  a = [].slice.call(a);
  b = [].slice.call(b);
  return deepEqual(a, b, m);
}

/*!
 * Get enumerable properties of a given object.
 *
 * @param {Object} a
 * @return {Array} property names
 */

function enumerable(a) {
  var res = [];
  for (var key in a) res.push(key);
  return res;
}

/*!
 * Simple equality for flat iterable objects
 * such as Arrays or Node.js buffers.
 *
 * @param {Iterable} a
 * @param {Iterable} b
 * @return {Boolean} result
 */

function iterableEqual(a, b) {
  if (a.length !==  b.length) return false;

  var i = 0;
  var match = true;

  for (; i < a.length; i++) {
    if (a[i] !== b[i]) {
      match = false;
      break;
    }
  }

  return match;
}

/*!
 * Extension to `iterableEqual` specifically
 * for Node.js Buffers.
 *
 * @param {Buffer} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function bufferEqual(a, b) {
  if (!Buffer.isBuffer(b)) return false;
  return iterableEqual(a, b);
}

/*!
 * Block for `objectEqual` ensuring non-existing
 * values don't get in.
 *
 * @param {Mixed} object
 * @return {Boolean} result
 */

function isValue(a) {
  return a !== null && a !== undefined;
}

/*!
 * Recursively check the equality of two objects.
 * Once basic sameness has been established it will
 * defer to `deepEqual` for each enumerable key
 * in the object.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function objectEqual(a, b, m) {
  if (!isValue(a) || !isValue(b)) {
    return false;
  }

  if (a.prototype !== b.prototype) {
    return false;
  }

  var i;
  if (m) {
    for (i = 0; i < m.length; i++) {
      if ((m[i][0] === a && m[i][1] === b)
      ||  (m[i][0] === b && m[i][1] === a)) {
        return true;
      }
    }
  } else {
    m = [];
  }

  try {
    var ka = enumerable(a);
    var kb = enumerable(b);
  } catch (ex) {
    return false;
  }

  ka.sort();
  kb.sort();

  if (!iterableEqual(ka, kb)) {
    return false;
  }

  m.push([ a, b ]);

  var key;
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], m)) {
      return false;
    }
  }

  return true;
}

},{"buffer":176,"type-detect":367}],367:[function(require,module,exports){
module.exports = require('./lib/type');

},{"./lib/type":368}],368:[function(require,module,exports){
/*!
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Primary Exports
 */

var exports = module.exports = getType;

/*!
 * Detectable javascript natives
 */

var natives = {
    '[object Array]': 'array'
  , '[object RegExp]': 'regexp'
  , '[object Function]': 'function'
  , '[object Arguments]': 'arguments'
  , '[object Date]': 'date'
};

/**
 * ### typeOf (obj)
 *
 * Use several different techniques to determine
 * the type of object being tested.
 *
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */

function getType (obj) {
  var str = Object.prototype.toString.call(obj);
  if (natives[str]) return natives[str];
  if (obj === null) return 'null';
  if (obj === undefined) return 'undefined';
  if (obj === Object(obj)) return 'object';
  return typeof obj;
}

exports.Library = Library;

/**
 * ### Library
 *
 * Create a repository for custom type detection.
 *
 * ```js
 * var lib = new type.Library;
 * ```
 *
 */

function Library () {
  this.tests = {};
}

/**
 * #### .of (obj)
 *
 * Expose replacement `typeof` detection to the library.
 *
 * ```js
 * if ('string' === lib.of('hello world')) {
 *   // ...
 * }
 * ```
 *
 * @param {Mixed} object to test
 * @return {String} type
 */

Library.prototype.of = getType;

/**
 * #### .define (type, test)
 *
 * Add a test to for the `.test()` assertion.
 *
 * Can be defined as a regular expression:
 *
 * ```js
 * lib.define('int', /^[0-9]+$/);
 * ```
 *
 * ... or as a function:
 *
 * ```js
 * lib.define('bln', function (obj) {
 *   if ('boolean' === lib.of(obj)) return true;
 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
 *   return !! ~blns.indexOf(obj);
 * });
 * ```
 *
 * @param {String} type
 * @param {RegExp|Function} test
 * @api public
 */

Library.prototype.define = function (type, test) {
  if (arguments.length === 1) return this.tests[type];
  this.tests[type] = test;
  return this;
};

/**
 * #### .test (obj, test)
 *
 * Assert that an object is of type. Will first
 * check natives, and if that does not pass it will
 * use the user defined custom tests.
 *
 * ```js
 * assert(lib.test('1', 'int'));
 * assert(lib.test('yes', 'bln'));
 * ```
 *
 * @param {Mixed} object
 * @param {String} type
 * @return {Boolean} result
 * @api public
 */

Library.prototype.test = function (obj, type) {
  if (type === getType(obj)) return true;
  var test = this.tests[type];

  if (test && 'regexp' === getType(test)) {
    return test.test(obj);
  } else if (test && 'function' === getType(test)) {
    return test(obj);
  } else {
    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
  }
};

},{}],369:[function(require,module,exports){
(function (process){
(function (root, factory) {
	"use strict";
	if (typeof process === "object") {
		process.stdout = process.stdout || { write: function() { } };
		process.stderr = process.stderr || process.stdout;
	}
	if (typeof define === "function" && define.amd) {
		define(["libsodium"], factory);
	} else if (typeof exports === "object") {
		module.exports = factory(require("libsodium"));
	} else {
		var cb = root.sodium && root.sodium.onload;
		root.sodium = factory(root.libsodium || Module);
		if (typeof cb === "function") {
			cb(root.sodium);
		}
	}
}(this, function (libsodium) {
	var output_format = "uint8array";

	libsodium._sodium_init();

	// List of functions and constants defined in the wrapped libsodium
	function symbols() {
		return Object.keys(exports).sort();
	}

	function memzero(bytes) {
		if (! bytes instanceof Uint8Array) {
			throw new TypeError("Only Uint8Array instances can be wiped");
		}
		for (var i = 0 | 0, j = bytes.length; i < j; i++) {
			bytes[i] = 0;
		}
	}

	function memcmp(b1, b2) {
		if (!(b1 instanceof Uint8Array && b2 instanceof Uint8Array)) {
			throw new TypeError("Only Uint8Array instances can be compared");
		}
		if (b1.length !== b2.length) {
			throw new TypeError("Only instances of identical length can be compared");
		}
		for (var d = 0 | 0, i = 0 | 0, j = b1.length; i < j; i++) {
			d |= b1[i] ^ b2[i];
		}
		return d === 0;
	}

	//---------------------------------------------------------------------------
	// Codecs

	function from_string(str) {
		if (typeof TextEncoder === "function") {
			return new TextEncoder("utf-8").encode(str);
		}
		str = unescape(encodeURIComponent(str));
		var bytes = new Uint8Array(str.length);
		for (var i = 0; i < str.length; i++) {
			bytes[i] = str.charCodeAt(i);
		}
		return bytes;
	}

	function from_hex(str) {
		if (!is_hex(str)) throw new TypeError("The provided string doesn't look like hex data");
		var result = new Uint8Array(str.length / 2);
		for (var i = 0; i < str.length; i += 2) {
			result[i >>> 1] = parseInt(str.substr(i, 2), 16);
		}
		return result;
	}

	function to_hex(bytes) {
		var str = "", b, c, x;
		for (var i = 0; i < bytes.length; i++) {
			c = bytes[i] & 0xf;
			b = bytes[i] >>> 4;
			x = (87 + c + (((c - 10) >> 8) & ~38)) << 8 |
			    (87 + b + (((b - 10) >> 8) & ~38));
			str += String.fromCharCode(x & 0xff) + String.fromCharCode(x >>> 8);
		}
		return str;
	}

	function is_hex(str) {
		return (typeof str === "string" && /^[0-9a-f]+$/i.test(str) && str.length % 2 === 0);
	}

	function from_base64(sBase64, nBlocksSize) {
		function _b64ToUint6(nChr) {
			return nChr > 64 && nChr < 91 ?
				nChr - 65 : nChr > 96 && nChr < 123 ?
				nChr - 71 : nChr > 47 && nChr < 58 ?
				nChr + 4 : nChr === 43 ?
				62 : nChr === 47 ?
				63 :
				0;
		}
		var
			sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""),
			nInLen = sB64Enc.length,
			nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2,
			taBytes = new Uint8Array(nOutLen);
		for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
			nMod4 = nInIdx & 3;
			nUint24 |= _b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
			if (nMod4 === 3 || nInLen - nInIdx === 1) {
				for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
					taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
				}
				nUint24 = 0;
			}
		}
		return taBytes;
	}

	function to_base64(aBytes, noNewLine) {
		function _uint6ToB64(nUint6) {
			return nUint6 < 26 ?
				nUint6 + 65 : nUint6 < 52 ?
				nUint6 + 71 : nUint6 < 62 ?
				nUint6 - 4 : nUint6 === 62 ?
				43 : nUint6 === 63 ?
				47 :
				65;
		}
		if (typeof aBytes === "string") {
			throw new Exception("input has to be an array");
		}
		var nMod3 = 2,
			sB64Enc = "";
		for (var nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {
			nMod3 = nIdx % 3;
			if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0 && !noNewLine) {
				sB64Enc += "\r\n";
			}
			nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);
			if (nMod3 === 2 || aBytes.length - nIdx === 1) {
				sB64Enc += String.fromCharCode(_uint6ToB64(nUint24 >>> 18 & 63), _uint6ToB64(nUint24 >>> 12 & 63), _uint6ToB64(nUint24 >>> 6 & 63), _uint6ToB64(nUint24 & 63));
				nUint24 = 0;
			}
		}
		return sB64Enc.substr(0, sB64Enc.length - 2 + nMod3) + (nMod3 === 2 ? "" : nMod3 === 1 ? "=" : "==");
	}

	function output_formats() {
		return ["uint8array", "text", "hex", "base64"];
	}

	function _format_output(output, optionalOutputFormat) {
		var selectedOutputFormat = optionalOutputFormat || output_format;
		if (!_is_output_format(selectedOutputFormat)) throw new Error(selectedOutputFormat + " output format is not available");
		if (output instanceof AllocatedBuf) {
			if (selectedOutputFormat === "uint8array") return output.to_Uint8Array();
			else if (selectedOutputFormat === "text") return libsodium.Pointer_stringify(output.address, output.length);
			else if (selectedOutputFormat === "hex") return to_hex(output.to_Uint8Array());
			else if (selectedOutputFormat === "base64") return to_base64(output.to_Uint8Array());
			else throw new Error("What is output format \"" + selectedOutputFormat + "\"?");
		} else if (typeof output === "object") { //Composed output. Example : key pairs
			var props = Object.keys(output);
			var formattedOutput = {};
			for (var i = 0; i < props.length; i++) {
				formattedOutput[props[i]] = _format_output(output[props[i]], selectedOutputFormat);
			}
			return formattedOutput;
		} else if (typeof output === "string") {
			return output;
		} else {
			throw new TypeError("Cannot format output");
		}
	}

	function _is_output_format(format) {
		var formats = output_formats();
		for (var i = 0; i < formats.length; i++) {
			if (formats[i] === format) return true;
		}
		return false;
	}

	function _check_output_format(format) {
		if (!format) {
			return;
		} else if (typeof format !== "string") {
			throw new TypeError("When defined, the output format must be a string");
		} else if (!_is_output_format(format)) {
			throw new Error(format + " is not a supported output format");
		}
	}

	//---------------------------------------------------------------------------
	// Memory management

	// AllocatedBuf: address allocated using _malloc() + length
	function AllocatedBuf(length) {
		this.length = length;
		this.address = _malloc(length);
	}

	// Copy the content of a AllocatedBuf (_malloc()'d memory) into a Uint8Array
	AllocatedBuf.prototype.to_Uint8Array = function () {
		var result = new Uint8Array(this.length);
		result.set(libsodium.HEAPU8.subarray(this.address, this.address + this.length));
		return result;
	};

	// _malloc() a region and initialize it with the content of a Uint8Array
	function _to_allocated_buf_address(bytes) {
		var address = _malloc(bytes.length);
		libsodium.HEAPU8.set(bytes, address);
		return address;
	}

	function _malloc(length) {
		var result = libsodium._malloc(length);
		if (result === 0) {
			throw {
				message: "_malloc() failed",
				length: length
			};
		}
		return result;
	}

	function _free(address) {
		libsodium._free(address);
	}

	function _free_all(addresses) {
		for (var i = 0; i < addresses.length; i++) {
			_free(addresses[i]);
		}
	}

	function _free_and_throw_error(address_pool, err) {
		_free_all(address_pool);
		throw new Error(err);
	}

	function _free_and_throw_type_error(address_pool, err) {
		_free_all(address_pool);
		throw new TypeError(err);
	}

	function _require_defined(address_pool, varValue, varName) {
		if (varValue == undefined) {
			_free_and_throw_type_error(address_pool, varName + " cannot be null or undefined");
		}
	}

	function _any_to_Uint8Array(address_pool, varValue, varName) {
		_require_defined(address_pool, varValue, varName);
		if (varValue instanceof Uint8Array) {
			return varValue;
		} else if (typeof varValue === "string") {
			return from_string(varValue);
		}
		_free_and_throw_type_error(address_pool, "unsupported input type for " + varName);
	}

	
	function crypto_aead_chacha20poly1305_decrypt(secret_nonce, ciphertext, additional_data, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
			secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
			secret_nonce_address = _to_allocated_buf_address(secret_nonce);
			secret_nonce_length = secret_nonce.length;
			address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
			additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
			additional_data_address = _to_allocated_buf_address(additional_data);
			additional_data_length = additional_data.length;
			address_pool.push(additional_data_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_aead_chacha20poly1305_abytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_decrypt(message_address, null, secret_nonce_address, ciphertext_address, ciphertext_length, 0, additional_data_address, additional_data_length, 0, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_aead_chacha20poly1305_encrypt(message, additional_data, secret_nonce, public_nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: additional_data (unsized_buf_optional)
		
		var additional_data_address = null, additional_data_length = 0;
		if (additional_data != undefined) {
			additional_data = _any_to_Uint8Array(address_pool, additional_data, "additional_data");
			additional_data_address = _to_allocated_buf_address(additional_data);
			additional_data_length = additional_data.length;
			address_pool.push(additional_data_address);
		}
		
		// ---------- input: secret_nonce (unsized_buf_optional)
		
		var secret_nonce_address = null, secret_nonce_length = 0;
		if (secret_nonce != undefined) {
			secret_nonce = _any_to_Uint8Array(address_pool, secret_nonce, "secret_nonce");
			secret_nonce_address = _to_allocated_buf_address(secret_nonce);
			secret_nonce_length = secret_nonce.length;
			address_pool.push(secret_nonce_address);
		}
		
		// ---------- input: public_nonce (buf)
		
		public_nonce = _any_to_Uint8Array(address_pool, public_nonce, "public_nonce");
		var public_nonce_address, public_nonce_length = (libsodium._crypto_aead_chacha20poly1305_npubbytes()) | 0;
		if (public_nonce.length !== public_nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid public_nonce length");
		}
		public_nonce_address = _to_allocated_buf_address(public_nonce);
		address_pool.push(public_nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_aead_chacha20poly1305_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_aead_chacha20poly1305_abytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_aead_chacha20poly1305_encrypt(ciphertext_address, null, message_address, message_length, 0, additional_data_address, additional_data_length, 0, secret_nonce_address, public_nonce_address, key_address)) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_auth(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output tag (buf)
		
		var tag_length = (libsodium._crypto_auth_bytes()) | 0,
		    tag = new AllocatedBuf(tag_length),
		    tag_address = tag.address;
		
		address_pool.push(tag_address);
		
		if ((libsodium._crypto_auth(tag_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(tag, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_auth_hmacsha256(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha256_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_auth_hmacsha256_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_auth_hmacsha256(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_auth_verify(tag, message, key) {
		var address_pool = [];

		// ---------- input: tag (buf)
		
		tag = _any_to_Uint8Array(address_pool, tag, "tag");
		var tag_address, tag_length = (libsodium._crypto_auth_hmacsha256_bytes()) | 0;
		if (tag.length !== tag_length) {
			_free_and_throw_type_error(address_pool, "invalid tag length");
		}
		tag_address = _to_allocated_buf_address(tag);
		address_pool.push(tag_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha256_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_auth_hmacsha256_verify(tag_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_hmacsha512(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha512_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_auth_hmacsha512_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_auth_hmacsha512(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_auth_verify(tag, message, key) {
		var address_pool = [];

		// ---------- input: tag (buf)
		
		tag = _any_to_Uint8Array(address_pool, tag, "tag");
		var tag_address, tag_length = (libsodium._crypto_auth_hmacsha512_bytes()) | 0;
		if (tag.length !== tag_length) {
			_free_and_throw_type_error(address_pool, "invalid tag length");
		}
		tag_address = _to_allocated_buf_address(tag);
		address_pool.push(tag_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_hmacsha512_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_auth_hmacsha512_verify(tag_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_auth_verify(tag, message, key) {
		var address_pool = [];

		// ---------- input: tag (buf)
		
		tag = _any_to_Uint8Array(address_pool, tag, "tag");
		var tag_address, tag_length = (libsodium._crypto_auth_bytes()) | 0;
		if (tag.length !== tag_length) {
			_free_and_throw_type_error(address_pool, "invalid tag length");
		}
		tag_address = _to_allocated_buf_address(tag);
		address_pool.push(tag_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_auth_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_auth_verify(tag_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_box_detached(message, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
			_free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
			_free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_box_macbytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_box_detached(ciphertext_address, mac_address, message_address, message_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output({ciphertext: ciphertext, mac: mac}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_easy(message, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
			_free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
			_free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output ciphertext (buf)
		
		var ciphertext_length = (message_length + libsodium._crypto_box_macbytes()) | 0,
		    ciphertext = new AllocatedBuf(ciphertext_length),
		    ciphertext_address = ciphertext.address;
		
		address_pool.push(ciphertext_address);
		
		if ((libsodium._crypto_box_easy(ciphertext_address, message_address, message_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(ciphertext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_keypair(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output secretKey (buf)
		
		var secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0,
		    secretKey = new AllocatedBuf(secretKey_length),
		    secretKey_address = secretKey.address;
		
		address_pool.push(secretKey_address);
		
		if ((libsodium._crypto_box_keypair(publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: secretKey, keyType: "curve25519"}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_open_detached(ciphertext, mac, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_box_macbytes()) | 0;
		if (mac.length !== mac_length) {
			_free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
			_free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
			_free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_open_detached(plaintext_address, ciphertext_address, mac_address, ciphertext_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_open_easy(ciphertext, nonce, publicKey, secretKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_box_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
			_free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- input: secretKey (buf)
		
		secretKey = _any_to_Uint8Array(address_pool, secretKey, "secretKey");
		var secretKey_address, secretKey_length = (libsodium._crypto_box_secretkeybytes()) | 0;
		if (secretKey.length !== secretKey_length) {
			_free_and_throw_type_error(address_pool, "invalid secretKey length");
		}
		secretKey_address = _to_allocated_buf_address(secretKey);
		address_pool.push(secretKey_address);
		
		// ---------- output plaintext (buf)
		
		var plaintext_length = (ciphertext_length - libsodium._crypto_box_macbytes()) | 0,
		    plaintext = new AllocatedBuf(plaintext_length),
		    plaintext_address = plaintext.address;
		
		address_pool.push(plaintext_address);
		
		if ((libsodium._crypto_box_open_easy(plaintext_address, ciphertext_address, ciphertext_length, 0, nonce_address, publicKey_address, secretKey_address) | 0) === 0) {
			var ret = _format_output(plaintext, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_box_seed_keypair(seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._crypto_box_seedbytes()) | 0;
		if (seed.length !== seed_length) {
			_free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_box_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_box_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_box_seed_keypair(publicKey_address, privateKey_address, seed_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_generichash(hash_length, message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: hash_length (uint)
		
		_require_defined(address_pool, hash_length, "hash_length");
		
		if (!(typeof hash_length === "number" && (hash_length | 0) === hash_length) && (hash_length | 0) > 0) {
			_free_and_throw_type_error(address_pool, "hash_length must be an unsigned integer");
		}
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (unsized_buf_optional)
		
		var key_address = null, key_length = 0;
		if (key != undefined) {
			key = _any_to_Uint8Array(address_pool, key, "key");
			key_address = _to_allocated_buf_address(key);
			key_length = key.length;
			address_pool.push(key_address);
		}
		
		// ---------- output hash (buf)
		
		var hash_length = (hash_length) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_generichash(hash_address, hash_length, message_address, message_length, 0, key_address, key_length) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_generichash_final(state_address, hash_length, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (generichash_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: hash_length (uint)
		
		_require_defined(address_pool, hash_length, "hash_length");
		
		if (!(typeof hash_length === "number" && (hash_length | 0) === hash_length) && (hash_length | 0) > 0) {
			_free_and_throw_type_error(address_pool, "hash_length must be an unsigned integer");
		}
		
		// ---------- output hash (buf)
		
		var hash_length = (hash_length) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_generichash_final(state_address, hash_address, hash_length) | 0) === 0) {
			var ret = (libsodium._free(state_address), _format_output(hash, outputFormat));
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_generichash_init(key, hash_length, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: key (unsized_buf_optional)
		
		var key_address = null, key_length = 0;
		if (key != undefined) {
			key = _any_to_Uint8Array(address_pool, key, "key");
			key_address = _to_allocated_buf_address(key);
			key_length = key.length;
			address_pool.push(key_address);
		}
		
		// ---------- input: hash_length (uint)
		
		_require_defined(address_pool, hash_length, "hash_length");
		
		if (!(typeof hash_length === "number" && (hash_length | 0) === hash_length) && (hash_length | 0) > 0) {
			_free_and_throw_type_error(address_pool, "hash_length must be an unsigned integer");
		}
		
		// ---------- output state (generichash_state)
		
		var state_address = new AllocatedBuf(357).address;
		
		if ((libsodium._crypto_generichash_init(state_address, key_address, key_length, hash_length) | 0) === 0) {
			var ret = state_address;
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_generichash_update(state_address, message_chunk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: state_address (generichash_state_address)
		
		_require_defined(address_pool, state_address, "state_address");
		
		// ---------- input: message_chunk (unsized_buf)
		
		message_chunk = _any_to_Uint8Array(address_pool, message_chunk, "message_chunk");
		var message_chunk_address = _to_allocated_buf_address(message_chunk),
		    message_chunk_length = message_chunk.length;
		address_pool.push(message_chunk_address);
		
		if ((libsodium._crypto_generichash_update(state_address, message_chunk_address, message_chunk_length, 0) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_hash(message, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_hash_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_hash(hash_address, message_address, message_length, 0) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_hash_sha256(message, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_hash_sha256_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_hash_sha256(hash_address, message_address, message_length, 0) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_hash_sha512(message, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_hash_sha512_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_hash_sha512(hash_address, message_address, message_length, 0) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_onetimeauth(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_onetimeauth_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_onetimeauth_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_onetimeauth(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_onetimeauth_verify(hash, message, key) {
		var address_pool = [];

		// ---------- input: hash (buf)
		
		hash = _any_to_Uint8Array(address_pool, hash, "hash");
		var hash_address, hash_length = (libsodium._crypto_onetimeauth_bytes()) | 0;
		if (hash.length !== hash_length) {
			_free_and_throw_type_error(address_pool, "invalid hash length");
		}
		hash_address = _to_allocated_buf_address(hash);
		address_pool.push(hash_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_onetimeauth_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		var result = libsodium._crypto_onetimeauth_verify(hash_address, message_address, message_length, 0, key_address) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_pwhash_scryptsalsa208sha256(password, salt, opsLimit, memLimit, keyLength, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: salt (buf)
		
		salt = _any_to_Uint8Array(address_pool, salt, "salt");
		var salt_address, salt_length = (libsodium._crypto_pwhash_scryptsalsa208sha256_saltbytes()) | 0;
		if (salt.length !== salt_length) {
			_free_and_throw_type_error(address_pool, "invalid salt length");
		}
		salt_address = _to_allocated_buf_address(salt);
		address_pool.push(salt_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) && (opsLimit | 0) > 0) {
			_free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) && (memLimit | 0) > 0) {
			_free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- input: keyLength (uint)
		
		_require_defined(address_pool, keyLength, "keyLength");
		
		if (!(typeof keyLength === "number" && (keyLength | 0) === keyLength) && (keyLength | 0) > 0) {
			_free_and_throw_type_error(address_pool, "keyLength must be an unsigned integer");
		}
		
		// ---------- output derivedKey (buf)
		
		var derivedKey_length = (keyLength) | 0,
		    derivedKey = new AllocatedBuf(derivedKey_length),
		    derivedKey_address = derivedKey.address;
		
		address_pool.push(derivedKey_address);
		
		if ((libsodium._crypto_pwhash_scryptsalsa208sha256(derivedKey_address, keyLength, 0, password_address, password_length, 0, salt_address, opsLimit, 0, memLimit) | 0) === 0) {
			var ret = _format_output(derivedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_pwhash_scryptsalsa208sha256_ll(password, salt, opsLimit, r, p, keyLength, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: salt (unsized_buf)
		
		salt = _any_to_Uint8Array(address_pool, salt, "salt");
		var salt_address = _to_allocated_buf_address(salt),
		    salt_length = salt.length;
		address_pool.push(salt_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) && (opsLimit | 0) > 0) {
			_free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: r (uint)
		
		_require_defined(address_pool, r, "r");
		
		if (!(typeof r === "number" && (r | 0) === r) && (r | 0) > 0) {
			_free_and_throw_type_error(address_pool, "r must be an unsigned integer");
		}
		
		// ---------- input: p (uint)
		
		_require_defined(address_pool, p, "p");
		
		if (!(typeof p === "number" && (p | 0) === p) && (p | 0) > 0) {
			_free_and_throw_type_error(address_pool, "p must be an unsigned integer");
		}
		
		// ---------- input: keyLength (uint)
		
		_require_defined(address_pool, keyLength, "keyLength");
		
		if (!(typeof keyLength === "number" && (keyLength | 0) === keyLength) && (keyLength | 0) > 0) {
			_free_and_throw_type_error(address_pool, "keyLength must be an unsigned integer");
		}
		
		// ---------- output derivedKey (buf)
		
		var derivedKey_length = (keyLength) | 0,
		    derivedKey = new AllocatedBuf(derivedKey_length),
		    derivedKey_address = derivedKey.address;
		
		address_pool.push(derivedKey_address);
		
		if ((libsodium._crypto_pwhash_scryptsalsa208sha256_ll(password_address, password_length, salt_address, salt_length, opsLimit, 0, r, p, derivedKey_address, keyLength) | 0) === 0) {
			var ret = _format_output(derivedKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_pwhash_scryptsalsa208sha256_str(password, opsLimit, memLimit, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		// ---------- input: opsLimit (uint)
		
		_require_defined(address_pool, opsLimit, "opsLimit");
		
		if (!(typeof opsLimit === "number" && (opsLimit | 0) === opsLimit) && (opsLimit | 0) > 0) {
			_free_and_throw_type_error(address_pool, "opsLimit must be an unsigned integer");
		}
		
		// ---------- input: memLimit (uint)
		
		_require_defined(address_pool, memLimit, "memLimit");
		
		if (!(typeof memLimit === "number" && (memLimit | 0) === memLimit) && (memLimit | 0) > 0) {
			_free_and_throw_type_error(address_pool, "memLimit must be an unsigned integer");
		}
		
		// ---------- output hashed_password (buf)
		
		var hashed_password_length = (libsodium._crypto_pwhash_scryptsalsa208sha256_strbytes()) | 0,
		    hashed_password = new AllocatedBuf(hashed_password_length),
		    hashed_password_address = hashed_password.address;
		
		address_pool.push(hashed_password_address);
		
		if ((libsodium._crypto_pwhash_scryptsalsa208sha256_str(hashed_password_address, password_address, password_length, 0, opsLimit, 0, memLimit) | 0) === 0) {
			var ret = libsodium.Pointer_stringify(hashed_password_address);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_pwhash_scryptsalsa208sha256_str_verify(hashed_password, password, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: hashed_password (string)
		
		hashed_password = from_string(hashed_password + "\0");
		var hashed_password_address = _to_allocated_buf_address(hashed_password),
		    hashed_password_length = hashed_password.length - 1;
		address_pool.push(hashed_password_address);
		
		// ---------- input: password (unsized_buf)
		
		password = _any_to_Uint8Array(address_pool, password, "password");
		var password_address = _to_allocated_buf_address(password),
		    password_length = password.length;
		address_pool.push(password_address);
		
		var result = libsodium._crypto_pwhash_scryptsalsa208sha256_str_verify(hashed_password_address, password_address, password_length, 0) | 0;
		var ret = (result === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function crypto_scalarmult(privateKey, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0;
		if (privateKey.length !== privateKey_length) {
			_free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0;
		if (publicKey.length !== publicKey_length) {
			_free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- output sharedSecret (buf)
		
		var sharedSecret_length = (libsodium._crypto_scalarmult_bytes()) | 0,
		    sharedSecret = new AllocatedBuf(sharedSecret_length),
		    sharedSecret_address = sharedSecret.address;
		
		address_pool.push(sharedSecret_address);
		
		if ((libsodium._crypto_scalarmult(sharedSecret_address, privateKey_address, publicKey_address) | 0) === 0) {
			var ret = _format_output(sharedSecret, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_scalarmult_base(privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0;
		if (privateKey.length !== privateKey_length) {
			_free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		if ((libsodium._crypto_scalarmult_base(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output(publicKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_secretbox_detached(message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output cipher (buf)
		
		var cipher_length = (message_length) | 0,
		    cipher = new AllocatedBuf(cipher_length),
		    cipher_address = cipher.address;
		
		address_pool.push(cipher_address);
		
		// ---------- output mac (buf)
		
		var mac_length = (libsodium._crypto_secretbox_macbytes()) | 0,
		    mac = new AllocatedBuf(mac_length),
		    mac_address = mac.address;
		
		address_pool.push(mac_address);
		
		if ((libsodium._crypto_secretbox_detached(cipher_address, mac_address, message_address, message_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output({mac: mac, cipher: cipher}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_secretbox_easy(message, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output cipher (buf)
		
		var cipher_length = (message_length + libsodium._crypto_secretbox_macbytes()) | 0,
		    cipher = new AllocatedBuf(cipher_length),
		    cipher_address = cipher.address;
		
		address_pool.push(cipher_address);
		
		if ((libsodium._crypto_secretbox_easy(cipher_address, message_address, message_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output(cipher, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_secretbox_open_detached(ciphertext, mac, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: mac (buf)
		
		mac = _any_to_Uint8Array(address_pool, mac, "mac");
		var mac_address, mac_length = (libsodium._crypto_secretbox_macbytes()) | 0;
		if (mac.length !== mac_length) {
			_free_and_throw_type_error(address_pool, "invalid mac length");
		}
		mac_address = _to_allocated_buf_address(mac);
		address_pool.push(mac_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_secretbox_open_detached(message_address, ciphertext_address, mac_address, ciphertext_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_secretbox_open_easy(ciphertext, nonce, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: ciphertext (unsized_buf)
		
		ciphertext = _any_to_Uint8Array(address_pool, ciphertext, "ciphertext");
		var ciphertext_address = _to_allocated_buf_address(ciphertext),
		    ciphertext_length = ciphertext.length;
		address_pool.push(ciphertext_address);
		
		// ---------- input: nonce (buf)
		
		nonce = _any_to_Uint8Array(address_pool, nonce, "nonce");
		var nonce_address, nonce_length = (libsodium._crypto_secretbox_noncebytes()) | 0;
		if (nonce.length !== nonce_length) {
			_free_and_throw_type_error(address_pool, "invalid nonce length");
		}
		nonce_address = _to_allocated_buf_address(nonce);
		address_pool.push(nonce_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_secretbox_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output message (buf)
		
		var message_length = (ciphertext_length - libsodium._crypto_secretbox_macbytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_secretbox_open_easy(message_address, ciphertext_address, ciphertext_length, 0, nonce_address, key_address) | 0) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_shorthash(message, key, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: key (buf)
		
		key = _any_to_Uint8Array(address_pool, key, "key");
		var key_address, key_length = (libsodium._crypto_shorthash_keybytes()) | 0;
		if (key.length !== key_length) {
			_free_and_throw_type_error(address_pool, "invalid key length");
		}
		key_address = _to_allocated_buf_address(key);
		address_pool.push(key_address);
		
		// ---------- output hash (buf)
		
		var hash_length = (libsodium._crypto_shorthash_bytes()) | 0,
		    hash = new AllocatedBuf(hash_length),
		    hash_address = hash.address;
		
		address_pool.push(hash_address);
		
		if ((libsodium._crypto_shorthash(hash_address, message_address, message_length, 0, key_address) | 0) === 0) {
			var ret = _format_output(hash, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign(message, privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
			_free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output signature (buf)
		
		var signature_length = (message.length + libsodium._crypto_sign_bytes()) | 0,
		    signature = new AllocatedBuf(signature_length),
		    signature_address = signature.address;
		
		address_pool.push(signature_address);
		
		if ((libsodium._crypto_sign(signature_address, null, message_address, message_length, 0, privateKey_address) | 0) === 0) {
			var ret = _format_output(signature, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_detached(message, privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
			_free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output signature (buf)
		
		var signature_length = (libsodium._crypto_sign_bytes()) | 0,
		    signature = new AllocatedBuf(signature_length),
		    signature_address = signature.address;
		
		address_pool.push(signature_address);
		
		if ((libsodium._crypto_sign_detached(signature_address, null, message_address, message_length, 0, privateKey_address) | 0) === 0) {
			var ret = _format_output(signature, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_ed25519_pk_to_curve25519(edPk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: edPk (buf)
		
		edPk = _any_to_Uint8Array(address_pool, edPk, "edPk");
		var edPk_address, edPk_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (edPk.length !== edPk_length) {
			_free_and_throw_type_error(address_pool, "invalid edPk length");
		}
		edPk_address = _to_allocated_buf_address(edPk);
		address_pool.push(edPk_address);
		
		// ---------- output cPk (buf)
		
		var cPk_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0,
		    cPk = new AllocatedBuf(cPk_length),
		    cPk_address = cPk.address;
		
		address_pool.push(cPk_address);
		
		if ((libsodium._crypto_sign_ed25519_pk_to_curve25519(cPk_address, edPk_address) | 0) === 0) {
			var ret = _format_output(cPk, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_ed25519_sk_to_curve25519(edSk, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: edSk (buf)
		
		edSk = _any_to_Uint8Array(address_pool, edSk, "edSk");
		var edSk_address, edSk_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (edSk.length !== edSk_length) {
			_free_and_throw_type_error(address_pool, "invalid edSk length");
		}
		edSk_address = _to_allocated_buf_address(edSk);
		address_pool.push(edSk_address);
		
		// ---------- output cSk (buf)
		
		var cSk_length = (libsodium._crypto_scalarmult_scalarbytes()) | 0,
		    cSk = new AllocatedBuf(cSk_length),
		    cSk_address = cSk.address;
		
		address_pool.push(cSk_address);
		
		if ((libsodium._crypto_sign_ed25519_sk_to_curve25519(cSk_address, edSk_address) | 0) === 0) {
			var ret = _format_output(cSk, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_ed25519_sk_to_pk(privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
			_free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		if ((libsodium._crypto_sign_ed25519_sk_to_pk(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output(publicKey, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_ed25519_sk_to_seed(privateKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: privateKey (buf)
		
		privateKey = _any_to_Uint8Array(address_pool, privateKey, "privateKey");
		var privateKey_address, privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0;
		if (privateKey.length !== privateKey_length) {
			_free_and_throw_type_error(address_pool, "invalid privateKey length");
		}
		privateKey_address = _to_allocated_buf_address(privateKey);
		address_pool.push(privateKey_address);
		
		// ---------- output seed (buf)
		
		var seed_length = (libsodium._crypto_sign_seedbytes()) | 0,
		    seed = new AllocatedBuf(seed_length),
		    seed_address = seed.address;
		
		address_pool.push(seed_address);
		
		if ((libsodium._crypto_sign_ed25519_sk_to_seed(seed_address, privateKey_address) | 0) === 0) {
			var ret = _format_output(seed, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_keypair(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_sign_keypair(publicKey_address, privateKey_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey, keyType: 'ed25519'}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_open(signedMessage, publicKey, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: signedMessage (unsized_buf)
		
		signedMessage = _any_to_Uint8Array(address_pool, signedMessage, "signedMessage");
		var signedMessage_address = _to_allocated_buf_address(signedMessage),
		    signedMessage_length = signedMessage.length;
		address_pool.push(signedMessage_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
			_free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		// ---------- output message (buf)
		
		var message_length = (signedMessage_length - libsodium._crypto_sign_bytes()) | 0,
		    message = new AllocatedBuf(message_length),
		    message_address = message.address;
		
		address_pool.push(message_address);
		
		if ((libsodium._crypto_sign_open(message_address, null, signedMessage_address, signedMessage_length, 0, publicKey_address) | 0) === 0) {
			var ret = _format_output(message, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_seed_keypair(seed, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: seed (buf)
		
		seed = _any_to_Uint8Array(address_pool, seed, "seed");
		var seed_address, seed_length = (libsodium._crypto_sign_seedbytes()) | 0;
		if (seed.length !== seed_length) {
			_free_and_throw_type_error(address_pool, "invalid seed length");
		}
		seed_address = _to_allocated_buf_address(seed);
		address_pool.push(seed_address);
		
		// ---------- output publicKey (buf)
		
		var publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0,
		    publicKey = new AllocatedBuf(publicKey_length),
		    publicKey_address = publicKey.address;
		
		address_pool.push(publicKey_address);
		
		// ---------- output privateKey (buf)
		
		var privateKey_length = (libsodium._crypto_sign_secretkeybytes()) | 0,
		    privateKey = new AllocatedBuf(privateKey_length),
		    privateKey_address = privateKey.address;
		
		address_pool.push(privateKey_address);
		
		if ((libsodium._crypto_sign_seed_keypair(publicKey_address, privateKey_address, seed_address) | 0) === 0) {
			var ret = _format_output({publicKey: publicKey, privateKey: privateKey, keyType: "ed25519"}, outputFormat);
			_free_all(address_pool);
			return ret;
		}
		_free_and_throw_error(address_pool);
		
	}

	function crypto_sign_verify_detached(signature, message, publicKey) {
		var address_pool = [];

		// ---------- input: signature (buf)
		
		signature = _any_to_Uint8Array(address_pool, signature, "signature");
		var signature_address, signature_length = (libsodium._crypto_sign_bytes()) | 0;
		if (signature.length !== signature_length) {
			_free_and_throw_type_error(address_pool, "invalid signature length");
		}
		signature_address = _to_allocated_buf_address(signature);
		address_pool.push(signature_address);
		
		// ---------- input: message (unsized_buf)
		
		message = _any_to_Uint8Array(address_pool, message, "message");
		var message_address = _to_allocated_buf_address(message),
		    message_length = message.length;
		address_pool.push(message_address);
		
		// ---------- input: publicKey (buf)
		
		publicKey = _any_to_Uint8Array(address_pool, publicKey, "publicKey");
		var publicKey_address, publicKey_length = (libsodium._crypto_sign_publickeybytes()) | 0;
		if (publicKey.length !== publicKey_length) {
			_free_and_throw_type_error(address_pool, "invalid publicKey length");
		}
		publicKey_address = _to_allocated_buf_address(publicKey);
		address_pool.push(publicKey_address);
		
		var verificationResult = libsodium._crypto_sign_verify_detached(signature_address, message_address, message_length, 0, publicKey_address) | 0;
		var ret = (verificationResult === 0);
		_free_all(address_pool);
		return ret;
		
	}

	function randombytes_buf(length, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: length (uint)
		
		_require_defined(address_pool, length, "length");
		
		if (!(typeof length === "number" && (length | 0) === length) && (length | 0) > 0) {
			_free_and_throw_type_error(address_pool, "length must be an unsigned integer");
		}
		
		// ---------- output output (buf)
		
		var output_length = (length) | 0,
		    output = new AllocatedBuf(output_length),
		    output_address = output.address;
		
		address_pool.push(output_address);
		
		libsodium._randombytes_buf(output_address, length);
		var ret = (_format_output(output, outputFormat));
		_free_all(address_pool);
		return ret;
		
	}

	function randombytes_close(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		libsodium._randombytes_close();
		
	}

	function randombytes_random(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		var random_value = libsodium._randombytes_random() >>> 0;
		var ret = (random_value);
		_free_all(address_pool);
		return ret;
		
	}

	function randombytes_set_implementation(implementation, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: implementation (randombytes_implementation)
		
		var implementation_address = libsodium._malloc(6 * 4);
		for (var i = 0; i < 6; i++) {
			libsodium.setValue(implementation_address + i * 4,
			    libsodium.Runtime.addFunction(implementation
			    [["implementation_name", "random", "stir", "uniform", "buf", "close"][i]]),
			    "i32");
		}
		
		if ((libsodium._randombytes_set_implementation(implementation_address) | 0) === 0) {
			_free_all(address_pool);
			return;
		}
		_free_and_throw_error(address_pool);
		
	}

	function randombytes_stir(outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		libsodium._randombytes_stir();
		
	}

	function randombytes_uniform(upper_bound, outputFormat) {
		var address_pool = [];
		_check_output_format(outputFormat);

		// ---------- input: upper_bound (uint)
		
		_require_defined(address_pool, upper_bound, "upper_bound");
		
		if (!(typeof upper_bound === "number" && (upper_bound | 0) === upper_bound) && (upper_bound | 0) > 0) {
			_free_and_throw_type_error(address_pool, "upper_bound must be an unsigned integer");
		}
		
		var random_value = libsodium._randombytes_uniform(upper_bound) >>> 0;
		var ret = (random_value);
		_free_all(address_pool);
		return ret;
		
	}

	function sodium_version_string() {
		var address_pool = [];

		var version = libsodium._sodium_version_string();
		var ret = (libsodium.Pointer_stringify(version));
		_free_all(address_pool);
		return ret;
		
	}


	var exports = {
			from_base64: from_base64,
			from_hex: from_hex,
			from_string: from_string,
			libsodium: libsodium,
			memcmp: memcmp,
			memzero: memzero,
			output_formats: output_formats,
			symbols: symbols,
			to_base64: to_base64,
			to_hex: to_hex
	};

	
	var exported_functions = ["crypto_aead_chacha20poly1305_decrypt", "crypto_aead_chacha20poly1305_encrypt", "crypto_auth", "crypto_auth_hmacsha256", "crypto_auth_hmacsha512", "crypto_auth_verify", "crypto_auth_verify", "crypto_auth_verify", "crypto_box_detached", "crypto_box_easy", "crypto_box_keypair", "crypto_box_open_detached", "crypto_box_open_easy", "crypto_box_seed_keypair", "crypto_generichash", "crypto_generichash_final", "crypto_generichash_init", "crypto_generichash_update", "crypto_hash", "crypto_hash_sha256", "crypto_hash_sha512", "crypto_onetimeauth", "crypto_onetimeauth_verify", "crypto_pwhash_scryptsalsa208sha256", "crypto_pwhash_scryptsalsa208sha256_ll", "crypto_pwhash_scryptsalsa208sha256_str", "crypto_pwhash_scryptsalsa208sha256_str_verify", "crypto_scalarmult", "crypto_scalarmult_base", "crypto_secretbox_detached", "crypto_secretbox_easy", "crypto_secretbox_open_detached", "crypto_secretbox_open_easy", "crypto_shorthash", "crypto_sign", "crypto_sign_detached", "crypto_sign_ed25519_pk_to_curve25519", "crypto_sign_ed25519_sk_to_curve25519", "crypto_sign_ed25519_sk_to_pk", "crypto_sign_ed25519_sk_to_seed", "crypto_sign_keypair", "crypto_sign_open", "crypto_sign_seed_keypair", "crypto_sign_verify_detached", "randombytes_buf", "randombytes_close", "randombytes_random", "randombytes_set_implementation", "randombytes_stir", "randombytes_uniform", "sodium_version_string"],
		functions = [crypto_aead_chacha20poly1305_decrypt, crypto_aead_chacha20poly1305_encrypt, crypto_auth, crypto_auth_hmacsha256, crypto_auth_hmacsha512, crypto_auth_verify, crypto_auth_verify, crypto_auth_verify, crypto_box_detached, crypto_box_easy, crypto_box_keypair, crypto_box_open_detached, crypto_box_open_easy, crypto_box_seed_keypair, crypto_generichash, crypto_generichash_final, crypto_generichash_init, crypto_generichash_update, crypto_hash, crypto_hash_sha256, crypto_hash_sha512, crypto_onetimeauth, crypto_onetimeauth_verify, crypto_pwhash_scryptsalsa208sha256, crypto_pwhash_scryptsalsa208sha256_ll, crypto_pwhash_scryptsalsa208sha256_str, crypto_pwhash_scryptsalsa208sha256_str_verify, crypto_scalarmult, crypto_scalarmult_base, crypto_secretbox_detached, crypto_secretbox_easy, crypto_secretbox_open_detached, crypto_secretbox_open_easy, crypto_shorthash, crypto_sign, crypto_sign_detached, crypto_sign_ed25519_pk_to_curve25519, crypto_sign_ed25519_sk_to_curve25519, crypto_sign_ed25519_sk_to_pk, crypto_sign_ed25519_sk_to_seed, crypto_sign_keypair, crypto_sign_open, crypto_sign_seed_keypair, crypto_sign_verify_detached, randombytes_buf, randombytes_close, randombytes_random, randombytes_set_implementation, randombytes_stir, randombytes_uniform, sodium_version_string];
	for (var i = 0; i < functions.length; i++) {
		if (typeof libsodium["_" + exported_functions[i]] === "function") {
			exports[exported_functions[i]] = functions[i];
		}
	}
	var constants = ["SODIUM_LIBRARY_VERSION_MAJOR", "SODIUM_LIBRARY_VERSION_MINOR", "crypto_aead_chacha20poly1305_ABYTES", "crypto_aead_chacha20poly1305_KEYBYTES", "crypto_aead_chacha20poly1305_NPUBBYTES", "crypto_aead_chacha20poly1305_NSECBYTES", "crypto_auth_BYTES", "crypto_auth_KEYBYTES", "crypto_box_BEFORENMBYTES", "crypto_box_MACBYTES", "crypto_box_NONCEBYTES", "crypto_box_PUBLICKEYBYTES", "crypto_box_SECRETKEYBYTES", "crypto_box_SEEDBYTES", "crypto_generichash_BYTES", "crypto_generichash_BYTES_MAX", "crypto_generichash_BYTES_MIN", "crypto_generichash_KEYBYTES", "crypto_generichash_KEYBYTES_MAX", "crypto_generichash_KEYBYTES_MIN", "crypto_hash_BYTES", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE", "crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE", "crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE", "crypto_pwhash_scryptsalsa208sha256_SALTBYTES", "crypto_pwhash_scryptsalsa208sha256_STRBYTES", "crypto_pwhash_scryptsalsa208sha256_STR_VERIFY", "crypto_scalarmult_BYTES", "crypto_scalarmult_SCALARBYTES", "crypto_secretbox_KEYBYTES", "crypto_secretbox_MACBYTES", "crypto_secretbox_NONCEBYTES", "crypto_shorthash_BYTES", "crypto_shorthash_KEYBYTES", "crypto_sign_BYTES", "crypto_sign_PUBLICKEYBYTES", "crypto_sign_SECRETKEYBYTES", "crypto_sign_SEEDBYTES"];
	for (var i = 0; i < constants.length; i++) {
		var raw = libsodium["_" + constants[i].toLowerCase()];
		if (typeof raw === "function") exports[constants[i]] = raw()|0;
	}
	var constants_str = ["SODIUM_VERSION_STRING", "crypto_pwhash_scryptsalsa208sha256_STRPREFIX"];
	for (var i = 0; i < constants_str.length; i++) {
		var raw = libsodium["_" + constants_str[i].toLowerCase()];
		if (typeof raw === "function") exports[constants_str[i]] = libsodium.Pointer_stringify(raw());
	}

	return exports;
}));

}).call(this,require('_process'))
},{"_process":318,"libsodium":370}],370:[function(require,module,exports){
(function (process,__dirname){
function d(a){throw a;}var h=void 0,j=!0,l=null,m=!1,n,s;s||(s=eval("(function() { try { return Module || {} } catch(e) { return {} } })()"));var aa={},t;for(t in s)s.hasOwnProperty(t)&&(aa[t]=s[t]);var ba="object"===typeof process&&"function"===typeof require,ca="object"===typeof window,da="function"===typeof importScripts,ea=!ca&&!ba&&!da;
if(ba){s.print||(s.print=function(a){process.stdout.write(a+"\n")});s.printErr||(s.printErr=function(a){process.stderr.write(a+"\n")});var fa=require("fs"),ga=require("path");s.read=function(a,b){var a=ga.normalize(a),c=fa.readFileSync(a);!c&&a!=ga.resolve(a)&&(a=path.join(__dirname,"..","src",a),c=fa.readFileSync(a));c&&!b&&(c=c.toString());return c};s.readBinary=function(a){return s.read(a,j)};s.load=function(a){ha(read(a))};s.thisProgram||(s.thisProgram=1<process.argv.length?process.argv[1].replace(/\\/g,
"/"):"unknown-program");s.arguments=process.argv.slice(2);"undefined"!==typeof module&&(module.exports=s);process.on("uncaughtException",function(a){a instanceof ia||d(a)})}else ea?(s.print||(s.print=print),"undefined"!=typeof printErr&&(s.printErr=printErr),s.read="undefined"!=typeof read?read:function(){d("no read() available (jsc?)")},s.readBinary=function(a){if("function"===typeof readbuffer)return new Uint8Array(readbuffer(a));a=read(a,"binary");u("object"===typeof a);return a},"undefined"!=
typeof scriptArgs?s.arguments=scriptArgs:"undefined"!=typeof arguments&&(s.arguments=arguments),eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined")):ca||da?(s.read=function(a){var b=new XMLHttpRequest;b.open("GET",a,m);b.send(l);return b.responseText},"undefined"!=typeof arguments&&(s.arguments=arguments),"undefined"!==typeof console?(s.print||(s.print=function(a){console.log(a)}),s.printErr||(s.printErr=function(a){console.log(a)})):s.print||(s.print=
function(){}),da&&(s.load=importScripts),"undefined"===typeof s.setWindowTitle&&(s.setWindowTitle=function(a){document.title=a})):d("Unknown runtime environment. Where are we?");function ha(a){eval.call(l,a)}!s.load&&s.read&&(s.load=function(a){ha(s.read(a))});s.print||(s.print=function(){});s.printErr||(s.printErr=s.print);s.arguments||(s.arguments=[]);s.thisProgram||(s.thisProgram="./this.program");s.print=s.print;s.K=s.printErr;s.preRun=[];s.postRun=[];for(t in aa)aa.hasOwnProperty(t)&&(s[t]=aa[t]);
var A={Va:function(a){ja=a},Oa:function(){return ja},ha:function(){return v},ga:function(a){v=a},ua:function(a){switch(a){case "i1":case "i8":return 1;case "i16":return 2;case "i32":return 4;case "i64":return 8;case "float":return 4;case "double":return 8;default:return"*"===a[a.length-1]?A.U:"i"===a[0]?(a=parseInt(a.substr(1)),u(0===a%8),a/8):0}},Na:function(a){return Math.max(A.ua(a),A.U)},Ya:16,nb:function(a,b,c){return!c&&("i64"==a||"double"==a)?8:!a?Math.min(b,8):Math.min(b||(a?A.Na(a):0),A.U)},
ca:function(a,b,c){return c&&c.length?(c.splice||(c=Array.prototype.slice.call(c)),c.splice(0,0,b),s["dynCall_"+a].apply(l,c)):s["dynCall_"+a].call(l,b)},M:[l,l,l,l,l,l,l,l],Ea:function(a){for(var b=0;b<A.M.length;b++)if(!A.M[b])return A.M[b]=a,2*(1+b);d("Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.")},Ua:function(a){A.M[(a-2)/2]=l},ta:function(a,b){A.$||(A.$={});var c=A.$[a];if(c)return c;for(var c=[],e=0;e<b;e++)c.push(String.fromCharCode(36)+e);
e=B(a);'"'===e[0]&&(e.indexOf('"',1)===e.length-1?e=e.substr(1,e.length-2):C("invalid EM_ASM input |"+e+"|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)"));try{var g=eval("(function(Module, FS) { return function("+c.join(",")+"){ "+e+" } })")(s,"undefined"!==typeof FS?FS:l)}catch(f){s.K("error in executing inline EM_ASM code: "+f+" on: \n\n"+e+"\n\nwith args |"+c+"| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)"),d(f)}return A.$[a]=
g},O:function(a){A.O.ea||(A.O.ea={});A.O.ea[a]||(A.O.ea[a]=1,s.K(a))},da:{},pb:function(a,b){u(b);A.da[b]||(A.da[b]={});var c=A.da[b];c[a]||(c[a]=function(){return A.ca(b,a,arguments)});return c[a]},ob:function(){d("You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work")},S:function(a){var b=v;v=v+a|0;v=v+15&-16;return b},za:function(a){var b=D;D=D+a|0;D=D+15&-16;return b},R:function(a){var b=E;E=E+a|0;E=E+15&-16;E>=F&&C("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value "+
F+", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.");return b},X:function(a,b){return Math.ceil(a/(b?b:16))*(b?b:16)},tb:function(a,b,c){return c?+(a>>>0)+4294967296*+(b>>>0):+(a>>>0)+4294967296*+(b|0)},P:8,U:4,bb:0};s.Runtime=A;A.addFunction=A.Ea;A.removeFunction=A.Ua;var ka=m,G,la,ja;function u(a,b){a||C("Assertion failed: "+b)}
function ma(a){var b=s["_"+a];if(!b)try{b=eval("_"+a)}catch(c){}u(b,"Cannot call unknown function "+a+" (perhaps LLVM optimizations or closure removed it?)");return b}var na,oa;
(function(){function a(a){a=a.toString().match(e).slice(1);return{arguments:a[0],body:a[1],returnValue:a[2]}}var b={stackSave:function(){A.ha()},stackRestore:function(){A.ga()},arrayToC:function(a){var c=A.S(a.length);pa(a,c);return c},stringToC:function(a){var c=0;a!==l&&(a!==h&&0!==a)&&(c=A.S((a.length<<2)+1),qa(a,c));return c}},c={string:b.stringToC,array:b.arrayToC};oa=function(a,b,e,f){var g=ma(a),r=[],a=0;if(f)for(var z=0;z<f.length;z++){var y=c[e[z]];y?(0===a&&(a=A.ha()),r[z]=y(f[z])):r[z]=
f[z]}e=g.apply(l,r);"string"===b&&(e=B(e));0!==a&&A.ga(a);return e};var e=/^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/,g={},f;for(f in b)b.hasOwnProperty(f)&&(g[f]=a(b[f]));na=function(c,b,e){var e=e||[],f=ma(c),c=e.every(function(a){return"number"===a}),x="string"!==b;if(x&&c)return f;var r=e.map(function(a,c){return"$"+c}),b="(function("+r.join(",")+") {",z=e.length;if(!c)for(var b=b+("var stack = "+g.stackSave.body+";"),y=0;y<z;y++){var Y=r[y],Z=e[y];"number"!==Z&&
(Z=g[Z+"ToC"],b+="var "+Z.arguments+" = "+Y+";",b+=Z.body+";",b+=Y+"="+Z.returnValue+";")}e=a(function(){return f}).returnValue;b+="var ret = "+e+"("+r.join(",")+");";x||(e=a(function(){return B}).returnValue,b+="ret = "+e+"(ret);");c||(b+=g.stackRestore.body.replace("()","(stack)")+";");return eval(b+"return ret})")}})();s.cwrap=na;s.ccall=oa;
function ra(a,b,c){c=c||"i8";"*"===c.charAt(c.length-1)&&(c="i32");switch(c){case "i1":H[a>>0]=b;break;case "i8":H[a>>0]=b;break;case "i16":I[a>>1]=b;break;case "i32":J[a>>2]=b;break;case "i64":la=[b>>>0,(G=b,1<=+sa(G)?0<G?(ta(+ua(G/4294967296),4294967295)|0)>>>0:~~+va((G-+(~~G>>>0))/4294967296)>>>0:0)];J[a>>2]=la[0];J[a+4>>2]=la[1];break;case "float":wa[a>>2]=b;break;case "double":xa[a>>3]=b;break;default:C("invalid type for setValue: "+c)}}s.setValue=ra;
function ya(a,b){b=b||"i8";"*"===b.charAt(b.length-1)&&(b="i32");switch(b){case "i1":return H[a>>0];case "i8":return H[a>>0];case "i16":return I[a>>1];case "i32":return J[a>>2];case "i64":return J[a>>2];case "float":return wa[a>>2];case "double":return xa[a>>3];default:C("invalid type for setValue: "+b)}return l}s.getValue=ya;var za=2,K=4;s.ALLOC_NORMAL=0;s.ALLOC_STACK=1;s.ALLOC_STATIC=za;s.ALLOC_DYNAMIC=3;s.ALLOC_NONE=K;
function L(a,b,c,e){var g,f;"number"===typeof a?(g=j,f=a):(g=m,f=a.length);var i="string"===typeof b?b:l,c=c==K?e:[Aa,A.S,A.za,A.R][c===h?za:c](Math.max(f,i?1:b.length));if(g){e=c;u(0==(c&3));for(a=c+(f&-4);e<a;e+=4)J[e>>2]=0;for(a=c+f;e<a;)H[e++>>0]=0;return c}if("i8"===i)return a.subarray||a.slice?M.set(a,c):M.set(new Uint8Array(a),c),c;for(var e=0,k,p;e<f;){var q=a[e];"function"===typeof q&&(q=A.qb(q));g=i||b[e];0===g?e++:("i64"==g&&(g="i32"),ra(c+e,q,g),p!==g&&(k=A.ua(g),p=g),e+=k)}return c}
s.allocate=L;function B(a,b){if(0===b||!a)return"";for(var c=0,e,g=0;;){e=M[a+g>>0];c|=e;if(0==e&&!b)break;g++;if(b&&g==b)break}b||(b=g);e="";if(128>c){for(;0<b;)c=String.fromCharCode.apply(String,M.subarray(a,a+Math.min(b,1024))),e=e?e+c:c,a+=1024,b-=1024;return e}return s.UTF8ToString(a)}s.Pointer_stringify=B;s.AsciiToString=function(a){for(var b="";;){var c=H[a++>>0];if(!c)return b;b+=String.fromCharCode(c)}};s.stringToAscii=function(a,b){return Ba(a,b,m)};
function Ca(a,b){for(var c,e,g,f,i,k,p="";;){c=a[b++];if(!c)return p;c&128?(e=a[b++]&63,192==(c&224)?p+=String.fromCharCode((c&31)<<6|e):(g=a[b++]&63,224==(c&240)?c=(c&15)<<12|e<<6|g:(f=a[b++]&63,240==(c&248)?c=(c&7)<<18|e<<12|g<<6|f:(i=a[b++]&63,248==(c&252)?c=(c&3)<<24|e<<18|g<<12|f<<6|i:(k=a[b++]&63,c=(c&1)<<30|e<<24|g<<18|f<<12|i<<6|k))),65536>c?p+=String.fromCharCode(c):(c-=65536,p+=String.fromCharCode(55296|c>>10,56320|c&1023)))):p+=String.fromCharCode(c)}}s.UTF8ArrayToString=Ca;
s.UTF8ToString=function(a){return Ca(M,a)};
function Da(a,b,c,e){if(!(0<e))return 0;for(var g=c,e=c+e-1,f=0;f<a.length;++f){var i=a.charCodeAt(f);55296<=i&&57343>=i&&(i=65536+((i&1023)<<10)|a.charCodeAt(++f)&1023);if(127>=i){if(c>=e)break;b[c++]=i}else{if(2047>=i){if(c+1>=e)break;b[c++]=192|i>>6}else{if(65535>=i){if(c+2>=e)break;b[c++]=224|i>>12}else{if(2097151>=i){if(c+3>=e)break;b[c++]=240|i>>18}else{if(67108863>=i){if(c+4>=e)break;b[c++]=248|i>>24}else{if(c+5>=e)break;b[c++]=252|i>>30;b[c++]=128|i>>24&63}b[c++]=128|i>>18&63}b[c++]=128|i>>
12&63}b[c++]=128|i>>6&63}b[c++]=128|i&63}}b[c]=0;return c-g}s.stringToUTF8Array=Da;s.stringToUTF8=function(a,b,c){return Da(a,M,b,c)};function Ea(a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);55296<=e&&57343>=e&&(e=65536+((e&1023)<<10)|a.charCodeAt(++c)&1023);127>=e?++b:b=2047>=e?b+2:65535>=e?b+3:2097151>=e?b+4:67108863>=e?b+5:b+6}return b}s.lengthBytesUTF8=Ea;s.UTF16ToString=function(a){for(var b=0,c="";;){var e=I[a+2*b>>1];if(0==e)return c;++b;c+=String.fromCharCode(e)}};
s.stringToUTF16=function(a,b,c){c===h&&(c=2147483647);if(2>c)return 0;for(var c=c-2,e=b,c=c<2*a.length?c/2:a.length,g=0;g<c;++g)I[b>>1]=a.charCodeAt(g),b+=2;I[b>>1]=0;return b-e};s.lengthBytesUTF16=function(a){return 2*a.length};s.UTF32ToString=function(a){for(var b=0,c="";;){var e=J[a+4*b>>2];if(0==e)return c;++b;65536<=e?(e-=65536,c+=String.fromCharCode(55296|e>>10,56320|e&1023)):c+=String.fromCharCode(e)}};
s.stringToUTF32=function(a,b,c){c===h&&(c=2147483647);if(4>c)return 0;for(var e=b,c=e+c-4,g=0;g<a.length;++g){var f=a.charCodeAt(g);if(55296<=f&&57343>=f)var i=a.charCodeAt(++g),f=65536+((f&1023)<<10)|i&1023;J[b>>2]=f;b+=4;if(b+4>c)break}J[b>>2]=0;return b-e};s.lengthBytesUTF32=function(a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);55296<=e&&57343>=e&&++c;b+=4}return b};
function Fa(a){function b(c,e,f){var e=e||Infinity,g="",i=[],r;if("N"===a[k]){k++;"K"===a[k]&&k++;for(r=[];"E"!==a[k];)if("S"===a[k]){k++;var w=a.indexOf("_",k);r.push(q[a.substring(k,w)||0]||"?");k=w+1}else if("C"===a[k])r.push(r[r.length-1]),k+=2;else{var w=parseInt(a.substr(k)),Q=w.toString().length;if(!w||!Q){k--;break}var Wa=a.substr(k+Q,w);r.push(Wa);q.push(Wa);k+=Q+w}k++;r=r.join("::");e--;if(0===e)return c?[r]:r}else if(("K"===a[k]||x&&"L"===a[k])&&k++,w=parseInt(a.substr(k)))Q=w.toString().length,
r=a.substr(k+Q,w),k+=Q+w;x=m;"I"===a[k]?(k++,w=b(j),Q=b(j,1,j),g+=Q[0]+" "+r+"<"+w.join(", ")+">"):g=r;a:for(;k<a.length&&0<e--;)if(r=a[k++],r in p)i.push(p[r]);else switch(r){case "P":i.push(b(j,1,j)[0]+"*");break;case "R":i.push(b(j,1,j)[0]+"&");break;case "L":k++;w=a.indexOf("E",k)-k;i.push(a.substr(k,w));k+=w+2;break;case "A":w=parseInt(a.substr(k));k+=w.toString().length;"_"!==a[k]&&d("?");k++;i.push(b(j,1,j)[0]+" ["+w+"]");break;case "E":break a;default:g+="?"+r;break a}!f&&(1===i.length&&"void"===
i[0])&&(i=[]);return c?(g&&i.push(g+"?"),i):g+("("+i.join(", ")+")")}var c=!!s.___cxa_demangle;if(c)try{var e=Aa(a.length);qa(a.substr(1),e);var g=Aa(4),f=s.___cxa_demangle(e,0,0,g);if(0===ya(g,"i32")&&f)return B(f)}catch(i){}finally{e&&Ga(e),g&&Ga(g),f&&Ga(f)}var k=3,p={v:"void",b:"bool",c:"char",s:"short",i:"int",l:"long",f:"float",d:"double",w:"wchar_t",a:"signed char",h:"unsigned char",t:"unsigned short",j:"unsigned int",m:"unsigned long",x:"long long",y:"unsigned long long",z:"..."},q=[],x=j,
e=a;try{if("Object._main"==a||"_main"==a)return"main()";"number"===typeof a&&(a=B(a));if("_"!==a[0]||"_"!==a[1]||"Z"!==a[2])return a;switch(a[3]){case "n":return"operator new()";case "d":return"operator delete()"}e=b()}catch(r){e+="?"}0<=e.indexOf("?")&&!c&&A.O("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return e}
function Ha(){var a;a:{a=Error();if(!a.stack){try{d(Error(0))}catch(b){a=b}if(!a.stack){a="(no stack trace available)";break a}}a=a.stack.toString()}return a.replace(/__Z[\w\d_]+/g,function(a){var b=Fa(a);return a===b?a:a+" ["+b+"]"})}s.stackTrace=function(){return Ha()};for(var H,M,I,Ia,J,Ja,wa,xa,Ka=0,D=0,La=0,v=0,Ma=0,Na=0,E=0,Oa=s.TOTAL_STACK||5242880,F=s.TOTAL_MEMORY||33554432,N=65536;N<F||N<2*Oa;)N=16777216>N?2*N:N+16777216;
N!==F&&(s.K("increasing TOTAL_MEMORY to "+N+" to be compliant with the asm.js spec (and given that TOTAL_STACK="+Oa+")"),F=N);u("undefined"!==typeof Int32Array&&"undefined"!==typeof Float64Array&&!!(new Int32Array(1)).subarray&&!!(new Int32Array(1)).set,"JS engine does not provide full typed array support");var O=new ArrayBuffer(F);H=new Int8Array(O);I=new Int16Array(O);J=new Int32Array(O);M=new Uint8Array(O);Ia=new Uint16Array(O);Ja=new Uint32Array(O);wa=new Float32Array(O);xa=new Float64Array(O);
J[0]=255;u(255===M[0]&&0===M[3],"Typed arrays 2 must be run on a little-endian system");s.HEAP=h;s.buffer=O;s.HEAP8=H;s.HEAP16=I;s.HEAP32=J;s.HEAPU8=M;s.HEAPU16=Ia;s.HEAPU32=Ja;s.HEAPF32=wa;s.HEAPF64=xa;function Pa(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b();else{var c=b.mb;"number"===typeof c?b.Z===h?A.ca("v",c):A.ca("vi",c,[b.Z]):c(b.Z===h?l:b.Z)}}}var Qa=[],Ra=[],Sa=[],Ta=[],Ua=[],Va=m;function Xa(a){Qa.unshift(a)}s.addOnPreRun=s.hb=Xa;s.addOnInit=s.eb=function(a){Ra.unshift(a)};
s.addOnPreMain=s.gb=function(a){Sa.unshift(a)};s.addOnExit=s.cb=function(a){Ta.unshift(a)};function Ya(a){Ua.unshift(a)}s.addOnPostRun=s.fb=Ya;function Za(a,b,c){c=Array(0<c?c:Ea(a)+1);a=Da(a,c,0,c.length);b&&(c.length=a);return c}s.intArrayFromString=Za;s.intArrayToString=function(a){for(var b=[],c=0;c<a.length;c++){var e=a[c];255<e&&(e&=255);b.push(String.fromCharCode(e))}return b.join("")};function qa(a,b,c){a=Za(a,c);for(c=0;c<a.length;)H[b+c>>0]=a[c],c+=1}s.writeStringToMemory=qa;
function pa(a,b){for(var c=0;c<a.length;c++)H[b++>>0]=a[c]}s.writeArrayToMemory=pa;function Ba(a,b,c){for(var e=0;e<a.length;++e)H[b++>>0]=a.charCodeAt(e);c||(H[b>>0]=0)}s.writeAsciiToMemory=Ba;if(!Math.imul||-5!==Math.imul(4294967295,5))Math.imul=function(a,b){var c=a&65535,e=b&65535;return c*e+((a>>>16)*e+c*(b>>>16)<<16)|0};Math.rb=Math.imul;Math.clz32||(Math.clz32=function(a){for(var a=a>>>0,b=0;32>b;b++)if(a&1<<31-b)return b;return 32});Math.kb=Math.clz32;
var sa=Math.abs,va=Math.ceil,ua=Math.floor,ta=Math.min,P=0,$a=l,ab=l;function bb(){P++;s.monitorRunDependencies&&s.monitorRunDependencies(P)}s.addRunDependency=bb;function cb(){P--;s.monitorRunDependencies&&s.monitorRunDependencies(P);if(0==P&&($a!==l&&(clearInterval($a),$a=l),ab)){var a=ab;ab=l;a()}}s.removeRunDependency=cb;s.preloadedImages={};s.preloadedAudios={};var R=l,Ka=8,D=Ka+33584;Ra.push();
L([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,111,117,116,108,101,110,32,60,61,32,85,73,78,84,56,95,77,65,88,0,0,0,0,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,47,98,108,97,107,101,50,47,114,101,102,47,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,46,99,0,0,0,0,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,0,0,0,0,0,0,107,101,121,108,101,110,32,60,61,32,
85,73,78,84,56,95,77,65,88,0,0,0,0,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,95,105,110,105,116,0,99,114,121,112,116,111,95,103,101,110,101,114,105,99,104,97,115,104,95,98,108,97,107,101,50,98,95,102,105,110,97,108,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0,0,0,0,0,0,0,0,36,55,36,0,0,0,0,0,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,59,140,1,189,241,36,255,248,37,195,1,96,220,55,0,183,76,62,255,195,66,61,0,50,76,164,1,225,164,76,255,76,61,163,255,117,62,31,0,81,145,64,255,118,65,14,0,162,115,214,255,6,138,46,0,124,230,244,255,10,138,143,0,52,26,194,0,184,244,76,0,129,143,41,1,190,244,19,255,123,170,122,255,98,129,68,0,121,213,147,0,86,101,30,255,161,103,155,0,140,89,67,255,239,229,190,1,67,11,181,0,198,240,137,254,238,69,188,255,67,151,238,0,19,42,108,255,229,85,113,1,50,68,135,255,
17,106,9,0,50,103,1,255,80,1,168,1,35,152,30,255,16,168,185,1,56,89,232,255,101,210,252,0,41,250,71,0,204,170,79,255,14,46,239,255,80,77,239,0,189,214,75,255,17,141,249,0,38,80,76,255,190,85,117,0,86,228,170,0,156,216,208,1,195,207,164,255,150,66,76,255,175,225,16,255,141,80,98,1,76,219,242,0,198,162,114,0,46,218,152,0,155,43,241,254,155,160,104,255,51,187,165,0,2,17,175,0,66,84,160,1,247,58,30,0,35,65,53,254,69,236,191,0,45,134,245,1,163,123,221,0,32,110,20,255,52,23,165,0,186,214,71,0,233,176,96,
0,242,239,54,1,57,89,138,0,83,0,84,255,136,160,100,0,92,142,120,254,104,124,190,0,181,177,62,255,250,41,85,0,152,130,42,1,96,252,246,0,151,151,63,254,239,133,62,0,32,56,156,0,45,167,189,255,142,133,179,1,131,86,211,0,187,179,150,254,250,170,14,255,210,163,78,0,37,52,151,0,99,77,26,0,238,156,213,255,213,192,209,1,73,46,84,0,20,65,41,1,54,206,79,0,201,131,146,254,170,111,24,255,177,33,50,254,171,38,203,255,78,247,116,0,209,221,153,0,133,128,178,1,58,44,25,0,201,39,59,1,189,19,252,0,49,229,210,1,117,
187,117,0,181,179,184,1,0,114,219,0,48,94,147,0,245,41,56,0,125,13,204,254,244,173,119,0,44,221,32,254,84,234,20,0,249,160,198,1,236,126,234,255,47,99,168,254,170,226,153,255,102,179,216,0,226,141,122,255,122,66,153,254,182,245,134,0,227,228,25,1,214,57,235,255,216,173,56,255,181,231,210,0,119,128,157,255,129,95,136,255,110,126,51,0,2,169,183,255,7,130,98,254,69,176,94,255,116,4,227,1,217,242,145,255,202,173,31,1,105,1,39,255,46,175,69,0,228,47,58,255,215,224,69,254,207,56,69,255,16,254,139,255,23,
207,212,255,202,20,126,255,95,213,96,255,9,176,33,0,200,5,207,255,241,42,128,254,35,33,192,255,248,229,196,1,129,17,120,0,251,103,151,255,7,52,112,255,140,56,66,255,40,226,245,255,217,70,37,254,172,214,9,255,72,67,134,1,146,192,214,255,44,38,112,0,68,184,75,255,206,90,251,0,149,235,141,0,181,170,58,0,116,244,239,0,92,157,2,0,102,173,98,0,233,137,96,1,127,49,203,0,5,155,148,0,23,148,9,255,211,122,12,0,34,134,26,255,219,204,136,0,134,8,41,255,224,83,43,254,85,25,247,0,109,127,0,254,169,136,48,0,238,
119,219,255,231,173,213,0,206,18,254,254,8,186,7,255,126,9,7,1,111,42,72,0,111,52,236,254,96,63,141,0,147,191,127,254,205,78,192,255,14,106,237,1,187,219,76,0,175,243,187,254,105,89,173,0,85,25,89,1,162,243,148,0,2,118,209,254,33,158,9,0,139,163,46,255,93,70,40,0,108,42,142,254,111,252,142,255,155,223,144,0,51,229,167,255,73,252,155,255,94,116,12,255,152,160,218,255,156,238,37,255,179,234,207,255,197,0,179,255,154,164,141,0,225,196,104,0,10,35,25,254,209,212,242,255,97,253,222,254,184,101,229,0,222,
18,127,1,164,136,135,255,30,207,140,254,146,97,243,0,129,192,26,254,201,84,33,255,111,10,78,255,147,81,178,255,4,4,24,0,161,238,215,255,6,141,33,0,53,215,14,255,41,181,208,255,231,139,157,0,179,203,221,255,255,185,113,0,189,226,172,255,113,66,214,255,202,62,45,255,102,64,8,255,78,174,16,254,133,117,68,255,182,120,89,255,133,114,211,0,189,110,21,255,15,10,106,0,41,192,1,0,152,232,121,255,188,60,160,255,153,113,206,255,0,183,226,254,180,13,72,255,176,160,14,254,211,201,134,255,158,24,143,0,127,105,
53,0,96,12,189,0,167,215,251,255,159,76,128,254,106,101,225,255,30,252,4,0,146,12,174,0,89,241,178,254,10,229,166,255,123,221,42,254,30,20,212,0,82,128,3,0,48,209,243,0,119,121,64,255,50,227,156,255,0,110,197,1,103,27,144,0,133,59,140,1,189,241,36,255,248,37,195,1,96,220,55,0,183,76,62,255,195,66,61,0,50,76,164,1,225,164,76,255,76,61,163,255,117,62,31,0,81,145,64,255,118,65,14,0,162,115,214,255,6,138,46,0,124,230,244,255,10,138,143,0,52,26,194,0,184,244,76,0,129,143,41,1,190,244,19,255,123,170,122,
255,98,129,68,0,121,213,147,0,86,101,30,255,161,103,155,0,140,89,67,255,239,229,190,1,67,11,181,0,198,240,137,254,238,69,188,255,234,113,60,255,37,255,57,255,69,178,182,254,128,208,179,0,118,26,125,254,3,7,214,255,241,50,77,255,85,203,197,255,211,135,250,255,25,48,100,255,187,213,180,254,17,88,105,0,83,209,158,1,5,115,98,0,4,174,60,254,171,55,110,255,217,181,17,255,20,188,170,0,146,156,102,254,87,214,174,255,114,122,155,1,233,44,170,0,127,8,239,1,214,236,234,0,175,5,219,0,49,106,61,255,6,66,208,255,
2,106,110,255,81,234,19,255,215,107,192,255,67,151,238,0,19,42,108,255,229,85,113,1,50,68,135,255,17,106,9,0,50,103,1,255,80,1,168,1,35,152,30,255,16,168,185,1,56,89,232,255,101,210,252,0,41,250,71,0,204,170,79,255,14,46,239,255,80,77,239,0,189,214,75,255,17,141,249,0,38,80,76,255,190,85,117,0,86,228,170,0,156,216,208,1,195,207,164,255,150,66,76,255,175,225,16,255,141,80,98,1,76,219,242,0,198,162,114,0,46,218,152,0,155,43,241,254,155,160,104,255,178,9,252,254,100,110,212,0,14,5,167,0,233,239,163,
255,28,151,157,1,101,146,10,255,254,158,70,254,71,249,228,0,88,30,50,0,68,58,160,255,191,24,104,1,129,66,129,255,192,50,85,255,8,179,138,255,38,250,201,0,115,80,160,0,131,230,113,0,125,88,147,0,90,68,199,0,253,76,158,0,28,255,118,0,113,250,254,0,66,75,46,0,230,218,43,0,229,120,186,1,148,68,43,0,136,124,238,1,187,107,197,255,84,53,246,255,51,116,254,255,51,187,165,0,2,17,175,0,66,84,160,1,247,58,30,0,35,65,53,254,69,236,191,0,45,134,245,1,163,123,221,0,32,110,20,255,52,23,165,0,186,214,71,0,233,176,
96,0,242,239,54,1,57,89,138,0,83,0,84,255,136,160,100,0,92,142,120,254,104,124,190,0,181,177,62,255,250,41,85,0,152,130,42,1,96,252,246,0,151,151,63,254,239,133,62,0,32,56,156,0,45,167,189,255,142,133,179,1,131,86,211,0,187,179,150,254,250,170,14,255,68,113,21,255,222,186,59,255,66,7,241,1,69,6,72,0,86,156,108,254,55,167,89,0,109,52,219,254,13,176,23,255,196,44,106,255,239,149,71,255,164,140,125,255,159,173,1,0,51,41,231,0,145,62,33,0,138,111,93,1,185,83,69,0,144,115,46,0,97,151,16,255,24,228,26,
0,49,217,226,0,113,75,234,254,193,153,12,255,182,48,96,255,14,13,26,0,128,195,249,254,69,193,59,0,132,37,81,254,125,106,60,0,214,240,169,1,164,227,66,0,210,163,78,0,37,52,151,0,99,77,26,0,238,156,213,255,213,192,209,1,73,46,84,0,20,65,41,1,54,206,79,0,201,131,146,254,170,111,24,255,177,33,50,254,171,38,203,255,78,247,116,0,209,221,153,0,133,128,178,1,58,44,25,0,201,39,59,1,189,19,252,0,49,229,210,1,117,187,117,0,181,179,184,1,0,114,219,0,48,94,147,0,245,41,56,0,125,13,204,254,244,173,119,0,44,221,
32,254,84,234,20,0,249,160,198,1,236,126,234,255,143,62,221,0,129,89,214,255,55,139,5,254,68,20,191,255,14,204,178,1,35,195,217,0,47,51,206,1,38,246,165,0,206,27,6,254,158,87,36,0,217,52,146,255,125,123,215,255,85,60,31,255,171,13,7,0,218,245,88,254,252,35,60,0,55,214,160,255,133,101,56,0,224,32,19,254,147,64,234,0,26,145,162,1,114,118,125,0,248,252,250,0,101,94,196,255,198,141,226,254,51,42,182,0,135,12,9,254,109,172,210,255,197,236,194,1,241,65,154,0,48,156,47,255,153,67,55,255,218,165,34,254,74,
180,179,0,218,66,71,1,88,122,99,0,212,181,219,255,92,42,231,255,239,0,154,0,245,77,183,255,94,81,170,1,18,213,216,0,171,93,71,0,52,94,248,0,18,151,161,254,197,209,66,255,174,244,15,254,162,48,183,0,49,61,240,254,182,93,195,0,199,228,6,1,200,5,17,255,137,45,237,255,108,148,4,0,90,79,237,255,39,63,77,255,53,82,207,1,142,22,118,255,101,232,18,1,92,26,67,0,5,200,88,255,33,168,138,255,149,225,72,0,2,209,27,255,44,245,168,1,220,237,17,255,30,211,105,254,141,238,221,0,128,80,245,254,111,254,14,0,222,95,
190,1,223,9,241,0,146,76,212,255,108,205,104,255,63,117,153,0,144,69,48,0,35,228,111,0,192,33,193,255,112,214,190,254,115,152,151,0,23,102,88,0,51,74,248,0,226,199,143,254,204,162,101,255,208,97,189,1,245,104,18,0,230,246,30,255,23,148,69,0,110,88,52,254,226,181,89,255,208,47,90,254,114,161,80,255,33,116,248,0,179,152,87,255,69,144,177,1,88,238,26,255,58,32,113,1,1,77,69,0,59,121,52,255,152,238,83,0,52,8,193,0,231,39,233,255,199,34,138,0,222,68,173,0,91,57,242,254,220,210,127,255,192,7,246,254,151,
35,187,0,195,236,165,0,111,93,206,0,212,247,133,1,154,133,209,255,155,231,10,0,64,78,38,0,122,249,100,1,30,19,97,255,62,91,249,1,248,133,77,0,197,63,168,254,116,10,82,0,184,236,113,254,212,203,194,255,61,100,252,254,36,5,202,255,119,91,153,255,129,79,29,0,103,103,171,254,237,215,111,255,216,53,69,0,239,240,23,0,194,149,221,255,38,225,222,0,232,255,180,254,118,82,133,255,57,209,177,1,139,232,133,0,158,176,46,254,194,115,46,0,88,247,229,1,28,103,191,0,221,222,175,254,149,235,44,0,151,228,25,254,218,
105,103,0,142,85,210,0,149,129,190,255,213,65,94,254,117,134,224,255,82,198,117,0,157,221,220,0,163,101,36,0,197,114,37,0,104,172,166,254,11,182,0,0,81,72,188,255,97,188,16,255,69,6,10,0,199,147,145,255,8,9,115,1,65,214,175,255,217,173,209,0,80,127,166,0,247,229,4,254,167,183,124,255,90,28,204,254,175,59,240,255,11,41,248,1,108,40,51,255,144,177,195,254,150,250,126,0,138,91,65,1,120,60,222,255,245,193,239,0,29,214,189,255,128,2,25,0,80,154,162,0,77,220,107,1,234,205,74,255,54,166,103,255,116,72,9,
0,228,94,47,255,30,200,25,255,35,214,89,255,61,176,140,255,83,226,163,255,75,130,172,0,128,38,17,0,95,137,152,255,215,124,159,1,79,93,0,0,148,82,157,254,195,130,251,255,40,202,76,255,251,126,224,0,157,99,62,254,207,7,225,255,96,68,195,0,140,186,157,255,131,19,231,255,42,128,254,0,52,219,61,254,102,203,72,0,141,7,11,255,186,164,213,0,31,122,119,0,133,242,145,0,208,252,232,255,91,213,182,255,143,4,250,254,249,215,74,0,165,30,111,1,171,9,223,0,229,123,34,1,92,130,26,255,77,155,45,1,195,139,28,255,59,
224,78,0,136,17,247,0,108,121,32,0,79,250,189,255,96,227,252,254,38,241,62,0,62,174,125,255,155,111,93,255,10,230,206,1,97,197,40,255,0,49,57,254,65,250,13,0,18,251,150,255,220,109,210,255,5,174,166,254,44,129,189,0,235,35,147,255,37,247,141,255,72,141,4,255,103,107,255,0,247,90,4,0,53,44,42,0,2,30,240,0,4,59,63,0,88,78,36,0,113,167,180,0,190,71,193,255,199,158,164,255,58,8,172,0,77,33,12,0,65,63,3,0,153,77,33,255,172,254,102,1,228,221,4,255,87,30,254,1,146,41,86,255,138,204,239,254,108,141,17,255,
187,242,135,0,210,208,127,0,68,45,14,254,73,96,62,0,81,60,24,255,170,6,36,255,3,249,26,0,35,213,109,0,22,129,54,255,21,35,225,255,234,61,56,255,58,217,6,0,143,124,88,0,236,126,66,0,209,38,183,255,34,238,6,255,174,145,102,0,95,22,211,0,196,15,153,254,46,84,232,255,117,34,146,1,231,250,74,255,27,134,100,1,92,187,195,255,170,198,112,0,120,28,42,0,209,70,67,0,29,81,31,0,29,168,100,1,169,173,160,0,107,35,117,0,62,96,59,255,81,12,69,1,135,239,190,255,220,252,18,0,163,220,58,255,137,137,188,255,83,102,109,
0,96,6,76,0,234,222,210,255,185,174,205,1,60,158,213,255,13,241,214,0,172,129,140,0,93,104,242,0,192,156,251,0,43,117,30,0,225,81,158,0,127,232,218,0,226,28,203,0,233,27,151,255,117,43,5,255,242,14,47,255,33,20,6,0,137,251,44,254,27,31,245,255,183,214,125,254,40,121,149,0,186,158,213,255,89,8,227,0,69,88,0,254,203,135,225,0,201,174,203,0,147,71,184,0,18,121,41,254,94,5,78,0,224,214,240,254,36,5,180,0,251,135,231,1,163,138,212,0,210,249,116,254,88,129,187,0,19,8,49,254,62,14,144,255,159,76,211,0,214,
51,82,0,109,117,228,254,103,223,203,255,75,252,15,1,154,71,220,255,23,13,91,1,141,168,96,255,181,182,133,0,250,51,55,0,234,234,212,254,175,63,158,0,39,240,52,1,158,189,36,255,213,40,85,1,32,180,247,255,19,102,26,1,84,24,97,255,69,21,222,0,148,139,122,255,220,213,235,1,232,203,255,0,121,57,147,0,227,7,154,0,53,22,147,1,72,1,225,0,82,134,48,254,83,60,157,255,145,72,169,0,34,103,239,0,198,233,47,0,116,19,4,255,184,106,9,255,183,129,83,0,36,176,230,1,34,103,72,0,219,162,134,0,245,42,158,0,32,149,96,254,
165,44,144,0,202,239,72,254,215,150,5,0,42,66,36,1,132,215,175,0,86,174,86,255,26,197,156,255,49,232,135,254,103,182,82,0,253,128,176,1,153,178,122,0,245,250,10,0,236,24,178,0,137,106,132,0,40,29,41,0,50,30,152,255,124,105,38,0,230,191,75,0,143,43,170,0,44,131,20,255,44,13,23,255,237,255,155,1,159,109,100,255,112,181,24,255,104,220,108,0,55,211,131,0,99,12,213,255,152,151,145,255,238,5,159,0,97,155,8,0,33,108,81,0,1,3,103,0,62,109,34,255,250,155,180,0,32,71,195,255,38,70,145,1,159,95,245,0,69,229,
101,1,136,28,240,0,79,224,25,0,78,110,121,255,248,168,124,0,187,128,247,0,2,147,235,254,79,11,132,0,70,58,12,1,181,8,163,255,79,137,133,255,37,170,11,255,141,243,85,255,176,231,215,255,204,150,164,255,239,215,39,255,46,87,156,254,8,163,88,255,172,34,232,0,66,44,102,255,27,54,41,254,236,99,87,255,41,123,169,1,52,114,43,0,117,134,40,0,155,134,26,0,231,207,91,254,35,132,38,255,19,102,125,254,36,227,133,255,118,3,113,255,29,13,124,0,152,96,74,1,88,146,206,255,167,191,220,254,162,18,88,255,182,100,23,
0,31,117,52,0,81,46,106,1,12,2,7,0,69,80,201,1,209,246,172,0,12,48,141,1,224,211,88,0,116,226,159,0,122,98,130,0,65,236,234,1,225,226,9,255,207,226,123,1,89,214,59,0,112,135,88,1,90,244,203,255,49,11,38,1,129,108,186,0,89,112,15,1,101,46,204,255,127,204,45,254,79,255,221,255,51,73,18,255,127,42,101,255,241,21,202,0,160,227,7,0,105,50,236,0,79,52,197,255,104,202,208,1,180,15,16,0,101,197,78,255,98,77,203,0,41,185,241,1,35,193,124,0,35,155,23,255,207,53,192,0,11,125,163,1,249,158,185,255,4,131,48,0,
21,93,111,255,61,121,231,1,69,200,36,255,185,48,185,255,111,238,21,255,39,50,25,255,99,215,163,255,87,212,30,255,164,147,5,255,128,6,35,1,108,223,110,255,194,76,178,0,74,101,180,0,243,47,48,0,174,25,43,255,82,173,253,1,54,114,192,255,40,55,91,0,215,108,176,255,11,56,7,0,224,233,76,0,209,98,202,254,242,25,125,0,44,193,93,254,203,8,177,0,135,176,19,0,112,71,213,255,206,59,176,1,4,67,26,0,14,143,213,254,42,55,208,255,60,67,120,0,193,21,163,0,99,164,115,0,10,20,118,0,156,212,222,254,160,7,217,255,114,
245,76,1,117,59,123,0,176,194,86,254,213,15,176,0,78,206,207,254,213,129,59,0,233,251,22,1,96,55,152,255,236,255,15,255,197,89,84,255,93,149,133,0,174,160,113,0,234,99,169,255,152,116,88,0,144,164,83,255,95,29,198,255,34,47,15,255,99,120,134,255,5,236,193,0,249,247,126,255,147,187,30,0,50,230,117,255,108,217,219,255,163,81,166,255,72,25,169,254,155,121,79,255,28,155,89,254,7,126,17,0,147,65,33,1,47,234,253,0,26,51,18,0,105,83,199,255,163,196,230,0,113,248,164,0,226,254,218,0,189,209,203,255,164,247,
222,254,255,35,165,0,4,188,243,1,127,179,71,0,37,237,254,255,100,186,240,0,5,57,71,254,103,72,73,255,244,18,81,254,229,210,132,255,238,6,180,255,11,229,174,255,227,221,192,1,17,49,28,0,163,215,196,254,9,118,4,255,51,240,71,0,113,129,109,255,76,240,231,0,188,177,127,0,125,71,44,1,26,175,243,0,94,169,25,254,27,230,29,0,15,139,119,1,168,170,186,255,172,197,76,255,252,75,188,0,137,124,196,0,72,22,96,255,45,151,249,1,220,145,100,0,64,192,159,255,120,239,226,0,129,178,146,0,0,192,125,0,235,138,234,0,183,
157,146,0,83,199,192,255,184,172,72,255,73,225,128,0,77,6,250,255,186,65,67,0,104,246,207,0,188,32,138,255,218,24,242,0,67,138,81,254,237,129,121,255,20,207,150,1,41,199,16,255,6,20,128,0,159,118,5,0,181,16,143,255,220,38,15,0,23,64,147,254,73,26,13,0,87,228,57,1,204,124,128,0,43,24,223,0,219,99,199,0,22,75,20,255,19,27,126,0,157,62,215,0,110,29,230,0,179,167,255,1,54,252,190,0,221,204,182,254,179,158,65,255,81,157,3,0,194,218,159,0,170,223,0,0,224,11,32,255,38,197,98,0,168,164,37,0,23,88,7,1,164,
186,110,0,96,36,134,0,234,242,229,0,250,121,19,0,242,254,112,255,3,47,94,1,9,239,6,255,81,134,153,254,214,253,168,255,67,124,224,0,245,95,74,0,28,30,44,254,1,109,220,255,178,89,89,0,252,36,76,0,24,198,46,255,76,77,111,0,134,234,136,255,39,94,29,0,185,72,234,255,70,68,135,255,231,102,7,254,77,231,140,0,167,47,58,1,148,97,118,255,16,27,225,1,166,206,143,255,110,178,214,255,180,131,162,0,143,141,225,1,13,218,78,255,114,153,33,1,98,104,204,0,175,114,117,1,167,206,75,0,202,196,83,1,58,64,67,0,138,47,111,
1,196,247,128,255,137,224,224,254,158,112,207,0,154,100,255,1,134,37,107,0,198,128,79,255,127,209,155,255,163,254,185,254,60,14,243,0,31,219,112,254,29,217,65,0,200,13,116,254,123,60,196,255,224,59,184,254,242,89,196,0,123,16,75,254,149,16,206,0,69,254,48,1,231,116,223,255,209,160,65,1,200,80,98,0,37,194,184,254,148,63,34,0,139,240,65,255,217,144,132,255,56,38,45,254,199,120,210,0,108,177,166,255,160,222,4,0,220,126,119,254,165,107,160,255,82,220,248,1,241,175,136,0,144,141,23,255,169,138,84,0,160,
137,78,255,226,118,80,255,52,27,132,255,63,96,139,255,152,250,39,0,188,155,15,0,232,51,150,254,40,15,232,255,240,229,9,255,137,175,27,255,75,73,97,1,218,212,11,0,135,5,162,1,107,185,213,0,2,249,107,255,40,242,70,0,219,200,25,0,25,157,13,0,67,82,80,255,196,249,23,255,145,20,149,0,50,72,146,0,94,76,148,1,24,251,65,0,31,192,23,0,184,212,201,255,123,233,162,1,247,173,72,0,162,87,219,254,126,134,89,0,159,11,12,254,166,105,29,0,73,27,228,1,113,120,183,255,66,163,109,1,212,143,11,255,159,231,168,1,255,128,
90,0,57,14,58,254,89,52,10,255,253,8,163,1,0,145,210,255,10,129,85,1,46,181,27,0,103,136,160,254,126,188,209,255,34,35,111,0,215,219,24,255,212,11,214,254,101,5,118,0,232,197,133,255,223,167,109,255,237,80,86,255,70,139,94,0,158,193,191,1,155,15,51,255,15,190,115,0,78,135,207,255,249,10,27,1,181,125,233,0,95,172,13,254,170,213,161,255,39,236,138,255,95,93,87,255,190,128,95,0,125,15,206,0,166,150,159,0,227,15,158,255,206,158,120,255,42,141,128,0,101,178,120,1,156,109,131,0,218,14,44,254,247,168,206,
255,212,112,28,0,112,17,228,255,90,16,37,1,197,222,108,0,254,207,83,255,9,90,243,255,243,244,172,0,26,88,115,255,205,116,122,0,191,230,193,0,180,100,11,1,217,37,96,255,154,78,156,0,235,234,31,255,206,178,178,255,149,192,251,0,182,250,135,0,246,22,105,0,124,193,109,255,2,210,149,255,169,17,170,0,0,96,110,255,117,9,8,1,50,123,40,255,193,189,99,0,34,227,160,0,48,80,70,254,211,51,236,0,45,122,245,254,44,174,8,0,173,37,233,255,158,65,171,0,122,69,215,255,90,80,2,255,131,106,96,254,227,114,135,0,205,49,
119,254,176,62,64,255,82,51,17,255,241,20,243,255,130,13,8,254,128,217,243,255,162,27,1,254,90,118,241,0,246,198,246,255,55,16,118,255,200,159,157,0,163,17,1,0,140,107,121,0,85,161,118,255,38,0,149,0,156,47,238,0,9,166,166,1,75,98,181,255,50,74,25,0,66,15,47,0,139,225,159,0,76,3,142,255,14,238,184,0,11,207,53,255,183,192,186,1,171,32,174,255,191,76,221,1,247,170,219,0,25,172,50,254,217,9,233,0,203,126,68,255,183,92,48,0,127,167,183,1,65,49,254,0,16,63,127,1,254,21,170,255,59,224,127,254,22,48,63,
255,27,78,130,254,40,195,29,0,250,132,112,254,35,203,144,0,104,169,168,0,207,253,30,255,104,40,38,254,94,228,88,0,206,16,128,255,212,55,122,255,223,22,234,0,223,197,127,0,253,181,181,1,145,102,118,0,236,153,36,255,212,217,72,255,20,38,24,254,138,62,62,0,152,140,4,0,230,220,99,255,1,21,212,255,148,201,231,0,244,123,9,254,0,171,210,0,51,58,37,255,1,255,14,255,244,183,145,254,0,242,166,0,22,74,132,0,121,216,41,0,95,195,114,254,133,24,151,255,156,226,231,255,247,5,77,255,246,148,115,254,225,92,81,255,
222,80,246,254,170,123,89,255,74,199,141,0,29,20,8,255,138,136,70,255,93,75,92,0,221,147,49,254,52,126,226,0,229,124,23,0,46,9,181,0,205,64,52,1,131,254,28,0,151,158,212,0,131,64,78,0,206,25,171,0,0,230,139,0,191,253,110,254,103,247,167,0,64,40,40,1,42,165,241,255,59,75,228,254,124,243,189,255,196,92,178,255,130,140,86,255,141,89,56,1,147,198,5,255,203,248,158,254,144,162,141,0,11,172,226,0,130,42,21,255,1,167,143,255,144,36,36,255,48,88,164,254,168,170,220,0,98,71,214,0,91,208,79,0,159,76,201,1,
166,42,214,255,69,255,0,255,6,128,125,255,190,1,140,0,146,83,218,255,215,238,72,1,122,127,53,0,189,116,165,255,84,8,66,255,214,3,208,255,213,110,133,0,195,168,44,1,158,231,69,0,162,64,200,254,91,58,104,0,182,58,187,254,249,228,136,0,203,134,76,254,99,221,233,0,75,254,214,254,80,69,154,0,64,152,248,254,236,136,202,255,157,105,153,254,149,175,20,0,22,35,19,255,124,121,233,0,186,250,198,254,132,229,139,0,137,80,174,255,165,125,68,0,144,202,148,254,235,239,248,0,135,184,118,0,101,94,17,255,122,72,70,
254,69,130,146,0,127,222,248,1,69,127,118,255,30,82,215,254,188,74,19,255,229,167,194,254,117,25,66,255,65,234,56,254,213,22,156,0,151,59,93,254,45,28,27,255,186,126,164,255,32,6,239,0,127,114,99,1,219,52,2,255,99,96,166,254,62,190,126,255,108,222,168,1,75,226,174,0,230,226,199,0,60,117,218,255,252,248,20,1,214,188,204,0,31,194,134,254,123,69,192,255,169,173,36,254,55,98,91,0,223,42,102,254,137,1,102,0,157,90,25,0,239,122,64,255,252,6,233,0,7,54,20,255,82,116,174,0,135,37,54,255,15,186,125,0,227,
112,175,255,100,180,225,255,42,237,244,255,244,173,226,254,248,18,33,0,171,99,150,255,74,235,50,255,117,82,32,254,106,168,237,0,207,109,208,1,228,9,186,0,135,60,169,254,179,92,143,0,244,170,104,255,235,45,124,255,70,99,186,0,117,137,183,0,224,31,215,0,40,9,100,0,26,16,95,1,68,217,87,0,8,151,20,255,26,100,58,255,176,165,203,1,52,118,70,0,7,32,254,254,244,254,245,255,167,144,194,255,125,113,23,255,176,121,181,0,136,84,209,0,138,6,30,255,89,48,28,0,33,155,14,255,25,240,154,0,141,205,109,1,70,115,62,
255,20,40,107,254,138,154,199,255,94,223,226,255,157,171,38,0,163,177,25,254,45,118,3,255,14,222,23,1,209,190,81,255,118,123,232,1,13,213,101,255,123,55,123,254,27,246,165,0,50,99,76,255,140,214,32,255,97,65,67,255,24,12,28,0,174,86,78,1,64,247,96,0,160,135,67,0,66,55,243,255,147,204,96,255,26,6,33,255,98,51,83,1,153,213,208,255,2,184,54,255,25,218,11,0,49,67,246,254,18,149,72,255,13,25,72,0,42,79,214,0,42,4,38,1,27,139,144,255,149,187,23,0,18,164,132,0,245,84,184,254,120,198,104,255,126,218,96,0,
56,117,234,255,13,29,214,254,68,47,10,255,167,154,132,254,152,38,198,0,66,178,89,255,200,46,171,255,13,99,83,255,210,187,253,255,170,45,42,1,138,209,124,0,214,162,141,0,12,230,156,0,102,36,112,254,3,147,67,0,52,215,123,255,233,171,54,255,98,137,62,0,247,218,39,255,231,218,236,0,247,191,127,0,195,146,84,0,165,176,92,255,19,212,94,255,17,74,227,0,88,40,153,1,198,147,1,255,206,67,245,254,240,3,218,255,61,141,213,255,97,183,106,0,195,232,235,254,95,86,154,0,209,48,205,254,118,209,241,255,240,120,223,
1,213,29,159,0,163,127,147,255,13,218,93,0,85,24,68,254,70,20,80,255,189,5,140,1,82,97,254,255,99,99,191,255,132,84,133,255,107,218,116,255,112,122,46,0,105,17,32,0,194,160,63,255,68,222,39,1,216,253,92,0,177,105,205,255,149,201,195,0,42,225,11,255,40,162,115,0,9,7,81,0,165,218,219,0,180,22,0,254,29,146,252,255,146,207,225,1,180,135,96,0,31,163,112,0,177,11,219,255,133,12,193,254,43,78,50,0,65,113,121,1,59,217,6,255,110,94,24,1,112,172,111,0,7,15,96,0,36,85,123,0,71,150,21,255,208,73,188,0,192,11,
167,1,213,245,34,0,9,230,92,0,162,142,39,255,215,90,27,0,98,97,89,0,94,79,211,0,90,157,240,0,95,220,126,1,102,176,226,0,36,30,224,254,35,31,127,0,231,232,115,1,85,83,130,0,210,73,245,255,47,143,114,255,68,65,197,0,59,72,62,255,183,133,173,254,93,121,118,255,59,177,81,255,234,69,173,255,205,128,177,0,220,244,51,0,26,244,209,1,73,222,77,255,163,8,96,254,150,149,211,0,158,254,203,1,54,127,139,0,161,224,59,0,4,109,22,255,222,42,45,255,208,146,102,255,236,142,187,0,50,205,245,255,10,74,89,254,48,79,142,
0,222,76,130,255,30,166,63,0,236,12,13,255,49,184,244,0,187,113,102,0,218,101,253,0,153,57,182,254,32,150,42,0,25,198,146,1,237,241,56,0,140,68,5,0,91,164,172,255,78,145,186,254,67,52,205,0,219,207,129,1,109,115,17,0,54,143,58,1,21,248,120,255,179,255,30,0,193,236,66,255,1,255,7,255,253,192,48,255,19,69,217,1,3,214,0,255,64,101,146,1,223,125,35,255,235,73,179,255,249,167,226,0,225,175,10,1,97,162,58,0,106,112,171,1,84,172,5,255,133,140,178,255,134,245,142,0,97,90,125,255,186,203,185,255,223,77,23,
255,192,92,106,0,15,198,115,255,217,152,248,0,171,178,120,255,228,134,53,0,176,54,193,1,250,251,53,0,213,10,100,1,34,199,106,0,151,31,244,254,172,224,87,255,14,237,23,255,253,85,26,255,127,39,116,255,172,104,100,0,251,14,70,255,212,208,138,255,253,211,250,0,176,49,165,0,15,76,123,255,37,218,160,255,92,135,16,1,10,126,114,255,70,5,224,255,247,249,141,0,68,20,60,1,241,210,189,255,195,217,187,1,151,3,113,0,151,92,174,0,231,62,178,255,219,183,225,0,23,23,33,255,205,181,80,0,57,184,248,255,67,180,1,255,
90,123,93,255,39,0,162,255,96,248,52,255,84,66,140,0,34,127,228,255,194,138,7,1,166,110,188,0,21,17,155,1,154,190,198,255,214,80,59,255,18,7,143,0,72,29,226,1,199,217,249,0,232,161,71,1,149,190,201,0,217,175,95,254,113,147,67,255,138,143,199,255,127,204,1,0,29,182,83,1,206,230,155,255,186,204,60,0,10,125,85,255,232,96,25,255,255,89,247,255,213,254,175,1,232,193,81,0,28,43,156,254,12,69,8,0,147,24,248,0,18,198,49,0,134,60,35,0,118,246,18,255,49,88,254,254,228,21,186,255,182,65,112,1,219,22,1,255,22,
126,52,255,189,53,49,255,112,25,143,0,38,127,55,255,226,101,163,254,208,133,61,255,137,69,174,1,190,118,145,255,60,98,219,255,217,13,245,255,250,136,10,0,84,254,226,0,201,31,125,1,240,51,251,255,31,131,130,255,2,138,50,255,215,215,177,1,223,12,238,255,252,149,56,255,124,91,68,255,72,126,170,254,119,255,100,0,130,135,232,255,14,79,178,0,250,131,197,0,138,198,208,0,121,216,139,254,119,18,36,255,29,193,122,0,16,42,45,255,213,240,235,1,230,190,169,255,198,35,228,254,110,173,72,0,214,221,241,255,56,148,
135,0,192,117,78,254,141,93,207,255,143,65,149,0,21,18,98,255,95,44,244,1,106,191,77,0,254,85,8,254,214,110,176,255,73,173,19,254,160,196,199,255,237,90,144,0,193,172,113,255,200,155,136,254,228,90,221,0,137,49,74,1,164,221,215,255,209,189,5,255,105,236,55,255,42,31,129,1,193,255,236,0,46,217,60,0,138,88,187,255,226,82,236,255,81,69,151,255,142,190,16,1,13,134,8,0,127,122,48,255,81,64,156,0,171,243,139,0,237,35,246,0,122,143,193,254,212,122,146,0,95,41,255,1,87,132,77,0,4,212,31,0,17,31,78,0,39,45,
173,254,24,142,217,255,95,9,6,255,227,83,6,0,98,59,130,254,62,30,33,0,8,115,211,1,162,97,128,255,7,184,23,254,116,28,168,255,248,138,151,255,98,244,240,0,186,118,130,0,114,248,235,255,105,173,200,1,160,124,71,255,94,36,164,1,175,65,146,255,238,241,170,254,202,198,197,0,228,71,138,254,45,246,109,255,194,52,158,0,133,187,176,0,83,252,154,254,89,189,221,255,170,73,252,0,148,58,125,0,36,68,51,254,42,69,177,255,168,76,86,255,38,100,204,255,38,53,35,0,175,19,97,0,225,238,253,255,81,81,135,0,210,27,255,
254,235,73,107,0,8,207,115,0,82,127,136,0,84,99,21,254,207,19,136,0,100,164,101,0,80,208,77,255,132,207,237,255,15,3,15,255,33,166,110,0,156,95,85,255,37,185,111,1,150,106,35,255,166,151,76,0,114,87,135,255,159,194,64,0,12,122,31,255,232,7,101,254,173,119,98,0,154,71,220,254,191,57,53,255,168,232,160,255,224,32,99,255,218,156,165,0,151,153,163,0,217,13,148,1,197,113,89,0,149,28,161,254,207,23,30,0,105,132,227,255,54,230,94,255,133,173,204,255,92,183,157,255,88,144,252,254,102,33,90,0,159,97,3,0,181,
218,155,255,240,114,119,0,106,214,53,255,165,190,115,1,152,91,225,255,88,106,44,255,208,61,113,0,151,52,124,0,191,27,156,255,110,54,236,1,14,30,166,255,39,127,207,1,229,199,28,0,188,228,188,254,100,157,235,0,246,218,183,1,107,22,193,255,206,160,95,0,76,239,147,0,207,161,117,0,51,166,2,255,52,117,10,254,73,56,227,255,152,193,225,0,132,94,136,255,101,191,209,0,32,107,229,255,198,43,180,1,100,210,118,0,114,67,153,255,23,88,26,255,89,154,92,1,220,120,140,255,144,114,207,255,252,115,250,255,34,206,72,
0,138,133,127,255,8,178,124,1,87,75,97,0,15,229,92,254,240,67,131,255,118,123,227,254,146,120,104,255,145,213,255,1,129,187,70,255,219,119,54,0,1,19,173,0,45,150,148,1,248,83,72,0,203,233,169,1,142,107,56,0,247,249,38,1,45,242,80,255,30,233,103,0,96,82,70,0,23,201,111,0,81,39,30,255,161,183,78,255,194,234,33,255,68,227,140,254,216,206,116,0,70,27,235,255,104,144,79,0,164,230,93,254,214,135,156,0,154,187,242,254,188,20,131,255,36,109,174,0,159,112,241,0,5,110,149,1,36,165,218,0,166,29,19,1,178,46,
73,0,93,43,32,254,248,189,237,0,102,155,141,0,201,93,195,255,241,139,253,255,15,111,98,255,108,65,163,254,155,79,190,255,73,174,193,254,246,40,48,255,107,88,11,254,202,97,85,255,253,204,18,255,113,242,66,0,110,160,194,254,208,18,186,0,81,21,60,0,188,104,167,255,124,166,97,254,210,133,142,0,56,242,137,254,41,111,130,0,111,151,58,1,111,213,141,255,183,172,241,255,38,6,196,255,185,7,123,255,46,11,246,0,245,105,119,1,15,2,161,255,8,206,45,255,18,202,74,255,83,124,115,1,212,141,157,0,83,8,209,254,139,
15,232,255,172,54,173,254,50,247,132,0,214,189,213,0,144,184,105,0,223,254,248,0,255,147,240,255,23,188,72,0,7,51,54,0,188,25,180,254,220,180,0,255,83,160,20,0,163,189,243,255,58,209,194,255,87,73,60,0,106,24,49,0,245,249,220,0,22,173,167,0,118,11,195,255,19,126,237,0,110,159,37,255,59,82,47,0,180,187,86,0,188,148,208,1,100,37,133,255,7,112,193,0,129,188,156,255,84,106,129,255,133,225,202,0,14,236,111,255,40,20,101,0,172,172,49,254,51,54,74,255,251,185,184,255,93,155,224,255,180,249,224,1,230,178,
146,0,72,57,54,254,178,62,184,0,119,205,72,0,185,239,253,255,61,15,218,0,196,67,56,255,234,32,171,1,46,219,228,0,208,108,234,255,20,63,232,255,165,53,199,1,133,228,5,255,52,205,107,0,74,238,140,255,150,156,219,254,239,172,178,255,251,189,223,254,32,142,211,255,218,15,138,1,241,196,80,0,28,36,98,254,22,234,199,0,61,237,220,255,246,57,37,0,142,17,142,255,157,62,26,0,43,238,95,254,3,217,6,255,213,25,240,1,39,220,174,255,154,205,48,254,19,13,192,255,244,34,54,254,140,16,155,0,240,181,5,254,155,193,60,
0,166,128,4,255,36,145,56,255,150,240,219,0,120,51,145,0,82,153,42,1,140,236,146,0,107,92,248,1,189,10,3,0,63,136,242,0,211,39,24,0,19,202,161,1,173,27,186,255,210,204,239,254,41,209,162,255,182,254,159,255,172,116,52,0,195,103,222,254,205,69,59,0,53,22,41,1,218,48,194,0,80,210,242,0,210,188,207,0,187,161,161,254,216,17,1,0,136,225,113,0,250,184,63,0,223,30,98,254,77,168,162,0,59,53,175,0,19,201,10,255,139,224,194,0,147,193,154,255,212,189,12,254,1,200,174,255,50,133,113,1,94,179,90,0,173,182,135,
0,94,177,113,0,43,89,215,255,136,252,106,255,123,134,83,254,5,245,66,255,82,49,39,1,220,2,224,0,97,129,177,0,77,59,89,0,61,29,155,1,203,171,220,255,92,78,139,0,145,33,181,255,169,24,141,1,55,150,179,0,139,60,80,255,218,39,97,0,2,147,107,255,60,248,72,0,173,230,47,1,6,83,182,255,16,105,162,254,137,212,81,255,180,184,134,1,39,222,164,255,221,105,251,1,239,112,125,0,63,7,97,0,63,104,227,255,148,58,12,0,90,60,224,255,84,212,252,0,79,215,168,0,248,221,199,1,115,121,1,0,36,172,120,0,32,162,187,255,57,107,
49,255,147,42,21,0,106,198,43,1,57,74,87,0,126,203,81,255,129,135,195,0,140,31,177,0,221,139,194,0,3,222,215,0,131,68,231,0,177,86,178,254,124,151,180,0,184,124,38,1,70,163,17,0,249,251,181,1,42,55,227,0,226,161,44,0,23,236,110,0,51,149,142,1,93,5,236,0,218,183,106,254,67,24,77,0,40,245,209,255,222,121,153,0,165,57,30,0,83,125,60,0,70,38,82,1,229,6,188,0,109,222,157,255,55,118,63,255,205,151,186,0,227,33,149,255,254,176,246,1,227,177,227,0,34,106,163,254,176,43,79,0,106,95,78,1,185,241,122,255,185,
14,61,0,36,1,202,0,13,178,162,255,247,11,132,0,161,230,92,1,65,1,185,255,212,50,165,1,141,146,64,255,158,242,218,0,21,164,125,0,213,139,122,1,67,71,87,0,203,158,178,1,151,92,43,0,152,111,5,255,39,3,239,255,217,255,250,255,176,63,71,255,74,245,77,1,250,174,18,255,34,49,227,255,246,46,251,255,154,35,48,1,125,157,61,255,106,36,78,255,97,236,153,0,136,187,120,255,113,134,171,255,19,213,217,254,216,94,209,255,252,5,61,0,94,3,202,0,3,26,183,255,64,191,43,255,30,23,21,0,129,141,77,255,102,120,7,1,194,76,
140,0,188,175,52,255,17,81,148,0,232,86,55,1,225,48,172,0,134,42,42,255,238,50,47,0,169,18,254,0,20,147,87,255,14,195,239,255,69,247,23,0,238,229,128,255,177,49,112,0,168,98,251,255,121,71,248,0,243,8,145,254,246,227,153,255,219,169,177,254,251,139,165,255,12,163,185,255,164,40,171,255,153,159,27,254,243,109,91,255,222,24,112,1,18,214,231,0,107,157,181,254,195,147,0,255,194,99,104,255,89,140,190,255,177,66,126,254,106,185,66,0,49,218,31,0,252,174,158,0,188,79,230,1,238,41,224,0,212,234,8,1,136,11,
181,0,166,117,83,255,68,195,94,0,46,132,201,0,240,152,88,0,164,57,69,254,160,224,42,255,59,215,67,255,119,195,141,255,36,180,121,254,207,47,8,255,174,210,223,0,101,197,68,255,255,82,141,1,250,137,233,0,97,86,133,1,16,80,69,0,132,131,159,0,116,93,100,0,45,141,139,0,152,172,157,255,90,43,91,0,71,153,46,0,39,16,112,255,217,136,97,255,220,198,25,254,177,53,49,0,222,88,134,255,128,15,60,0,207,192,169,255,192,116,209,255,106,78,211,1,200,213,183,255,7,12,122,254,222,203,60,255,33,110,199,254,251,106,117,
0,228,225,4,1,120,58,7,255,221,193,84,254,112,133,27,0,189,200,201,255,139,135,150,0,234,55,176,255,61,50,65,0,152,108,169,255,220,85,1,255,112,135,227,0,162,26,186,0,207,96,185,254,244,136,107,0,93,153,50,1,198,97,151,0,110,11,86,255,143,117,174,255,115,212,200,0,5,202,183,0,237,164,10,254,185,239,62,0,236,120,18,254,98,123,99,255,168,201,194,254,46,234,214,0,191,133,49,255,99,169,119,0,190,187,35,1,115,21,45,255,249,131,72,0,112,6,123,255,214,49,181,254,166,233,34,0,92,197,102,254,253,228,205,255,
3,59,201,1,42,98,46,0,219,37,35,255,169,195,38,0,94,124,193,1,156,43,223,0,95,72,133,254,120,206,191,0,122,197,239,255,177,187,79,255,254,46,2,1,250,167,190,0,84,129,19,0,203,113,166,255,249,31,189,254,72,157,202,255,208,71,73,255,207,24,72,0,10,16,18,1,210,81,76,255,88,208,192,255,126,243,107,255,238,141,120,255,199,121,234,255,137,12,59,255,36,220,123,255,148,179,60,254,240,12,29,0,66,0,97,1,36,30,38,255,115,1,93,255,96,103,231,255,197,158,59,1,192,164,240,0,202,202,57,255,24,174,48,0,89,77,155,
1,42,76,215,0,244,151,233,0,23,48,81,0,239,127,52,254,227,130,37,255,248,116,93,1,124,132,118,0,173,254,192,1,6,235,83,255,110,175,231,1,251,28,182,0,129,249,93,254,84,184,128,0,76,181,62,0,175,128,186,0,100,53,136,254,109,29,226,0,221,233,58,1,20,99,74,0,0,22,160,0,134,13,21,0,9,52,55,255,17,89,140,0,175,34,59,0,84,165,119,255,224,226,234,255,7,72,166,255,123,115,255,1,18,214,246,0,250,7,71,1,217,220,185],"i8",K,A.P);
L([212,35,76,255,38,125,175,0,189,97,210,0,114,238,44,255,41,188,169,254,45,186,154,0,81,92,22,0,132,160,193,0,121,208,98,255,13,81,44,255,203,156,82,0,71,58,21,255,208,114,191,254,50,38,147,0,154,216,195,0,101,25,18,0,60,250,215,255,233,132,235,255,103,175,142,1,16,14,92,0,141,31,110,254,238,241,45,255,153,217,239,1,97,168,47,255,249,85,16,1,28,175,62,255,57,254,54,0,222,231,126,0,166,45,117,254,18,189,96,255,228,76,50,0,200,244,94,0,198,152,120,1,68,34,69,255,12,65,160,254,101,19,90,0,167,197,120,
255,68,54,185,255,41,218,188,0,113,168,48,0,88,105,189,1,26,82,32,255,185,93,164,1,228,240,237,255,66,182,53,0,171,197,92,255,107,9,233,1,199,120,144,255,78,49,10,255,109,170,105,255,90,4,31,255,28,244,113,255,74,58,11,0,62,220,246,255,121,154,200,254,144,210,178,255,126,57,129,1,43,250,14,255,101,111,28,1,47,86,241,255,61,70,150,255,53,73,5,255,30,26,158,0,209,26,86,0,138,237,74,0,164,95,188,0,142,60,29,254,162,116,248,255,187,175,160,0,151,18,16,0,209,111,65,254,203,134,39,255,88,108,49,255,131,
26,71,255,221,27,215,254,104,105,93,255,31,236,31,254,135,0,211,255,143,127,110,1,212,73,229,0,233,67,167,254,195,1,208,255,132,17,221,255,51,217,90,0,67,235,50,255,223,210,143,0,179,53,130,1,233,106,198,0,217,173,220,255,112,229,24,255,175,154,93,254,71,203,246,255,48,66,133,255,3,136,230,255,23,221,113,254,235,111,213,0,170,120,95,254,251,221,2,0,45,130,158,254,105,94,217,255,242,52,180,254,213,68,45,255,104,38,28,0,244,158,76,0,161,200,96,255,207,53,13,255,187,67,148,0,170,54,248,0,119,162,178,
255,83,20,11,0,42,42,192,1,146,159,163,255,183,232,111,0,77,229,21,255,71,53,143,0,27,76,34,0,246,136,47,255,219,39,182,255,92,224,201,1,19,142,14,255,69,182,241,255,163,118,245,0,9,109,106,1,170,181,247,255,78,47,238,255,84,210,176,255,213,107,139,0,39,38,11,0,72,21,150,0,72,130,69,0,205,77,155,254,142,133,21,0,71,111,172,254,226,42,59,255,179,0,215,1,33,128,241,0,234,252,13,1,184,79,8,0,110,30,73,255,246,141,189,0,170,207,218,1,74,154,69,255,138,246,49,255,155,32,100,0,125,74,105,255,90,85,61,255,
35,229,177,255,62,125,193,255,153,86,188,1,73,120,212,0,209,123,246,254,135,209,38,255,151,58,44,1,92,69,214,255,14,12,88,255,252,153,166,255,253,207,112,255,60,78,83,255,227,124,110,0,180,96,252,255,53,117,33,254,164,220,82,255,41,1,27,255,38,164,166,255,164,99,169,254,61,144,70,255,192,166,18,0,107,250,66,0,197,65,50,0,1,179,18,255,255,104,1,255,43,153,35,255,80,111,168,0,110,175,168,0,41,105,45,255,219,14,205,255,164,233,140,254,43,1,118,0,233,67,195,0,178,82,159,255,138,87,122,255,212,238,90,
255,144,35,124,254,25,140,164,0,251,215,44,254,133,70,107,255,101,227,80,254,92,169,55,0,215,42,49,0,114,180,85,255,33,232,27,1,172,213,25,0,62,176,123,254,32,133,24,255,225,191,62,0,93,70,153,0,181,42,104,1,22,191,224,255,200,200,140,255,249,234,37,0,149,57,141,0,195,56,208,255,254,130,70,255,32,173,240,255,29,220,199,0,110,100,115,255,132,229,249,0,228,233,223,255,37,216,209,254,178,177,209,255,183,45,165,254,224,97,114,0,137,97,168,255,225,222,172,0,165,13,49,1,210,235,204,255,252,4,28,254,70,
160,151,0,232,190,52,254,83,248,93,255,62,215,77,1,175,175,179,255,160,50,66,0,121,48,208,0,63,169,209,255,0,210,200,0,224,187,44,1,73,162,82,0,9,176,143,255,19,76,193,255,29,59,167,1,24,43,154,0,28,190,190,0,141,188,129,0,232,235,203,255,234,0,109,255,54,65,159,0,60,88,232,255,121,253,150,254,252,233,131,255,198,110,41,1,83,77,71,255,200,22,59,254,106,253,242,255,21,12,207,255,237,66,189,0,90,198,202,1,225,172,127,0,53,22,202,0,56,230,132,0,1,86,183,0,109,190,42,0,243,68,174,1,109,228,154,0,200,
177,122,1,35,160,183,255,177,48,85,255,90,218,169,255,248,152,78,0,202,254,110,0,6,52,43,0,142,98,65,255,63,145,22,0,70,106,93,0,232,138,107,1,110,179,61,255,211,129,218,1,242,209,92,0,35,90,217,1,182,143,106,255,116,101,217,255,114,250,221,255,173,204,6,0,60,150,163,0,73,172,44,255,239,110,80,255,237,76,153,254,161,140,249,0,149,232,229,0,133,31,40,255,174,164,119,0,113,51,214,0,129,228,2,254,64,34,243,0,107,227,244,255,174,106,200,255,84,153,70,1,50,35,16,0,250,74,216,254,236,189,66,255,153,249,
13,0,230,178,4,255,221,41,238,0,118,227,121,255,94,87,140,254,254,119,92,0,73,239,246,254,117,87,128,0,19,211,145,255,177,46,252,0,229,91,246,1,69,128,247,255,202,77,54,1,8,11,9,255,153,96,166,0,217,214,173,255,134,192,2,1,0,207,0,0,189,174,107,1,140,134,100,0,158,193,243,1,182,102,171,0,235,154,51,0,142,5,123,255,60,168,89,1,217,14,92,255,19,214,5,1,211,167,254,0,44,6,202,254,120,18,236,255,15,113,184,255,184,223,139,0,40,177,119,254,182,123,90,255,176,165,176,0,247,77,194,0,27,234,120,0,231,0,214,
255,59,39,30,0,125,99,145,255,150,68,68,1,141,222,248,0,153,123,210,255,110,127,152,255,229,33,214,1,135,221,197,0,137,97,2,0,12,143,204,255,81,41,188,0,115,79,130,255,94,3,132,0,152,175,187,255,124,141,10,255,126,192,179,255,11,103,198,0,149,6,45,0,219,85,187,1,230,18,178,255,72,182,152,0,3,198,184,255,128,112,224,1,97,161,230,0,254,99,38,255,58,159,197,0,151,66,219,0,59,69,143,255,185,112,249,0,119,136,47,255,123,130,132,0,168,71,95,255,113,176,40,1,232,185,173,0,207,93,117,1,68,157,108,255,102,
5,147,254,49,97,33,0,89,65,111,254,247,30,163,255,124,217,221,1,102,250,216,0,198,174,75,254,57,55,18,0,227,5,236,1,229,213,173,0,201,109,218,1,49,233,239,0,30,55,158,1,25,178,106,0,155,111,188,1,94,126,140,0,215,31,238,1,77,240,16,0,213,242,25,1,38,71,168,0,205,186,93,254,49,211,140,255,219,0,180,255,134,118,165,0,160,147,134,255,110,186,35,255,198,243,42,0,243,146,119,0,134,235,163,1,4,241,135,255,193,46,193,254,103,180,79,255,225,4,184,254,242,118,130,0,146,135,176,1,234,111,30,0,69,66,213,254,
41,96,123,0,121,94,42,255,178,191,195,255,46,130,42,0,117,84,8,255,233,49,214,254,238,122,109,0,6,71,89,1,236,211,123,0,244,13,48,254,119,148,14,0,114,28,86,255,75,237,25,255,145,229,16,254,129,100,53,255,134,150,120,254,168,157,50,0,23,72,104,255,224,49,14,0,255,123,22,255,151,185,151,255,170,80,184,1,134,182,20,0,41,100,101,1,153,33,16,0,76,154,111,1,86,206,234,255,192,160,164,254,165,123,93,255,1,216,164,254,67,17,175,255,169,11,59,255,158,41,61,255,73,188,14,255,195,6,137,255,22,147,29,255,20,
103,3,255,246,130,227,255,122,40,128,0,226,47,24,254,35,36,32,0,152,186,183,255,69,202,20,0,195,133,195,0,222,51,247,0,169,171,94,1,183,0,160,255,64,205,18,1,156,83,15,255,197,58,249,254,251,89,110,255,50,10,88,254,51,43,216,0,98,242,198,1,245,151,113,0,171,236,194,1,197,31,199,255,229,81,38,1,41,59,20,0,253,104,230,0,152,93,14,255,246,242,146,254,214,169,240,255,240,102,108,254,160,167,236,0,154,218,188,0,150,233,202,255,27,19,250,1,2,71,133,255,175,12,63,1,145,183,198,0,104,120,115,255,130,251,
247,0,17,212,167,255,62,123,132,255,247,100,189,0,155,223,152,0,143,197,33,0,155,59,44,255,150,93,240,1,127,3,87,255,95,71,207,1,167,85,1,255,188,152,116,255,10,23,23,0,137,195,93,1,54,98,97,0,240,0,168,255,148,188,127,0,134,107,151,0,76,253,171,0,90,132,192,0,146,22,54,0,224,66,54,254,230,186,229,255,39,182,196,0,148,251,130,255,65,131,108,254,128,1,160,0,169,49,167,254,199,254,148,255,251,6,131,0,187,254,129,255,85,82,62,0,178,23,58,255,254,132,5,0,164,213,39,0,134,252,146,254,37,53,81,255,155,
134,82,0,205,167,238,255,94,45,180,255,132,40,161,0,254,111,112,1,54,75,217,0,179,230,221,1,235,94,191,255,23,243,48,1,202,145,203,255,39,118,42,255,117,141,253,0,254,0,222,0,43,251,50,0,54,169,234,1,80,68,208,0,148,203,243,254,145,7,135,0,6,254,0,0,252,185,127,0,98,8,129,255,38,35,72,255,211,36,220,1,40,26,89,0,168,64,197,254,3,222,239,255,2,83,215,254,180,159,105,0,58,115,194,0,186,116,106,255,229,247,219,255,129,118,193,0,202,174,183,1,166,161,72,0,201,107,147,254,237,136,74,0,233,230,106,1,105,
111,168,0,64,224,30,1,1,229,3,0,102,151,175,255,194,238,228,255,254,250,212,0,187,237,121,0,67,251,96,1,197,30,11,0,183,95,204,0,205,89,138,0,64,221,37,1,255,223,30,255,178,48,211,255,241,200,90,255,167,209,96,255,57,130,221,0,46,114,200,255,61,184,66,0,55,182,24,254,110,182,33,0,171,190,232,255,114,94,31,0,18,221,8,0,47,231,254,0,255,112,83,0,118,15,215,255,173,25,40,254,192,193,31,255,238,21,146,255,171,193,118,255,101,234,53,254,131,212,112,0,89,192,107,1,8,208,27,0,181,217,15,255,231,149,232,
0,140,236,126,0,144,9,199,255,12,79,181,254,147,182,202,255,19,109,182,255,49,212,225,0,74,163,203,0,175,233,148,0,26,112,51,0,193,193,9,255,15,135,249,0,150,227,130,0,204,0,219,1,24,242,205,0,238,208,117,255,22,244,112,0,26,229,34,0,37,80,188,255,38,45,206,254,240,90,225,255,29,3,47,255,42,224,76,0,186,243,167,0,32,132,15,255,5,51,125,0,139,135,24,0,6,241,219,0,172,229,133,255,246,214,50,0,231,11,207,255,191,126,83,1,180,163,170,255,245,56,24,1,178,164,211,255,3,16,202,1,98,57,118,255,141,131,89,
254,33,51,24,0,243,149,91,255,253,52,14,0,35,169,67,254,49,30,88,255,179,27,36,255,165,140,183,0,58,189,151,0,88,31,0,0,75,169,66,0,66,101,199,255,24,216,199,1,121,196,26,255,14,79,203,254,240,226,81,255,94,28,10,255,83,193,240,255,204,193,131,255,94,15,86,0,218,40,157,0,51,193,209,0,0,242,177,0,102,185,247,0,158,109,116,0,38,135,91,0,223,175,149,0,220,66,1,255,86,60,232,0,25,96,37,255,225,122,162,1,215,187,168,255,158,157,46,0,56,171,162,0,232,240,101,1,122,22,9,0,51,9,21,255,53,25,238,255,217,30,
232,254,125,169,148,0,13,232,102,0,148,9,37,0,165,97,141,1,228,131,41,0,222,15,243,255,254,18,17,0,6,60,237,1,106,3,113,0,59,132,189,0,92,112,30,0,105,208,213,0,48,84,179,255,187,121,231,254,27,216,109,255,162,221,107,254,73,239,195,255,250,31,57,255,149,135,89,255,185,23,115,1,3,163,157,255,18,112,250,0,25,57,187,255,161,96,164,0,47,16,243,0,12,141,251,254,67,234,184,255,41,18,161,0,175,6,96,255,160,172,52,254,24,176,183,255,198,193,85,1,124,121,137,255,151,50,114,255,220,203,60,255,207,239,5,1,
0,38,107,255,55,238,94,254,70,152,94,0,213,220,77,1,120,17,69,255,85,164,190,255,203,234,81,0,38,49,37,254,61,144,124,0,137,78,49,254,168,247,48,0,95,164,252,0,105,169,135,0,253,228,134,0,64,166,75,0,81,73,20,255,207,210,10,0,234,106,150,255,94,34,90,255,254,159,57,254,220,133,99,0,139,147,180,254,24,23,185,0,41,57,30,255,189,97,76,0,65,187,223,255,224,172,37,255,34,62,95,1,231,144,240,0,77,106,126,254,64,152,91,0,29,98,155,0,226,251,53,255,234,211,5,255,144,203,222,255,164,176,221,254,5,231,24,0,
179,122,205,0,36,1,134,255,125,70,151,254,97,228,252,0,172,129,23,254,48,90,209,255,150,224,82,1,84,134,30,0,241,196,46,0,103,113,234,255,46,101,121,254,40,124,250,255,135,45,242,254,9,249,168,255,140,108,131,255,143,163,171,0,50,173,199,255,88,222,142,255,200,95,158,0,142,192,163,255,7,117,135,0,111,124,22,0,236,12,65,254,68,38,65,255,227,174,254,0,244,245,38,0,240,50,208,255,161,63,250,0,60,209,239,0,122,35,19,0,14,33,230,254,2,159,113,0,106,20,127,255,228,205,96,0,137,210,174,254,180,212,144,255,
89,98,154,1,34,88,139,0,167,162,112,1,65,110,197,0,241,37,169,0,66,56,131,255,10,201,83,254,133,253,187,255,177,112,45,254,196,251,0,0,196,250,151,255,238,232,214,255,150,209,205,0,28,240,118,0,71,76,83,1,236,99,91,0,42,250,131,1,96,18,64,255,118,222,35,0,113,214,203,255,122,119,184,255,66,19,36,0,204,64,249,0,146,89,139,0,134,62,135,1,104,233,101,0,188,84,26,0,49,249,129,0,208,214,75,255,207,130,77,255,115,175,235,0,171,2,137,255,175,145,186,1,55,245,135,255,154,86,181,1,100,58,246,255,109,199,60,
255,82,204,134,255,215,49,230,1,140,229,192,255,222,193,251,255,81,136,15,255,179,149,162,255,23,39,29,255,7,95,75,254,191,81,222,0,241,81,90,255,107,49,201,255,244,211,157,0,222,140,149,255,65,219,56,254,189,246,90,255,178,59,157,1,48,219,52,0,98,34,215,0,28,17,187,255,175,169,24,0,92,79,161,255,236,200,194,1,147,143,234,0,229,225,7,1,197,168,14,0,235,51,53,1,253,120,174,0,197,6,168,255,202,117,171,0,163,21,206,0,114,85,90,255,15,41,10,255,194,19,99,0,65,55,216,254,162,146,116,0,50,206,212,255,64,
146,29,255,158,158,131,1,100,165,130,255,172,23,129,255,125,53,9,255,15,193,18,1,26,49,11,255,181,174,201,1,135,201,14,255,100,19,149,0,219,98,79,0,42,99,143,254,96,0,48,255,197,249,83,254,104,149,79,255,235,110,136,254,82,128,44,255,65,41,36,254,88,211,10,0,187,121,187,0,98,134,199,0,171,188,179,254,210,11,238,255,66,123,130,254,52,234,61,0,48,113,23,254,6,86,120,255,119,178,245,0,87,129,201,0,242,141,209,0,202,114,85,0,148,22,161,0,103,195,48,0,25,49,171,255,138,67,130,0,182,73,122,254,148,24,130,
0,211,229,154,0,32,155,158,0,84,105,61,0,177,194,9,255,166,89,86,1,54,83,187,0,249,40,117,255,109,3,215,255,53,146,44,1,63,47,179,0,194,216,3,254,14,84,136,0,136,177,13,255,72,243,186,255,117,17,125,255,211,58,211,255,93,79,223,0,90,88,245,255,139,209,111,255,70,222,47,0,10,246,79,255,198,217,178,0,227,225,11,1,78,126,179,255,62,43,126,0,103,148,35,0,129,8,165,254,245,240,148,0,61,51,142,0,81,208,134,0,15,137,115,255,211,119,236,255,159,245,248,255,2,134,136,255,230,139,58,1,160,164,254,0,114,85,
141,255,49,166,182,255,144,70,84,1,85,182,7,0,46,53,93,0,9,166,161,255,55,162,178,255,45,184,188,0,146,28,44,254,169,90,49,0,120,178,241,1,14,123,127,255,7,241,199,1,189,66,50,255,198,143,101,254,189,243,135,255,141,24,24,254,75,97,87,0,118,251,154,1,237,54,156,0,171,146,207,255,131,196,246,255,136,64,113,1,151,232,57,0,240,218,115,0,49,61,27,255,64,129,73,1,252,169,27,255,40,132,10,1,90,201,193,255,252,121,240,1,186,206,41,0,43,198,97,0,145,100,183,0,204,216,80,254,172,150,65,0,249,229,196,254,104,
123,73,255,77,104,96,254,130,180,8,0,104,123,57,0,220,202,229,255,102,249,211,0,86,14,232,255,182,78,209,0,239,225,164,0,106,13,32,255,120,73,17,255,134,67,233,0,83,254,181,0,183,236,112,1,48,64,131,255,241,216,243,255,65,193,226,0,206,241,100,254,100,134,166,255,237,202,197,0,55,13,81,0,32,124,102,255,40,228,177,0,118,181,31,1,231,160,134,255,119,187,202,0,0,142,60,255,128,38,189,255,166,201,150,0,207,120,26,1,54,184,172,0,12,242,204,254,133,66,230,0,34,38,31,1,184,112,80,0,32,51,165,254,191,243,
55,0,58,73,146,254,155,167,205,255,100,104,152,255,197,254,207,255,173,19,247,0,238,10,202,0,239,151,242,0,94,59,39,255,240,29,102,255,10,92,154,255,229,84,219,255,161,129,80,0,208,90,204,1,240,219,174,255,158,102,145,1,53,178,76,255,52,108,168,1,83,222,107,0,211,36,109,0,118,58,56,0,8,29,22,0,237,160,199,0,170,209,157,0,137,71,47,0,143,86,32,0,198,242,2,0,212,48,136,1,92,172,186,0,230,151,105,1,96,191,229,0,138,80,191,254,240,216,130,255,98,43,6,254,168,196,49,0,253,18,91,1,144,73,121,0,61,146,39,
1,63,104,24,255,184,165,112,254,126,235,98,0,80,213,98,255,123,60,87,255,82,140,245,1,223,120,173,255,15,198,134,1,206,60,239,0,231,234,92,255,33,238,19,255,165,113,142,1,176,119,38,0,160,43,166,254,239,91,105,0,107,61,194,1,25,4,68,0,15,139,51,0,164,132,106,255,34,116,46,254,168,95,197,0,137,212,23,0,72,156,58,0,137,112,69,254,150,105,154,255,236,201,157,0,23,212,154,255,136,82,227,254,226,59,221,255,95,149,192,0,81,118,52,255,33,43,215,1,14,147,75,255,89,156,121,254,14,18,79,0,147,208,139,1,151,
218,62,255,156,88,8,1,210,184,98,255,20,175,123,255,102,83,229,0,220,65,116,1,150,250,4,255,92,142,220,255,34,247,66,255,204,225,179,254,151,81,151,0,71,40,236,255,138,63,62,0,6,79,240,255,183,185,181,0,118,50,27,0,63,227,192,0,123,99,58,1,50,224,155,255,17,225,223,254,220,224,77,255,14,44,123,1,141,128,175,0,248,212,200,0,150,59,183,255,147,97,29,0,150,204,181,0,253,37,71,0,145,85,119,0,154,200,186,0,2,128,249,255,83,24,124,0,14,87,143,0,168,51,245,1,124,151,231,255,208,240,197,1,124,190,185,0,48,
58,246,0,20,233,232,0,125,18,98,255,13,254,31,255,245,177,130,255,108,142,35,0,171,125,242,254,140,12,34,255,165,161,162,0,206,205,101,0,247,25,34,1,100,145,57,0,39,70,57,0,118,204,203,255,242,0,162,0,165,244,30,0,198,116,226,0,128,111,153,255,140,54,182,1,60,122,15,255,155,58,57,1,54,50,198,0,171,211,29,255,107,138,167,255,173,107,199,255,109,161,193,0,89,72,242,255,206,115,89,255,250,254,142,254,177,202,94,255,81,89,50,0,7,105,66,255,25,254,255,254,203,64,23,255,79,222,108,255,39,249,75,0,241,124,
50,0,239,152,133,0,221,241,105,0,147,151,98,0,213,161,121,254,242,49,137,0,233,37,249,254,42,183,27,0,184,119,230,255,217,32,163,255,208,251,228,1,137,62,131,255,79,64,9,254,94,48,113,0,17,138,50,254,193,255,22,0,247,18,197,1,67,55,104,0,16,205,95,255,48,37,66,0,55,156,63,1,64,82,74,255,200,53,71,254,239,67,125,0,26,224,222,0,223,137,93,255,30,224,202,255,9,220,132,0,198,38,235,1,102,141,86,0,60,43,81,1,136,28,26,0,233,36,8,254,207,242,148,0,164,162,63,0,51,46,224,255,114,48,79,255,9,175,226,0,222,
3,193,255,47,160,232,255,255,93,105,254,14,42,230,0,26,138,82,1,208,43,244,0,27,39,38,255,98,208,127,255,64,149,182,255,5,250,209,0,187,60,28,254,49,25,218,255,169,116,205,255,119,18,120,0,156,116,147,255,132,53,109,255,13,10,202,0,110,83,167,0,157,219,137,255,6,3,130,255,50,167,30,255,60,159,47,255,129,128,157,254,94,3,189,0,3,166,68,0,83,223,215,0,150,90,194,1,15,168,65,0,227,83,51,255,205,171,66,255,54,187,60,1,152,102,45,255,119,154,225,0,240,247,136,0,100,197,178,255,139,71,223,255,204,82,16,
1,41,206,42,255,156,192,221,255,216,123,244,255,218,218,185,255,187,186,239,255,252,172,160,255,195,52,22,0,144,174,181,254,187,100,115,255,211,78,176,255,27,7,193,0,147,213,104,255,90,201,10,255,80,123,66,1,22,33,186,0,1,7,99,254,30,206,10,0,229,234,5,0,53,30,210,0,138,8,220,254,71,55,167,0,72,225,86,1,118,190,188,0,254,193,101,1,171,249,172,255,94,158,183,254,93,2,108,255,176,93,76,255,73,99,79,255,74,64,129,254,246,46,65,0,99,241,127,254,246,151,102,255,44,53,208,254,59,102,234,0,154,175,164,255,
88,242,32,0,111,38,1,0,255,182,190,255,115,176,15,254,169,60,129,0,122,237,241,0,90,76,63,0,62,74,120,255,122,195,110,0,119,4,178,0,222,242,210,0,130,33,46,254,156,40,41,0,167,146,112,1,49,163,111,255,121,176,235,0,76,207,14,255,3,25,198,1,41,235,213,0,85,36,214,1,49,92,109,255,200,24,30,254,168,236,195,0,145,39,124,1,236,195,149,0,90,36,184,255,67,85,170,255,38,35,26,254,131,124,68,255,239,155,35,255,54,201,164,0,196,22,117,255,49,15,205,0,24,224,29,1,126,113,144,0,117,21,182,0,203,159,141,0,223,
135,77,0,176,230,176,255,190,229,215,255,99,37,181,255,51,21,138,255,25,189,89,255,49,48,165,254,152,45,247,0,170,108,222,0,80,202,5,0,27,69,103,254,204,22,129,255,180,252,62,254,210,1,91,255,146,110,254,255,219,162,28,0,223,252,213,1,59,8,33,0,206,16,244,0,129,211,48,0,107,160,208,0,112,59,209,0,109,77,216,254,34,21,185,255,246,99,56,255,179,139,19,255,185,29,50,255,84,89,19,0,74,250,98,255,225,42,200,255,192,217,205,255,210,16,167,0,99,132,95,1,43,230,57,0,254,11,203,255,99,188,63,255,119,193,251,
254,80,105,54,0,232,181,189,1,183,69,112,255,208,171,165,255,47,109,180,255,123,83,165,0,146,162,52,255,154,11,4,255,151,227,90,255,146,137,97,254,61,233,41,255,94,42,55,255,108,164,236,0,152,68,254,0,10,140,131,255,10,106,79,254,243,158,137,0,67,178,66,254,177,123,198,255,15,62,34,0,197,88,42,255,149,95,177,255,152,0,198,255,149,254,113,255,225,90,163,255,125,217,247,0,18,17,224,0,128,66,120,254,192,25,9,255,50,221,205,0,49,212,70,0,233,255,164,0,2,209,9,0,221,52,219,254,172,224,244,255,94,56,206,
1,242,179,2,255,31,91,164,1,230,46,138,255,189,230,220,0,57,47,61,255,111,11,157,0,177,91,152,0,28,230,98,0,97,87,126,0,198,89,145,255,167,79,107,0,249,77,160,1,29,233,230,255,150,21,86,254,60,11,193,0,151,37,36,254,185,150,243,255,228,212,83,1,172,151,180,0,201,169,155,0,244,60,234,0,142,235,4,1,67,218,60,0,192,113,75,1,116,243,207,255,65,172,155,0,81,30,156,255,80,72,33,254,18,231,109,255,142,107,21,254,125,26,132,255,176,16,59,255,150,201,58,0,206,169,201,0,208,121,226,0,40,172,14,255,150,61,94,
255,56,57,156,255,141,60,145,255,45,108,149,255,238,145,155,255,209,85,31,254,192,12,210,0,99,98,93,254,152,16,151,0,225,185,220,0,141,235,44,255,160,172,21,254,71,26,31,255,13,64,93,254,28,56,198,0,177,62,248,1,182,8,241,0,166,101,148,255,78,81,133,255,129,222,215,1,188,169,129,255,232,7,97,0,49,112,60,255,217,229,251,0,119,108,138,0,39,19,123,254,131,49,235,0,132,84,145,0,130,230,148,255,25,74,187,0,5,245,54,255,185,219,241,1,18,194,228,255,241,202,102,0,105,113,202,0,155,235,79,0,21,9,178,255,
156,1,239,0,200,148,61,0,115,247,210,255,49,221,135,0,58,189,8,1,35,46,9,0,81,65,5,255,52,158,185,255,125,116,46,255,74,140,13,255,210,92,172,254,147,23,71,0,217,224,253,254,115,108,180,255,145,58,48,254,219,177,24,255,156,255,60,1,154,147,242,0,253,134,87,0,53,75,229,0,48,195,222,255,31,175,50,255,156,210,120,255,208,35,222,255,18,248,179,1,2,10,101,255,157,194,248,255,158,204,101,255,104,254,197,255,79,62,4,0,178,172,101,1,96,146,251,255,65,10,156,0,2,137,165,255,116,4,231,0,242,215,1,0,19,35,29,
255,43,161,79,0,59,149,246,1,251,66,176,0,200,33,3,255,80,110,142,255,195,161,17,1,228,56,66,255,123,47,145,254,132,4,164,0,67,174,172,0,25,253,114,0,87,97,87,1,250,220,84,0,96,91,200,255,37,125,59,0,19,65,118,0,161,52,241,255,237,172,6,255,176,191,255,255,1,65,130,254,223,190,230,0,101,253,231,255,146,35,109,0,250,29,77,1,49,0,19,0,123,90,155,1,22,86,32,255,218,213,65,0,111,93,127,0,60,93,169,255,8,127,182,0,17,186,14,254,253,137,246,255,213,25,48,254,76,238,0,255,248,92,70,255,99,224,139,0,184,
9,255,1,7,164,208,0,205,131,198,1,87,214,199,0,130,214,95,0,221,149,222,0,23,38,171,254,197,110,213,0,43,115,140,254,215,177,118,0,96,52,66,1,117,158,237,0,14,64,182,255,46,63,174,255,158,95,190,255,225,205,177,255,43,5,142,255,172,99,212,255,244,187,147,0,29,51,153,255,228,116,24,254,30,101,207,0,19,246,150,255,134,231,5,0,125,134,226,1,77,65,98,0,236,130,33,255,5,110,62,0,69,108,127,255,7,113,22,0,145,20,83,254,194,161,231,255,131,181,60,0,217,209,177,255,229,148,212,254,3,131,184,0,117,177,187,
1,28,14,31,255,176,102,80,0,50,84,151,255,125,31,54,255,21,157,133,255,19,179,139,1,224,232,26,0,34,117,170,255,167,252,171,255,73,141,206,254,129,250,35,0,72,79,236,1,220,229,20,255,41,202,173,255,99,76,238,255,198,22,224,255,108,198,195,255,36,141,96,1,236,158,59,255,106,100,87,0,110,226,2,0,227,234,222,0,154,93,119,255,74,112,164,255,67,91,2,255,21,145,33,255,102,214,137,255,175,230,103,254,163,246,166,0,93,247,116,254,167,224,28,255,220,2,57,1,171,206,84,0,123,228,17,255,27,120,119,0,119,11,147,
1,180,47,225,255,104,200,185,254,165,2,114,0,77,78,212,0,45,154,177,255,24,196,121,254,82,157,182,0,90,16,190,1,12,147,197,0,95,239,152,255,11,235,71,0,86,146,119,255,172,134,214,0,60,131,196,0,161,225,129,0,31,130,120,254,95,200,51,0,105,231,210,255,58,9,148,255,43,168,221,255,124,237,142,0,198,211,50,254,46,245,103,0,164,248,84,0,152,70,208,255,180,117,177,0,70,79,185,0,243,74,32,0,149,156,207,0,197,196,161,1,245,53,239,0,15,93,246,254,139,240,49,255,196,88,36,255,162,38,123,0,128,200,157,1,174,
76,103,255,173,169,34,254,216,1,171,255,114,51,17,0,136,228,194,0,110,150,56,254,106,246,159,0,19,184,79,255,150,77,240,255,155,80,162,0,0,53,169,255,29,151,86,0,68,94,16,0,92,7,110,254,98,117,149,255,249,77,230,255,253,10,140,0,214,124,92,254,35,118,235,0,89,48,57,1,22,53,166,0,184,144,61,255,179,255,194,0,214,248,61,254,59,110,246,0,121,21,81,254,166,3,228,0,106,64,26,255,69,232,134,255,242,220,53,254,46,220,85,0,113,149,247,255,97,179,103,255,190,127,11,0,135,209,182,0,95,52,129,1,170,144,206,
255,122,200,204,255,168,100,146,0,60,144,149,254,70,60,40,0,122,52,177,255,246,211,101,255,174,237,8,0,7,51,120,0,19,31,173,0,126,239,156,255,143,189,203,0,196,128,88,255,233,133,226,255,30,125,173,255,201,108,50,0,123,100,59,255,254,163,3,1,221,148,181,255,214,136,57,254,222,180,137,255,207,88,54,255,28,33,251,255,67,214,52,1,210,208,100,0,81,170,94,0,145,40,53,0,224,111,231,254,35,28,244,255,226,199,195,254,238,17,230,0,217,217,164,254,169,157,221,0,218,46,162,1,199,207,163,255,108,115,162,1,14,
96,187,255,118,60,76,0,184,159,152,0,209,231,71,254,42,164,186,255,186,153,51,254,221,171,182,255,162,142,173,0,235,47,193,0,7,139,16,1,95,164,64,255,16,221,166,0,219,197,16,0,132,29,44,255,100,69,117,255,60,235,88,254,40,81,173,0,71,190,61,255,187,88,157,0,231,11,23,0,237,117,164,0,225,168,223,255,154,114,116,255,163,152,242,1,24,32,170,0,125,98,113,254,168,19,76,0,17,157,220,254,155,52,5,0,19,111,161,255,71,90,252,255,173,110,240,0,10,198,121,255,253,255,240,255,66,123,210,0,221,194,215,254,121,
163,17,255,225,7,99,0,190,49,182,0,115,9,133,1,232,26,138,255,213,68,132,0,44,119,122,255,179,98,51,0,149,90,106,0,71,50,230,255,10,153,118,255,177,70,25,0,165,87,205,0,55,138,234,0,238,30,97,0,113,155,207,0,98,153,127,0,34,107,219,254,117,114,172,255,76,180,255,254,242,57,179,255,221,34,172,254,56,162,49,255,83,3,255,255,113,221,189,255,188,25,228,254,16,88,89,255,71,28,198,254,22,17,149,255,243,121,254,255,107,202,99,255,9,206,14,1,220,47,153,0,107,137,39,1,97,49,194,255,149,51,197,254,186,58,11,
255,107,43,232,1,200,6,14,255,181,133,65,254,221,228,171,255,123,62,231,1,227,234,179,255,34,189,212,254,244,187,249,0,190,13,80,1,130,89,1,0,223,133,173,0,9,222,198,255,66,127,74,0,167,216,93,255,155,168,198,1,66,145,0,0,68,102,46,1,172,90,154,0,216,128,75,255,160,40,51,0,158,17,27,1,124,240,49,0,236,202,176,255,151,124,192,255,38,193,190,0,95,182,61,0,163,147,124,255,255,165,51,255,28,40,17,254,215,96,78,0,86,145,218,254,31,36,202,255,86,9,5,0,111,41,200,255,237,108,97,0,57,62,44,0,117,184,15,1,
45,241,116,0,152,1,220,255,157,165,188,0,250,15,131,1,60,44,125,255,65,220,251,255,75,50,184,0,53,90,128,255,231,80,194,255,136,129,127,1,21,18,187,255,45,58,161,255,71,147,34,0,174,249,11,254,35,141,29,0,239,68,177,255,115,110,58,0,238,190,177,1,87,245,166,255,190,49,247,255,146,83,184,255,173,14,39,255,146,215,104,0,142,223,120,0,149,200,155,255,212,207,145,1,16,181,217,0,173,32,87,255,255,35,181,0,119,223,161,1,200,223,94,255,70,6,186,255,192,67,85,255,50,169,152,0,144,26,123,255,56,243,179,254,
20,68,136,0,39,140,188,254,253,208,5,255,200,115,135,1,43,172,229,255,156,104,187,0,151,251,167,0,52,135,23,0,151,153,72,0,147,197,107,254,148,158,5,255,238,143,206,0,126,153,137,255,88,152,197,254,7,68,167,0,252,159,165,255,239,78,54,255,24,63,55,255,38,222,94,0,237,183,12,255,206,204,210,0,19,39,246,254,30,74,231,0,135,108,29,1,179,115,0,0,117,118,116,1,132,6,252,255,145,129,161,1,105,67,141,0,82,37,226,255,238,226,228,255,204,214,129,254,162,123,100,255,185,121,234,0,45,108,231,0,66,8,56,255,132,
136,128,0,172,224,66,254,175,157,188,0,230,223,226,254,242,219,69,0,184,14,119,1,82,162,56,0,114,123,20,0,162,103,85,255,49,239,99,254,156,135,215,0,111,255,167,254,39,196,214,0,144,38,79,1,249,168,125,0,155,97,156,255,23,52,219,255,150,22,144,0,44,149,165,255,40,127,183,0,196,77,233,255,118,129,210,255,170,135,230,255,214,119,198,0,233,240,35,0,253,52,7,255,117,102,48,255,21,204,154,255,179,136,177,255,23,2,3,1,149,130,89,255,252,17,159,1,70,60,26,0,144,107,17,0,180,190,60,255,56,182,59,255,110,
71,54,255,198,18,129,255,149,224,87,255,223,21,152,255,138,22,182,255,250,156,205,0,236,45,208,255,79,148,242,1,101,70,209,0,103,78,174,0,101,144,172,255,152,136,237,1,191,194,136,0,113,80,125,1,152,4,141,0,155,150,53,255,196,116,245,0,239,114,73,254,19,82,17,255,124,125,234,255,40,52,191,0,42,210,158,255,155,132,165,0,178,5,42,1,64,92,40,255,36,85,77,255,178,228,118,0,137,66,96,254,115,226,66,0,110,240,69,254,151,111,80,0,167,174,236,255,227,108,107,255,188,242,65,255,183,81,255,0,57,206,181,255,
47,34,181,255,213,240,158,1,71,75,95,0,156,40,24,255,102,210,81,0,171,199,228,255,154,34,41,0,227,175,75,0,21,239,195,0,138,229,95,1,76,192,49,0,117,123,87,1,227,225,130,0,125,62,63,255,2,198,171,0,254,36,13,254,145,186,206,0,148,255,244,255,35,0,166,0,30,150,219,1,92,228,212,0,92,198,60,254,62,133,200,255,201,41,59,0,125,238,109,255,180,163,238,1,140,122,82,0,9,22,88,255,197,157,47,255,153,94,57,0,88,30,182,0,84,161,85,0,178,146,124,0,166,166,7,255,21,208,223,0,156,182,242,0,155,121,185,0,83,156,
174,254,154,16,118,255,186,83,232,1,223,58,121,255,29,23,88,0,35,125,127,255,170,5,149,254,164,12,130,255,155,196,29,0,161,96,136,0,7,35,29,1,162,37,251,0,3,46,242,255,0,217,188,0,57,174,226,1,206,233,2,0,57,187,136,254,123,189,9,255,201,117,127,255,186,36,204,0,231,25,216,0,80,78,105,0,19,134,129,255,148,203,68,0,141,81,125,254,248,165,200,255,214,144,135,0,151,55,166,255,38,235,91,0,21,46,154,0,223,254,150,255,35,153,180,255,125,176,29,1,43,98,30,255,216,122,230,255,233,160,12,0,57,185,12,254,240,
113,7,255,5,9,16,254,26,91,108,0,109,198,203,0,8,147,40,0,129,134,228,255,124,186,40,255,114,98,132,254,166,132,23,0,99,69,44,0,9,242,238,255,184,53,59,0,132,129,102,255,52,32,243,254,147,223,200,255,123,83,179,254,135,144,201,255,141,37,56,1,151,60,227,255,90,73,156,1,203,172,187,0,80,151,47,255,94,137,231,255,36,191,59,255,225,209,181,255,74,215,213,254,6,118,179,255,153,54,193,1,50,0,231,0,104,157,72,1,140,227,154,255,182,226,16,254,96,225,92,255,115,20,170,254,6,250,78,0,248,75,173,255,53,89,
6,255,0,180,118,0,72,173,1,0,64,8,206,1,174,133,223,0,185,62,133,255,214,11,98,0,197,31,208,0,171,167,244,255,22,231,181,1,150,218,185,0,247,169,97,1,165,139,247,255,47,120,149,1,103,248,51,0,60,69,28,254,25,179,196,0,124,7,218,254,58,107,81,0,184,233,156,255,252,74,36,0,118,188,67,0,141,95,53,255,222,94,165,254,46,61,53,0,206,59,115,255,47,236,250,255,74,5,32,1,129,154,238,255,106,32,226,0,121,187,61,255,3,166,241,254,67,170,172,255,29,216,178,255,23,201,252,0,253,110,243,0,200,125,57,0,109,192,
96,255,52,115,238,0,38,121,243,255,201,56,33,0,194,118,130,0,75,96,25,255,170,30,230,254,39,63,253,0,36,45,250,255,251,1,239,0,160,212,92,1,45,209,237,0,243,33,87,254,237,84,201,255,212,18,157,254,212,99,127,255,217,98,16,254,139,172,239,0,168,201,130,255,143,193,169,255,238,151,193,1,215,104,41,0,239,61,165,254,2,3,242,0,22,203,177,254,177,204,22,0,149,129,213,254,31,11,41,255,0,159,121,254,160,25,114,255,162,80,200,0,157,151,11,0,154,134,78,1,216,54,252,0,48,103,133,0,105,220,197,0,253,168,77,254,
53,179,23,0,24,121,240,1,255,46,96,255,107,60,135,254,98,205,249,255,63,249,119,255,120,59,211,255,114,180,55,254,91,85,237,0,149,212,77,1,56,73,49,0,86,198,150,0,93,209,160,0,69,205,182,255,244,90,43,0,20,36,176,0,122,116,221,0,51,167,39,1,231,1,63,255,13,197,134,0,3,209,34,255,135,59,202,0,167,100,78,0,47,223,76,0,185,60,62,0,178,166,123,1,132,12,161,255,61,174,43,0,195,69,144,0,127,47,191,1,34,44,78,0,57,234,52,1,255,22,40,255,246,94,146,0,83,228,128,0,60,78,224,255,0,96,210,255,153,175,236,0,
159,21,73,0,180,115,196,254,131,225,106,0,255,167,134,0,159,8,112,255,120,68,194,255,176,196,198,255,118,48,168,255,93,169,1,0,112,200,102,1,74,24,254,0,19,141,4,254,142,62,63,0,131,179,187,255,77,156,155,255,119,86,164,0,170,208,146,255,208,133,154,255,148,155,58,255,162,120,232,254,252,213,155,0,241,13,42,0,94,50,131,0,179,170,112,0,140,83,151,255,55,119,84,1,140,35,239,255,153,45,67,1,236,175,39,0,54,151,103,255,158,42,65,255,196,239,135,254,86,53,203,0,149,97,47,254,216,35,17,255,70,3,70,1,103,
36,90,255,40,26,173,0,184,48,13,0,163,219,217,255,81,6,1,255,221,170,108,254,233,208,93,0,100,201,249,254,86,36,35,255,209,154,30,1,227,201,251,255,2,189,167,254,100,57,3,0,13,128,41,0,197,100,75,0,150,204,235,255,145,174,59,0,120,248,149,255,85,55,225,0,114,210,53,254,199,204,119,0,14,247,74,1,63,251,129,0,67,104,151,1,135,130,80,0,79,89,55,255,117,230,157,255,25,96,143,0,213,145,5,0,69,241,120,1,149,243,95,255,114,42,20,0,131,72,2,0,154,53,20,255,73,62,109,0,196,102,152,0,41,12,204,255,122,38,11,
1,250,10,145,0,207,125,148,0,246,244,222,255,41,32,85,1,112,213,126,0,162,249,86,1,71,198,127,255,81,9,21,1,98,39,4,255,204,71,45,1,75,111,137,0,234,59,231,0,32,48,95,255,204,31,114,1,29,196,181,255,51,241,167,254,93,109,142,0,104,144,45,0,235,12,181,255,52,112,164,0,76,254,202,255,174,14,162,0,61,235,147,255,43,64,185,254,233,125,217,0,243,88,167,254,74,49,8,0,156,204,66,0,124,214,123,0,38,221,118,1,146,112,236,0,114,98,177,0,151,89,199,0,87,197,112,0,185,149,161,0,44,96,165,0,248,179,20,255,188,
219,216,254,40,62,13,0,243,142,141,0,229,227,206,255,172,202,35,255,117,176,225,255,82,110,38,1,42,245,14,255,20,83,97,0,49,171,10,0,242,119,120,0,25,232,61,0,212,240,147,255,4,115,56,255,145,17,239,254,202,17,251,255,249,18,245,255,99,117,239,0,184,4,179,255,246,237,51,255,37,239,137,255,166,112,166,255,81,188,33,255,185,250,142,255,54,187,173,0,208,112,201,0,246,43,228,1,104,184,88,255,212,52,196,255,51,117,108,255,254,117,155,0,46,91,15,255,87,14,144,255,87,227,204,0,83,26,83,1,159,76,227,0,159,
27,213,1,24,151,108,0,117,144,179,254,137,209,82,0,38,159,10,0,115,133,201,0,223,182,156,1,110,196,93,255,57,60,233,0,5,167,105,255,154,197,164,0,96,34,186,255,147,133,37,1,220,99,190,0,1,167,84,255,20,145,171,0,194,197,251,254,95,78,133,255,252,248,243,255,225,93,131,255,187,134,196,255,216,153,170,0,20,118,158,254,140,1,118,0,86,158,15,1,45,211,41,255,147,1,100,254,113,116,76,255,211,127,108,1,103,15,48,0,193,16,102,1,69,51,95,255,107,128,157,0,137,171,233,0,90,124,144,1,106,161,182,0,175,76,236,
1,200,141,172,255,163,58,104,0,233,180,52,255,240,253,14,255,162,113,254,255,38,239,138,254,52,46,166,0,241,101,33,254,131,186,156,0,111,208,62,255,124,94,160,255,31,172,254,0,112,174,56,255,188,99,27,255,67,138,251,0,125,58,128,1,156,152,174,255,178,12,247,255,252,84,158,0,82,197,14,254,172,200,83,255,37,39,46,1,106,207,167,0,24,189,34,0,131,178,144,0,206,213,4,0,161,226,210,0,72,51,105,255,97,45,187,255,78,184,223,255,176,29,251,0,79,160,86,255,116,37,178,0,82,77,213,1,82,84,141,255,226,101,212,
1,175,88,199,255,245,94,247,1,172,118,109,255,166,185,190,0,131,181,120,0,87,254,93,255,134,240,73,255,32,245,143,255,139,162,103,255,179,98,18,254,217,204,112,0,147,223,120,255,53,10,243,0,166,140,150,0,125,80,200,255,14,109,219,255,91,218,1,255,252,252,47,254,109,156,116,255,115,49,127,1,204,87,211,255,148,202,217,255,26,85,249,255,14,245,134,1,76,89,169,255,242,45,230,0,59,98,172,255,114,73,132,254,78,155,49,255,158,126,84,0,49,175,43,255,16,182,84,255,157,103,35,0,104,193,109,255,67,221,154,0,
201,172,1,254,8,162,88,0,165,1,29,255,125,155,229,255,30,154,220,1,103,239,92,0,220,1,109,255,202,198,1,0,94,2,142,1,36,54,44,0,235,226,158,255,170,251,214,255,185,77,9,0,97,74,242,0,219,163,149,255,240,35,118,255,223,114,88,254,192,199,3,0,106,37,24,255,201,161,118,255,97,89,99,1,224,58,103,255,101,199,147,254,222,60,99,0,234,25,59,1,52,135,27,0,102,3,91,254,168,216,235,0,229,232,136,0,104,60,129,0,46,168,238,0,39,191,67,0,75,163,47,0,143,97,98,255,56,216,168,1,168,233,252,255,35,111,22,255,92,84,
43,0,26,200,87,1,91,253,152,0,202,56,70,0,142,8,77,0,80,10,175,1,252,199,76,0,22,110,82,255,129,1,194,0,11,128,61,1,87,14,145,255,253,222,190,1,15,72,174,0,85,163,86,254,58,99,44,255,45,24,188,254,26,205,15,0,19,229,210,254,248,67,195,0,99,71,184,0,154,199,37,255,151,243,121,255,38,51,75,255,201,85,130,254,44,65,250,0,57,147,243,254,146,43,59,255,89,28,53,0,33,84,24,255,179,51,18,254,189,70,83,0,11,156,179,1,98,134,119,0,158,111,111,0,119,154,73,255,200,63,140,254,45,13,13,255,154,192,2,254,81,72,
42,0,46,160,185,254,44,112,6,0,146,215,149,1,26,176,104,0,68,28,87,1,236,50,153,255,179,128,250,254,206,193,191,255,166,92,137,254,53,40,239,0,210,1,204,254,168,173,35,0,141,243,45,1,36,50,109,255,15,242,194,255,227,159,122,255,176,175,202,254,70,57,72,0,40,223,56,0,208,162,58,255,183,98,93,0,15,111,12,0,30,8,76,255,132,127,246,255,45,242,103,0,69,181,15,255,10,209,30,0,3,179,121,0,241,232,218,1,123,199,88,255,2,210,202,1,188,130,81,255,94,101,208,1,103,36,45,0,76,193,24,1,95,26,241,255,165,162,187,
0,36,114,140,0,202,66,5,255,37,56,147,0,152,11,243,1,127,85,232,255,250,135,212,1,185,177,113,0,90,220,75,255,69,248,146,0,50,111,50,0,92,22,80,0,244,36,115,254,163,100,82,255,25,193,6,1,127,61,36,0,253,67,30,254,65,236,170,255,161,17,215,254,63,175,140,0,55,127,4,0,79,112,233,0,109,160,40,0,143,83,7,255,65,26,238,255,217,169,140,255,78,94,189,255,0,147,190,255,147,71,186,254,106,77,127,255,233,157,233,1,135,87,237,255,208,13,236,1,155,109,36,255],"i8",K,A.P+10240);
L([180,100,218,0,180,163,18,0,190,110,9,1,17,63,123,255,179,136,180,255,165,123,123,255,144,188,81,254,71,240,108,255,25,112,11,255,227,218,51,255,167,50,234,255,114,79,108,255,31,19,115,255,183,240,99,0,227,87,143,255,72,217,248,255,102,169,95,1,129,149,149,0,238,133,12,1,227,204,35,0,208,115,26,1,102,8,234,0,112,88,143,1,144,249,14,0,240,158,172,254,100,112,119,0,194,141,153,254,40,56,83,255,121,176,46,0,42,53,76,255,158,191,154,0,91,209,92,0,173,13,16,1,5,72,226,255,204,254,149,0,80,184,207,0,
100,9,122,254,118,101,171,255,252,203,0,254,160,207,54,0,56,72,249,1,56,140,13,255,10,64,107,254,91,101,52,255,225,181,248,1,139,255,132,0,230,145,17,0,233,56,23,0,119,1,241,255,213,169,151,255,99,99,9,254,185,15,191,255,173,103,109,1,174,13,251,255,178,88,7,254,27,59,68,255,10,33,2,255,248,97,59,0,26,30,146,1,176,147,10,0,95,121,207,1,188,88,24,0,185,94,254,254,115,55,201,0,24,50,70,0,120,53,6,0,142,66,146,0,228,226,249,255,104,192,222,1,173,68,219,0,162,184,36,255,143,102,137,255,157,11,23,0,125,
45,98,0,235,93,225,254,56,112,160,255,70,116,243,1,153,249,55,255,129,39,17,1,241,80,244,0,87,69,21,1,94,228,73,255,78,66,65,255,194,227,231,0,61,146,87,255,173,155,23,255,112,116,219,254,216,38,11,255,131,186,133,0,94,212,187,0,100,47,91,0,204,254,175,255,222,18,215,254,173,68,108,255,227,228,79,255,38,221,213,0,163,227,150,254,31,190,18,0,160,179,11,1,10,90,94,255,220,174,88,0,163,211,229,255,199,136,52,0,130,95,221,255,140,188,231,254,139,113,128,255,117,171,236,254,49,220,20,255,59,20,171,255,
228,109,188,0,20,225,32,254,195,16,174,0,227,254,136,1,135,39,105,0,150,77,206,255,210,238,226,0,55,212,132,254,239,57,124,0,170,194,93,255,249,16,247,255,24,151,62,255,10,151,10,0,79,139,178,255,120,242,202,0,26,219,213,0,62,125,35,255,144,2,108,255,230,33,83,255,81,45,216,1,224,62,17,0,214,217,125,0,98,153,153,255,179,176,106,254,131,93,138,255,109,62,36,255,178,121,32,255,120,252,70,0,220,248,37,0,204,88,103,1,128,220,251,255,236,227,7,1,106,49,198,255,60,56,107,0,99,114,238,0,220,204,94,1,73,
187,1,0,89,154,34,0,78,217,165,255,14,195,249,255,9,230,253,255,205,135,245,0,26,252,7,255,84,205,27,1,134,2,112,0,37,158,32,0,231,91,237,255,191,170,204,255,152,7,222,0,109,192,49,0,193,166,146,255,232,19,181,255,105,142,52,255,103,16,27,1,253,200,165,0,195,217,4,255,52,189,144,255,123,155,160,254,87,130,54,255,78,120,61,255,14,56,41,0,25,41,125,255,87,168,245,0,214,165,70,0,212,169,6,255,219,211,194,254,72,93,164,255,197,33,103,255,43,142,141,0,131,225,172,0,244,105,28,0,68,68,225,0,136,84,13,255,
130,57,40,254,139,77,56,0,84,150,53,0,54,95,157,0,144,13,177,254,95,115,186,0,117,23,118,255,244,166,241,255,11,186,135,0,178,106,203,255,97,218,93,0,43,253,45,0,164,152,4,0,139,118,239,0,96,1,24,254,235,153,211,255,168,110,20,255,50,239,176,0,114,41,232,0,193,250,53,0,254,160,111,254,136,122,41,255,97,108,67,0,215,152,23,255,140,209,212,0,42,189,163,0,202,42,50,255,106,106,189,255,190,68,217,255,233,58,117,0,229,220,243,1,197,3,4,0,37,120,54,254,4,156,134,255,36,61,171,254,165,136,100,255,212,232,
14,0,90,174,10,0,216,198,65,255,12,3,64,0,116,113,115,255,248,103,8,0,231,125,18,255,160,28,197,0,30,184,35,1,223,73,249,255,123,20,46,254,135,56,37,255,173,13,229,1,119,161,34,255,245,61,73,0,205,125,112,0,137,104,134,0,217,246,30,255,237,142,143,0,65,159,102,255,108,164,190,0,219,117,173,255,34,37,120,254,200,69,80,0,31,124,218,254,74,27,160,255,186,154,199,255,71,199,252,0,104,81,159,1,17,200,39,0,211,61,192,1,26,238,91,0,148,217,12,0,59,91,213,255,11,81,183,255,129,230,122,255,114,203,145,1,119,
180,66,255,72,138,180,0,224,149,106,0,119,82,104,255,208,140,43,0,98,9,182,255,205,101,134,255,18,101,38,0,95,197,166,255,203,241,147,0,62,208,145,255,133,246,251,0,2,169,14,0,13,247,184,0,142,7,254,0,36,200,23,255,88,205,223,0,91,129,52,255,21,186,30,0,143,228,210,1,247,234,248,255,230,69,31,254,176,186,135,255,238,205,52,1,139,79,43,0,17,176,217,254,32,243,67,0,242,111,233,0,44,35,9,255,227,114,81,1,4,71,12,255,38,105,191,0,7,117,50,255,81,79,16,0,63,68,65,255,157,36,110,255,77,241,3,255,226,45,
251,1,142,25,206,0,120,123,209,1,28,254,238,255,5,128,126,255,91,222,215,255,162,15,191,0,86,240,73,0,135,185,81,254,44,241,163,0,212,219,210,255,112,162,155,0,207,101,118,0,168,72,56,255,196,5,52,0,72,172,242,255,126,22,157,255,146,96,59,255,162,121,152,254,140,16,95,0,195,254,200,254,82,150,162,0,119,43,145,254,204,172,78,255,166,224,159,0,104,19,237,255,245,126,208,255,226,59,213,0,117,217,197,0,152,72,237,0,220,31,23,254,14,90,231,255,188,212,64,1,60,101,246,255,85,24,86,0,1,177,109,0,146,83,
32,1,75,182,192,0,119,241,224,0,185,237,27,255,184,101,82,1,235,37,77,255,253,134,19,0,232,246,122,0,60,106,179,0,195,11,12,0,109,66,235,1,125,113,59,0,61,40,164,0,175,104,240,0,2,47,187,255,50,12,141,0,194,139,181,255,135,250,104,0,97,92,222,255,217,149,201,255,203,241,118,255,79,151,67,0,122,142,218,255,149,245,239,0,138,42,200,254,80,37,97,255,124,112,167,255,36,138,87,255,130,29,147,255,241,87,78,255,204,97,19,1,177,209,22,255,247,227,127,254,99,119,83,255,212,25,198,1,16,179,179,0,145,77,172,
254,89,153,14,255,218,189,167,0,107,233,59,255,35,33,243,254,44,112,112,255,161,127,79,1,204,175,10,0,40,21,138,254,104,116,228,0,199,95,137,255,133,190,168,255,146,165,234,1,183,99,39,0,183,220,54,254,255,222,133,0,162,219,121,254,63,239,6,0,225,102,54,255,251,18,246,0,4,34,129,1,135,36,131,0,206,50,59,1,15,97,183,0,171,216,135,255,101,152,43,255,150,251,91,0,38,145,95,0,34,204,38,254,178,140,83,255,25,129,243,255,76,144,37,0,106,36,26,254,118,144,172,255,68,186,229,255,107,161,213,255,46,163,68,
255,149,170,253,0,187,17,15,0,218,160,165,255,171,35,246,1,96,13,19,0,165,203,117,0,214,107,192,255,244,123,177,1,100,3,104,0,178,242,97,255,251,76,130,255,211,77,42,1,250,79,70,255,63,244,80,1,105,101,246,0,61,136,58,1,238,91,213,0,14,59,98,255,167,84,77,0,17,132,46,254,57,175,197,255,185,62,184,0,76,64,207,0,172,175,208,254,175,74,37,0,138,27,211,254,148,125,194,0,10,89,81,0,168,203,101,255,43,213,209,1,235,245,54,0,30,35,226,255,9,126,70,0,226,125,94,254,156,117,20,255,57,248,112,1,230,48,64,255,
164,92,166,1,224,214,230,255,36,120,143,0,55,8,43,255,251,1,245,1,106,98,165,0,74,107,106,254,53,4,54,255,90,178,150,1,3,120,123,255,244,5,89,1,114,250,61,255,254,153,82,1,77,15,17,0,57,238,90,1,95,223,230,0,236,52,47,254,103,148,164,255,121,207,36,1,18,16,185,255,75,20,74,0,187,11,101,0,46,48,129,255,22,239,210,255,77,236,129,255,111,77,204,255,61,72,97,255,199,217,251,255,42,215,204,0,133,145,201,255,57,230,146,1,235,100,198,0,146,73,35,254,108,198,20,255,182,79,210,255,82,103,136,0,246,108,176,
0,34,17,60,255,19,74,114,254,168,170,78,255,157,239,20,255,149,41,168,0,58,121,28,0,79,179,134,255,231,121,135,255,174,209,98,255,243,122,190,0,171,166,205,0,212,116,48,0,29,108,66,255,162,222,182,1,14,119,21,0,213,39,249,255,254,223,228,255,183,165,198,0,133,190,48,0,124,208,109,255,119,175,85,255,9,209,121,1,48,171,189,255,195,71,134,1,136,219,51,255,182,91,141,254,49,159,72,0,35,118,245,255,112,186,227,255,59,137,31,0,137,44,163,0,114,103,60,254,8,213,150,0,162,10,113,255,194,104,72,0,220,131,
116,255,178,79,92,0,203,250,213,254,93,193,189,255,130,255,34,254,212,188,151,0,136,17,20,255,20,101,83,255,212,206,166,0,229,238,73,255,151,74,3,255,168,87,215,0,155,188,133,255,166,129,73,0,240,79,133,255,178,211,81,255,203,72,163,254,193,168,165,0,14,164,199,254,30,255,204,0,65,72,91,1,166,74,102,255,200,42,0,255,194,113,227,255,66,23,208,0,229,216,100,255,24,239,26,0,10,233,62,255,123,10,178,1,26,36,174,255,119,219,199,1,45,163,190,0,16,168,42,0,166,57,198,255,28,26,26,0,126,165,231,0,251,108,
100,255,61,229,121,255,58,118,138,0,76,207,17,0,13,34,112,254,89,16,168,0,37,208,105,255,35,201,215,255,40,106,101,254,6,239,114,0,40,103,226,254,246,127,110,255,63,167,58,0,132,240,142,0,5,158,88,255,129,73,158,255,94,89,146,0,230,54,146,0,8,45,173,0,79,169,1,0,115,186,247,0,84,64,131,0,67,224,253,255,207,189,64,0,154,28,81,1,45,184,54,255,87,212,224,255,0,96,73,255,129,33,235,1,52,66,80,255,251,174,155,255,4,179,37,0,234,164,93,254,93,175,253,0,198,69,87,255,224,106,46,0,99,29,210,0,62,188,114,
255,44,234,8,0,169,175,247,255,23,109,137,255,229,182,39,0,192,165,94,254,245,101,217,0,191,88,96,0,196,94,99,255,106,238,11,254,53,126,243,0,94,1,101,255,46,147,2,0,201,124,124,255,141,12,218,0,13,166,157,1,48,251,237,255,155,250,124,255,106,148,146,255,182,13,202,0,28,61,167,0,217,152,8,254,220,130,45,255,200,230,255,1,55,65,87,255,93,191,97,254,114,251,14,0,32,105,92,1,26,207,141,0,24,207,13,254,21,50,48,255,186,148,116,255,211,43,225,0,37,34,162,254,164,210,42,255,68,23,96,255,182,214,8,255,245,
117,137,255,66,195,50,0,75,12,83,254,80,140,164,0,9,165,36,1,228,110,227,0,241,17,90,1,25,52,212,0,6,223,12,255,139,243,57,0,12,113,75,1,246,183,191,255,213,191,69,255,230,15,142,0,1,195,196,255,138,171,47,255,64,63,106,1,16,169,214,255,207,174,56,1,88,73,133,255,182,133,140,0,177,14,25,255,147,184,53,255,10,227,161,255,120,216,244,255,73,77,233,0,157,238,139,1,59,65,233,0,70,251,216,1,41,184,153,255,32,203,112,0,146,147,253,0,87,101,109,1,44,82,133,255,244,150,53,255,94,152,232,255,59,93,39,255,
88,147,220,255,78,81,13,1,32,47,252,255,160,19,114,255,93,107,39,255,118,16,211,1,185,119,209,255,227,219,127,254,88,105,236,255,162,110,23,255,36,166,110,255,91,236,221,255,66,234,116,0,111,19,244,254,10,233,26,0,32,183,6,254,2,191,242,0,218,156,53,254,41,60,70,255,168,236,111,0,121,185,126,255,238,142,207,255,55,126,52,0,220,129,208,254,80,204,164,255,67,23,144,254,218,40,108,255,127,202,164,0,203,33,3,255,2,158,0,0,37,96,188,255,192,49,74,0,109,4,0,0,111,167,10,254,91,218,135,255,203,66,173,255,
150,194,226,0,201,253,6,255,174,102,121,0,205,191,110,0,53,194,4,0,81,40,45,254,35,102,143,255,12,108,198,255,16,27,232,255,252,71,186,1,176,110,114,0,142,3,117,1,113,77,142,0,19,156,197,1,92,47,252,0,53,232,22,1,54,18,235,0,46,35,189,255,236,212,129,0,2,96,208,254,200,238,199,255,59,175,164,255,146,43,231,0,194,217,52,255,3,223,12,0,138,54,178,254,85,235,207,0,232,207,34,0,49,52,50,255,166,113,89,255,10,45,216,255,62,173,28,0,111,165,246,0,118,115,91,255,128,84,60,0,167,144,203,0,87,13,243,0,22,
30,228,1,177,113,146,255,129,170,230,254,252,153,129,255,145,225,43,0,70,231,5,255,122,105,126,254,86,246,148,255,110,37,154,254,209,3,91,0,68,145,62,0,228,16,165,255,55,221,249,254,178,210,91,0,83,146,226,254,69,146,186,0,93,210,104,254,16,25,173,0,231,186,38,0,189,122,140,255,251,13,112,255,105,110,93,0,251,72,170,0,192,23,223,255,24,3,202,1,225,93,228,0,153,147,199,254,109,170,22,0,248,101,246,255,178,124,12,255,178,254,102,254,55,4,65,0,125,214,180,0,183,96,147,0,45,117,23,254,132,191,249,0,143,
176,203,254,136,183,54,255,146,234,177,0,146,101,86,255,44,123,143,1,33,209,152,0,192,90,41,254,83,15,125,255,213,172,82,0,215,169,144,0,16,13,34,0,32,209,100,255,84,18,249,1,197,17,236,255,217,186,230,0,49,160,176,255,111,118,97,255,237,104,235,0,79,59,92,254,69,249,11,255,35,172,74,1,19,118,68,0,222,124,165,255,180,66,35,255,86,174,246,0,43,74,111,255,126,144,86,255,228,234,91,0,242,213,24,254,69,44,235,255,220,180,35,0,8,248,7,255,102,47,92,255,240,205,102,255,113,230,171,1,31,185,201,255,194,
246,70,255,122,17,187,0,134,70,199,255,149,3,150,255,117,63,103,0,65,104,123,255,212,54,19,1,6,141,88,0,83,134,243,255,136,53,103,0,169,27,180,0,177,49,24,0,111,54,167,0,195,61,215,255,31,1,108,1,60,42,70,0,185,3,162,255,194,149,40,255,246,127,38,254,190,119,38,255,61,119,8,1,96,161,219,255,42,203,221,1,177,242,164,255,245,159,10,0,116,196,0,0,5,93,205,254,128,127,179,0,125,237,246,255,149,162,217,255,87,37,20,254,140,238,192,0,9,9,193,0,97,1,226,0,29,38,10,0,0,136,63,255,229,72,210,254,38,134,92,
255,78,218,208,1,104,36,84,255,12,5,193,255,242,175,61,255,191,169,46,1,179,147,147,255,113,190,139,254,125,172,31,0,3,75,252,254,215,36,15,0,193,27,24,1,255,69,149,255,110,129,118,0,203,93,249,0,138,137,64,254,38,70,6,0,153,116,222,0,161,74,123,0,193,99,79,255,118,59,94,255,61,12,43,1,146,177,157,0,46,147,191,0,16,255,38,0,11,51,31,1,60,58,98,255,111,194,77,1,154,91,244,0,140,40,144,1,173,10,251,0,203,209,50,254,108,130,78,0,228,180,90,0,174,7,250,0,31,174,60,0,41,171,30,0,116,99,82,255,118,193,
139,255,187,173,198,254,218,111,56,0,185,123,216,0,249,158,52,0,52,180,93,255,201,9,91,255,56,45,166,254,132,155,203,255,58,232,110,0,52,211,89,255,253,0,162,1,9,87,183,0,145,136,44,1,94,122,245,0,85,188,171,1,147,92,198,0,0,8,104,0,30,95,174,0,221,230,52,1,247,247,235,255,137,174,53,255,35,21,204,255,71,227,214,1,232,82,194,0,11,48,227,255,170,73,184,255,198,251,252,254,44,112,34,0,131,101,131,255,72,168,187,0,132,135,125,255,138,104,97,255,238,184,168,255,243,104,84,255,135,216,226,255,139,144,
237,0,188,137,150,1,80,56,140,255,86,169,167,255,194,78,25,255,220,17,180,255,17,13,193,0,117,137,212,255,141,224,151,0,49,244,175,0,193,99,175,255,19,99,154,1,255,65,62,255,156,210,55,255,242,244,3,255,250,14,149,0,158,88,217,255,157,207,134,254,251,232,28,0,46,156,251,255,171,56,184,255,239,51,234,0,142,138,131,255,25,254,243,1,10,201,194,0,63,97,75,0,210,239,162,0,192,200,31,1,117,214,243,0,24,71,222,254,54,40,232,255,76,183,111,254,144,14,87,255,214,79,136,255,216,196,212,0,132,27,140,254,131,
5,253,0,124,108,19,255,28,215,75,0,76,222,55,254,233,182,63,0,68,171,191,254,52,111,222,255,10,105,77,255,80,170,235,0,143,24,88,255,45,231,121,0,148,129,224,1,61,246,84,0,253,46,219,255,239,76,33,0,49,148,18,254,230,37,69,0,67,134,22,254,142,155,94,0,31,157,211,254,213,42,30,255,4,228,247,254,252,176,13,255,39,0,31,254,241,244,255,255,170,45,10,254,253,222,249,0,222,114,132,0,255,47,6,255,180,163,179,1,84,94,151,255,89,209,82,254,229,52,169,255,213,236,0,1,214,56,228,255,135,119,151,255,112,201,
193,0,83,160,53,254,6,151,66,0,18,162,17,0,233,97,91,0,131,5,78,1,181,120,53,255,117,95,63,255,237,117,185,0,191,126,136,255,144,119,233,0,183,57,97,1,47,201,187,255,167,165,119,1,45,100,126,0,21,98,6,254,145,150,95,255,120,54,152,0,209,98,104,0,143,111,30,254,184,148,249,0,235,216,46,0,248,202,148,255,57,95,22,0,242,225,163,0,233,247,232,255,71,171,19,255,103,244,49,255,84,103,93,255,68,121,244,1,82,224,13,0,41,79,43,255,249,206,167,255,215,52,21,254,192,32,22,255,247,111,60,0,101,74,38,255,22,91,
84,254,29,28,13,255,198,231,215,254,244,154,200,0,223,137,237,0,211,132,14,0,95,64,206,255,17,62,247,255,233,131,121,1,93,23,77,0,205,204,52,254,81,189,136,0,180,219,138,1,143,18,94,0,204,43,140,254,188,175,219,0,111,98,143,255,151,63,162,255,211,50,71,254,19,146,53,0,146,45,83,254,178,82,238,255,16,133,84,255,226,198,93,255,201,97,20,255,120,118,35,255,114,50,231,255,162,229,156,255,211,26,12,0,114,39,115,255,206,212,134,0,197,217,160,255,116,129,94,254,199,215,219,255,75,223,249,1,253,116,181,255,
232,215,104,255,228,130,246,255,185,117,86,0,14,5,8,0,239,29,61,1,237,87,133,255,125,146,137,254,204,168,223,0,46,168,245,0,154,105,22,0,220,212,161,255,107,69,24,255,137,218,181,255,241,84,198,255,130,122,211,255,141,8,153,255,190,177,118,0,96,89,178,0,255,16,48,254,122,96,105,255,117,54,232,255,34,126,105,255,204,67,166,0,232,52,138,255,211,147,12,0,25,54,7,0,44,15,215,254,51,236,45,0,190,68,129,1,106,147,225,0,28,93,45,254,236,141,15,255,17,61,161,0,220,115,192,0,236,145,24,254,111,168,169,0,224,
58,63,255,127,164,188,0,82,234,75,1,224,158,134,0,209,68,110,1,217,166,217,0,70,225,166,1,187,193,143,255,16,7,88,255,10,205,140,0,117,192,156,1,17,56,38,0,27,124,108,1,171,215,55,255,95,253,212,0,155,135,168,255,246,178,153,254,154,68,74,0,232,61,96,254,105,132,59,0,33,76,199,1,189,176,130,255,9,104,25,254,75,198,102,255,233,1,112,0,108,220,20,255,114,230,70,0,140,194,133,255,57,158,164,254,146,6,80,255,169,196,97,1,85,183,130,0,70,158,222,1,59,237,234,255,96,25,26,255,232,175,97,255,11,121,248,
254,88,35,194,0,219,180,252,254,74,8,227,0,195,227,73,1,184,110,161,255,49,233,164,1,128,53,47,0,82,14,121,255,193,190,58,0,48,174,117,255,132,23,32,0,40,10,134,1,22,51,25,255,240,11,176,255,110,57,146,0,117,143,239,1,157,101,118,255,54,84,76,0,205,184,18,255,47,4,72,255,78,112,85,255,193,50,66,1,93,16,52,255,8,105,134,0,12,109,72,255,58,156,251,0,144,35,204,0,44,160,117,254,50,107,194,0,1,68,165,255,111,110,162,0,158,83,40,254,76,214,234,0,58,216,205,255,171,96,147,255,40,227,114,1,176,227,241,0,
70,249,183,1,136,84,139,255,60,122,247,254,143,9,117,255,177,174,137,254,73,247,143,0,236,185,126,255,62,25,247,255,45,64,56,255,161,244,6,0,34,57,56,1,105,202,83,0,128,147,208,0,6,103,10,255,74,138,65,255,97,80,100,255,214,174,33,255,50,134,74,255,110,151,130,254,111,84,172,0,84,199,75,254,248,59,112,255,8,216,178,1,9,183,95,0,238,27,8,254,170,205,220,0,195,229,135,0,98,76,237,255,226,91,26,1,82,219,39,255,225,190,199,1,217,200,121,255,81,179,8,255,140,65,206,0,178,207,87,254,250,252,46,255,104,
89,110,1,253,189,158,255,144,214,158,255,160,245,54,255,53,183,92,1,21,200,194,255,146,33,113,1,209,1,255,0,235,106,43,255,167,52,232,0,157,229,221,0,51,30,25,0,250,221,27,1,65,147,87,255,79,123,196,0,65,196,223,255,76,44,17,1,85,241,68,0,202,183,249,255,65,212,212,255,9,33,154,1,71,59,80,0,175,194,59,255,141,72,9,0,100,160,244,0,230,208,56,0,59,25,75,254,80,194,194,0,18,3,200,254,160,159,115,0,132,143,247,1,111,93,57,255,58,237,11,1,134,222,135,255,122,163,108,1,123,43,190,255,251,189,206,254,80,
182,72,255,208,246,224,1,17,60,9,0,161,207,38,0,141,109,91,0,216,15,211,255,136,78,110,0,98,163,104,255,21,80,121,255,173,178,183,1,127,143,4,0,104,60,82,254,214,16,13,255,96,238,33,1,158,148,230,255,127,129,62,255,51,255,210,255,62,141,236,254,157,55,224,255,114,39,244,0,192,188,250,255,228,76,53,0,98,84,81,255,173,203,61,254,147,50,55,255,204,235,191,0,52,197,244,0,88,43,211,254,27,191,119,0,188,231,154,0,66,81,161,0,92,193,160,1,250,227,120,0,123,55,226,0,184,17,72,0,133,168,10,254,22,135,156,
255,41,25,103,255,48,202,58,0,186,149,81,255,188,134,239,0,235,181,189,254,217,139,188,255,74,48,82,0,46,218,229,0,189,253,251,0,50,229,12,255,211,141,191,1,128,244,25,255,169,231,122,254,86,47,189,255,132,183,23,255,37,178,150,255,51,137,253,0,200,78,31,0,22,105,50,0,130,60,0,0,132,163,91,254,23,231,187,0,192,79,239,0,157,102,164,255,192,82,20,1,24,181,103,255,240,9,234,0,1,123,164,255,133,233,0,255,202,242,242,0,60,186,245,0,241,16,199,255,224,116,158,254,191,125,91,255,224,86,207,0,121,37,231,
255,227,9,198,255,15,153,239,255,121,232,217,254,75,112,82,0,95,12,57,254,51,214,105,255,148,220,97,1,199,98,36,0,156,209,12,254,10,212,52,0,217,180,55,254,212,170,232,255,216,20,84,255,157,250,135,0,157,99,127,254,1,206,41,0,149,36,70,1,54,196,201,255,87,116,0,254,235,171,150,0,27,163,234,0,202,135,180,0,208,95,0,254,123,156,93,0,183,62,75,0,137,235,182,0,204,225,255,255,214,139,210,255,2,115,8,255,29,12,111,0,52,156,1,0,253,21,251,255,37,165,31,254,12,130,211,0,106,18,53,254,42,99,154,0,14,217,
61,254,216,11,92,255,200,197,112,254,147,38,199,0,36,252,120,254,107,169,77,0,1,123,159,255,207,75,102,0,163,175,196,0,44,1,240,0,120,186,176,254,13,98,76,255,237,124,241,255,232,146,188,255,200,96,224,0,204,31,41,0,208,200,13,0,21,225,96,255,175,156,196,0,247,208,126,0,62,184,244,254,2,171,81,0,85,115,158,0,54,64,45,255,19,138,114,0,135,71,205,0,227,47,147,1,218,231,66,0,253,209,28,0,244,15,173,255,6,15,118,254,16,150,208,255,185,22,50,255,86,112,207,255,75,113,215,1,63,146,43,255,4,225,19,254,227,
23,62,255,14,255,214,254,45,8,205,255,87,197,151,254,210,82,215,255,245,248,247,255,128,248,70,0,225,247,87,0,90,120,70,0,213,245,92,0,13,133,226,0,47,181,5,1,92,163,105,255,6,30,133,254,232,178,61,255,230,149,24,255,18,49,158,0,228,100,61,254,116,243,251,255,77,75,92,1,81,219,147,255,76,163,254,254,141,213,246,0,232,37,152,254,97,44,100,0,201,37,50,1,212,244,57,0,174,171,183,255,249,74,112,0,166,156,30,0,222,221,97,255,243,93,73,254,251,101,100,255,216,217,93,255,254,138,187,255,142,190,52,255,59,
203,177,255,200,94,52,0,115,114,158,255,165,152,104,1,126,99,226,255,118,157,244,1,107,200,16,0,193,90,229,0,121,6,88,0,156,32,93,254,125,241,211,255,14,237,157,255,165,154,21,255,184,224,22,255,250,24,152,255,113,77,31,0,247,171,23,255,237,177,204,255,52,137,145,255,194,182,114,0,224,234,149,0,10,111,103,1,201,129,4,0,238,142,78,0,52,6,40,255,110,213,165,254,60,207,253,0,62,215,69,0,96,97,0,255,49,45,202,0,120,121,22,255,235,139,48,1,198,45,34,255,182,50,27,1,131,210,91,255,46,54,128,0,175,123,105,
255,198,141,78,254,67,244,239,255,245,54,103,254,78,38,242,255,2,92,249,254,251,174,87,255,139,63,144,0,24,108,27,255,34,102,18,1,34,22,152,0,66,229,118,254,50,143,99,0,144,169,149,1,118,30,152,0,178,8,121,1,8,159,18,0,90,101,230,255,129,29,119,0,68,36,11,1,232,183,55,0,23,255,96,255,161,41,193,255,63,139,222,0,15,179,243,0,255,100,15,255,82,53,135,0,137,57,149,1,99,240,170,255,22,230,228,254,49,180,82,255,61,82,43,0,110,245,217,0,199,125,61,0,46,253,52,0,141,197,219,0,211,159,193,0,55,121,105,254,
183,20,129,0,169,119,170,255,203,178,139,255,135,40,182,255,172,13,202,255,65,178,148,0,8,207,43,0,122,53,127,1,74,161,48,0,227,214,128,254,86,11,243,255,100,86,7,1,245,68,134,255,61,43,21,1,152,84,94,255,190,60,250,254,239,118,232,255,214,136,37,1,113,76,107,255,93,104,100,1,144,206,23,255,110,150,154,1,228,103,185,0,218,49,50,254,135,77,139,255,185,1,78,0,0,161,148,255,97,29,233,255,207,148,149,255,160,168,0,0,91,128,171,255,6,28,19,254,11,111,247,0,39,187,150,255,138,232,149,0,117,62,68,255,63,
216,188,255,235,234,32,254,29,57,160,255,25,12,241,1,169,60,191,0,32,131,141,255,237,159,123,255,94,197,94,254,116,254,3,255,92,179,97,254,121,97,92,255,170,112,14,0,21,149,248,0,248,227,3,0,80,96,109,0,75,192,74,1,12,90,226,255,161,106,68,1,208,114,127,255,114,42,255,254,74,26,74,255,247,179,150,254,121,140,60,0,147,70,200,255,214,40,161,255,161,188,201,255,141,65,135,255,242,115,252,0,62,47,202,0,180,149,255,254,130,55,237,0,165,17,186,255,10,169,194,0,156,109,218,255,112,140,123,255,104,128,223,
254,177,142,108,255,121,37,219,255,128,77,18,255,111,108,23,1,91,192,75,0,174,245,22,255,4,236,62,255,43,64,153,1,227,173,254,0,237,122,132,1,127,89,186,255,142,82,128,254,252,84,174,0,90,179,177,1,243,214,87,255,103,60,162,255,208,130,14,255,11,130,139,0,206,129,219,255,94,217,157,255,239,230,230,255,116,115,159,254,164,107,95,0,51,218,2,1,216,125,198,255,140,202,128,254,11,95,68,255,55,9,93,254,174,153,6,255,204,172,96,0,69,160,110,0,213,38,49,254,27,80,213,0,118,125,114,0,70,70,67,255,15,142,73,
255,131,122,185,255,243,20,50,254,130,237,40,0,210,159,140,1,197,151,65,255,84,153,66,0,195,126,90,0,16,238,236,1,118,187,102,255,3,24,133,255,187,69,230,0,56,197,92,1,213,69,94,255,80,138,229,1,206,7,230,0,222,111,230,1,91,233,119,255,9,89,7,1,2,98,1,0,148,74,133,255,51,246,180,255,228,177,112,1,58,189,108,255,194,203,237,254,21,209,195,0,147,10,35,1,86,157,226,0,31,163,139,254,56,7,75,255,62,90,116,0,181,60,169,0,138,162,212,254,81,167,31,0,205,90,112,255,33,112,227,0,83,151,117,1,177,224,73,255,
174,144,217,255,230,204,79,255,22,77,232,255,114,78,234,0,224,57,126,254,9,49,141,0,242,147,165,1,104,182,140,255,167,132,12,1,123,68,127,0,225,87,39,1,251,108,8,0,198,193,143,1,121,135,207,255,172,22,70,0,50,68,116,255,101,175,40,255,248,105,233,0,166,203,7,0,110,197,218,0,215,254,26,254,168,226,253,0,31,143,96,0,11,103,41,0,183,129,203,254,100,247,74,255,213,126,132,0,210,147,44,0,199,234,27,1,148,47,181,0,155,91,158,1,54,105,175,255,2,78,145,254,102,154,95,0,128,207,127,254,52,124,236,255,130,
84,71,0,221,243,211,0,152,170,207,0,222,106,199,0,183,84,94,254,92,200,56,255,138,182,115,1,142,96,146,0,133,136,228,0,97,18,150,0,55,251,66,0,140,102,4,0,202,103,151,0,30,19,248,255,51,184,207,0,202,198,89,0,55,197,225,254,169,95,249,255,66,65,68,255,188,234,126,0,166,223,100,1,112,239,244,0,144,23,194,0,58,39,182,0,244,44,24,254,175,68,179,255,152,118,154,1,176,162,130,0,217,114,204,254,173,126,78,255,33,222,30,255,36,2,91,255,2,143,243,0,9,235,215,0,3,171,151,1,24,215,245,255,168,47,164,254,241,
146,207,0,69,129,180,0,68,243,113,0,144,53,72,254,251,45,14,0,23,110,168,0,68,68,79,255,110,70,95,254,174,91,144,255,33,206,95,255,137,41,7,255,19,187,153,254,35,255,112,255,9,145,185,254,50,157,37,0,11,112,49,1,102,8,190,255,234,243,169,1,60,85,23,0,74,39,189,0,116,49,239,0,173,213,210,0,46,161,108,255,159,150,37,0,196,120,185,255,34,98,6,255,153,195,62,255,97,230,71,255,102,61,76,0,26,212,236,255,164,97,16,0,198,59,146,0,163,23,196,0,56,24,61,0,181,98,193,0,251,147,229,255,98,189,24,255,46,54,206,
255,234,82,246,0,183,103,38,1,109,62,204,0,10,240,224,0,146,22,117,255,142,154,120,0,69,212,35,0,208,99,118,1,121,255,3,255,72,6,194,0,117,17,197,255,125,15,23,0,154,79,153,0,214,94,197,255,185,55,147,255,62,254,78,254,127,82,153,0,110,102,63,255,108,82,161,255,105,187,212,1,80,138,39,0,60,255,93,255,72,12,186,0,210,251,31,1,190,167,144,255,228,44,19,254,128,67,232,0,214,249,107,254,136,145,86,255,132,46,176,0,189,187,227,255,208,22,140,0,217,211,116,0,50,81,186,254,139,250,31,0,30,64,198,1,135,155,
100,0,160,206,23,254,187,162,211,255,16,188,63,0,254,208,49,0,85,84,191,0,241,192,242,255,153,126,145,1,234,162,162,255,230,97,216,1,64,135,126,0,190,148,223,1,52,0,43,255,28,39,189,1,64,136,238,0,175,196,185,0,98,226,213,255,127,159,244,1,226,175,60,0,160,233,142,1,180,243,207,255,69,152,89,1,31,101,21,0,144,25,164,254,139,191,209,0,91,25,121,0,32,147,5,0,39,186,123,255,63,115,230,255,93,167,198,255,143,213,220,255,179,156,19,255,25,66,122,0,214,160,217,255,2,45,62,255,106,79,146,254,51,137,99,255,
87,100,231,255,175,145,232,255,101,184,1,255,174,9,125,0,82,37,161,1,36,114,141,255,48,222,142,255,245,186,154,0,5,174,221,254,63,114,155,255,135,55,160,1,80,31,135,0,126,250,179,1,236,218,45,0,20,28,145,1,16,147,73,0,249,189,132,1,17,189,192,255,223,142,198,255,72,20,15,255,250,53,237,254,15,11,18,0,27,211,113,254,213,107,56,255,174,147,146,255,96,126,48,0,23,193,109,1,37,162,94,0,199,157,249,254,24,128,187,255,205,49,178,254,93,164,42,255,43,119,235,1,88,183,237,255,218,210,1,255,107,254,42,0,230,
10,99,255,162,0,226,0,219,237,91,0,129,178,203,0,208,50,95,254,206,208,95,255,247,191,89,254,110,234,79,255,165,61,243,0,20,122,112,255,246,246,185,254,103,4,123,0,233,99,230,1,219,91,252,255,199,222,22,255,179,245,233,255,211,241,234,0,111,250,192,255,85,84,136,0,101,58,50,255,131,173,156,254,119,45,51,255,118,233,16,254,242,90,214,0,94,159,219,1,3,3,234,255,98,76,92,254,80,54,230,0,5,228,231,254,53,24,223,255,113,56,118,1,20,132,1,255,171,210,236,0,56,241,158,255,186,115,19,255,8,229,174,0,48,44,
0,1,114,114,166,255,6,73,226,255,205,89,244,0,137,227,75,1,248,173,56,0,74,120,246,254,119,3,11,255,81,120,198,255,136,122,98,255,146,241,221,1,109,194,78,255,223,241,70,1,214,200,169,255,97,190,47,255,47,103,174,255,99,92,72,254,118,233,180,255,193,35,233,254,26,229,32,255,222,252,198,0,204,43,71,255,199,84,172,0,134,102,190,0,111,238,97,254,230,40,230,0,227,205,64,254,200,12,225,0,166,25,222,0,113,69,51,255,143,159,24,0,167,184,74,0,29,224,116,254,158,208,233,0,193,116,126,255,212,11,133,255,22,
58,140,1,204,36,51,255,232,30,43,0,235,70,181,255,64,56,146,254,169,18,84,255,226,1,13,255,200,50,176,255,52,213,245,254,168,209,97,0,191,71,55,0,34,78,156,0,232,144,58,1,185,74,189,0,186,142,149,254,64,69,127,255,161,203,147,255,176,151,191,0,136,231,203,254,163,182,137,0,161,126,251,254,233,32,66,0,68,207,66,0,30,28,37,0,93,114,96,1,254,92,247,255,44,171,69,0,202,119,11,255,188,118,50,1,255,83,136,255,71,82,26,0,70,227,2,0,32,235,121,1,181,41,154,0,71,134,229,254,202,255,36,0,41,152,5,0,154,63,
73,255,34,182,124,0,121,221,150,255,26,204,213,1,41,172,87,0,90,157,146,255,109,130,20,0,71,107,200,255,243,102,189,0,1,195,145,254,46,88,117,0,8,206,227,0,191,110,253,255,109,128,20,254,134,85,51,255,137,177,112,1,216,34,22,255,131,16,208,255,121,149,170,0,114,19,23,1,166,80,31,255,113,240,122,0,232,179,250,0,68,110,180,254,210,170,119,0,223,108,164,255,207,79,233,255,27,229,226,254,209,98,81,255,79,68,7,0,131,185,100,0,170,29,162,255,17,162,107,255,57,21,11,1,100,200,181,255,127,65,166,1,165,134,
204,0,104,167,168,0,1,164,79,0,146,135,59,1,70,50,128,255,102,119,13,254,227,6,135,0,162,142,179,255,160,100,222,0,27,224,219,1,158,93,195,255,234,141,137,0,16,24,125,255,238,206,47,255,97,17,98,255,116,110,12,255,96,115,77,0,91,227,232,255,248,254,79,255,92,229,6,254,88,198,139,0,206,75,129,0,250,77,206,255,141,244,123,1,138,69,220,0,32,151,6,1,131,167,22,255,237,68,167,254,199,189,150,0,163,171,138,255,51,188,6,255,95,29,137,254,148,226,179,0,181,107,208,255,134,31,82,255,151,101,45,255,129,202,
225,0,224,72,147,0,48,138,151,255,195,64,206,254,237,218,158,0,106,29,137,254,253,189,233,255,103,15,17,255,194,97,255,0,178,45,169,254,198,225,155,0,39,48,117,255,135,106,115,0,97,38,181,0,150,47,65,255,83,130,229,254,246,38,129,0,92,239,154,254,91,99,127,0,161,111,33,255,238,217,242,255,131,185,195,255,213,191,158,255,41,150,218,0,132,169,131,0,89,84,252,1,171,70,128,255,163,248,203,254,1,50,180,255,124,76,85,1,251,111,80,0,99,66,239,255,154,237,182,255,221,126,133,254,74,204,99,255,65,147,119,
255,99,56,167,255,79,248,149,255,116,155,228,255,237,43,14,254,69,137,11,255,22,250,241,1,91,122,143,255,205,249,243,0,212,26,60,255,48,182,176,1,48,23,191,255,203,121,152,254,45,74,213,255,62,90,18,254,245,163,230,255,185,106,116,255,83,35,159,0,12,33,2,255,80,34,62,0,16,87,174,255,173,101,85,0,202,36,81,254,160,69,204,255,64,225,187,0,58,206,94,0,86,144,47,0,229,86,245,0,63,145,190,1,37,5,39,0,109,251,26,0,137,147,234,0,162,121,145,255,144,116,206,255,197,232,185,255,183,190,140,255,73,12,254,255,
139,20,242,255,170,90,239,255,97,66,187,255,245,181,135,254,222,136,52,0,245,5,51,254,203,47,78,0,152,101,216,0,73,23,125,0,254,96,33,1,235,210,73,255,43,209,88,1,7,129,109,0,122,104,228,254,170,242,203,0,242,204,135,255,202,28,233,255,65,6,127,0,159,144,71,0,100,140,95,0,78,150,13,0,251,107,118,1,182,58,125,255,1,38,108,255,141,189,209,255,8,155,125,1,113,163,91,255,121,79,190,255,134,239,108,255,76,47,248,0,163,228,239,0,17,111,10,0,88,149,75,255,215,235,239,0,167,159,24,255,47,151,108,255,107,
209,188,0,233,231,99,254,28,202,148,255,174,35,138,255,110,24,68,255,2,69,181,0,107,102,82,0,102,237,7,0,92,36,237,255,221,162,83,1,55,202,6,255,135,234,135,255,24,250,222,0,65,94,168,254,245,248,210,255,167,108,201,254,255,161,111,0,205,8,254,0,136,13,116,0,100,176,132,255,43,215,126,255,177,133,130,255,158,79,148,0,67,224,37,1,12,206,21,255,62,34,110,1,237,104,175,255,80,132,111,255,142,174,72,0,84,229,180,254,105,179,140,0,64,248,15,255,233,138,16,0,245,67,123,254,218,121,212,255,63,95,218,1,213,
133,137,255,143,182,82,255,48,28,11,0,244,114,141,1,209,175,76,255,157,181,150,255,186,229,3,255,164,157,111,1,231,189,139,0,119,202,190,255,218,106,64,255,68,235,63,254,96,26,172,255,187,47,11,1,215,18,251,255,81,84,89,0,68,58,128,0,94,113,5,1,92,129,208,255,97,15,83,254,9,28,188,0,239,9,164,0,60,205,152,0,192,163,98,255,184,18,60,0,217,182,139,0,109,59,120,255,4,192,251,0,169,210,240,255,37,172,92,254,148,211,245,255,179,65,52,0,253,13,115,0,185,174,206,1,114,188,149,255,237,90,173,0,43,199,192,
255,88,108,113,0,52,35,76,0,66,25,148,255,221,4,7,255,151,241,114,255,190,209,232,0,98,50,199,0,151,150,213,255,18,74,36,1,53,40,7,0,19,135,65,255,26,172,69,0,174,237,85,0,99,95,41,0,3,56,16,0,39,160,177,255,200,106,218,254,185,68,84,255,91,186,61,254,67,143,141,255,13,244,166,255,99,114,198,0,199,110,163,255,193,18,186,0,124,239,246,1,110,68,22,0,2,235,46,1,212,60,107,0,105,42,105,1,14,230,152,0,7,5,131,0,141,104,154,255,213,3,6,0,131,228,162,255,179,100,28,1,231,123,85,255,206,14,223,1,253,96,230,
0,38,152,149,1,98,137,122,0,214,205,3,255,226,152,179,255,6,133,137,0,158,69,140,255,113,162,154,255,180,243,172,255,27,189,115,255,143,46,220,255,213,134,225,255,126,29,69,0,188,43,137,1,242,70,9,0,90,204,255,255,231,170,147,0,23,56,19,254,56,125,157,255,48,179,218,255,79,182,253,255,38,212,191,1,41,235,124,0,96,151,28,0,135,148,190,0,205,249,39,254,52,96,136,255,212,44,136,255,67,209,131,255,252,130,23,255,219,128,20,255,198,129,118,0,108,101,11,0,178,5,146,1,62,7,100,255,181,236,94,254,28,26,164,
0,76,22,112,255,120,102,79,0,202,192,229,1,200,176,215,0,41,64,244,255,206,184,78,0,167,45,63,1,160,35,0,255,59,12,142,255,204,9,144,255,219,94,229,1,122,27,112,0,189,105,109,255,64,208,74,255,251,127,55,1,2,226,198,0,44,76,209,0,151,152,77,255,210,23,46,1,201,171,69,255,44,211,231,0,190,37,224,255,245,196,62,255,169,181,222,255,34,211,17,0,119,241,197,255,229,35,152,1,21,69,40,255,178,226,161,0,148,179,193,0,219,194,254,1,40,206,51,255,231,92,250,1,67,153,170,0,21,148,241,0,170,69,82,255,121,18,
231,255,92,114,3,0,184,62,230,0,225,201,87,255,146,96,162,255,181,242,220,0,173,187,221,1,226,62,170,255,56,126,217,1,117,13,227,255,179,44,239,0,157,141,155,255,144,221,83,0,235,209,208,0,42,17,165,1,251,81,133,0,124,245,201,254,97,211,24,255,83,214,166,0,154,36,9,255,248,47,127,0,90,219,140,255,161,217,38,254,212,147,63,255,66,84,148,1,207,3,1,0,230,134,89,1,127,78,122,255,224,155,1,255,82,136,74,0,178,156,208,255,186,25,49,255,222,3,210,1,229,150,190,255,85,162,52,255,41,84,141,255,73,123,84,254,
93,17,150,0,119,19,28,1,32,22,215,255,28,23,204,255,142,241,52,255,228,52,125,0,29,76,207,0,215,167,250,254,175,164,230,0,55,207,105,1,109,187,245,255,161,44,220,1,41,101,128,255,167,16,94,0,93,214,107,255,118,72,0,254,80,61,234,255,121,175,125,0,139,169,251,0,97,39,147,254,250,196,49,255,165,179,110,254,223,70,187,255,22,142,125,1,154,179,138,255,118,176,42,1,10,174,153,0,156,92,102,0,168,13,161,255,143,16,32,0,250,197,180,255,203,163,44,1,87,32,36,0,161,153,20,255,123,252,15,0,25,227,80,0,60,88,
142,0,17,22,201,1,154,205,77,255,39,63,47,0,8,122,141,0,128,23,182,254,204,39,19,255,4,112,29,255,23,36,140,255,210,234,116,254,53,50,63,255,121,171,104,255,160,219,94,0,87,82,14,254,231,42,5,0,165,139,127,254,86,78,38,0,130,60,66,254,203,30,45,255,46,196,122,1,249,53,162,255,136,143,103,254,215,210,114,0,231,7,160,254,169,152,42,255,111,45,246,0,142,131,135,255,131,71,204,255,36,226,11,0,0,28,242,255,225,138,213,255,247,46,216,254,245,3,183,0,108,252,74,1,206,26,48,255,205,54,246,255,211,198,36,
255,121,35,50,0,52,216,202,255,38,139,129,254,242,73,148,0,67,231,141,255,42,47,204,0,78,116,25,1,4,225,191,255,6,147,228,0,58,88,177,0,122,165,229,255,252,83,201,255,224,167,96,1,177,184,158,255,242,105,179,1,248,198,240,0,133,66,203,1,254,36,47,0,45,24,115,255,119,62,254,0,196,225,186,254,123,141,172,0,26,85,41,255,226,111,183,0,213,231,151,0,4,59,7,255,238,138,148,0,66,147,33,255,31,246,141,255,209,141,116,255,104,112,31,0,88,161,172,0,83,215,230,254,47,111,151,0,45,38,52,1,132,45,204,0,138,128,
109,254,233,117,134,255,243,190,173,254,241,236,240,0,82,127,236,254,40,223,161,255,110,182,225,255,123,174,239,0,135,242,145,1,51,209,154,0,150,3,115,254,217,164,252,255,55,156,69,1,84,94,255,255,232,73,45,1,20,19,212,255,96,197,59,254,96,251,33,0,38,199,73,1,64,172,247,255,117,116,56,255,228,17,18,0,62,138,103,1,246,229,164,255,244,118,201,254,86,32,159,255,109,34,137,1,85,211,186,0,10,193,193,254,122,194,177,0,122,238,102,255,162,218,171,0,108,217,161,1,158,170,34,0,176,47,155,1,181,228,11,255,
8,156,0,0,16,75,93,0,206,98,255,1,58,154,35,0,12,243,184,254,67,117,66,255,230,229,123,0,201,42,110,0,134,228,178,254,186,108,118,255,58,19,154,255,82,169,62,255,114,143,115,1,239,196,50,255,173,48,193,255,147,2,84,255,150,134,147,254,95,232,73,0,109,227,52,254,191,137,10,0,40,204,30,254,76,52,97,255,164,235,126,0,254,124,188,0,74,182,21,1,121,29,35,255,241,30,7,254,85,218,214,255,7,84,150,254,81,27,117,255,160,159,152,254,66,24,221,255,227,10,60,1,141,135,102,0,208,189,150,1,117,179,92,0,132,22,
136,255,120,199,28,0,21,129,79,254,182,9,65,0,218,163,169,0,246,147,198,255,107,38,144,1,78,175,205,255],"i8",K,A.P+20480);
L([214,5,250,254,47,88,29,255,164,47,204,255,43,55,6,255,131,134,207,254,116,100,214,0,96,140,75,1,106,220,144,0,195,32,28,1,172,81,5,255,199,179,52,255,37,84,203,0,170,112,174,0,11,4,91,0,69,244,27,1,117,131,92,0,33,152,175,255,140,153,107,255,251,135,43,254,87,138,4,255,198,234,147,254,121,152,84,255,205,101,155,1,157,9,25,0,72,106,17,254,108,153,0,255,189,229,186,0,193,8,176,255,174,149,209,0,238,130,29,0,233,214,126,1,61,226,102,0,57,163,4,1,198,111,51,255,45,79,78,1,115,210,10,255,218,9,25,255,
158,139,198,255,211,82,187,254,80,133,83,0,157,129,230,1,243,133,134,255,40,136,16,0,77,107,79,255,183,85,92,1,177,204,202,0,163,71,147,255,152,69,190,0,172,51,188,1,250,210,172,255,211,242,113,1,89,89,26,255,64,66,111,254,116,152,42,0,161,39,27,255,54,80,254,0,106,209,115,1,103,124,97,0,221,230,98,255,31,231,6,0,178,192,120,254,15,217,203,255,124,158,79,0,112,145,247,0,92,250,48,1,163,181,193,255,37,47,142,254,144,189,165,255,46,146,240,0,6,75,128,0,41,157,200,254,87,121,213,0,1,113,236,0,5,45,250,
0,144,12,82,0,31,108,231,0,225,239,119,255,167,7,189,255,187,228,132,255,110,189,34,0,94,44,204,1,162,52,197,0,78,188,241,254,57,20,141,0,244,146,47,1,206,100,51,0,125,107,148,254,27,195,77,0,152,253,90,1,7,143,144,255,51,37,31,0,34,119,38,255,7,197,118,0,153,188,211,0,151,20,116,254,245,65,52,255,180,253,110,1,47,177,209,0,161,99,17,255,118,222,202,0,125,179,252,1,123,54,126,255,145,57,191,0,55,186,121,0,10,243,138,0,205,211,229,255,125,156,241,254,148,156,185,255,227,19,188,255,124,41,32,255,31,
34,206,254,17,57,83,0,204,22,37,255,42,96,98,0,119,102,184,1,3,190,28,0,110,82,218,255,200,204,192,255,201,145,118,0,117,204,146,0,132,32,98,1,192,194,121,0,106,161,248,1,237,88,124,0,23,212,26,0,205,171,90,255,248,48,216,1,141,37,230,255,124,203,0,254,158,168,30,255,214,248,21,0,112,187,7,255,75,133,239,255,74,227,243,255,250,147,70,0,214,120,162,0,167,9,179,255,22,158,18,0,218,77,209,1,97,109,81,255,244,33,179,255,57,52,57,255,65,172,210,255,249,71,209,255,142,169,238,0,158,189,153,255,174,254,
103,254,98,33,14,0,141,76,230,255,113,139,52,255,15,58,212,0,168,215,201,255,248,204,215,1,223,68,160,255,57,154,183,254,47,231,121,0,106,166,137,0,81,136,138,0,165,43,51,0,231,139,61,0,57,95,59,254,118,98,25,255,151,63,236,1,94,190,250,255,169,185,114,1,5,250,58,255,75,105,97,1,215,223,134,0,113,99,163,1,128,62,112,0,99,106,147,0,163,195,10,0,33,205,182,0,214,14,174,255,129,38,231,255,53,182,223,0,98,42,159,255,247,13,40,0,188,210,177,1,6,21,0,255,255,61,148,254,137,45,129,255,89,26,116,254,126,
38,114,0,251,50,242,254,121,134,128,255,204,249,167,254,165,235,215,0,202,177,243,0,133,141,62,0,240,130,190,1,110,175,255,0,0,20,146,1,37,210,121,255,7,39,130,0,142,250,84,255,141,200,207,0,9,95,104,255,11,244,174,0,134,232,126,0,167,1,123,254,16,193,149,255,232,233,239,1,213,70,112,255,252,116,160,254,242,222,220,255,205,85,227,0,7,185,58,0,118,247,63,1,116,77,177,255,62,245,200,254,63,18,37,255,107,53,232,254,50,221,211,0,162,219,7,254,2,94,43,0,182,62,182,254,160,78,200,255,135,140,170,0,235,
184,228,0,175,53,138,254,80,58,77,255,152,201,2,1,63,196,34,0,5,30,184,0,171,176,154,0,121,59,206,0,38,99,39,0,172,80,77,254,0,134,151,0,186,33,241,254,94,253,223,255,44,114,252,0,108,126,57,255,201,40,13,255,39,229,27,255,39,239,23,1,151,121,51,255,153,150,248,0,10,234,174,255,118,246,4,254,200,245,38,0,69,161,242,1,16,178,150,0,113,56,130,0,171,31,105,0,26,88,108,255,49,42,106,0,251,169,66,0,69,93,149,0,20,57,254,0,164,25,111,0,90,188,90,255,204,4,197,0,40,213,50,1,212,96,132,255,88,138,180,254,
228,146,124,255,184,246,247,0,65,117,86,255,253,102,210,254,254,121,36,0,137,115,3,255,60,24,216,0,134,18,29,0,59,226,97,0,176,142,71,0,7,209,161,0,189,84,51,254,155,250,72,0,213,84,235,255,45,222,224,0,238,148,143,255,170,42,53,255,78,167,117,0,186,0,40,255,125,177,103,255,69,225,66,0,227,7,88,1,75,172,6,0,169,45,227,1,16,36,70,255,50,2,9,255,139,193,22,0,143,183,231,254,218,69,50,0,236,56,161,1,213,131,42,0,138,145,44,254,136,229,40,255,49,63,35,255,61,145,245,255,101,192,2,254,232,167,113,0,152,
104,38,1,121,185,218,0,121,139,211,254,119,240,35,0,65,189,217,254,187,179,162,255,160,187,230,0,62,248,14,255,60,78,97,0,255,247,163,255,225,59,91,255,107,71,58,255,241,47,33,1,50,117,236,0,219,177,63,254,244,90,179,0,35,194,215,255,189,67,50,255,23,135,129,0,104,189,37,255,185,57,194,0,35,62,231,255,220,248,108,0,12,231,178,0,143,80,91,1,131,93,101,255,144,39,2,1,255,250,178,0,5,17,236,254,139,32,46,0,204,188,38,254,245,115,52,255,191,113,73,254,191,108,69,255,22,69,245,1,23,203,178,0,170,99,170,
0,65,248,111,0,37,108,153,255,64,37,69,0,0,88,62,254,89,148,144,255,191,68,224,1,241,39,53,0,41,203,237,255,145,126,194,255,221,42,253,255,25,99,151,0,97,253,223,1,74,115,49,255,6,175,72,255,59,176,203,0,124,183,249,1,228,228,99,0,129,12,207,254,168,192,195,255,204,176,16,254,152,234,171,0,77,37,85,255,33,120,135,255,142,194,227,1,31,214,58,0,213,187,125,255,232,46,60,255,190,116,42,254,151,178,19,255,51,62,237,254,204,236,193,0,194,232,60,0,172,34,157,255,189,16,184,254,103,3,95,255,141,233,36,254,
41,25,11,255,21,195,166,0,118,245,45,0,67,213,149,255,159,12,18,255,187,164,227,1,160,25,5,0,12,78,195,1,43,197,225,0,48,142,41,254,196,155,60,255,223,199,18,1,145,136,156,0,252,117,169,254,145,226,238,0,239,23,107,0,109,181,188,255,230,112,49,254,73,170,237,255,231,183,227,255,80,220,20,0,194,107,127,1,127,205,101,0,46,52,197,1,210,171,36,255,88,3,90,255,56,151,141,0,96,187,255,255,42,78,200,0,254,70,70,1,244,125,168,0,204,68,138,1,124,215,70,0,102,66,200,254,17,52,228,0,117,220,143,254,203,248,
123,0,56,18,174,255,186,151,164,255,51,232,208,1,160,228,43,255,249,29,25,1,68,190,63,0,0,0,0,0,0,0,0,0,123,32,114,101,116,117,114,110,32,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,40,41,59,32,125,0,0,0,0,0,123,32,105,102,32,40,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,32,61,61,61,32,117,110,100,101,102,105,110,101,100,41,32,123,32,116,114,121,32,123,32,118,97,114,32,114,97,110,100,111,109,86,97,108,117,101,115,83,116,97,110,100,
97,114,100,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,118,97,114,32,98,117,102,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,49,41,59,32,119,105,110,100,111,119,46,99,114,121,112,116,111,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,115,40,98,117,102,41,59,32,114,101,116,117,114,110,32,98,117,102,91,48,93,32,62,62,62,32,48,59,32,125,59,32,114,97,110,100,111,109,86,97,108,117,101,115,83,116,97,110,100,97,114,100,40,41,59,32,77,111,100,117,108,101,46,103,101,
116,82,97,110,100,111,109,86,97,108,117,101,32,61,32,114,97,110,100,111,109,86,97,108,117,101,115,83,116,97,110,100,97,114,100,59,32,125,32,99,97,116,99,104,32,40,101,41,32,123,32,116,114,121,32,123,32,118,97,114,32,99,114,121,112,116,111,32,61,32,114,101,113,117,105,114,101,40,39,99,114,121,112,116,111,39,41,59,32,118,97,114,32,114,97,110,100,111,109,86,97,108,117,101,73,79,74,83,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,118,97,114,32,98,117,102,32,61,32,99,114,121,112,116,111,46,114,
97,110,100,111,109,66,121,116,101,115,40,52,41,59,32,114,101,116,117,114,110,32,40,98,117,102,91,48,93,32,60,60,32,50,52,32,124,32,98,117,102,91,49,93,32,60,60,32,49,54,32,124,32,98,117,102,91,50,93,32,60,60,32,56,32,124,32,98,117,102,91,51,93,41,32,62,62,62,32,48,59,32,125,59,32,114,97,110,100,111,109,86,97,108,117,101,73,79,74,83,40,41,59,32,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,32,61,32,114,97,110,100,111,109,86,97,108,117,101,73,79,74,83,59,32,125,32,99,
97,116,99,104,32,40,101,41,32,123,32,116,104,114,111,119,32,39,78,111,32,115,101,99,117,114,101,32,114,97,110,100,111,109,32,110,117,109,98,101,114,32,103,101,110,101,114,97,116,111,114,32,102,111,117,110,100,39,59,32,125,32,125,32,125,32,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,46,48,46,50,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",K,A.P+30720);
var db=A.X(L(12,"i8",za),8);u(0==db%8);s._bitshift64Ashr=eb;s._i64Subtract=fb;s._i64Add=gb;s._memset=hb;s._bitshift64Lshr=ib;s._bitshift64Shl=jb;s._strlen=kb;s._memcpy=lb;var mb=0;function nb(a){return J[mb>>2]=a}function ob(a){ob.Ia||(E=E+4095&-4096,ob.Ia=j,u(A.R),ob.Fa=A.R,A.R=function(){C("cannot dynamically allocate, sbrk now has control")});var b=E;0!=a&&ob.Fa(a);return b}s._memmove=pb;mb=A.za(4);J[mb>>2]=0;La=v=A.X(D);Ma=La+Oa;Na=E=A.X(Ma);u(Na<F,"TOTAL_MEMORY not big enough for stack");
var qb=L([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,
1,0,3,0,1,0,2,0,1,0],"i8",3);s.Ga={Math:Math,Int8Array:Int8Array,Int16Array:Int16Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array,NaN:NaN,Infinity:Infinity};
s.Ha={abort:C,assert:u,jsCall:function(){var a=Array.prototype.slice.call(arguments);return A.M[a[0]].apply(l,a.slice(1))},invoke_i:function(a){try{return s.dynCall_i(a)}catch(b){"number"!==typeof b&&"longjmp"!==b&&d(b),S.setThrew(1,0)}},invoke_ii:function(a,b){try{return s.dynCall_ii(a,b)}catch(c){"number"!==typeof c&&"longjmp"!==c&&d(c),S.setThrew(1,0)}},_emscripten_asm_const:function(a){A.ta(a,0)()},___assert_fail:function(a,b,c,e){ka=j;d("Assertion failed: "+B(a)+", at: "+[b?B(b):"unknown filename",
c,e?B(e):"unknown function"]+" at "+Ha())},_abort:function(){s.abort()},___setErrNo:nb,_sbrk:ob,_time:function(a){var b=Date.now()/1E3|0;a&&(J[a>>2]=b);return b},_emscripten_memcpy_big:function(a,b,c){M.set(M.subarray(b,b+c),a);return a},_emscripten_asm_const_int:function(a){var b=Array.prototype.slice.call(arguments,1);return A.ta(a,b.length).apply(l,b)|0},_sysconf:function(a){switch(a){case 30:return 4096;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 79:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;
case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;
case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1E3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"===typeof navigator?navigator.hardwareConcurrency||1:1}nb(22);return-1},
___errno_location:function(){return mb},STACKTOP:v,STACK_MAX:Ma,tempDoublePtr:db,ABORT:ka,cttz_i8:qb};// EMSCRIPTEN_START_ASM
var S=(function(global,env,buffer) {
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=0;var o=0;var p=0;var q=0;var r=global.NaN,s=global.Infinity;var t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0.0;var C=0;var D=0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=global.Math.floor;var N=global.Math.abs;var O=global.Math.sqrt;var P=global.Math.pow;var Q=global.Math.cos;var R=global.Math.sin;var S=global.Math.tan;var T=global.Math.acos;var U=global.Math.asin;var V=global.Math.atan;var W=global.Math.atan2;var X=global.Math.exp;var Y=global.Math.log;var Z=global.Math.ceil;var _=global.Math.imul;var $=global.Math.min;var aa=global.Math.clz32;var ba=env.abort;var ca=env.assert;var da=env.jsCall;var ea=env.invoke_i;var fa=env.invoke_ii;var ga=env._emscripten_asm_const;var ha=env.___assert_fail;var ia=env._abort;var ja=env.___setErrNo;var ka=env._sbrk;var la=env._time;var ma=env._emscripten_memcpy_big;var na=env._emscripten_asm_const_int;var oa=env._sysconf;var pa=env.___errno_location;var qa=0.0;
// EMSCRIPTEN_START_FUNCS
function uc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0;V=b+40|0;j=b+44|0;m=b+48|0;p=b+52|0;s=b+56|0;v=b+60|0;y=b+64|0;B=b+68|0;E=b+72|0;C=b+76|0;S=b+4|0;P=b+8|0;e=b+12|0;l=b+16|0;n=b+20|0;u=b+24|0;w=b+28|0;D=b+32|0;O=b+36|0;ga=(c[S>>2]|0)+(c[j>>2]|0)|0;fa=(c[P>>2]|0)+(c[m>>2]|0)|0;ea=(c[e>>2]|0)+(c[p>>2]|0)|0;da=(c[l>>2]|0)+(c[s>>2]|0)|0;ca=(c[n>>2]|0)+(c[v>>2]|0)|0;ba=(c[u>>2]|0)+(c[y>>2]|0)|0;aa=(c[w>>2]|0)+(c[B>>2]|0)|0;$=(c[D>>2]|0)+(c[E>>2]|0)|0;Y=(c[O>>2]|0)+(c[C>>2]|0)|0;c[a>>2]=(c[b>>2]|0)+(c[V>>2]|0);ha=a+4|0;c[ha>>2]=ga;ga=a+8|0;c[ga>>2]=fa;fa=a+12|0;c[fa>>2]=ea;ea=a+16|0;c[ea>>2]=da;da=a+20|0;c[da>>2]=ca;ca=a+24|0;c[ca>>2]=ba;ba=a+28|0;c[ba>>2]=aa;aa=a+32|0;c[aa>>2]=$;$=a+36|0;c[$>>2]=Y;Y=a+40|0;S=(c[j>>2]|0)-(c[S>>2]|0)|0;P=(c[m>>2]|0)-(c[P>>2]|0)|0;e=(c[p>>2]|0)-(c[e>>2]|0)|0;l=(c[s>>2]|0)-(c[l>>2]|0)|0;n=(c[v>>2]|0)-(c[n>>2]|0)|0;u=(c[y>>2]|0)-(c[u>>2]|0)|0;w=(c[B>>2]|0)-(c[w>>2]|0)|0;D=(c[E>>2]|0)-(c[D>>2]|0)|0;O=(c[C>>2]|0)-(c[O>>2]|0)|0;c[Y>>2]=(c[V>>2]|0)-(c[b>>2]|0);V=a+44|0;c[V>>2]=S;S=a+48|0;c[S>>2]=P;P=a+52|0;c[P>>2]=e;e=a+56|0;c[e>>2]=l;l=a+60|0;c[l>>2]=n;n=a+64|0;c[n>>2]=u;u=a+68|0;c[u>>2]=w;w=a+72|0;c[w>>2]=D;D=a+76|0;c[D>>2]=O;O=a+80|0;pc(O,a,d);pc(Y,Y,d+40|0);C=a+120|0;pc(C,d+80|0,b+120|0);E=c[b+80>>2]<<1;B=c[b+84>>2]<<1;y=c[b+88>>2]<<1;v=c[b+92>>2]<<1;s=c[b+96>>2]<<1;p=c[b+100>>2]<<1;m=c[b+104>>2]<<1;j=c[b+108>>2]<<1;g=c[b+112>>2]<<1;b=c[b+116>>2]<<1;Z=c[O>>2]|0;N=a+84|0;W=c[N>>2]|0;M=a+88|0;T=c[M>>2]|0;L=a+92|0;Q=c[L>>2]|0;K=a+96|0;f=c[K>>2]|0;J=a+100|0;h=c[J>>2]|0;I=a+104|0;o=c[I>>2]|0;H=a+108|0;q=c[H>>2]|0;G=a+112|0;x=c[G>>2]|0;F=a+116|0;z=c[F>>2]|0;_=c[Y>>2]|0;X=c[V>>2]|0;U=c[S>>2]|0;R=c[P>>2]|0;d=c[e>>2]|0;i=c[l>>2]|0;k=c[n>>2]|0;r=c[u>>2]|0;t=c[w>>2]|0;A=c[D>>2]|0;c[a>>2]=Z-_;c[ha>>2]=W-X;c[ga>>2]=T-U;c[fa>>2]=Q-R;c[ea>>2]=f-d;c[da>>2]=h-i;c[ca>>2]=o-k;c[ba>>2]=q-r;c[aa>>2]=x-t;c[$>>2]=z-A;c[Y>>2]=_+Z;c[V>>2]=X+W;c[S>>2]=U+T;c[P>>2]=R+Q;c[e>>2]=d+f;c[l>>2]=i+h;c[n>>2]=k+o;c[u>>2]=r+q;c[w>>2]=t+x;c[D>>2]=A+z;D=c[C>>2]|0;z=a+124|0;A=c[z>>2]|0;w=a+128|0;x=c[w>>2]|0;t=a+132|0;u=c[t>>2]|0;q=a+136|0;r=c[q>>2]|0;n=a+140|0;o=c[n>>2]|0;k=a+144|0;l=c[k>>2]|0;h=a+148|0;i=c[h>>2]|0;e=a+152|0;f=c[e>>2]|0;a=a+156|0;d=c[a>>2]|0;c[O>>2]=D+E;c[N>>2]=A+B;c[M>>2]=x+y;c[L>>2]=u+v;c[K>>2]=r+s;c[J>>2]=o+p;c[I>>2]=l+m;c[H>>2]=i+j;c[G>>2]=f+g;c[F>>2]=d+b;c[C>>2]=E-D;c[z>>2]=B-A;c[w>>2]=y-x;c[t>>2]=v-u;c[q>>2]=s-r;c[n>>2]=p-o;c[k>>2]=m-l;c[h>>2]=j-i;c[e>>2]=g-f;c[a>>2]=b-d;return}function vc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0;d=i;S=i=i+63&-64;i=i+48|0;qc(a,b);aa=a+80|0;ta=b+40|0;qc(aa,ta);v=a+120|0;ib=c[b+80>>2]|0;Sa=c[b+84>>2]|0;p=c[b+88>>2]|0;x=c[b+92>>2]|0;f=c[b+96>>2]|0;kb=c[b+100>>2]|0;_=c[b+104>>2]|0;wa=c[b+108>>2]|0;l=c[b+112>>2]|0;ua=c[b+116>>2]|0;t=ib<<1;ra=Sa<<1;cb=p<<1;g=x<<1;Ma=f<<1;e=kb<<1;va=_<<1;n=wa<<1;bb=kb*38|0;Qa=_*19|0;Q=wa*38|0;H=l*19|0;nb=ua*38|0;jb=((ib|0)<0)<<31>>31;jb=qd(ib|0,jb|0,ib|0,jb|0)|0;ib=C;qa=((t|0)<0)<<31>>31;Ta=((Sa|0)<0)<<31>>31;$a=qd(t|0,qa|0,Sa|0,Ta|0)|0;_a=C;r=((p|0)<0)<<31>>31;Va=qd(p|0,r|0,t|0,qa|0)|0;Ua=C;R=((x|0)<0)<<31>>31;La=qd(x|0,R|0,t|0,qa|0)|0;Ka=C;ka=((f|0)<0)<<31>>31;za=qd(f|0,ka|0,t|0,qa|0)|0;ya=C;lb=((kb|0)<0)<<31>>31;K=qd(kb|0,lb|0,t|0,qa|0)|0;M=C;j=((_|0)<0)<<31>>31;k=qd(_|0,j|0,t|0,qa|0)|0;F=C;xa=((wa|0)<0)<<31>>31;u=qd(wa|0,xa|0,t|0,qa|0)|0;P=C;ma=((l|0)<0)<<31>>31;W=qd(l|0,ma|0,t|0,qa|0)|0;fa=C;oa=((ua|0)<0)<<31>>31;qa=qd(ua|0,oa|0,t|0,qa|0)|0;t=C;pa=((ra|0)<0)<<31>>31;Ta=qd(ra|0,pa|0,Sa|0,Ta|0)|0;Sa=C;Ja=qd(ra|0,pa|0,p|0,r|0)|0;Ia=C;ja=((g|0)<0)<<31>>31;Da=qd(g|0,ja|0,ra|0,pa|0)|0;Ca=C;B=qd(f|0,ka|0,ra|0,pa|0)|0;E=C;la=((e|0)<0)<<31>>31;h=qd(e|0,la|0,ra|0,pa|0)|0;D=C;s=qd(_|0,j|0,ra|0,pa|0)|0;N=C;$=((n|0)<0)<<31>>31;V=qd(n|0,$|0,ra|0,pa|0)|0;ea=C;sa=qd(l|0,ma|0,ra|0,pa|0)|0;na=C;mb=((nb|0)<0)<<31>>31;pa=qd(nb|0,mb|0,ra|0,pa|0)|0;ra=C;Ba=qd(p|0,r|0,p|0,r|0)|0;Aa=C;db=((cb|0)<0)<<31>>31;G=qd(cb|0,db|0,x|0,R|0)|0;I=C;y=qd(f|0,ka|0,cb|0,db|0)|0;A=C;o=qd(kb|0,lb|0,cb|0,db|0)|0;J=C;w=qd(_|0,j|0,cb|0,db|0)|0;ba=C;Z=qd(wa|0,xa|0,cb|0,db|0)|0;ia=C;m=((H|0)<0)<<31>>31;db=qd(H|0,m|0,cb|0,db|0)|0;cb=C;r=qd(nb|0,mb|0,p|0,r|0)|0;p=C;R=qd(g|0,ja|0,x|0,R|0)|0;x=C;q=qd(g|0,ja|0,f|0,ka|0)|0;L=C;U=qd(e|0,la|0,g|0,ja|0)|0;da=C;X=qd(_|0,j|0,g|0,ja|0)|0;ga=C;O=((Q|0)<0)<<31>>31;fb=qd(Q|0,O|0,g|0,ja|0)|0;eb=C;Xa=qd(H|0,m|0,g|0,ja|0)|0;Wa=C;ja=qd(nb|0,mb|0,g|0,ja|0)|0;g=C;T=qd(f|0,ka|0,f|0,ka|0)|0;ca=C;Na=((Ma|0)<0)<<31>>31;Y=qd(Ma|0,Na|0,kb|0,lb|0)|0;ha=C;Ra=((Qa|0)<0)<<31>>31;hb=qd(Qa|0,Ra|0,Ma|0,Na|0)|0;gb=C;Za=qd(Q|0,O|0,f|0,ka|0)|0;Ya=C;Na=qd(H|0,m|0,Ma|0,Na|0)|0;Ma=C;ka=qd(nb|0,mb|0,f|0,ka|0)|0;f=C;lb=qd(bb|0,((bb|0)<0)<<31>>31|0,kb|0,lb|0)|0;kb=C;bb=qd(Qa|0,Ra|0,e|0,la|0)|0;ab=C;Pa=qd(Q|0,O|0,e|0,la|0)|0;Oa=C;Fa=qd(H|0,m|0,e|0,la|0)|0;Ea=C;la=qd(nb|0,mb|0,e|0,la|0)|0;e=C;Ra=qd(Qa|0,Ra|0,_|0,j|0)|0;Qa=C;Ha=qd(Q|0,O|0,_|0,j|0)|0;Ga=C;va=qd(H|0,m|0,va|0,((va|0)<0)<<31>>31|0)|0;z=C;j=qd(nb|0,mb|0,_|0,j|0)|0;_=C;xa=qd(Q|0,O|0,wa|0,xa|0)|0;wa=C;O=qd(H|0,m|0,n|0,$|0)|0;Q=C;$=qd(nb|0,mb|0,n|0,$|0)|0;n=C;m=qd(H|0,m|0,l|0,ma|0)|0;H=C;ma=qd(nb|0,mb|0,l|0,ma|0)|0;l=C;oa=qd(nb|0,mb|0,ua|0,oa|0)|0;ua=C;ib=fd(lb|0,kb|0,jb|0,ib|0)|0;gb=fd(ib|0,C|0,hb|0,gb|0)|0;eb=fd(gb|0,C|0,fb|0,eb|0)|0;cb=fd(eb|0,C|0,db|0,cb|0)|0;ra=fd(cb|0,C|0,pa|0,ra|0)|0;pa=C;_a=fd(bb|0,ab|0,$a|0,_a|0)|0;Ya=fd(_a|0,C|0,Za|0,Ya|0)|0;Wa=fd(Ya|0,C|0,Xa|0,Wa|0)|0;p=fd(Wa|0,C|0,r|0,p|0)|0;r=C;Sa=fd(Va|0,Ua|0,Ta|0,Sa|0)|0;Qa=fd(Sa|0,C|0,Ra|0,Qa|0)|0;Oa=fd(Qa|0,C|0,Pa|0,Oa|0)|0;Ma=fd(Oa|0,C|0,Na|0,Ma|0)|0;g=fd(Ma|0,C|0,ja|0,g|0)|0;ja=C;Ia=fd(La|0,Ka|0,Ja|0,Ia|0)|0;Ga=fd(Ia|0,C|0,Ha|0,Ga|0)|0;Ea=fd(Ga|0,C|0,Fa|0,Ea|0)|0;f=fd(Ea|0,C|0,ka|0,f|0)|0;ka=C;Aa=fd(Da|0,Ca|0,Ba|0,Aa|0)|0;ya=fd(Aa|0,C|0,za|0,ya|0)|0;wa=fd(ya|0,C|0,xa|0,wa|0)|0;z=fd(wa|0,C|0,va|0,z|0)|0;e=fd(z|0,C|0,la|0,e|0)|0;la=C;I=fd(B|0,E|0,G|0,I|0)|0;M=fd(I|0,C|0,K|0,M|0)|0;Q=fd(M|0,C|0,O|0,Q|0)|0;_=fd(Q|0,C|0,j|0,_|0)|0;j=C;A=fd(R|0,x|0,y|0,A|0)|0;D=fd(A|0,C|0,h|0,D|0)|0;F=fd(D|0,C|0,k|0,F|0)|0;H=fd(F|0,C|0,m|0,H|0)|0;n=fd(H|0,C|0,$|0,n|0)|0;$=C;L=fd(o|0,J|0,q|0,L|0)|0;N=fd(L|0,C|0,s|0,N|0)|0;P=fd(N|0,C|0,u|0,P|0)|0;l=fd(P|0,C|0,ma|0,l|0)|0;ma=C;ca=fd(w|0,ba|0,T|0,ca|0)|0;da=fd(ca|0,C|0,U|0,da|0)|0;ea=fd(da|0,C|0,V|0,ea|0)|0;fa=fd(ea|0,C|0,W|0,fa|0)|0;ua=fd(fa|0,C|0,oa|0,ua|0)|0;oa=C;ha=fd(X|0,ga|0,Y|0,ha|0)|0;ia=fd(ha|0,C|0,Z|0,ia|0)|0;na=fd(ia|0,C|0,sa|0,na|0)|0;t=fd(na|0,C|0,qa|0,t|0)|0;qa=C;pa=id(ra|0,pa|0,1)|0;ra=C;r=id(p|0,r|0,1)|0;p=C;ja=id(g|0,ja|0,1)|0;g=C;ka=id(f|0,ka|0,1)|0;f=C;la=id(e|0,la|0,1)|0;e=C;j=id(_|0,j|0,1)|0;_=C;$=id(n|0,$|0,1)|0;n=C;ma=id(l|0,ma|0,1)|0;l=C;oa=id(ua|0,oa|0,1)|0;ua=C;qa=id(t|0,qa|0,1)|0;t=C;na=fd(pa|0,ra|0,33554432,0)|0;na=dd(na|0,C|0,26)|0;sa=C;p=fd(na|0,sa|0,r|0,p|0)|0;r=C;sa=id(na|0,sa|0,26)|0;sa=ed(pa|0,ra|0,sa|0,C|0)|0;ra=C;pa=fd(la|0,e|0,33554432,0)|0;pa=dd(pa|0,C|0,26)|0;na=C;_=fd(pa|0,na|0,j|0,_|0)|0;j=C;na=id(pa|0,na|0,26)|0;na=ed(la|0,e|0,na|0,C|0)|0;e=C;la=fd(p|0,r|0,16777216,0)|0;la=dd(la|0,C|0,25)|0;pa=C;g=fd(la|0,pa|0,ja|0,g|0)|0;ja=C;pa=id(la|0,pa|0,25)|0;pa=ed(p|0,r|0,pa|0,C|0)|0;r=C;p=fd(_|0,j|0,16777216,0)|0;p=dd(p|0,C|0,25)|0;la=C;n=fd(p|0,la|0,$|0,n|0)|0;$=C;la=id(p|0,la|0,25)|0;la=ed(_|0,j|0,la|0,C|0)|0;j=C;_=fd(g|0,ja|0,33554432,0)|0;_=dd(_|0,C|0,26)|0;p=C;f=fd(_|0,p|0,ka|0,f|0)|0;ka=C;p=id(_|0,p|0,26)|0;p=ed(g|0,ja|0,p|0,C|0)|0;ja=fd(n|0,$|0,33554432,0)|0;ja=dd(ja|0,C|0,26)|0;g=C;l=fd(ja|0,g|0,ma|0,l|0)|0;ma=C;g=id(ja|0,g|0,26)|0;g=ed(n|0,$|0,g|0,C|0)|0;$=fd(f|0,ka|0,16777216,0)|0;$=dd($|0,C|0,25)|0;n=C;e=fd($|0,n|0,na|0,e|0)|0;na=C;n=id($|0,n|0,25)|0;n=ed(f|0,ka|0,n|0,C|0)|0;ka=fd(l|0,ma|0,16777216,0)|0;ka=dd(ka|0,C|0,25)|0;f=C;ua=fd(ka|0,f|0,oa|0,ua|0)|0;oa=C;f=id(ka|0,f|0,25)|0;f=ed(l|0,ma|0,f|0,C|0)|0;ma=fd(e|0,na|0,33554432,0)|0;ma=dd(ma|0,C|0,26)|0;l=C;j=fd(la|0,j|0,ma|0,l|0)|0;l=id(ma|0,l|0,26)|0;l=ed(e|0,na|0,l|0,C|0)|0;na=fd(ua|0,oa|0,33554432,0)|0;na=dd(na|0,C|0,26)|0;e=C;t=fd(na|0,e|0,qa|0,t|0)|0;qa=C;e=id(na|0,e|0,26)|0;e=ed(ua|0,oa|0,e|0,C|0)|0;oa=fd(t|0,qa|0,16777216,0)|0;oa=dd(oa|0,C|0,25)|0;ua=C;na=qd(oa|0,ua|0,19,0)|0;ra=fd(na|0,C|0,sa|0,ra|0)|0;sa=C;ua=id(oa|0,ua|0,25)|0;ua=ed(t|0,qa|0,ua|0,C|0)|0;qa=fd(ra|0,sa|0,33554432,0)|0;qa=dd(qa|0,C|0,26)|0;t=C;r=fd(pa|0,r|0,qa|0,t|0)|0;t=id(qa|0,t|0,26)|0;t=ed(ra|0,sa|0,t|0,C|0)|0;c[v>>2]=t;t=a+124|0;c[t>>2]=r;r=a+128|0;c[r>>2]=p;p=a+132|0;c[p>>2]=n;n=a+136|0;c[n>>2]=l;l=a+140|0;c[l>>2]=j;j=a+144|0;c[j>>2]=g;g=a+148|0;c[g>>2]=f;f=a+152|0;c[f>>2]=e;e=a+156|0;c[e>>2]=ua;ua=a+40|0;sa=(c[b+44>>2]|0)+(c[b+4>>2]|0)|0;ra=(c[b+48>>2]|0)+(c[b+8>>2]|0)|0;qa=(c[b+52>>2]|0)+(c[b+12>>2]|0)|0;pa=(c[b+56>>2]|0)+(c[b+16>>2]|0)|0;oa=(c[b+60>>2]|0)+(c[b+20>>2]|0)|0;na=(c[b+64>>2]|0)+(c[b+24>>2]|0)|0;ma=(c[b+68>>2]|0)+(c[b+28>>2]|0)|0;la=(c[b+72>>2]|0)+(c[b+32>>2]|0)|0;ka=(c[b+76>>2]|0)+(c[b+36>>2]|0)|0;c[ua>>2]=(c[ta>>2]|0)+(c[b>>2]|0);ta=a+44|0;c[ta>>2]=sa;sa=a+48|0;c[sa>>2]=ra;ra=a+52|0;c[ra>>2]=qa;qa=a+56|0;c[qa>>2]=pa;pa=a+60|0;c[pa>>2]=oa;oa=a+64|0;c[oa>>2]=na;na=a+68|0;c[na>>2]=ma;ma=a+72|0;c[ma>>2]=la;la=a+76|0;c[la>>2]=ka;qc(S,ua);ka=c[aa>>2]|0;$=a+84|0;ja=c[$>>2]|0;_=a+88|0;ia=c[_>>2]|0;Z=a+92|0;ha=c[Z>>2]|0;Y=a+96|0;ga=c[Y>>2]|0;X=a+100|0;fa=c[X>>2]|0;W=a+104|0;ea=c[W>>2]|0;V=a+108|0;da=c[V>>2]|0;U=a+112|0;ca=c[U>>2]|0;T=a+116|0;ba=c[T>>2]|0;w=c[a>>2]|0;P=a+4|0;u=c[P>>2]|0;N=a+8|0;s=c[N>>2]|0;L=a+12|0;q=c[L>>2]|0;J=a+16|0;o=c[J>>2]|0;H=a+20|0;m=c[H>>2]|0;F=a+24|0;k=c[F>>2]|0;D=a+28|0;h=c[D>>2]|0;A=a+32|0;b=c[A>>2]|0;y=a+36|0;x=c[y>>2]|0;R=w+ka|0;Q=u+ja|0;O=s+ia|0;M=q+ha|0;K=o+ga|0;I=m+fa|0;G=k+ea|0;E=h+da|0;B=b+ca|0;z=x+ba|0;c[ua>>2]=R;c[ta>>2]=Q;c[sa>>2]=O;c[ra>>2]=M;c[qa>>2]=K;c[pa>>2]=I;c[oa>>2]=G;c[na>>2]=E;c[ma>>2]=B;c[la>>2]=z;w=ka-w|0;u=ja-u|0;s=ia-s|0;q=ha-q|0;o=ga-o|0;m=fa-m|0;k=ea-k|0;h=da-h|0;b=ca-b|0;x=ba-x|0;c[aa>>2]=w;c[$>>2]=u;c[_>>2]=s;c[Z>>2]=q;c[Y>>2]=o;c[X>>2]=m;c[W>>2]=k;c[V>>2]=h;c[U>>2]=b;c[T>>2]=x;Q=(c[S+4>>2]|0)-Q|0;O=(c[S+8>>2]|0)-O|0;M=(c[S+12>>2]|0)-M|0;K=(c[S+16>>2]|0)-K|0;I=(c[S+20>>2]|0)-I|0;G=(c[S+24>>2]|0)-G|0;E=(c[S+28>>2]|0)-E|0;B=(c[S+32>>2]|0)-B|0;z=(c[S+36>>2]|0)-z|0;c[a>>2]=(c[S>>2]|0)-R;c[P>>2]=Q;c[N>>2]=O;c[L>>2]=M;c[J>>2]=K;c[H>>2]=I;c[F>>2]=G;c[D>>2]=E;c[A>>2]=B;c[y>>2]=z;u=(c[t>>2]|0)-u|0;s=(c[r>>2]|0)-s|0;q=(c[p>>2]|0)-q|0;o=(c[n>>2]|0)-o|0;m=(c[l>>2]|0)-m|0;k=(c[j>>2]|0)-k|0;h=(c[g>>2]|0)-h|0;b=(c[f>>2]|0)-b|0;a=(c[e>>2]|0)-x|0;c[v>>2]=(c[v>>2]|0)-w;c[t>>2]=u;c[r>>2]=s;c[p>>2]=q;c[n>>2]=o;c[l>>2]=m;c[j>>2]=k;c[g>>2]=h;c[f>>2]=b;c[e>>2]=a;i=d;return}function wc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;m=b+40|0;v=b+44|0;u=b+48|0;t=b+52|0;s=b+56|0;r=b+60|0;q=b+64|0;p=b+68|0;o=b+72|0;n=b+76|0;d=b+4|0;e=b+8|0;f=b+12|0;g=b+16|0;h=b+20|0;i=b+24|0;j=b+28|0;k=b+32|0;l=b+36|0;E=(c[d>>2]|0)+(c[v>>2]|0)|0;D=(c[e>>2]|0)+(c[u>>2]|0)|0;C=(c[f>>2]|0)+(c[t>>2]|0)|0;B=(c[g>>2]|0)+(c[s>>2]|0)|0;A=(c[h>>2]|0)+(c[r>>2]|0)|0;z=(c[i>>2]|0)+(c[q>>2]|0)|0;y=(c[j>>2]|0)+(c[p>>2]|0)|0;x=(c[k>>2]|0)+(c[o>>2]|0)|0;w=(c[l>>2]|0)+(c[n>>2]|0)|0;c[a>>2]=(c[b>>2]|0)+(c[m>>2]|0);c[a+4>>2]=E;c[a+8>>2]=D;c[a+12>>2]=C;c[a+16>>2]=B;c[a+20>>2]=A;c[a+24>>2]=z;c[a+28>>2]=y;c[a+32>>2]=x;c[a+36>>2]=w;d=(c[v>>2]|0)-(c[d>>2]|0)|0;e=(c[u>>2]|0)-(c[e>>2]|0)|0;f=(c[t>>2]|0)-(c[f>>2]|0)|0;g=(c[s>>2]|0)-(c[g>>2]|0)|0;h=(c[r>>2]|0)-(c[h>>2]|0)|0;i=(c[q>>2]|0)-(c[i>>2]|0)|0;j=(c[p>>2]|0)-(c[j>>2]|0)|0;k=(c[o>>2]|0)-(c[k>>2]|0)|0;l=(c[n>>2]|0)-(c[l>>2]|0)|0;c[a+40>>2]=(c[m>>2]|0)-(c[b>>2]|0);c[a+44>>2]=d;c[a+48>>2]=e;c[a+52>>2]=f;c[a+56>>2]=g;c[a+60>>2]=h;c[a+64>>2]=i;c[a+68>>2]=j;c[a+72>>2]=k;c[a+76>>2]=l;l=c[b+84>>2]|0;k=c[b+88>>2]|0;j=c[b+92>>2]|0;i=c[b+96>>2]|0;h=c[b+100>>2]|0;g=c[b+104>>2]|0;f=c[b+108>>2]|0;e=c[b+112>>2]|0;d=c[b+116>>2]|0;c[a+80>>2]=c[b+80>>2];c[a+84>>2]=l;c[a+88>>2]=k;c[a+92>>2]=j;c[a+96>>2]=i;c[a+100>>2]=h;c[a+104>>2]=g;c[a+108>>2]=f;c[a+112>>2]=e;c[a+116>>2]=d;pc(a+120|0,b+120|0,1608);return}function xc(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;u=i;t=i=i+63&-64;i=i+592|0;p=t+400|0;r=t+520|0;s=t+240|0;q=t+120|0;f=0;do{n=a[e+f>>0]|0;o=f<<1;a[r+o>>0]=n&15;a[r+(o|1)>>0]=(n&255)>>>4;f=f+1|0}while((f|0)!=32);e=0;f=0;do{o=r+f|0;n=(d[o>>0]|0)+e|0;e=(n<<24)+134217728>>28;a[o>>0]=n-(e<<4);f=f+1|0}while((f|0)!=63);f=r+63|0;a[f>>0]=(d[f>>0]|0)+e;f=b+0|0;e=f+40|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(e|0));j=b+40|0;c[j>>2]=1;g=b+44|0;f=g+0|0;e=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(e|0));k=b+80|0;c[k>>2]=1;h=b+84|0;l=b+120|0;m=s+120|0;n=s+40|0;o=s+80|0;f=h+0|0;e=f+76|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(e|0));f=1;do{yc(t,(f|0)/2|0,a[r+f>>0]|0);uc(s,b,t);pc(b,s,m);pc(j,n,o);pc(k,o,m);pc(l,s,n);f=f+2|0}while((f|0)<64);B=c[b+4>>2]|0;z=c[b+8>>2]|0;y=c[b+12>>2]|0;x=c[b+16>>2]|0;w=c[b+20>>2]|0;v=c[b+24>>2]|0;e=c[b+28>>2]|0;f=c[b+32>>2]|0;A=c[b+36>>2]|0;c[p>>2]=c[b>>2];c[p+4>>2]=B;c[p+8>>2]=z;c[p+12>>2]=y;c[p+16>>2]=x;c[p+20>>2]=w;c[p+24>>2]=v;c[p+28>>2]=e;c[p+32>>2]=f;c[p+36>>2]=A;A=c[g>>2]|0;f=c[b+48>>2]|0;g=c[b+52>>2]|0;e=c[b+56>>2]|0;v=c[b+60>>2]|0;w=c[b+64>>2]|0;x=c[b+68>>2]|0;y=c[b+72>>2]|0;z=c[b+76>>2]|0;c[p+40>>2]=c[j>>2];c[p+44>>2]=A;c[p+48>>2]=f;c[p+52>>2]=g;c[p+56>>2]=e;c[p+60>>2]=v;c[p+64>>2]=w;c[p+68>>2]=x;c[p+72>>2]=y;c[p+76>>2]=z;z=c[h>>2]|0;y=c[b+88>>2]|0;x=c[b+92>>2]|0;w=c[b+96>>2]|0;v=c[b+100>>2]|0;e=c[b+104>>2]|0;g=c[b+108>>2]|0;h=c[b+112>>2]|0;f=c[b+116>>2]|0;c[p+80>>2]=c[k>>2];c[p+84>>2]=z;c[p+88>>2]=y;c[p+92>>2]=x;c[p+96>>2]=w;c[p+100>>2]=v;c[p+104>>2]=e;c[p+108>>2]=g;c[p+112>>2]=h;c[p+116>>2]=f;vc(s,p);pc(q,s,m);p=q+40|0;pc(p,n,o);f=q+80|0;pc(f,o,m);vc(s,q);pc(q,s,m);pc(p,n,o);pc(f,o,m);vc(s,q);pc(q,s,m);pc(p,n,o);pc(f,o,m);vc(s,q);pc(b,s,m);pc(j,n,o);pc(k,o,m);pc(l,s,n);f=0;do{yc(t,(f|0)/2|0,a[r+f>>0]|0);uc(s,b,t);pc(b,s,m);pc(j,n,o);pc(k,o,m);pc(l,s,n);f=f+2|0}while((f|0)<64);i=u;return}function yc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0;s=d<<24>>24;s=hd(s|0,((s|0)<0)<<31>>31|0,63)|0;h=d<<24>>24;s=0-s|0;d=a+4|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[d+20>>2]=0;c[d+24>>2]=0;c[d+28>>2]=0;e=a+40|0;c[e>>2]=1;f=a+44|0;g=a+80|0;h=h-((h&s)<<1)&255;i=(h^1)+-1|0;j=1648+(b*960|0)|0;k=a+8|0;l=a+12|0;m=a+16|0;n=a+20|0;o=a+24|0;p=a+28|0;q=a+32|0;r=a+36|0;t=f+0|0;u=t+76|0;do{c[t>>2]=0;t=t+4|0}while((t|0)<(u|0));H=i>>31;A=c[1652+(b*960|0)>>2]&H;I=c[1656+(b*960|0)>>2]&H;K=c[1660+(b*960|0)>>2]&H;M=c[1664+(b*960|0)>>2]&H;O=c[1668+(b*960|0)>>2]&H;Q=c[1672+(b*960|0)>>2]&H;S=c[1676+(b*960|0)>>2]&H;U=c[1680+(b*960|0)>>2]&H;W=c[1684+(b*960|0)>>2]&H;c[a>>2]=(c[j>>2]^1)&H^1;c[d>>2]=A;c[k>>2]=I;c[l>>2]=K;c[m>>2]=M;c[n>>2]=O;c[o>>2]=Q;c[p>>2]=S;c[q>>2]=U;c[r>>2]=W;W=a+48|0;U=a+52|0;S=a+56|0;Q=a+60|0;O=a+64|0;M=a+68|0;K=a+72|0;I=a+76|0;A=c[1692+(b*960|0)>>2]&H;z=c[1696+(b*960|0)>>2]&H;w=c[1700+(b*960|0)>>2]&H;B=c[1704+(b*960|0)>>2]&H;ia=c[1708+(b*960|0)>>2]&H;D=c[1712+(b*960|0)>>2]&H;ea=c[1716+(b*960|0)>>2]&H;F=c[1720+(b*960|0)>>2]&H;ga=c[1724+(b*960|0)>>2]&H;c[e>>2]=(c[1688+(b*960|0)>>2]^1)&H^1;c[f>>2]=A;c[W>>2]=z;c[U>>2]=w;c[S>>2]=B;c[Q>>2]=ia;c[O>>2]=D;c[M>>2]=ea;c[K>>2]=F;c[I>>2]=ga;ga=c[g>>2]|0;F=a+84|0;ea=c[F>>2]|0;D=a+88|0;ia=c[D>>2]|0;B=a+92|0;w=c[B>>2]|0;z=a+96|0;A=c[z>>2]|0;x=a+100|0;fa=c[x>>2]|0;v=a+104|0;ba=c[v>>2]|0;i=a+108|0;G=c[i>>2]|0;t=a+112|0;_=c[t>>2]|0;u=a+116|0;da=c[u>>2]|0;$=(c[1732+(b*960|0)>>2]^ea)&H;aa=(c[1736+(b*960|0)>>2]^ia)&H;y=(c[1740+(b*960|0)>>2]^w)&H;j=(c[1744+(b*960|0)>>2]^A)&H;ha=(c[1748+(b*960|0)>>2]^fa)&H;Z=(c[1752+(b*960|0)>>2]^ba)&H;ca=(c[1756+(b*960|0)>>2]^G)&H;C=(c[1760+(b*960|0)>>2]^_)&H;E=(c[1764+(b*960|0)>>2]^da)&H;c[g>>2]=(c[1728+(b*960|0)>>2]^ga)&H^ga;c[F>>2]=$^ea;c[D>>2]=aa^ia;c[B>>2]=y^w;c[z>>2]=j^A;c[x>>2]=ha^fa;c[v>>2]=Z^ba;c[i>>2]=ca^G;c[t>>2]=C^_;c[u>>2]=E^da;da=c[a>>2]|0;E=c[d>>2]|0;_=c[k>>2]|0;C=c[l>>2]|0;G=c[m>>2]|0;ca=c[n>>2]|0;ba=c[o>>2]|0;Z=c[p>>2]|0;fa=c[q>>2]|0;ha=c[r>>2]|0;A=(h^2)+-1>>31;j=(c[1772+(b*960|0)>>2]^E)&A;w=(c[1776+(b*960|0)>>2]^_)&A;y=(c[1780+(b*960|0)>>2]^C)&A;ia=(c[1784+(b*960|0)>>2]^G)&A;aa=(c[1788+(b*960|0)>>2]^ca)&A;ea=(c[1792+(b*960|0)>>2]^ba)&A;$=(c[1796+(b*960|0)>>2]^Z)&A;ga=(c[1800+(b*960|0)>>2]^fa)&A;H=(c[1804+(b*960|0)>>2]^ha)&A;c[a>>2]=(c[1768+(b*960|0)>>2]^da)&A^da;c[d>>2]=j^E;c[k>>2]=w^_;c[l>>2]=y^C;c[m>>2]=ia^G;c[n>>2]=aa^ca;c[o>>2]=ea^ba;c[p>>2]=$^Z;c[q>>2]=ga^fa;c[r>>2]=H^ha;ha=c[e>>2]|0;H=c[f>>2]|0;fa=c[W>>2]|0;ga=c[U>>2]|0;Z=c[S>>2]|0;$=c[Q>>2]|0;ba=c[O>>2]|0;ea=c[M>>2]|0;ca=c[K>>2]|0;aa=c[I>>2]|0;G=(c[1812+(b*960|0)>>2]^H)&A;ia=(c[1816+(b*960|0)>>2]^fa)&A;C=(c[1820+(b*960|0)>>2]^ga)&A;y=(c[1824+(b*960|0)>>2]^Z)&A;_=(c[1828+(b*960|0)>>2]^$)&A;w=(c[1832+(b*960|0)>>2]^ba)&A;E=(c[1836+(b*960|0)>>2]^ea)&A;j=(c[1840+(b*960|0)>>2]^ca)&A;da=(c[1844+(b*960|0)>>2]^aa)&A;c[e>>2]=(c[1808+(b*960|0)>>2]^ha)&A^ha;c[f>>2]=G^H;c[W>>2]=ia^fa;c[U>>2]=C^ga;c[S>>2]=y^Z;c[Q>>2]=_^$;c[O>>2]=w^ba;c[M>>2]=E^ea;c[K>>2]=j^ca;c[I>>2]=da^aa;aa=c[g>>2]|0;da=c[F>>2]|0;ca=c[D>>2]|0;j=c[B>>2]|0;ea=c[z>>2]|0;E=c[x>>2]|0;ba=c[v>>2]|0;w=c[i>>2]|0;$=c[t>>2]|0;_=c[u>>2]|0;Z=(c[1852+(b*960|0)>>2]^da)&A;y=(c[1856+(b*960|0)>>2]^ca)&A;ga=(c[1860+(b*960|0)>>2]^j)&A;C=(c[1864+(b*960|0)>>2]^ea)&A;fa=(c[1868+(b*960|0)>>2]^E)&A;ia=(c[1872+(b*960|0)>>2]^ba)&A;H=(c[1876+(b*960|0)>>2]^w)&A;G=(c[1880+(b*960|0)>>2]^$)&A;ha=(c[1884+(b*960|0)>>2]^_)&A;c[g>>2]=(c[1848+(b*960|0)>>2]^aa)&A^aa;c[F>>2]=Z^da;c[D>>2]=y^ca;c[B>>2]=ga^j;c[z>>2]=C^ea;c[x>>2]=fa^E;c[v>>2]=ia^ba;c[i>>2]=H^w;c[t>>2]=G^$;c[u>>2]=ha^_;_=c[a>>2]|0;ha=c[d>>2]|0;$=c[k>>2]|0;G=c[l>>2]|0;w=c[m>>2]|0;H=c[n>>2]|0;ba=c[o>>2]|0;ia=c[p>>2]|0;E=c[q>>2]|0;fa=c[r>>2]|0;ea=(h^3)+-1>>31;C=(c[1892+(b*960|0)>>2]^ha)&ea;j=(c[1896+(b*960|0)>>2]^$)&ea;ga=(c[1900+(b*960|0)>>2]^G)&ea;ca=(c[1904+(b*960|0)>>2]^w)&ea;y=(c[1908+(b*960|0)>>2]^H)&ea;da=(c[1912+(b*960|0)>>2]^ba)&ea;Z=(c[1916+(b*960|0)>>2]^ia)&ea;aa=(c[1920+(b*960|0)>>2]^E)&ea;A=(c[1924+(b*960|0)>>2]^fa)&ea;c[a>>2]=(c[1888+(b*960|0)>>2]^_)&ea^_;c[d>>2]=C^ha;c[k>>2]=j^$;c[l>>2]=ga^G;c[m>>2]=ca^w;c[n>>2]=y^H;c[o>>2]=da^ba;c[p>>2]=Z^ia;c[q>>2]=aa^E;c[r>>2]=A^fa;fa=c[e>>2]|0;A=c[f>>2]|0;E=c[W>>2]|0;aa=c[U>>2]|0;ia=c[S>>2]|0;Z=c[Q>>2]|0;ba=c[O>>2]|0;da=c[M>>2]|0;H=c[K>>2]|0;y=c[I>>2]|0;w=(c[1932+(b*960|0)>>2]^A)&ea;ca=(c[1936+(b*960|0)>>2]^E)&ea;G=(c[1940+(b*960|0)>>2]^aa)&ea;ga=(c[1944+(b*960|0)>>2]^ia)&ea;$=(c[1948+(b*960|0)>>2]^Z)&ea;j=(c[1952+(b*960|0)>>2]^ba)&ea;ha=(c[1956+(b*960|0)>>2]^da)&ea;C=(c[1960+(b*960|0)>>2]^H)&ea;_=(c[1964+(b*960|0)>>2]^y)&ea;c[e>>2]=(c[1928+(b*960|0)>>2]^fa)&ea^fa;c[f>>2]=w^A;c[W>>2]=ca^E;c[U>>2]=G^aa;c[S>>2]=ga^ia;c[Q>>2]=$^Z;c[O>>2]=j^ba;c[M>>2]=ha^da;c[K>>2]=C^H;c[I>>2]=_^y;y=c[g>>2]|0;_=c[F>>2]|0;H=c[D>>2]|0;C=c[B>>2]|0;da=c[z>>2]|0;ha=c[x>>2]|0;ba=c[v>>2]|0;j=c[i>>2]|0;Z=c[t>>2]|0;$=c[u>>2]|0;ia=(c[1972+(b*960|0)>>2]^_)&ea;ga=(c[1976+(b*960|0)>>2]^H)&ea;aa=(c[1980+(b*960|0)>>2]^C)&ea;G=(c[1984+(b*960|0)>>2]^da)&ea;E=(c[1988+(b*960|0)>>2]^ha)&ea;ca=(c[1992+(b*960|0)>>2]^ba)&ea;A=(c[1996+(b*960|0)>>2]^j)&ea;w=(c[2e3+(b*960|0)>>2]^Z)&ea;fa=(c[2004+(b*960|0)>>2]^$)&ea;c[g>>2]=(c[1968+(b*960|0)>>2]^y)&ea^y;c[F>>2]=ia^_;c[D>>2]=ga^H;c[B>>2]=aa^C;c[z>>2]=G^da;c[x>>2]=E^ha;c[v>>2]=ca^ba;c[i>>2]=A^j;c[t>>2]=w^Z;c[u>>2]=fa^$;$=c[a>>2]|0;fa=c[d>>2]|0;Z=c[k>>2]|0;w=c[l>>2]|0;j=c[m>>2]|0;A=c[n>>2]|0;ba=c[o>>2]|0;ca=c[p>>2]|0;ha=c[q>>2]|0;E=c[r>>2]|0;da=(h^4)+-1>>31;G=(c[2012+(b*960|0)>>2]^fa)&da;C=(c[2016+(b*960|0)>>2]^Z)&da;aa=(c[2020+(b*960|0)>>2]^w)&da;H=(c[2024+(b*960|0)>>2]^j)&da;ga=(c[2028+(b*960|0)>>2]^A)&da;_=(c[2032+(b*960|0)>>2]^ba)&da;ia=(c[2036+(b*960|0)>>2]^ca)&da;y=(c[2040+(b*960|0)>>2]^ha)&da;ea=(c[2044+(b*960|0)>>2]^E)&da;c[a>>2]=(c[2008+(b*960|0)>>2]^$)&da^$;c[d>>2]=G^fa;c[k>>2]=C^Z;c[l>>2]=aa^w;c[m>>2]=H^j;c[n>>2]=ga^A;c[o>>2]=_^ba;c[p>>2]=ia^ca;c[q>>2]=y^ha;c[r>>2]=ea^E;E=c[e>>2]|0;ea=c[f>>2]|0;ha=c[W>>2]|0;y=c[U>>2]|0;ca=c[S>>2]|0;ia=c[Q>>2]|0;ba=c[O>>2]|0;_=c[M>>2]|0;A=c[K>>2]|0;ga=c[I>>2]|0;j=(c[2052+(b*960|0)>>2]^ea)&da;H=(c[2056+(b*960|0)>>2]^ha)&da;w=(c[2060+(b*960|0)>>2]^y)&da;aa=(c[2064+(b*960|0)>>2]^ca)&da;Z=(c[2068+(b*960|0)>>2]^ia)&da;C=(c[2072+(b*960|0)>>2]^ba)&da;fa=(c[2076+(b*960|0)>>2]^_)&da;G=(c[2080+(b*960|0)>>2]^A)&da;$=(c[2084+(b*960|0)>>2]^ga)&da;c[e>>2]=(c[2048+(b*960|0)>>2]^E)&da^E;c[f>>2]=j^ea;c[W>>2]=H^ha;c[U>>2]=w^y;c[S>>2]=aa^ca;c[Q>>2]=Z^ia;c[O>>2]=C^ba;c[M>>2]=fa^_;c[K>>2]=G^A;c[I>>2]=$^ga;ga=c[g>>2]|0;$=c[F>>2]|0;A=c[D>>2]|0;G=c[B>>2]|0;_=c[z>>2]|0;fa=c[x>>2]|0;ba=c[v>>2]|0;C=c[i>>2]|0;ia=c[t>>2]|0;Z=c[u>>2]|0;ca=(c[2092+(b*960|0)>>2]^$)&da;aa=(c[2096+(b*960|0)>>2]^A)&da;y=(c[2100+(b*960|0)>>2]^G)&da;w=(c[2104+(b*960|0)>>2]^_)&da;ha=(c[2108+(b*960|0)>>2]^fa)&da;H=(c[2112+(b*960|0)>>2]^ba)&da;ea=(c[2116+(b*960|0)>>2]^C)&da;j=(c[2120+(b*960|0)>>2]^ia)&da;E=(c[2124+(b*960|0)>>2]^Z)&da;c[g>>2]=(c[2088+(b*960|0)>>2]^ga)&da^ga;c[F>>2]=ca^$;c[D>>2]=aa^A;c[B>>2]=y^G;c[z>>2]=w^_;c[x>>2]=ha^fa;c[v>>2]=H^ba;c[i>>2]=ea^C;c[t>>2]=j^ia;c[u>>2]=E^Z;Z=c[a>>2]|0;E=c[d>>2]|0;ia=c[k>>2]|0;j=c[l>>2]|0;C=c[m>>2]|0;ea=c[n>>2]|0;ba=c[o>>2]|0;H=c[p>>2]|0;fa=c[q>>2]|0;ha=c[r>>2]|0;_=(h^5)+-1>>31;w=(c[2132+(b*960|0)>>2]^E)&_;G=(c[2136+(b*960|0)>>2]^ia)&_;y=(c[2140+(b*960|0)>>2]^j)&_;A=(c[2144+(b*960|0)>>2]^C)&_;aa=(c[2148+(b*960|0)>>2]^ea)&_;$=(c[2152+(b*960|0)>>2]^ba)&_;ca=(c[2156+(b*960|0)>>2]^H)&_;ga=(c[2160+(b*960|0)>>2]^fa)&_;da=(c[2164+(b*960|0)>>2]^ha)&_;c[a>>2]=(c[2128+(b*960|0)>>2]^Z)&_^Z;c[d>>2]=w^E;c[k>>2]=G^ia;c[l>>2]=y^j;c[m>>2]=A^C;c[n>>2]=aa^ea;c[o>>2]=$^ba;c[p>>2]=ca^H;c[q>>2]=ga^fa;c[r>>2]=da^ha;ha=c[e>>2]|0;da=c[f>>2]|0;fa=c[W>>2]|0;ga=c[U>>2]|0;H=c[S>>2]|0;ca=c[Q>>2]|0;ba=c[O>>2]|0;$=c[M>>2]|0;ea=c[K>>2]|0;aa=c[I>>2]|0;C=(c[2172+(b*960|0)>>2]^da)&_;A=(c[2176+(b*960|0)>>2]^fa)&_;j=(c[2180+(b*960|0)>>2]^ga)&_;y=(c[2184+(b*960|0)>>2]^H)&_;ia=(c[2188+(b*960|0)>>2]^ca)&_;G=(c[2192+(b*960|0)>>2]^ba)&_;E=(c[2196+(b*960|0)>>2]^$)&_;w=(c[2200+(b*960|0)>>2]^ea)&_;Z=(c[2204+(b*960|0)>>2]^aa)&_;c[e>>2]=(c[2168+(b*960|0)>>2]^ha)&_^ha;c[f>>2]=C^da;c[W>>2]=A^fa;c[U>>2]=j^ga;c[S>>2]=y^H;c[Q>>2]=ia^ca;c[O>>2]=G^ba;c[M>>2]=E^$;c[K>>2]=w^ea;c[I>>2]=Z^aa;aa=c[g>>2]|0;Z=c[F>>2]|0;ea=c[D>>2]|0;w=c[B>>2]|0;$=c[z>>2]|0;E=c[x>>2]|0;ba=c[v>>2]|0;G=c[i>>2]|0;ca=c[t>>2]|0;ia=c[u>>2]|0;H=(c[2212+(b*960|0)>>2]^Z)&_;y=(c[2216+(b*960|0)>>2]^ea)&_;ga=(c[2220+(b*960|0)>>2]^w)&_;j=(c[2224+(b*960|0)>>2]^$)&_;fa=(c[2228+(b*960|0)>>2]^E)&_;A=(c[2232+(b*960|0)>>2]^ba)&_;da=(c[2236+(b*960|0)>>2]^G)&_;C=(c[2240+(b*960|0)>>2]^ca)&_;ha=(c[2244+(b*960|0)>>2]^ia)&_;c[g>>2]=(c[2208+(b*960|0)>>2]^aa)&_^aa;c[F>>2]=H^Z;c[D>>2]=y^ea;c[B>>2]=ga^w;c[z>>2]=j^$;c[x>>2]=fa^E;c[v>>2]=A^ba;c[i>>2]=da^G;c[t>>2]=C^ca;c[u>>2]=ha^ia;ia=c[a>>2]|0;ha=c[d>>2]|0;ca=c[k>>2]|0;C=c[l>>2]|0;G=c[m>>2]|0;da=c[n>>2]|0;ba=c[o>>2]|0;A=c[p>>2]|0;E=c[q>>2]|0;fa=c[r>>2]|0;$=(h^6)+-1>>31;j=(c[2252+(b*960|0)>>2]^ha)&$;w=(c[2256+(b*960|0)>>2]^ca)&$;ga=(c[2260+(b*960|0)>>2]^C)&$;ea=(c[2264+(b*960|0)>>2]^G)&$;y=(c[2268+(b*960|0)>>2]^da)&$;Z=(c[2272+(b*960|0)>>2]^ba)&$;H=(c[2276+(b*960|0)>>2]^A)&$;aa=(c[2280+(b*960|0)>>2]^E)&$;_=(c[2284+(b*960|0)>>2]^fa)&$;c[a>>2]=(c[2248+(b*960|0)>>2]^ia)&$^ia;c[d>>2]=j^ha;c[k>>2]=w^ca;c[l>>2]=ga^C;c[m>>2]=ea^G;c[n>>2]=y^da;c[o>>2]=Z^ba;c[p>>2]=H^A;c[q>>2]=aa^E;c[r>>2]=_^fa;fa=c[e>>2]|0;_=c[f>>2]|0;E=c[W>>2]|0;aa=c[U>>2]|0;A=c[S>>2]|0;H=c[Q>>2]|0;ba=c[O>>2]|0;Z=c[M>>2]|0;da=c[K>>2]|0;y=c[I>>2]|0;G=(c[2292+(b*960|0)>>2]^_)&$;ea=(c[2296+(b*960|0)>>2]^E)&$;C=(c[2300+(b*960|0)>>2]^aa)&$;ga=(c[2304+(b*960|0)>>2]^A)&$;ca=(c[2308+(b*960|0)>>2]^H)&$;w=(c[2312+(b*960|0)>>2]^ba)&$;ha=(c[2316+(b*960|0)>>2]^Z)&$;j=(c[2320+(b*960|0)>>2]^da)&$;ia=(c[2324+(b*960|0)>>2]^y)&$;c[e>>2]=(c[2288+(b*960|0)>>2]^fa)&$^fa;c[f>>2]=G^_;c[W>>2]=ea^E;c[U>>2]=C^aa;c[S>>2]=ga^A;c[Q>>2]=ca^H;c[O>>2]=w^ba;c[M>>2]=ha^Z;c[K>>2]=j^da;c[I>>2]=ia^y;y=c[g>>2]|0;ia=c[F>>2]|0;da=c[D>>2]|0;j=c[B>>2]|0;Z=c[z>>2]|0;ha=c[x>>2]|0;ba=c[v>>2]|0;w=c[i>>2]|0;H=c[t>>2]|0;ca=c[u>>2]|0;A=(c[2332+(b*960|0)>>2]^ia)&$;ga=(c[2336+(b*960|0)>>2]^da)&$;aa=(c[2340+(b*960|0)>>2]^j)&$;C=(c[2344+(b*960|0)>>2]^Z)&$;E=(c[2348+(b*960|0)>>2]^ha)&$;ea=(c[2352+(b*960|0)>>2]^ba)&$;_=(c[2356+(b*960|0)>>2]^w)&$;G=(c[2360+(b*960|0)>>2]^H)&$;fa=(c[2364+(b*960|0)>>2]^ca)&$;c[g>>2]=(c[2328+(b*960|0)>>2]^y)&$^y;c[F>>2]=A^ia;c[D>>2]=ga^da;c[B>>2]=aa^j;c[z>>2]=C^Z;c[x>>2]=E^ha;c[v>>2]=ea^ba;c[i>>2]=_^w;c[t>>2]=G^H;c[u>>2]=fa^ca;ca=c[a>>2]|0;fa=c[d>>2]|0;H=c[k>>2]|0;G=c[l>>2]|0;w=c[m>>2]|0;_=c[n>>2]|0;ba=c[o>>2]|0;ea=c[p>>2]|0;ha=c[q>>2]|0;E=c[r>>2]|0;Z=(h^7)+-1>>31;C=(c[2372+(b*960|0)>>2]^fa)&Z;j=(c[2376+(b*960|0)>>2]^H)&Z;aa=(c[2380+(b*960|0)>>2]^G)&Z;da=(c[2384+(b*960|0)>>2]^w)&Z;ga=(c[2388+(b*960|0)>>2]^_)&Z;ia=(c[2392+(b*960|0)>>2]^ba)&Z;A=(c[2396+(b*960|0)>>2]^ea)&Z;y=(c[2400+(b*960|0)>>2]^ha)&Z;$=(c[2404+(b*960|0)>>2]^E)&Z;c[a>>2]=(c[2368+(b*960|0)>>2]^ca)&Z^ca;c[d>>2]=C^fa;c[k>>2]=j^H;c[l>>2]=aa^G;c[m>>2]=da^w;c[n>>2]=ga^_;c[o>>2]=ia^ba;c[p>>2]=A^ea;c[q>>2]=y^ha;c[r>>2]=$^E;E=c[e>>2]|0;$=c[f>>2]|0;ha=c[W>>2]|0;y=c[U>>2]|0;ea=c[S>>2]|0;A=c[Q>>2]|0;ba=c[O>>2]|0;ia=c[M>>2]|0;_=c[K>>2]|0;ga=c[I>>2]|0;w=(c[2412+(b*960|0)>>2]^$)&Z;da=(c[2416+(b*960|0)>>2]^ha)&Z;G=(c[2420+(b*960|0)>>2]^y)&Z;aa=(c[2424+(b*960|0)>>2]^ea)&Z;H=(c[2428+(b*960|0)>>2]^A)&Z;j=(c[2432+(b*960|0)>>2]^ba)&Z;fa=(c[2436+(b*960|0)>>2]^ia)&Z;C=(c[2440+(b*960|0)>>2]^_)&Z;ca=(c[2444+(b*960|0)>>2]^ga)&Z;c[e>>2]=(c[2408+(b*960|0)>>2]^E)&Z^E;c[f>>2]=w^$;c[W>>2]=da^ha;c[U>>2]=G^y;c[S>>2]=aa^ea;c[Q>>2]=H^A;c[O>>2]=j^ba;c[M>>2]=fa^ia;c[K>>2]=C^_;c[I>>2]=ca^ga;ga=c[g>>2]|0;ca=c[F>>2]|0;_=c[D>>2]|0;C=c[B>>2]|0;ia=c[z>>2]|0;fa=c[x>>2]|0;ba=c[v>>2]|0;j=c[i>>2]|0;A=c[t>>2]|0;H=c[u>>2]|0;ea=(c[2452+(b*960|0)>>2]^ca)&Z;aa=(c[2456+(b*960|0)>>2]^_)&Z;y=(c[2460+(b*960|0)>>2]^C)&Z;G=(c[2464+(b*960|0)>>2]^ia)&Z;ha=(c[2468+(b*960|0)>>2]^fa)&Z;da=(c[2472+(b*960|0)>>2]^ba)&Z;$=(c[2476+(b*960|0)>>2]^j)&Z;w=(c[2480+(b*960|0)>>2]^A)&Z;E=(c[2484+(b*960|0)>>2]^H)&Z;c[g>>2]=(c[2448+(b*960|0)>>2]^ga)&Z^ga;c[F>>2]=ea^ca;c[D>>2]=aa^_;c[B>>2]=y^C;c[z>>2]=G^ia;c[x>>2]=ha^fa;c[v>>2]=da^ba;c[i>>2]=$^j;c[t>>2]=w^A;c[u>>2]=E^H;H=c[a>>2]|0;E=c[d>>2]|0;A=c[k>>2]|0;w=c[l>>2]|0;j=c[m>>2]|0;$=c[n>>2]|0;ba=c[o>>2]|0;da=c[p>>2]|0;fa=c[q>>2]|0;ha=c[r>>2]|0;ia=(h^8)+-1>>31;G=(c[2492+(b*960|0)>>2]^E)&ia;C=(c[2496+(b*960|0)>>2]^A)&ia;y=(c[2500+(b*960|0)>>2]^w)&ia;h=(c[2504+(b*960|0)>>2]^j)&ia;_=(c[2508+(b*960|0)>>2]^$)&ia;aa=(c[2512+(b*960|0)>>2]^ba)&ia;ca=(c[2516+(b*960|0)>>2]^da)&ia;ea=(c[2520+(b*960|0)>>2]^fa)&ia;ga=(c[2524+(b*960|0)>>2]^ha)&ia;c[a>>2]=(c[2488+(b*960|0)>>2]^H)&ia^H;c[d>>2]=G^E;c[k>>2]=C^A;c[l>>2]=y^w;c[m>>2]=h^j;c[n>>2]=_^$;c[o>>2]=aa^ba;c[p>>2]=ca^da;c[q>>2]=ea^fa;c[r>>2]=ga^ha;ha=c[e>>2]|0;ga=c[f>>2]|0;fa=c[W>>2]|0;ea=c[U>>2]|0;da=c[S>>2]|0;ca=c[Q>>2]|0;ba=c[O>>2]|0;aa=c[M>>2]|0;$=c[K>>2]|0;_=c[I>>2]|0;j=(c[2532+(b*960|0)>>2]^ga)&ia;h=(c[2536+(b*960|0)>>2]^fa)&ia;w=(c[2540+(b*960|0)>>2]^ea)&ia;y=(c[2544+(b*960|0)>>2]^da)&ia;A=(c[2548+(b*960|0)>>2]^ca)&ia;C=(c[2552+(b*960|0)>>2]^ba)&ia;E=(c[2556+(b*960|0)>>2]^aa)&ia;G=(c[2560+(b*960|0)>>2]^$)&ia;H=(c[2564+(b*960|0)>>2]^_)&ia;ha=(c[2528+(b*960|0)>>2]^ha)&ia^ha;c[e>>2]=ha;ga=j^ga;c[f>>2]=ga;fa=h^fa;c[W>>2]=fa;ea=w^ea;c[U>>2]=ea;da=y^da;c[S>>2]=da;ca=A^ca;c[Q>>2]=ca;ba=C^ba;c[O>>2]=ba;aa=E^aa;c[M>>2]=aa;$=G^$;c[K>>2]=$;_=H^_;c[I>>2]=_;H=c[g>>2]|0;G=c[F>>2]|0;E=c[D>>2]|0;C=c[B>>2]|0;A=c[z>>2]|0;y=c[x>>2]|0;w=c[v>>2]|0;h=c[i>>2]|0;j=c[t>>2]|0;Z=c[u>>2]|0;J=(c[2572+(b*960|0)>>2]^G)&ia;L=(c[2576+(b*960|0)>>2]^E)&ia;N=(c[2580+(b*960|0)>>2]^C)&ia;P=(c[2584+(b*960|0)>>2]^A)&ia;R=(c[2588+(b*960|0)>>2]^y)&ia;T=(c[2592+(b*960|0)>>2]^w)&ia;V=(c[2596+(b*960|0)>>2]^h)&ia;X=(c[2600+(b*960|0)>>2]^j)&ia;Y=(c[2604+(b*960|0)>>2]^Z)&ia;H=(c[2568+(b*960|0)>>2]^H)&ia^H;c[g>>2]=H;G=J^G;c[F>>2]=G;E=L^E;c[D>>2]=E;C=N^C;c[B>>2]=C;A=P^A;c[z>>2]=A;y=R^y;c[x>>2]=y;w=T^w;c[v>>2]=w;h=V^h;c[i>>2]=h;j=X^j;c[t>>2]=j;b=Y^Z;c[u>>2]=b;Z=c[a>>2]|0;Y=c[d>>2]|0;X=c[k>>2]|0;V=c[l>>2]|0;T=c[m>>2]|0;R=c[n>>2]|0;P=c[o>>2]|0;N=c[p>>2]|0;L=c[q>>2]|0;J=c[r>>2]|0;c[a>>2]=(ha^Z)&s^Z;c[d>>2]=(ga^Y)&s^Y;c[k>>2]=(fa^X)&s^X;c[l>>2]=(ea^V)&s^V;c[m>>2]=(da^T)&s^T;c[n>>2]=(ca^R)&s^R;c[o>>2]=(ba^P)&s^P;c[p>>2]=(aa^N)&s^N;c[q>>2]=($^L)&s^L;c[r>>2]=(_^J)&s^J;d=c[e>>2]|0;a=c[f>>2]|0;r=c[W>>2]|0;q=c[U>>2]|0;p=c[S>>2]|0;o=c[Q>>2]|0;n=c[O>>2]|0;m=c[M>>2]|0;l=c[K>>2]|0;k=c[I>>2]|0;c[e>>2]=(Z^d)&s^d;c[f>>2]=(Y^a)&s^a;c[W>>2]=(X^r)&s^r;c[U>>2]=(V^q)&s^q;c[S>>2]=(T^p)&s^p;c[Q>>2]=(R^o)&s^o;c[O>>2]=(P^n)&s^n;c[M>>2]=(N^m)&s^m;c[K>>2]=(L^l)&s^l;c[I>>2]=(J^k)&s^k;f=c[g>>2]|0;k=c[F>>2]|0;l=c[D>>2]|0;m=c[B>>2]|0;n=c[z>>2]|0;o=c[x>>2]|0;p=c[v>>2]|0;q=c[i>>2]|0;r=c[t>>2]|0;a=c[u>>2]|0;c[g>>2]=(f^0-H)&s^f;c[F>>2]=(k^0-G)&s^k;c[D>>2]=(l^0-E)&s^l;c[B>>2]=(m^0-C)&s^m;c[z>>2]=(n^0-A)&s^n;c[x>>2]=(o^0-y)&s^o;c[v>>2]=(p^0-w)&s^p;c[i>>2]=(q^0-h)&s^q;c[t>>2]=(r^0-j)&s^r;c[u>>2]=(a^0-b)&s^a;return}function zc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;g=i;e=i=i+63&-64;i=i+240|0;d=e+80|0;f=e+40|0;if(tc(d,b)|0){f=-1;i=g;return f|0}y=e+4|0;c[y+0>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;c[y+12>>2]=0;c[y+16>>2]=0;c[y+20>>2]=0;c[y+24>>2]=0;c[y+28>>2]=0;q=d+40|0;p=d+44|0;n=d+48|0;m=d+52|0;l=d+56|0;k=d+60|0;j=d+64|0;h=d+68|0;r=d+72|0;b=d+76|0;z=0-(c[p>>2]|0)|0;x=0-(c[n>>2]|0)|0;w=0-(c[m>>2]|0)|0;v=0-(c[l>>2]|0)|0;u=0-(c[k>>2]|0)|0;t=0-(c[j>>2]|0)|0;s=0-(c[h>>2]|0)|0;d=0-(c[r>>2]|0)|0;o=0-(c[b>>2]|0)|0;c[e>>2]=1-(c[q>>2]|0);c[y>>2]=z;c[e+8>>2]=x;c[e+12>>2]=w;c[e+16>>2]=v;c[e+20>>2]=u;c[e+24>>2]=t;c[e+28>>2]=s;c[e+32>>2]=d;c[e+36>>2]=o;oc(e,e);o=f+4|0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;c[o+16>>2]=0;c[o+20>>2]=0;c[o+24>>2]=0;c[o+28>>2]=0;p=c[p>>2]|0;n=c[n>>2]|0;m=c[m>>2]|0;l=c[l>>2]|0;k=c[k>>2]|0;j=c[j>>2]|0;h=c[h>>2]|0;d=c[r>>2]|0;b=c[b>>2]|0;c[f>>2]=(c[q>>2]|0)+1;c[o>>2]=p;c[f+8>>2]=n;c[f+12>>2]=m;c[f+16>>2]=l;c[f+20>>2]=k;c[f+24>>2]=j;c[f+28>>2]=h;c[f+32>>2]=d;c[f+36>>2]=b;pc(f,f,e);rc(a,f);f=0;i=g;return f|0}function Ac(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;k=i;g=i=i+63&-64;i=i+272|0;h=g;g=g+208|0;j=h;c[j>>2]=-205731576;c[j+4>>2]=1779033703;j=h+8|0;c[j>>2]=-2067093701;c[j+4>>2]=-1150833019;j=h+16|0;c[j>>2]=-23791573;c[j+4>>2]=1013904242;j=h+24|0;c[j>>2]=1595750129;c[j+4>>2]=-1521486534;j=h+32|0;c[j>>2]=-1377402159;c[j+4>>2]=1359893119;j=h+40|0;c[j>>2]=725511199;c[j+4>>2]=-1694144372;j=h+48|0;c[j>>2]=-79577749;c[j+4>>2]=528734635;j=h+56|0;c[j>>2]=327033209;c[j+4>>2]=1541459225;j=h+72|0;c[j>>2]=256;c[j+4>>2]=0;j=h+64|0;c[j>>2]=0;c[j+4>>2]=0;j=h+80|0;e=e+0|0;f=j+32|0;do{a[j>>0]=a[e>>0]|0;j=j+1|0;e=e+1|0}while((j|0)<(f|0));vb(h,g);a[g>>0]=(d[g>>0]|0)&248;j=g+31|0;a[j>>0]=(d[j>>0]|0)&63|64;j=b+0|0;e=g+0|0;f=j+32|0;do{a[j>>0]=a[e>>0]|0;j=j+1|0;e=e+1|0}while((j|0)<(f|0));i=k;return 0}function Bc(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0;Ra=i;Ja=i=i+63&-64;i=i+3024|0;Ka=Ja+488|0;Oa=Ja+904|0;Pa=Ja+608|0;Ma=Ja+864|0;Ia=Ja+1320|0;La=Ja+2600|0;Na=Ja+2760|0;o=Ja+1160|0;j=Ja;m=Ja+2920|0;Qa=Ja+2984|0;n=Ja+208|0;Ja=Ja+368|0;if((d[b+63>>0]|0)>31){b=-1;i=Ra;return b|0}if(!(tc(n,h)|0)){k=0;l=0}else{b=-1;i=Ra;return b|0}do{k=a[h+l>>0]|k;l=l+1|0}while((l|0)!=32);if(!(k<<24>>24)){b=-1;i=Ra;return b|0}Ha=j+64|0;c[Ha+0>>2]=0;c[Ha+4>>2]=0;c[Ha+8>>2]=0;c[Ha+12>>2]=0;Ha=j;c[Ha>>2]=-205731576;c[Ha+4>>2]=1779033703;Ha=j+8|0;c[Ha>>2]=-2067093701;c[Ha+4>>2]=-1150833019;Ha=j+16|0;c[Ha>>2]=-23791573;c[Ha+4>>2]=1013904242;Ha=j+24|0;c[Ha>>2]=1595750129;c[Ha+4>>2]=-1521486534;Ha=j+32|0;c[Ha>>2]=-1377402159;c[Ha+4>>2]=1359893119;Ha=j+40|0;c[Ha>>2]=725511199;c[Ha+4>>2]=-1694144372;Ha=j+48|0;c[Ha>>2]=-79577749;c[Ha+4>>2]=528734635;Ha=j+56|0;c[Ha>>2]=327033209;c[Ha+4>>2]=1541459225;ub(j,b,32,0);ub(j,h,32,0);ub(j,e,f,g);vb(j,m);Cc(m);f=0;do{a[Oa+f>>0]=(d[m+(f>>3)>>0]|0)>>>(f&7)&1;f=f+1|0}while((f|0)!=256);j=0;while(1){m=Oa+j|0;a:do if(a[m>>0]|0){l=1;do{g=l+j|0;if((g|0)>=256)break a;h=Oa+g|0;f=a[h>>0]|0;b:do if(f<<24>>24){e=a[m>>0]|0;f=f<<24>>24<<l;k=e+f|0;if((k|0)<16){a[m>>0]=k;a[h>>0]=0;break}f=e-f|0;if((f|0)<=-16)break a;a[m>>0]=f;while(1){f=Oa+g|0;if(!(a[f>>0]|0))break;a[f>>0]=0;g=g+1|0;if((g|0)>=256)break b}a[f>>0]=1}while(0);l=l+1|0}while((l|0)<7)}while(0);j=j+1|0;if((j|0)==256){f=0;break}}do{a[Pa+f>>0]=(d[b+((f>>3)+32)>>0]|0)>>>(f&7)&1;f=f+1|0}while((f|0)!=256);j=0;do{m=Pa+j|0;c:do if(a[m>>0]|0){l=1;do{g=l+j|0;if((g|0)>=256)break c;h=Pa+g|0;f=a[h>>0]|0;d:do if(f<<24>>24){e=a[m>>0]|0;f=f<<24>>24<<l;k=e+f|0;if((k|0)<16){a[m>>0]=k;a[h>>0]=0;break}f=e-f|0;if((f|0)<=-16)break c;a[m>>0]=f;while(1){f=Pa+g|0;if(!(a[f>>0]|0))break;a[f>>0]=0;g=g+1|0;if((g|0)>=256)break d}a[f>>0]=1}while(0);l=l+1|0}while((l|0)<7)}while(0);j=j+1|0}while((j|0)!=256);wc(Ia,n);Ba=c[n+4>>2]|0;e=c[n+8>>2]|0;h=c[n+12>>2]|0;Ha=c[n+16>>2]|0;Ga=c[n+20>>2]|0;Fa=c[n+24>>2]|0;Ea=c[n+28>>2]|0;Da=c[n+32>>2]|0;Ca=c[n+36>>2]|0;c[Ka>>2]=c[n>>2];c[Ka+4>>2]=Ba;c[Ka+8>>2]=e;c[Ka+12>>2]=h;c[Ka+16>>2]=Ha;c[Ka+20>>2]=Ga;c[Ka+24>>2]=Fa;c[Ka+28>>2]=Ea;c[Ka+32>>2]=Da;c[Ka+36>>2]=Ca;Ca=c[n+44>>2]|0;Da=c[n+48>>2]|0;Ea=c[n+52>>2]|0;Fa=c[n+56>>2]|0;Ga=c[n+60>>2]|0;Ha=c[n+64>>2]|0;h=c[n+68>>2]|0;e=c[n+72>>2]|0;Ba=c[n+76>>2]|0;c[Ka+40>>2]=c[n+40>>2];c[Ka+44>>2]=Ca;c[Ka+48>>2]=Da;c[Ka+52>>2]=Ea;c[Ka+56>>2]=Fa;c[Ka+60>>2]=Ga;c[Ka+64>>2]=Ha;c[Ka+68>>2]=h;c[Ka+72>>2]=e;c[Ka+76>>2]=Ba;Ba=c[n+84>>2]|0;e=c[n+88>>2]|0;h=c[n+92>>2]|0;Ha=c[n+96>>2]|0;Ga=c[n+100>>2]|0;Fa=c[n+104>>2]|0;Ea=c[n+108>>2]|0;Da=c[n+112>>2]|0;Ca=c[n+116>>2]|0;c[Ka+80>>2]=c[n+80>>2];c[Ka+84>>2]=Ba;c[Ka+88>>2]=e;c[Ka+92>>2]=h;c[Ka+96>>2]=Ha;c[Ka+100>>2]=Ga;c[Ka+104>>2]=Fa;c[Ka+108>>2]=Ea;c[Ka+112>>2]=Da;c[Ka+116>>2]=Ca;vc(La,Ka);Ca=La+120|0;pc(o,La,Ca);Da=La+40|0;Ea=La+80|0;pc(o+40|0,Da,Ea);pc(o+80|0,Ea,Ca);pc(o+120|0,La,Da);sc(La,o,Ia);pc(Na,La,Ca);Fa=Na+40|0;pc(Fa,Da,Ea);Ga=Na+80|0;pc(Ga,Ea,Ca);Ha=Na+120|0;pc(Ha,La,Da);h=Ia+160|0;wc(h,Na);sc(La,o,h);pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);h=Ia+320|0;wc(h,Na);sc(La,o,h);pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);h=Ia+480|0;wc(h,Na);sc(La,o,h);pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);h=Ia+640|0;wc(h,Na);sc(La,o,h);pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);h=Ia+800|0;wc(h,Na);sc(La,o,h);pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);h=Ia+960|0;wc(h,Na);sc(La,o,h);pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);wc(Ia+1120|0,Na);h=Ja+0|0;e=h+40|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(e|0));Aa=Ja+40|0;c[Aa>>2]=1;h=Ja+44|0;e=h+36|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(e|0));Ba=Ja+80|0;c[Ba>>2]=1;h=Ja+84|0;e=h+36|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(e|0));o=255;while(1){n=a[Oa+o>>0]|0;if(n<<24>>24){p=36;break}h=o+-1|0;if(a[Pa+o>>0]|0){p=36;break}if((h|0)>-1)o=h;else break}e:do if((p|0)==36?(o|0)>-1:0){m=Na+44|0;h=Na+48|0;e=Na+52|0;l=Na+56|0;f=Na+60|0;g=Na+64|0;k=Na+68|0;j=Na+72|0;q=Na+76|0;r=Na+4|0;s=Na+8|0;t=Na+12|0;u=Na+16|0;v=Na+20|0;w=Na+24|0;x=Na+28|0;y=Na+32|0;z=Na+36|0;A=La+4|0;B=La+8|0;C=La+12|0;D=La+16|0;E=La+20|0;F=La+24|0;G=La+28|0;H=La+32|0;I=La+36|0;J=La+44|0;K=La+48|0;L=La+52|0;M=La+56|0;N=La+60|0;O=La+64|0;P=La+68|0;Q=La+72|0;R=La+76|0;S=Na+84|0;T=Na+88|0;U=Na+92|0;V=Na+96|0;W=Na+100|0;X=Na+104|0;Y=Na+108|0;Z=Na+112|0;_=Na+116|0;$=Ma+4|0;aa=Ma+8|0;ba=Ma+12|0;ca=Ma+16|0;da=Ma+20|0;ea=Ma+24|0;fa=Ma+28|0;ga=Ma+32|0;ha=Ma+36|0;ia=La+84|0;ja=La+88|0;ka=La+92|0;la=La+96|0;ma=La+100|0;na=La+104|0;oa=La+108|0;pa=La+112|0;qa=La+116|0;ra=La+124|0;sa=La+128|0;ta=La+132|0;ua=La+136|0;va=La+140|0;wa=La+144|0;xa=La+148|0;ya=La+152|0;za=La+156|0;while(1){vc(La,Ja);if(n<<24>>24<=0){if(n<<24>>24<0){pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);hb=(0-(n<<24>>24)|0)/2|0;rb=c[Fa>>2]|0;Xa=c[m>>2]|0;Ta=c[h>>2]|0;ib=c[e>>2]|0;mb=c[l>>2]|0;qb=c[f>>2]|0;$a=c[g>>2]|0;bb=c[k>>2]|0;db=c[j>>2]|0;fb=c[q>>2]|0;Za=c[Na>>2]|0;Va=c[r>>2]|0;n=c[s>>2]|0;kb=c[t>>2]|0;ob=c[u>>2]|0;_a=c[v>>2]|0;ab=c[w>>2]|0;cb=c[x>>2]|0;eb=c[y>>2]|0;gb=c[z>>2]|0;c[La>>2]=Za+rb;c[A>>2]=Va+Xa;c[B>>2]=n+Ta;c[C>>2]=kb+ib;c[D>>2]=ob+mb;c[E>>2]=_a+qb;c[F>>2]=ab+$a;c[G>>2]=cb+bb;c[H>>2]=eb+db;c[I>>2]=gb+fb;c[Da>>2]=rb-Za;c[J>>2]=Xa-Va;c[K>>2]=Ta-n;c[L>>2]=ib-kb;c[M>>2]=mb-ob;c[N>>2]=qb-_a;c[O>>2]=$a-ab;c[P>>2]=bb-cb;c[Q>>2]=db-eb;c[R>>2]=fb-gb;pc(Ea,La,Ia+(hb*160|0)+40|0);pc(Da,Da,Ia+(hb*160|0)|0);pc(Ca,Ia+(hb*160|0)+120|0,Ha);pc(La,Ga,Ia+(hb*160|0)+80|0);hb=c[La>>2]<<1;gb=c[A>>2]<<1;fb=c[B>>2]<<1;eb=c[C>>2]<<1;db=c[D>>2]<<1;cb=c[E>>2]<<1;bb=c[F>>2]<<1;ab=c[G>>2]<<1;$a=c[H>>2]<<1;_a=c[I>>2]<<1;c[Ma>>2]=hb;c[$>>2]=gb;c[aa>>2]=fb;c[ba>>2]=eb;c[ca>>2]=db;c[da>>2]=cb;c[ea>>2]=bb;c[fa>>2]=ab;c[ga>>2]=$a;c[ha>>2]=_a;qb=c[Ea>>2]|0;ob=c[ia>>2]|0;mb=c[ja>>2]|0;kb=c[ka>>2]|0;ib=c[la>>2]|0;n=c[ma>>2]|0;Ta=c[na>>2]|0;Va=c[oa>>2]|0;Xa=c[pa>>2]|0;Za=c[qa>>2]|0;rb=c[Da>>2]|0;pb=c[J>>2]|0;nb=c[K>>2]|0;lb=c[L>>2]|0;jb=c[M>>2]|0;p=c[N>>2]|0;Sa=c[O>>2]|0;Ua=c[P>>2]|0;Wa=c[Q>>2]|0;Ya=c[R>>2]|0;c[La>>2]=qb-rb;c[A>>2]=ob-pb;c[B>>2]=mb-nb;c[C>>2]=kb-lb;c[D>>2]=ib-jb;c[E>>2]=n-p;c[F>>2]=Ta-Sa;c[G>>2]=Va-Ua;c[H>>2]=Xa-Wa;c[I>>2]=Za-Ya;c[Da>>2]=rb+qb;c[J>>2]=pb+ob;c[K>>2]=nb+mb;c[L>>2]=lb+kb;c[M>>2]=jb+ib;c[N>>2]=p+n;c[O>>2]=Sa+Ta;c[P>>2]=Ua+Va;c[Q>>2]=Wa+Xa;c[R>>2]=Ya+Za;Za=c[Ca>>2]|0;Ya=c[ra>>2]|0;Xa=c[sa>>2]|0;Wa=c[ta>>2]|0;Va=c[ua>>2]|0;Ua=c[va>>2]|0;Ta=c[wa>>2]|0;Sa=c[xa>>2]|0;n=c[ya>>2]|0;p=c[za>>2]|0;c[Ea>>2]=hb-Za;c[ia>>2]=gb-Ya;c[ja>>2]=fb-Xa;c[ka>>2]=eb-Wa;c[la>>2]=db-Va;c[ma>>2]=cb-Ua;c[na>>2]=bb-Ta;c[oa>>2]=ab-Sa;c[pa>>2]=$a-n;c[qa>>2]=_a-p;Ya=Ya+(c[$>>2]|0)|0;Xa=Xa+(c[aa>>2]|0)|0;Wa=Wa+(c[ba>>2]|0)|0;Va=Va+(c[ca>>2]|0)|0;Ua=Ua+(c[da>>2]|0)|0;Ta=Ta+(c[ea>>2]|0)|0;Sa=Sa+(c[fa>>2]|0)|0;n=n+(c[ga>>2]|0)|0;p=p+(c[ha>>2]|0)|0;c[Ca>>2]=Za+(c[Ma>>2]|0);c[ra>>2]=Ya;c[sa>>2]=Xa;c[ta>>2]=Wa;c[ua>>2]=Va;c[va>>2]=Ua;c[wa>>2]=Ta;c[xa>>2]=Sa;c[ya>>2]=n;c[za>>2]=p}}else{pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);sc(La,Na,Ia+(((n<<24>>24|0)/2|0)*160|0)|0)}p=a[Pa+o>>0]|0;if(p<<24>>24<=0){if(p<<24>>24<0){pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);_a=(0-(p<<24>>24)|0)/2|0;n=c[Fa>>2]|0;kb=c[m>>2]|0;ob=c[h>>2]|0;Za=c[e>>2]|0;Va=c[l>>2]|0;p=c[f>>2]|0;gb=c[g>>2]|0;eb=c[k>>2]|0;cb=c[j>>2]|0;ab=c[q>>2]|0;ib=c[Na>>2]|0;mb=c[r>>2]|0;qb=c[s>>2]|0;Xa=c[t>>2]|0;Ta=c[u>>2]|0;hb=c[v>>2]|0;fb=c[w>>2]|0;db=c[x>>2]|0;bb=c[y>>2]|0;$a=c[z>>2]|0;c[La>>2]=ib+n;c[A>>2]=mb+kb;c[B>>2]=qb+ob;c[C>>2]=Xa+Za;c[D>>2]=Ta+Va;c[E>>2]=hb+p;c[F>>2]=fb+gb;c[G>>2]=db+eb;c[H>>2]=bb+cb;c[I>>2]=$a+ab;c[Da>>2]=n-ib;c[J>>2]=kb-mb;c[K>>2]=ob-qb;c[L>>2]=Za-Xa;c[M>>2]=Va-Ta;c[N>>2]=p-hb;c[O>>2]=gb-fb;c[P>>2]=eb-db;c[Q>>2]=cb-bb;c[R>>2]=ab-$a;pc(Ea,La,608+(_a*120|0)|0);pc(Da,Da,568+(_a*120|0)|0);pc(Ca,648+(_a*120|0)|0,Ha);_a=c[Ga>>2]<<1;$a=c[S>>2]<<1;ab=c[T>>2]<<1;bb=c[U>>2]<<1;cb=c[V>>2]<<1;db=c[W>>2]<<1;eb=c[X>>2]<<1;fb=c[Y>>2]<<1;gb=c[Z>>2]<<1;hb=c[_>>2]<<1;c[Ma>>2]=_a;c[$>>2]=$a;c[aa>>2]=ab;c[ba>>2]=bb;c[ca>>2]=cb;c[da>>2]=db;c[ea>>2]=eb;c[fa>>2]=fb;c[ga>>2]=gb;c[ha>>2]=hb;p=c[Ea>>2]|0;Ta=c[ia>>2]|0;Va=c[ja>>2]|0;Xa=c[ka>>2]|0;Za=c[la>>2]|0;qb=c[ma>>2]|0;ob=c[na>>2]|0;mb=c[oa>>2]|0;kb=c[pa>>2]|0;ib=c[qa>>2]|0;n=c[Da>>2]|0;Sa=c[J>>2]|0;Ua=c[K>>2]|0;Wa=c[L>>2]|0;Ya=c[M>>2]|0;rb=c[N>>2]|0;pb=c[O>>2]|0;nb=c[P>>2]|0;lb=c[Q>>2]|0;jb=c[R>>2]|0;c[La>>2]=p-n;c[A>>2]=Ta-Sa;c[B>>2]=Va-Ua;c[C>>2]=Xa-Wa;c[D>>2]=Za-Ya;c[E>>2]=qb-rb;c[F>>2]=ob-pb;c[G>>2]=mb-nb;c[H>>2]=kb-lb;c[I>>2]=ib-jb;c[Da>>2]=n+p;c[J>>2]=Sa+Ta;c[K>>2]=Ua+Va;c[L>>2]=Wa+Xa;c[M>>2]=Ya+Za;c[N>>2]=rb+qb;c[O>>2]=pb+ob;c[P>>2]=nb+mb;c[Q>>2]=lb+kb;c[R>>2]=jb+ib;ib=c[Ca>>2]|0;jb=c[ra>>2]|0;kb=c[sa>>2]|0;lb=c[ta>>2]|0;mb=c[ua>>2]|0;nb=c[va>>2]|0;ob=c[wa>>2]|0;pb=c[xa>>2]|0;qb=c[ya>>2]|0;rb=c[za>>2]|0;c[Ea>>2]=_a-ib;c[ia>>2]=$a-jb;c[ja>>2]=ab-kb;c[ka>>2]=bb-lb;c[la>>2]=cb-mb;c[ma>>2]=db-nb;c[na>>2]=eb-ob;c[oa>>2]=fb-pb;c[pa>>2]=gb-qb;c[qa>>2]=hb-rb;jb=jb+(c[$>>2]|0)|0;kb=kb+(c[aa>>2]|0)|0;lb=lb+(c[ba>>2]|0)|0;mb=mb+(c[ca>>2]|0)|0;nb=nb+(c[da>>2]|0)|0;ob=ob+(c[ea>>2]|0)|0;pb=pb+(c[fa>>2]|0)|0;qb=qb+(c[ga>>2]|0)|0;rb=rb+(c[ha>>2]|0)|0;c[Ca>>2]=ib+(c[Ma>>2]|0);c[ra>>2]=jb;c[sa>>2]=kb;c[ta>>2]=lb;c[ua>>2]=mb;c[va>>2]=nb;c[wa>>2]=ob;c[xa>>2]=pb;c[ya>>2]=qb;c[za>>2]=rb}}else{pc(Na,La,Ca);pc(Fa,Da,Ea);pc(Ga,Ea,Ca);pc(Ha,La,Da);uc(La,Na,568+(((p<<24>>24|0)/2|0)*120|0)|0)}pc(Ja,La,Ca);pc(Aa,Da,Ea);pc(Ba,Ea,Ca);p=o+-1|0;if((p|0)<=-1)break e;n=a[Oa+p>>0]|0;o=p}}while(0);oc(Ma,Ba);pc(Oa,Ja,Ma);pc(Pa,Aa,Ma);rc(Qa,Pa);rc(Ka,Oa);j=Qa+31|0;a[j>>0]=d[j>>0]^d[Ka>>0]<<7;j=Hc(Qa,b)|0;k=(Qa|0)==(b|0);g=0;f=0;do{g=a[Qa+f>>0]^a[b+f>>0]|g;f=f+1|0}while((f|0)!=32);rb=(k?-1:j)|(((g&255)+511|0)>>>8&1)+-1;i=Ra;return rb|0}function Cc(b){b=b|0;var c=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0;ea=b+1|0;ba=b+2|0;Ja=a[ba>>0]|0;da=d[b>>0]|0;W=id(d[ea>>0]|0|0,0,8)|0;va=C;Ja=Ja&255;V=id(Ja|0,0,16)|0;aa=b+3|0;sa=id(d[aa>>0]|0|0,0,8)|0;pa=C;$=b+4|0;U=id(d[$>>0]|0|0,0,16)|0;pa=pa|C;Y=b+5|0;N=d[Y>>0]|0;X=id(N|0,0,24)|0;pa=hd(sa|Ja|U|X|0,pa|C|0,5)|0;X=b+6|0;U=b+7|0;Ja=a[U>>0]|0;sa=id(d[X>>0]|0|0,0,8)|0;Ka=C;Ja=Ja&255;T=id(Ja|0,0,16)|0;Ka=hd(sa|N|T|0,Ka|C|0,2)|0;T=b+8|0;N=id(d[T>>0]|0|0,0,8)|0;sa=C;S=b+9|0;Ga=id(d[S>>0]|0|0,0,16)|0;sa=sa|C;P=b+10|0;Sa=d[P>>0]|0;O=id(Sa|0,0,24)|0;sa=hd(N|Ja|Ga|O|0,sa|C|0,7)|0;O=b+11|0;Ga=id(d[O>>0]|0|0,0,8)|0;Ja=C;N=b+12|0;G=id(d[N>>0]|0|0,0,16)|0;Ja=Ja|C;K=b+13|0;u=d[K>>0]|0;J=id(u|0,0,24)|0;Ja=hd(Ga|Sa|G|J|0,Ja|C|0,4)|0;J=b+14|0;G=b+15|0;Sa=a[G>>0]|0;Ga=id(d[J>>0]|0|0,0,8)|0;Da=C;Sa=Sa&255;F=id(Sa|0,0,16)|0;Da=hd(Ga|u|F|0,Da|C|0,1)|0;F=b+16|0;u=id(d[F>>0]|0|0,0,8)|0;Ga=C;E=b+17|0;w=id(d[E>>0]|0|0,0,16)|0;Ga=Ga|C;A=b+18|0;v=d[A>>0]|0;z=id(v|0,0,24)|0;Ga=hd(u|Sa|w|z|0,Ga|C|0,6)|0;z=b+19|0;w=b+20|0;Sa=a[w>>0]|0;u=id(d[z>>0]|0|0,0,8)|0;Ta=C;Sa=id(Sa&255|0,0,16)|0;Ta=hd(u|v|Sa|0,Ta|C|0,3)|0;Sa=C;v=b+21|0;u=b+22|0;r=b+23|0;Qa=a[r>>0]|0;ab=d[v>>0]|0;bb=id(d[u>>0]|0|0,0,8)|0;_a=C;Qa=Qa&255;$a=id(Qa|0,0,16)|0;q=b+24|0;ya=id(d[q>>0]|0|0,0,8)|0;ja=C;p=b+25|0;i=id(d[p>>0]|0|0,0,16)|0;ja=ja|C;m=b+26|0;Ha=d[m>>0]|0;l=id(Ha|0,0,24)|0;ja=hd(ya|Qa|i|l|0,ja|C|0,5)|0;l=b+27|0;i=b+28|0;Qa=a[i>>0]|0;ya=id(d[l>>0]|0|0,0,8)|0;Za=C;Qa=Qa&255;h=id(Qa|0,0,16)|0;Za=hd(ya|Ha|h|0,Za|C|0,2)|0;h=b+29|0;Ha=id(d[h>>0]|0|0,0,8)|0;ya=C;g=b+30|0;fb=id(d[g>>0]|0|0,0,16)|0;ya=ya|C;c=b+31|0;t=d[c>>0]|0;ra=id(t|0,0,24)|0;ya=hd(Ha|Qa|fb|ra|0,ya|C|0,7)|0;ra=id(d[b+32>>0]|0|0,0,8)|0;fb=C;Qa=id(d[b+33>>0]|0|0,0,16)|0;fb=fb|C;Ha=d[b+34>>0]|0;Aa=id(Ha|0,0,24)|0;fb=hd(ra|t|Qa|Aa|0,fb|C|0,4)|0;Aa=a[b+36>>0]|0;Qa=id(d[b+35>>0]|0|0,0,8)|0;t=C;Aa=Aa&255;ra=id(Aa|0,0,16)|0;t=hd(Qa|Ha|ra|0,t|C|0,1)|0;ra=id(d[b+37>>0]|0|0,0,8)|0;Ha=C;Qa=id(d[b+38>>0]|0|0,0,16)|0;Ha=Ha|C;ua=d[b+39>>0]|0;fa=id(ua|0,0,24)|0;Ha=hd(ra|Aa|Qa|fa|0,Ha|C|0,6)|0;fa=a[b+41>>0]|0;Qa=id(d[b+40>>0]|0|0,0,8)|0;Aa=C;fa=id(fa&255|0,0,16)|0;Aa=hd(Qa|ua|fa|0,Aa|C|0,3)|0;fa=C;ua=a[b+44>>0]|0;Qa=d[b+42>>0]|0;ra=id(d[b+43>>0]|0|0,0,8)|0;H=C;ua=ua&255;la=id(ua|0,0,16)|0;Ea=id(d[b+45>>0]|0|0,0,8)|0;L=C;Ma=id(d[b+46>>0]|0|0,0,16)|0;L=L|C;gb=d[b+47>>0]|0;M=id(gb|0,0,24)|0;L=hd(Ea|ua|Ma|M|0,L|C|0,5)|0;M=a[b+49>>0]|0;Ma=id(d[b+48>>0]|0|0,0,8)|0;ua=C;M=M&255;Ea=id(M|0,0,16)|0;ua=hd(Ma|gb|Ea|0,ua|C|0,2)|0;ua=ua&2097151;Ea=id(d[b+50>>0]|0|0,0,8)|0;gb=C;Ma=id(d[b+51>>0]|0|0,0,16)|0;gb=gb|C;Ia=d[b+52>>0]|0;n=id(Ia|0,0,24)|0;gb=hd(Ea|M|Ma|n|0,gb|C|0,7)|0;gb=gb&2097151;n=id(d[b+53>>0]|0|0,0,8)|0;Ma=C;M=id(d[b+54>>0]|0|0,0,16)|0;Ma=Ma|C;Ea=d[b+55>>0]|0;R=id(Ea|0,0,24)|0;Ma=hd(n|Ia|M|R|0,Ma|C|0,4)|0;Ma=Ma&2097151;R=a[b+57>>0]|0;M=id(d[b+56>>0]|0|0,0,8)|0;Ia=C;R=R&255;n=id(R|0,0,16)|0;Ia=hd(M|Ea|n|0,Ia|C|0,1)|0;Ia=Ia&2097151;n=id(d[b+58>>0]|0|0,0,8)|0;Ea=C;M=id(d[b+59>>0]|0|0,0,16)|0;Ea=Ea|C;ha=d[b+60>>0]|0;ga=id(ha|0,0,24)|0;Ea=hd(n|R|M|ga|0,Ea|C|0,6)|0;Ea=Ea&2097151;ga=id(d[b+61>>0]|0|0,0,8)|0;M=C;R=id(d[b+62>>0]|0|0,0,16)|0;M=M|C;n=id(d[b+63>>0]|0|0,0,24)|0;M=hd(ga|ha|R|n|0,M|C|0,3)|0;n=C;R=qd(M|0,n|0,666643,0)|0;ha=C;ga=qd(M|0,n|0,470296,0)|0;I=C;s=qd(M|0,n|0,654183,0)|0;D=C;Q=qd(M|0,n|0,-997805,-1)|0;Z=C;k=qd(M|0,n|0,136657,0)|0;f=C;n=qd(M|0,n|0,-683901,-1)|0;H=fd(n|0,C|0,ra|Qa|la&2031616|0,H|0)|0;la=C;Qa=qd(Ea|0,0,666643,0)|0;ra=C;n=qd(Ea|0,0,470296,0)|0;M=C;Va=qd(Ea|0,0,654183,0)|0;Pa=C;za=qd(Ea|0,0,-997805,-1)|0;_=C;Na=qd(Ea|0,0,136657,0)|0;Oa=C;Ea=qd(Ea|0,0,-683901,-1)|0;y=C;e=qd(Ia|0,0,666643,0)|0;ca=C;Fa=qd(Ia|0,0,470296,0)|0;ta=C;o=qd(Ia|0,0,654183,0)|0;La=C;cb=qd(Ia|0,0,-997805,-1)|0;Ua=C;wa=qd(Ia|0,0,136657,0)|0;ma=C;Ia=qd(Ia|0,0,-683901,-1)|0;Ha=fd(Ia|0,C|0,Ha&2097151|0,0)|0;Oa=fd(Ha|0,C|0,Na|0,Oa|0)|0;Z=fd(Oa|0,C|0,Q|0,Z|0)|0;Q=C;Oa=qd(Ma|0,0,666643,0)|0;Na=C;Ha=qd(Ma|0,0,470296,0)|0;Ia=C;Wa=qd(Ma|0,0,654183,0)|0;qa=C;Ba=qd(Ma|0,0,-997805,-1)|0;ia=C;eb=qd(Ma|0,0,136657,0)|0;db=C;Ma=qd(Ma|0,0,-683901,-1)|0;j=C;B=qd(gb|0,0,666643,0)|0;x=C;ka=qd(gb|0,0,470296,0)|0;Ra=C;oa=qd(gb|0,0,654183,0)|0;na=C;Ya=qd(gb|0,0,-997805,-1)|0;Xa=C;xa=qd(gb|0,0,136657,0)|0;Ca=C;gb=qd(gb|0,0,-683901,-1)|0;fb=fd(gb|0,C|0,fb&2097151|0,0)|0;db=fd(fb|0,C|0,eb|0,db|0)|0;Ua=fd(db|0,C|0,cb|0,Ua|0)|0;Pa=fd(Ua|0,C|0,Va|0,Pa|0)|0;I=fd(Pa|0,C|0,ga|0,I|0)|0;ga=C;Pa=qd(ua|0,0,666643,0)|0;Ga=fd(Pa|0,C|0,Ga&2097151|0,0)|0;Pa=C;Va=qd(ua|0,0,470296,0)|0;Ua=C;cb=qd(ua|0,0,654183,0)|0;_a=fd(cb|0,C|0,bb|ab|$a&2031616|0,_a|0)|0;Ra=fd(_a|0,C|0,ka|0,Ra|0)|0;Na=fd(Ra|0,C|0,Oa|0,Na|0)|0;Oa=C;Ra=qd(ua|0,0,-997805,-1)|0;ka=C;_a=qd(ua|0,0,136657,0)|0;Za=fd(_a|0,C|0,Za&2097151|0,0)|0;Xa=fd(Za|0,C|0,Ya|0,Xa|0)|0;qa=fd(Xa|0,C|0,Wa|0,qa|0)|0;ta=fd(qa|0,C|0,Fa|0,ta|0)|0;ra=fd(ta|0,C|0,Qa|0,ra|0)|0;Qa=C;ua=qd(ua|0,0,-683901,-1)|0;ta=C;Fa=fd(Ga|0,Pa|0,1048576,0)|0;Fa=hd(Fa|0,C|0,21)|0;qa=C;Sa=fd(Va|0,Ua|0,Ta|0,Sa|0)|0;Sa=fd(Sa|0,C|0,Fa|0,qa|0)|0;x=fd(Sa|0,C|0,B|0,x|0)|0;B=C;qa=id(Fa|0,qa|0,21)|0;qa=ed(Ga|0,Pa|0,qa|0,C|0)|0;Pa=C;Ga=fd(Na|0,Oa|0,1048576,0)|0;Ga=hd(Ga|0,C|0,21)|0;Fa=C;ja=fd(Ra|0,ka|0,ja&2097151|0,0)|0;na=fd(ja|0,C|0,oa|0,na|0)|0;Ia=fd(na|0,C|0,Ha|0,Ia|0)|0;ca=fd(Ia|0,C|0,e|0,ca|0)|0;ca=fd(ca|0,C|0,Ga|0,Fa|0)|0;e=C;Fa=id(Ga|0,Fa|0,21)|0;Ga=C;Ia=fd(ra|0,Qa|0,1048576,0)|0;Ia=dd(Ia|0,C|0,21)|0;Ha=C;ya=fd(ua|0,ta|0,ya&2097151|0,0)|0;Ca=fd(ya|0,C|0,xa|0,Ca|0)|0;ia=fd(Ca|0,C|0,Ba|0,ia|0)|0;La=fd(ia|0,C|0,o|0,La|0)|0;M=fd(La|0,C|0,n|0,M|0)|0;ha=fd(M|0,C|0,R|0,ha|0)|0;ha=fd(ha|0,C|0,Ia|0,Ha|0)|0;R=C;Ha=id(Ia|0,Ha|0,21)|0;Ia=C;M=fd(I|0,ga|0,1048576,0)|0;M=dd(M|0,C|0,21)|0;n=C;t=fd(Ma|0,j|0,t&2097151|0,0)|0;ma=fd(t|0,C|0,wa|0,ma|0)|0;_=fd(ma|0,C|0,za|0,_|0)|0;D=fd(_|0,C|0,s|0,D|0)|0;D=fd(D|0,C|0,M|0,n|0)|0;s=C;n=id(M|0,n|0,21)|0;n=ed(I|0,ga|0,n|0,C|0)|0;ga=C;I=fd(Z|0,Q|0,1048576,0)|0;I=dd(I|0,C|0,21)|0;M=C;fa=fd(Ea|0,y|0,Aa|0,fa|0)|0;f=fd(fa|0,C|0,k|0,f|0)|0;f=fd(f|0,C|0,I|0,M|0)|0;k=C;M=id(I|0,M|0,21)|0;M=ed(Z|0,Q|0,M|0,C|0)|0;Q=C;Z=fd(H|0,la|0,1048576,0)|0;Z=dd(Z|0,C|0,21)|0;I=C;L=fd(Z|0,I|0,L&2097151|0,0)|0;fa=C;I=id(Z|0,I|0,21)|0;I=ed(H|0,la|0,I|0,C|0)|0;la=C;H=fd(x|0,B|0,1048576,0)|0;H=hd(H|0,C|0,21)|0;Z=C;Aa=id(H|0,Z|0,21)|0;Aa=ed(x|0,B|0,Aa|0,C|0)|0;B=C;x=fd(ca|0,e|0,1048576,0)|0;x=dd(x|0,C|0,21)|0;y=C;Ea=id(x|0,y|0,21)|0;Ea=ed(ca|0,e|0,Ea|0,C|0)|0;e=C;ca=fd(ha|0,R|0,1048576,0)|0;ca=dd(ca|0,C|0,21)|0;_=C;ga=fd(n|0,ga|0,ca|0,_|0)|0;n=C;_=id(ca|0,_|0,21)|0;_=ed(ha|0,R|0,_|0,C|0)|0;R=C;ha=fd(D|0,s|0,1048576,0)|0;ha=dd(ha|0,C|0,21)|0;ca=C;Q=fd(ha|0,ca|0,M|0,Q|0)|0;M=C;ca=id(ha|0,ca|0,21)|0;ca=ed(D|0,s|0,ca|0,C|0)|0;s=C;D=fd(f|0,k|0,1048576,0)|0;D=dd(D|0,C|0,21)|0;ha=C;la=fd(D|0,ha|0,I|0,la|0)|0;I=C;ha=id(D|0,ha|0,21)|0;ha=ed(f|0,k|0,ha|0,C|0)|0;k=C;f=qd(L|0,fa|0,666643,0)|0;Da=fd(f|0,C|0,Da&2097151|0,0)|0;f=C;D=qd(L|0,fa|0,470296,0)|0;D=fd(qa|0,Pa|0,D|0,C|0)|0;Pa=C;qa=qd(L|0,fa|0,654183,0)|0;qa=fd(Aa|0,B|0,qa|0,C|0)|0;B=C;Aa=qd(L|0,fa|0,-997805,-1)|0;za=C;ma=qd(L|0,fa|0,136657,0)|0;ma=fd(Ea|0,e|0,ma|0,C|0)|0;e=C;fa=qd(L|0,fa|0,-683901,-1)|0;L=C;y=fd(ra|0,Qa|0,x|0,y|0)|0;Ia=ed(y|0,C|0,Ha|0,Ia|0)|0;L=fd(Ia|0,C|0,fa|0,L|0)|0;fa=C;Ia=qd(la|0,I|0,666643,0)|0;Ha=C;y=qd(la|0,I|0,470296,0)|0;x=C;Qa=qd(la|0,I|0,654183,0)|0;Qa=fd(D|0,Pa|0,Qa|0,C|0)|0;Pa=C;D=qd(la|0,I|0,-997805,-1)|0;D=fd(qa|0,B|0,D|0,C|0)|0;B=C;qa=qd(la|0,I|0,136657,0)|0;ra=C;I=qd(la|0,I|0,-683901,-1)|0;I=fd(ma|0,e|0,I|0,C|0)|0;e=C;ma=qd(ha|0,k|0,666643,0)|0;la=C;Ea=qd(ha|0,k|0,470296,0)|0;wa=C;t=qd(ha|0,k|0,654183,0)|0;j=C;Ma=qd(ha|0,k|0,-997805,-1)|0;La=C;o=qd(ha|0,k|0,136657,0)|0;ia=C;k=qd(ha|0,k|0,-683901,-1)|0;ha=C;Z=fd(Na|0,Oa|0,H|0,Z|0)|0;Ga=ed(Z|0,C|0,Fa|0,Ga|0)|0;za=fd(Ga|0,C|0,Aa|0,za|0)|0;ra=fd(za|0,C|0,qa|0,ra|0)|0;ha=fd(ra|0,C|0,k|0,ha|0)|0;k=C;ra=qd(Q|0,M|0,666643,0)|0;qa=C;za=qd(Q|0,M|0,470296,0)|0;Aa=C;Ga=qd(Q|0,M|0,654183,0)|0;Fa=C;Z=qd(Q|0,M|0,-997805,-1)|0;H=C;Oa=qd(Q|0,M|0,136657,0)|0;Na=C;M=qd(Q|0,M|0,-683901,-1)|0;Q=C;Ba=qd(ca|0,s|0,666643,0)|0;Ca=C;xa=qd(ca|0,s|0,470296,0)|0;ya=C;ta=qd(ca|0,s|0,654183,0)|0;ua=C;na=qd(ca|0,s|0,-997805,-1)|0;oa=C;ja=qd(ca|0,s|0,136657,0)|0;ka=C;s=qd(ca|0,s|0,-683901,-1)|0;ca=C;Na=fd(Qa|0,Pa|0,Oa|0,Na|0)|0;La=fd(Na|0,C|0,Ma|0,La|0)|0;ca=fd(La|0,C|0,s|0,ca|0)|0;s=C;La=qd(ga|0,n|0,666643,0)|0;va=fd(La|0,C|0,W|da|V&2031616|0,va|0)|0;V=C;da=qd(ga|0,n|0,470296,0)|0;W=C;La=qd(ga|0,n|0,654183,0)|0;Ka=fd(La|0,C|0,Ka&2097151|0,0)|0;qa=fd(Ka|0,C|0,ra|0,qa|0)|0;ya=fd(qa|0,C|0,xa|0,ya|0)|0;xa=C;qa=qd(ga|0,n|0,-997805,-1)|0;ra=C;Ka=qd(ga|0,n|0,136657,0)|0;Ja=fd(Ka|0,C|0,Ja&2097151|0,0)|0;Ha=fd(Ja|0,C|0,Ia|0,Ha|0)|0;Fa=fd(Ha|0,C|0,Ga|0,Fa|0)|0;wa=fd(Fa|0,C|0,Ea|0,wa|0)|0;oa=fd(wa|0,C|0,na|0,oa|0)|0;na=C;n=qd(ga|0,n|0,-683901,-1)|0;ga=C;wa=fd(va|0,V|0,1048576,0)|0;wa=dd(wa|0,C|0,21)|0;Ea=C;pa=fd(da|0,W|0,pa&2097151|0,0)|0;Ca=fd(pa|0,C|0,Ba|0,Ca|0)|0;Ca=fd(Ca|0,C|0,wa|0,Ea|0)|0;Ba=C;Ea=id(wa|0,Ea|0,21)|0;Ea=ed(va|0,V|0,Ea|0,C|0)|0;V=C;va=fd(ya|0,xa|0,1048576,0)|0;va=dd(va|0,C|0,21)|0;wa=C;sa=fd(qa|0,ra|0,sa&2097151|0,0)|0;Aa=fd(sa|0,C|0,za|0,Aa|0)|0;la=fd(Aa|0,C|0,ma|0,la|0)|0;ua=fd(la|0,C|0,ta|0,ua|0)|0;ua=fd(ua|0,C|0,va|0,wa|0)|0;ta=C;wa=id(va|0,wa|0,21)|0;va=C;la=fd(oa|0,na|0,1048576,0)|0;la=dd(la|0,C|0,21)|0;ma=C;ga=fd(Da|0,f|0,n|0,ga|0)|0;x=fd(ga|0,C|0,y|0,x|0)|0;H=fd(x|0,C|0,Z|0,H|0)|0;j=fd(H|0,C|0,t|0,j|0)|0;ka=fd(j|0,C|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,la|0,ma|0)|0;ja=C;ma=id(la|0,ma|0,21)|0;la=C;j=fd(ca|0,s|0,1048576,0)|0;j=dd(j|0,C|0,21)|0;t=C;Q=fd(D|0,B|0,M|0,Q|0)|0;ia=fd(Q|0,C|0,o|0,ia|0)|0;ia=fd(ia|0,C|0,j|0,t|0)|0;o=C;t=id(j|0,t|0,21)|0;t=ed(ca|0,s|0,t|0,C|0)|0;s=C;ca=fd(ha|0,k|0,1048576,0)|0;ca=dd(ca|0,C|0,21)|0;j=C;e=fd(I|0,e|0,ca|0,j|0)|0;I=C;j=id(ca|0,j|0,21)|0;j=ed(ha|0,k|0,j|0,C|0)|0;k=C;ha=fd(L|0,fa|0,1048576,0)|0;ha=dd(ha|0,C|0,21)|0;ca=C;R=fd(ha|0,ca|0,_|0,R|0)|0;_=C;ca=id(ha|0,ca|0,21)|0;ca=ed(L|0,fa|0,ca|0,C|0)|0;fa=C;L=fd(Ca|0,Ba|0,1048576,0)|0;L=dd(L|0,C|0,21)|0;ha=C;Q=id(L|0,ha|0,21)|0;M=C;B=fd(ua|0,ta|0,1048576,0)|0;B=dd(B|0,C|0,21)|0;D=C;H=id(B|0,D|0,21)|0;Z=C;x=fd(ka|0,ja|0,1048576,0)|0;x=dd(x|0,C|0,21)|0;y=C;s=fd(t|0,s|0,x|0,y|0)|0;t=C;y=id(x|0,y|0,21)|0;x=C;ga=fd(ia|0,o|0,1048576,0)|0;ga=dd(ga|0,C|0,21)|0;n=C;k=fd(j|0,k|0,ga|0,n|0)|0;j=C;n=id(ga|0,n|0,21)|0;n=ed(ia|0,o|0,n|0,C|0)|0;o=C;ia=fd(e|0,I|0,1048576,0)|0;ia=dd(ia|0,C|0,21)|0;ga=C;fa=fd(ca|0,fa|0,ia|0,ga|0)|0;ca=C;ga=id(ia|0,ga|0,21)|0;ga=ed(e|0,I|0,ga|0,C|0)|0;I=C;e=fd(R|0,_|0,1048576,0)|0;e=dd(e|0,C|0,21)|0;ia=C;f=id(e|0,ia|0,21)|0;f=ed(R|0,_|0,f|0,C|0)|0;_=C;R=qd(e|0,ia|0,666643,0)|0;R=fd(Ea|0,V|0,R|0,C|0)|0;V=C;Ea=qd(e|0,ia|0,470296,0)|0;Da=C;Aa=qd(e|0,ia|0,654183,0)|0;za=C;sa=qd(e|0,ia|0,-997805,-1)|0;ra=C;qa=qd(e|0,ia|0,136657,0)|0;pa=C;ia=qd(e|0,ia|0,-683901,-1)|0;e=C;W=dd(R|0,V|0,21)|0;da=C;Ba=fd(Ea|0,Da|0,Ca|0,Ba|0)|0;M=ed(Ba|0,C|0,Q|0,M|0)|0;M=fd(M|0,C|0,W|0,da|0)|0;Q=C;da=id(W|0,da|0,21)|0;da=ed(R|0,V|0,da|0,C|0)|0;V=C;R=dd(M|0,Q|0,21)|0;W=C;xa=fd(Aa|0,za|0,ya|0,xa|0)|0;va=ed(xa|0,C|0,wa|0,va|0)|0;ha=fd(va|0,C|0,L|0,ha|0)|0;ha=fd(ha|0,C|0,R|0,W|0)|0;L=C;W=id(R|0,W|0,21)|0;W=ed(M|0,Q|0,W|0,C|0)|0;Q=C;M=dd(ha|0,L|0,21)|0;R=C;ra=fd(ua|0,ta|0,sa|0,ra|0)|0;Z=ed(ra|0,C|0,H|0,Z|0)|0;Z=fd(Z|0,C|0,M|0,R|0)|0;H=C;R=id(M|0,R|0,21)|0;R=ed(ha|0,L|0,R|0,C|0)|0;L=C;ha=dd(Z|0,H|0,21)|0;M=C;na=fd(qa|0,pa|0,oa|0,na|0)|0;la=ed(na|0,C|0,ma|0,la|0)|0;D=fd(la|0,C|0,B|0,D|0)|0;D=fd(D|0,C|0,ha|0,M|0)|0;B=C;M=id(ha|0,M|0,21)|0;M=ed(Z|0,H|0,M|0,C|0)|0;H=C;Z=dd(D|0,B|0,21)|0;ha=C;e=fd(ka|0,ja|0,ia|0,e|0)|0;x=ed(e|0,C|0,y|0,x|0)|0;x=fd(x|0,C|0,Z|0,ha|0)|0;y=C;ha=id(Z|0,ha|0,21)|0;ha=ed(D|0,B|0,ha|0,C|0)|0;B=C;D=dd(x|0,y|0,21)|0;Z=C;t=fd(s|0,t|0,D|0,Z|0)|0;s=C;Z=id(D|0,Z|0,21)|0;Z=ed(x|0,y|0,Z|0,C|0)|0;y=C;x=dd(t|0,s|0,21)|0;D=C;o=fd(x|0,D|0,n|0,o|0)|0;n=C;D=id(x|0,D|0,21)|0;D=ed(t|0,s|0,D|0,C|0)|0;s=C;t=dd(o|0,n|0,21)|0;x=C;j=fd(k|0,j|0,t|0,x|0)|0;k=C;x=id(t|0,x|0,21)|0;x=ed(o|0,n|0,x|0,C|0)|0;n=C;o=dd(j|0,k|0,21)|0;t=C;I=fd(o|0,t|0,ga|0,I|0)|0;ga=C;t=id(o|0,t|0,21)|0;t=ed(j|0,k|0,t|0,C|0)|0;k=C;j=dd(I|0,ga|0,21)|0;o=C;ca=fd(fa|0,ca|0,j|0,o|0)|0;fa=C;o=id(j|0,o|0,21)|0;o=ed(I|0,ga|0,o|0,C|0)|0;ga=C;I=dd(ca|0,fa|0,21)|0;j=C;_=fd(I|0,j|0,f|0,_|0)|0;f=C;j=id(I|0,j|0,21)|0;j=ed(ca|0,fa|0,j|0,C|0)|0;fa=C;ca=dd(_|0,f|0,21)|0;I=C;e=id(ca|0,I|0,21)|0;e=ed(_|0,f|0,e|0,C|0)|0;f=C;_=qd(ca|0,I|0,666643,0)|0;V=fd(_|0,C|0,da|0,V|0)|0;da=C;_=qd(ca|0,I|0,470296,0)|0;_=fd(W|0,Q|0,_|0,C|0)|0;Q=C;W=qd(ca|0,I|0,654183,0)|0;W=fd(R|0,L|0,W|0,C|0)|0;L=C;R=qd(ca|0,I|0,-997805,-1)|0;R=fd(M|0,H|0,R|0,C|0)|0;H=C;M=qd(ca|0,I|0,136657,0)|0;M=fd(ha|0,B|0,M|0,C|0)|0;B=C;I=qd(ca|0,I|0,-683901,-1)|0;I=fd(Z|0,y|0,I|0,C|0)|0;y=C;Z=dd(V|0,da|0,21)|0;ca=C;Q=fd(_|0,Q|0,Z|0,ca|0)|0;_=C;ca=id(Z|0,ca|0,21)|0;ca=ed(V|0,da|0,ca|0,C|0)|0;da=C;V=dd(Q|0,_|0,21)|0;Z=C;L=fd(W|0,L|0,V|0,Z|0)|0;W=C;Z=id(V|0,Z|0,21)|0;Z=ed(Q|0,_|0,Z|0,C|0)|0;_=C;Q=dd(L|0,W|0,21)|0;V=C;H=fd(R|0,H|0,Q|0,V|0)|0;R=C;V=id(Q|0,V|0,21)|0;V=ed(L|0,W|0,V|0,C|0)|0;W=C;L=dd(H|0,R|0,21)|0;Q=C;B=fd(M|0,B|0,L|0,Q|0)|0;M=C;Q=id(L|0,Q|0,21)|0;Q=ed(H|0,R|0,Q|0,C|0)|0;R=C;H=dd(B|0,M|0,21)|0;L=C;y=fd(I|0,y|0,H|0,L|0)|0;I=C;L=id(H|0,L|0,21)|0;L=ed(B|0,M|0,L|0,C|0)|0;M=C;B=dd(y|0,I|0,21)|0;H=C;s=fd(B|0,H|0,D|0,s|0)|0;D=C;H=id(B|0,H|0,21)|0;H=ed(y|0,I|0,H|0,C|0)|0;I=C;y=dd(s|0,D|0,21)|0;B=C;n=fd(y|0,B|0,x|0,n|0)|0;x=C;B=id(y|0,B|0,21)|0;B=ed(s|0,D|0,B|0,C|0)|0;D=C;s=dd(n|0,x|0,21)|0;y=C;k=fd(s|0,y|0,t|0,k|0)|0;t=C;y=id(s|0,y|0,21)|0;y=ed(n|0,x|0,y|0,C|0)|0;x=C;n=dd(k|0,t|0,21)|0;s=C;ga=fd(n|0,s|0,o|0,ga|0)|0;o=C;s=id(n|0,s|0,21)|0;s=ed(k|0,t|0,s|0,C|0)|0;t=C;k=dd(ga|0,o|0,21)|0;n=C;fa=fd(k|0,n|0,j|0,fa|0)|0;j=C;n=id(k|0,n|0,21)|0;n=ed(ga|0,o|0,n|0,C|0)|0;o=C;ga=dd(fa|0,j|0,21)|0;k=C;f=fd(ga|0,k|0,e|0,f|0)|0;e=C;k=id(ga|0,k|0,21)|0;k=ed(fa|0,j|0,k|0,C|0)|0;j=C;a[b>>0]=ca;b=hd(ca|0,da|0,8)|0;a[ea>>0]=b;b=hd(ca|0,da|0,16)|0;da=C;ca=id(Z|0,_|0,5)|0;a[ba>>0]=ca|b;b=hd(Z|0,_|0,3)|0;a[aa>>0]=b;b=hd(Z|0,_|0,11)|0;a[$>>0]=b;b=hd(Z|0,_|0,19)|0;_=C;Z=id(V|0,W|0,2)|0;a[Y>>0]=Z|b;b=hd(V|0,W|0,6)|0;a[X>>0]=b;b=hd(V|0,W|0,14)|0;W=C;V=id(Q|0,R|0,7)|0;a[U>>0]=V|b;b=hd(Q|0,R|0,1)|0;a[T>>0]=b;b=hd(Q|0,R|0,9)|0;a[S>>0]=b;b=hd(Q|0,R|0,17)|0;R=C;Q=id(L|0,M|0,4)|0;a[P>>0]=Q|b;b=hd(L|0,M|0,4)|0;a[O>>0]=b;b=hd(L|0,M|0,12)|0;a[N>>0]=b;b=hd(L|0,M|0,20)|0;M=C;L=id(H|0,I|0,1)|0;a[K>>0]=L|b;b=hd(H|0,I|0,7)|0;a[J>>0]=b;b=hd(H|0,I|0,15)|0;I=C;H=id(B|0,D|0,6)|0;a[G>>0]=H|b;b=hd(B|0,D|0,2)|0;a[F>>0]=b;b=hd(B|0,D|0,10)|0;a[E>>0]=b;b=hd(B|0,D|0,18)|0;D=C;B=id(y|0,x|0,3)|0;a[A>>0]=B|b;b=hd(y|0,x|0,5)|0;a[z>>0]=b;b=hd(y|0,x|0,13)|0;a[w>>0]=b;a[v>>0]=s;b=hd(s|0,t|0,8)|0;a[u>>0]=b;b=hd(s|0,t|0,16)|0;t=C;s=id(n|0,o|0,5)|0;a[r>>0]=s|b;b=hd(n|0,o|0,3)|0;a[q>>0]=b;b=hd(n|0,o|0,11)|0;a[p>>0]=b;b=hd(n|0,o|0,19)|0;o=C;n=id(k|0,j|0,2)|0;a[m>>0]=n|b;b=hd(k|0,j|0,6)|0;a[l>>0]=b;j=hd(k|0,j|0,14)|0;k=C;b=id(f|0,e|0,7)|0;a[i>>0]=j|b;b=hd(f|0,e|0,1)|0;a[h>>0]=b;b=hd(f|0,e|0,9)|0;a[g>>0]=b;b=hd(f|0,e|0,17)|0;a[c>>0]=b;return}function Dc(b,e,f,g,h,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,qc=0,sc=0,tc=0,uc=0,vc=0,wc=0,yc=0,zc=0,Ac=0,Bc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0;u=i;k=i=i+63&-64;i=i+896|0;q=k+208|0;p=k+656|0;r=k+416|0;s=k+616|0;n=k;l=k+824|0;o=k+760|0;m=k+696|0;k=k+456|0;t=q;c[t>>2]=-205731576;c[t+4>>2]=1779033703;t=q+8|0;c[t>>2]=-2067093701;c[t+4>>2]=-1150833019;t=q+16|0;c[t>>2]=-23791573;c[t+4>>2]=1013904242;t=q+24|0;c[t>>2]=1595750129;c[t+4>>2]=-1521486534;t=q+32|0;c[t>>2]=-1377402159;c[t+4>>2]=1359893119;t=q+40|0;c[t>>2]=725511199;c[t+4>>2]=-1694144372;t=q+48|0;c[t>>2]=-79577749;c[t+4>>2]=528734635;t=q+56|0;c[t>>2]=327033209;c[t+4>>2]=1541459225;t=q+72|0;c[t>>2]=256;c[t+4>>2]=0;t=q+64|0;c[t>>2]=0;c[t+4>>2]=0;t=q+80|0;v=j+0|0;w=t+32|0;do{a[t>>0]=a[v>>0]|0;t=t+1|0;v=v+1|0}while((t|0)<(w|0));vb(q,l);a[l>>0]=(d[l>>0]|0)&248;Ka=l+31|0;a[Ka>>0]=(d[Ka>>0]|0)&63|64;J=n+64|0;c[J+0>>2]=0;c[J+4>>2]=0;c[J+8>>2]=0;c[J+12>>2]=0;t=n;c[t>>2]=-205731576;c[t+4>>2]=1779033703;t=n+8|0;lb=t;c[lb>>2]=-2067093701;c[lb+4>>2]=-1150833019;lb=n+16|0;A=lb;c[A>>2]=-23791573;c[A+4>>2]=1013904242;A=n+24|0;zb=A;c[zb>>2]=1595750129;c[zb+4>>2]=-1521486534;zb=n+32|0;Ab=zb;c[Ab>>2]=-1377402159;c[Ab+4>>2]=1359893119;Ab=n+40|0;Bb=Ab;c[Bb>>2]=725511199;c[Bb+4>>2]=-1694144372;Bb=n+48|0;Va=Bb;c[Va>>2]=-79577749;c[Va+4>>2]=528734635;Va=n+56|0;H=Va;c[H>>2]=327033209;c[H+4>>2]=1541459225;ub(n,l+32|0,32,0);ub(n,f,g,h);vb(n,o);H=b+32|0;ld(H|0,j+32|0,32)|0;Cc(o);xc(k,o);oc(p,k+80|0);pc(r,k,p);pc(s,k+40|0,p);rc(b,s);rc(q,r);k=b+31|0;a[k>>0]=(d[k>>0]|0)^(d[q>>0]|0)<<7;c[J+0>>2]=0;c[J+4>>2]=0;c[J+8>>2]=0;c[J+12>>2]=0;k=n;c[k>>2]=-205731576;c[k+4>>2]=1779033703;k=t;c[k>>2]=-2067093701;c[k+4>>2]=-1150833019;k=lb;c[k>>2]=-23791573;c[k+4>>2]=1013904242;k=A;c[k>>2]=1595750129;c[k+4>>2]=-1521486534;c[zb>>2]=-1377402159;c[zb+4>>2]=1359893119;c[Ab>>2]=725511199;c[Ab+4>>2]=-1694144372;c[Bb>>2]=-79577749;c[Bb+4>>2]=528734635;c[Va>>2]=327033209;c[Va+4>>2]=1541459225;ub(n,b,64,0);ub(n,f,g,h);vb(n,m);Cc(m);g=a[m+2>>0]|0;Va=d[m>>0]|0;Bb=id(d[m+1>>0]|0|0,0,8)|0;Ab=C;g=g&255;zb=id(g|0,0,16)|0;zb=Bb|Va|zb&2031616;Va=id(d[m+3>>0]|0|0,0,8)|0;Bb=C;k=id(d[m+4>>0]|0|0,0,16)|0;Bb=Bb|C;A=d[m+5>>0]|0;lb=id(A|0,0,24)|0;Bb=hd(Va|g|k|lb|0,Bb|C|0,5)|0;Bb=Bb&2097151;lb=a[m+7>>0]|0;k=id(d[m+6>>0]|0|0,0,8)|0;g=C;lb=lb&255;Va=id(lb|0,0,16)|0;g=hd(k|A|Va|0,g|C|0,2)|0;g=g&2097151;Va=id(d[m+8>>0]|0|0,0,8)|0;A=C;k=id(d[m+9>>0]|0|0,0,16)|0;A=A|C;t=d[m+10>>0]|0;J=id(t|0,0,24)|0;A=hd(Va|lb|k|J|0,A|C|0,7)|0;A=A&2097151;J=id(d[m+11>>0]|0|0,0,8)|0;k=C;lb=id(d[m+12>>0]|0|0,0,16)|0;k=k|C;Va=d[m+13>>0]|0;yb=id(Va|0,0,24)|0;k=hd(J|t|lb|yb|0,k|C|0,4)|0;k=k&2097151;yb=a[m+15>>0]|0;lb=id(d[m+14>>0]|0|0,0,8)|0;t=C;yb=yb&255;J=id(yb|0,0,16)|0;t=hd(lb|Va|J|0,t|C|0,1)|0;t=t&2097151;J=id(d[m+16>>0]|0|0,0,8)|0;Va=C;lb=id(d[m+17>>0]|0|0,0,16)|0;Va=Va|C;Gc=d[m+18>>0]|0;sa=id(Gc|0,0,24)|0;Va=hd(J|yb|lb|sa|0,Va|C|0,6)|0;Va=Va&2097151;sa=a[m+20>>0]|0;lb=id(d[m+19>>0]|0|0,0,8)|0;yb=C;sa=id(sa&255|0,0,16)|0;yb=hd(lb|Gc|sa|0,yb|C|0,3)|0;sa=C;Gc=a[m+23>>0]|0;lb=d[m+21>>0]|0;J=id(d[m+22>>0]|0|0,0,8)|0;qb=C;Gc=Gc&255;Sa=id(Gc|0,0,16)|0;Sa=J|lb|Sa&2031616;lb=id(d[m+24>>0]|0|0,0,8)|0;J=C;Ua=id(d[m+25>>0]|0|0,0,16)|0;J=J|C;ma=d[m+26>>0]|0;n=id(ma|0,0,24)|0;J=hd(lb|Gc|Ua|n|0,J|C|0,5)|0;J=J&2097151;n=a[m+28>>0]|0;Ua=id(d[m+27>>0]|0|0,0,8)|0;Gc=C;n=n&255;lb=id(n|0,0,16)|0;Gc=hd(Ua|ma|lb|0,Gc|C|0,2)|0;Gc=Gc&2097151;lb=id(d[m+29>>0]|0|0,0,8)|0;ma=C;Ua=id(d[m+30>>0]|0|0,0,16)|0;ma=ma|C;Ma=id(d[m+31>>0]|0|0,0,24)|0;ma=hd(lb|n|Ua|Ma|0,ma|C|0,7)|0;Ma=C;Ua=a[l+2>>0]|0;n=d[l>>0]|0;lb=id(d[l+1>>0]|0|0,0,8)|0;ha=C;Ua=Ua&255;w=id(Ua|0,0,16)|0;w=lb|n|w&2031616;n=id(d[l+3>>0]|0|0,0,8)|0;lb=C;Q=id(d[l+4>>0]|0|0,0,16)|0;lb=lb|C;h=d[l+5>>0]|0;Dc=id(h|0,0,24)|0;lb=hd(n|Ua|Q|Dc|0,lb|C|0,5)|0;lb=lb&2097151;Dc=a[l+7>>0]|0;Q=id(d[l+6>>0]|0|0,0,8)|0;Ua=C;Dc=Dc&255;n=id(Dc|0,0,16)|0;Ua=hd(Q|h|n|0,Ua|C|0,2)|0;Ua=Ua&2097151;n=id(d[l+8>>0]|0|0,0,8)|0;h=C;Q=id(d[l+9>>0]|0|0,0,16)|0;h=h|C;_a=d[l+10>>0]|0;Ra=id(_a|0,0,24)|0;h=hd(n|Dc|Q|Ra|0,h|C|0,7)|0;h=h&2097151;Ra=id(d[l+11>>0]|0|0,0,8)|0;Q=C;Dc=id(d[l+12>>0]|0|0,0,16)|0;Q=Q|C;n=d[l+13>>0]|0;Jc=id(n|0,0,24)|0;Q=hd(Ra|_a|Dc|Jc|0,Q|C|0,4)|0;Q=Q&2097151;Jc=a[l+15>>0]|0;Dc=id(d[l+14>>0]|0|0,0,8)|0;_a=C;Jc=Jc&255;Ra=id(Jc|0,0,16)|0;_a=hd(Dc|n|Ra|0,_a|C|0,1)|0;_a=_a&2097151;Ra=id(d[l+16>>0]|0|0,0,8)|0;n=C;Dc=id(d[l+17>>0]|0|0,0,16)|0;n=n|C;M=d[l+18>>0]|0;xb=id(M|0,0,24)|0;n=hd(Ra|Jc|Dc|xb|0,n|C|0,6)|0;n=n&2097151;xb=a[l+20>>0]|0;Dc=id(d[l+19>>0]|0|0,0,8)|0;Jc=C;xb=id(xb&255|0,0,16)|0;Jc=hd(Dc|M|xb|0,Jc|C|0,3)|0;xb=C;M=a[l+23>>0]|0;Dc=d[l+21>>0]|0;Ra=id(d[l+22>>0]|0|0,0,8)|0;Fa=C;M=M&255;wa=id(M|0,0,16)|0;wa=Ra|Dc|wa&2031616;Dc=id(d[l+24>>0]|0|0,0,8)|0;Ra=C;Oa=id(d[l+25>>0]|0|0,0,16)|0;Ra=Ra|C;E=d[l+26>>0]|0;Ec=id(E|0,0,24)|0;Ra=hd(Dc|M|Oa|Ec|0,Ra|C|0,5)|0;Ra=Ra&2097151;Ec=a[l+28>>0]|0;Oa=id(d[l+27>>0]|0|0,0,8)|0;M=C;Ec=Ec&255;Dc=id(Ec|0,0,16)|0;M=hd(Oa|E|Dc|0,M|C|0,2)|0;M=M&2097151;Dc=id(d[l+29>>0]|0|0,0,8)|0;E=C;Oa=id(d[l+30>>0]|0|0,0,16)|0;E=E|C;Ka=id(d[Ka>>0]|0|0,0,24)|0;E=hd(Dc|Ec|Oa|Ka|0,E|C|0,7)|0;Ka=C;Oa=a[o+2>>0]|0;Ec=d[o>>0]|0;Dc=id(d[o+1>>0]|0|0,0,8)|0;ba=C;Oa=Oa&255;Fc=id(Oa|0,0,16)|0;R=id(d[o+3>>0]|0|0,0,8)|0;Ga=C;Ca=id(d[o+4>>0]|0|0,0,16)|0;Ga=Ga|C;pb=d[o+5>>0]|0;Ha=id(pb|0,0,24)|0;Ga=hd(R|Oa|Ca|Ha|0,Ga|C|0,5)|0;Ha=a[o+7>>0]|0;Ca=id(d[o+6>>0]|0|0,0,8)|0;Oa=C;Ha=Ha&255;R=id(Ha|0,0,16)|0;Oa=hd(Ca|pb|R|0,Oa|C|0,2)|0;R=id(d[o+8>>0]|0|0,0,8)|0;pb=C;Ca=id(d[o+9>>0]|0|0,0,16)|0;pb=pb|C;X=d[o+10>>0]|0;O=id(X|0,0,24)|0;pb=hd(R|Ha|Ca|O|0,pb|C|0,7)|0;O=id(d[o+11>>0]|0|0,0,8)|0;Ca=C;Ha=id(d[o+12>>0]|0|0,0,16)|0;Ca=Ca|C;R=d[o+13>>0]|0;I=id(R|0,0,24)|0;Ca=hd(O|X|Ha|I|0,Ca|C|0,4)|0;I=a[o+15>>0]|0;Ha=id(d[o+14>>0]|0|0,0,8)|0;X=C;I=I&255;O=id(I|0,0,16)|0;X=hd(Ha|R|O|0,X|C|0,1)|0;O=id(d[o+16>>0]|0|0,0,8)|0;R=C;Ha=id(d[o+17>>0]|0|0,0,16)|0;R=R|C;ya=d[o+18>>0]|0;r=id(ya|0,0,24)|0;R=hd(O|I|Ha|r|0,R|C|0,6)|0;r=a[o+20>>0]|0;Ha=id(d[o+19>>0]|0|0,0,8)|0;I=C;r=id(r&255|0,0,16)|0;I=hd(Ha|ya|r|0,I|C|0,3)|0;r=C;ya=a[o+23>>0]|0;Ha=d[o+21>>0]|0;O=id(d[o+22>>0]|0|0,0,8)|0;db=C;ya=ya&255;eb=id(ya|0,0,16)|0;za=id(d[o+24>>0]|0|0,0,8)|0;N=C;Ja=id(d[o+25>>0]|0|0,0,16)|0;N=N|C;v=d[o+26>>0]|0;va=id(v|0,0,24)|0;N=hd(za|ya|Ja|va|0,N|C|0,5)|0;va=a[o+28>>0]|0;Ja=id(d[o+27>>0]|0|0,0,8)|0;ya=C;va=va&255;za=id(va|0,0,16)|0;ya=hd(Ja|v|za|0,ya|C|0,2)|0;za=id(d[o+29>>0]|0|0,0,8)|0;v=C;Ja=id(d[o+30>>0]|0|0,0,16)|0;v=v|C;fa=id(d[o+31>>0]|0|0,0,24)|0;v=hd(za|va|Ja|fa|0,v|C|0,7)|0;fa=C;Ja=qd(w|0,ha|0,zb|0,Ab|0)|0;Ja=fd(Dc|Ec|Fc&2031616|0,ba|0,Ja|0,C|0)|0;ba=C;Fc=qd(lb|0,0,zb|0,Ab|0)|0;Ec=C;Dc=qd(w|0,ha|0,Bb|0,0)|0;va=C;za=qd(Ua|0,0,zb|0,Ab|0)|0;Na=C;Aa=qd(lb|0,0,Bb|0,0)|0;wc=C;ra=qd(w|0,ha|0,g|0,0)|0;ra=fd(Aa|0,wc|0,ra|0,C|0)|0;Na=fd(ra|0,C|0,za|0,Na|0)|0;Oa=fd(Na|0,C|0,Oa&2097151|0,0)|0;Na=C;za=qd(h|0,0,zb|0,Ab|0)|0;ra=C;wc=qd(Ua|0,0,Bb|0,0)|0;Aa=C;Bc=qd(lb|0,0,g|0,0)|0;Ac=C;zc=qd(w|0,ha|0,A|0,0)|0;yc=C;Qa=qd(Q|0,0,zb|0,Ab|0)|0;Ba=C;kc=qd(h|0,0,Bb|0,0)|0;Y=C;mc=qd(Ua|0,0,g|0,0)|0;Pa=C;nc=qd(lb|0,0,A|0,0)|0;qc=C;lc=qd(w|0,ha|0,k|0,0)|0;lc=fd(nc|0,qc|0,lc|0,C|0)|0;Pa=fd(lc|0,C|0,mc|0,Pa|0)|0;Y=fd(Pa|0,C|0,kc|0,Y|0)|0;Ba=fd(Y|0,C|0,Qa|0,Ba|0)|0;Ca=fd(Ba|0,C|0,Ca&2097151|0,0)|0;Ba=C;Qa=qd(_a|0,0,zb|0,Ab|0)|0;Y=C;kc=qd(Q|0,0,Bb|0,0)|0;Pa=C;mc=qd(h|0,0,g|0,0)|0;lc=C;qc=qd(Ua|0,0,A|0,0)|0;nc=C;vc=qd(lb|0,0,k|0,0)|0;uc=C;tc=qd(w|0,ha|0,t|0,0)|0;sc=C;U=qd(n|0,0,zb|0,Ab|0)|0;S=C;Zb=qd(_a|0,0,Bb|0,0)|0;T=C;$b=qd(Q|0,0,g|0,0)|0;Yb=C;bc=qd(h|0,0,A|0,0)|0;_b=C;dc=qd(Ua|0,0,k|0,0)|0;ac=C;ec=qd(lb|0,0,t|0,0)|0;fc=C;cc=qd(w|0,ha|0,Va|0,0)|0;cc=fd(ec|0,fc|0,cc|0,C|0)|0;ac=fd(cc|0,C|0,dc|0,ac|0)|0;_b=fd(ac|0,C|0,bc|0,_b|0)|0;Yb=fd(_b|0,C|0,$b|0,Yb|0)|0;T=fd(Yb|0,C|0,Zb|0,T|0)|0;S=fd(T|0,C|0,U|0,S|0)|0;R=fd(S|0,C|0,R&2097151|0,0)|0;S=C;U=qd(Jc|0,xb|0,zb|0,Ab|0)|0;T=C;Zb=qd(n|0,0,Bb|0,0)|0;Yb=C;$b=qd(_a|0,0,g|0,0)|0;_b=C;bc=qd(Q|0,0,A|0,0)|0;ac=C;dc=qd(h|0,0,k|0,0)|0;cc=C;fc=qd(Ua|0,0,t|0,0)|0;ec=C;jc=qd(lb|0,0,Va|0,0)|0;ic=C;hc=qd(w|0,ha|0,yb|0,sa|0)|0;gc=C;Ia=qd(wa|0,Fa|0,zb|0,Ab|0)|0;Hb=C;Ib=qd(Jc|0,xb|0,Bb|0,0)|0;Jb=C;Kb=qd(n|0,0,g|0,0)|0;Lb=C;Mb=qd(_a|0,0,A|0,0)|0;Nb=C;Ob=qd(Q|0,0,k|0,0)|0;Pb=C;Qb=qd(h|0,0,t|0,0)|0;Rb=C;Sb=qd(Ua|0,0,Va|0,0)|0;Tb=C;Vb=qd(lb|0,0,yb|0,sa|0)|0;Wb=C;Xb=qd(w|0,ha|0,Sa|0,qb|0)|0;Xb=fd(Vb|0,Wb|0,Xb|0,C|0)|0;Tb=fd(Xb|0,C|0,Sb|0,Tb|0)|0;Rb=fd(Tb|0,C|0,Qb|0,Rb|0)|0;Pb=fd(Rb|0,C|0,Ob|0,Pb|0)|0;Nb=fd(Pb|0,C|0,Mb|0,Nb|0)|0;Lb=fd(Nb|0,C|0,Kb|0,Lb|0)|0;Jb=fd(Lb|0,C|0,Ib|0,Jb|0)|0;Hb=fd(Jb|0,C|0,Ia|0,Hb|0)|0;db=fd(Hb|0,C|0,O|Ha|eb&2031616|0,db|0)|0;eb=C;Ha=qd(Ra|0,0,zb|0,Ab|0)|0;O=C;Hb=qd(wa|0,Fa|0,Bb|0,0)|0;Ia=C;Jb=qd(Jc|0,xb|0,g|0,0)|0;Ib=C;Lb=qd(n|0,0,A|0,0)|0;Kb=C;Nb=qd(_a|0,0,k|0,0)|0;Mb=C;Pb=qd(Q|0,0,t|0,0)|0;Ob=C;Rb=qd(h|0,0,Va|0,0)|0;Qb=C;Tb=qd(Ua|0,0,yb|0,sa|0)|0;Sb=C;Xb=qd(lb|0,0,Sa|0,qb|0)|0;Wb=C;Vb=qd(w|0,ha|0,J|0,0)|0;Ub=C;da=qd(M|0,0,zb|0,Ab|0)|0;xa=C;bb=qd(Ra|0,0,Bb|0,0)|0;ea=C;ua=qd(wa|0,Fa|0,g|0,0)|0;cb=C;rb=qd(Jc|0,xb|0,A|0,0)|0;ta=C;la=qd(n|0,0,k|0,0)|0;sb=C;Xa=qd(_a|0,0,t|0,0)|0;f=C;jb=qd(Q|0,0,Va|0,0)|0;Ya=C;ja=qd(h|0,0,yb|0,sa|0)|0;kb=C;$a=qd(Ua|0,0,Sa|0,qb|0)|0;ka=C;Fb=qd(lb|0,0,J|0,0)|0;Gb=C;ab=qd(w|0,ha|0,Gc|0,0)|0;ab=fd(Fb|0,Gb|0,ab|0,C|0)|0;ka=fd(ab|0,C|0,$a|0,ka|0)|0;kb=fd(ka|0,C|0,ja|0,kb|0)|0;Ya=fd(kb|0,C|0,jb|0,Ya|0)|0;f=fd(Ya|0,C|0,Xa|0,f|0)|0;sb=fd(f|0,C|0,la|0,sb|0)|0;ta=fd(sb|0,C|0,rb|0,ta|0)|0;cb=fd(ta|0,C|0,ua|0,cb|0)|0;ea=fd(cb|0,C|0,bb|0,ea|0)|0;xa=fd(ea|0,C|0,da|0,xa|0)|0;ya=fd(xa|0,C|0,ya&2097151|0,0)|0;xa=C;Ab=qd(E|0,Ka|0,zb|0,Ab|0)|0;zb=C;da=qd(M|0,0,Bb|0,0)|0;ea=C;bb=qd(Ra|0,0,g|0,0)|0;cb=C;ua=qd(wa|0,Fa|0,A|0,0)|0;ta=C;rb=qd(Jc|0,xb|0,k|0,0)|0;sb=C;la=qd(n|0,0,t|0,0)|0;f=C;Xa=qd(_a|0,0,Va|0,0)|0;Ya=C;jb=qd(Q|0,0,yb|0,sa|0)|0;kb=C;ja=qd(h|0,0,Sa|0,qb|0)|0;ka=C;$a=qd(Ua|0,0,J|0,0)|0;ab=C;Gb=qd(lb|0,0,Gc|0,0)|0;Fb=C;ha=qd(w|0,ha|0,ma|0,Ma|0)|0;w=C;Bb=qd(E|0,Ka|0,Bb|0,0)|0;Cb=C;hb=qd(M|0,0,g|0,0)|0;B=C;G=qd(Ra|0,0,A|0,0)|0;ib=C;oa=qd(wa|0,Fa|0,k|0,0)|0;x=C;Db=qd(Jc|0,xb|0,t|0,0)|0;nb=C;s=qd(n|0,0,Va|0,0)|0;Eb=C;wb=qd(_a|0,0,yb|0,sa|0)|0;j=C;Wa=qd(Q|0,0,Sa|0,qb|0)|0;tb=C;mb=qd(h|0,0,J|0,0)|0;na=C;F=qd(Ua|0,0,Gc|0,0)|0;Ta=C;lb=qd(lb|0,0,ma|0,Ma|0)|0;lb=fd(F|0,Ta|0,lb|0,C|0)|0;na=fd(lb|0,C|0,mb|0,na|0)|0;tb=fd(na|0,C|0,Wa|0,tb|0)|0;j=fd(tb|0,C|0,wb|0,j|0)|0;Eb=fd(j|0,C|0,s|0,Eb|0)|0;nb=fd(Eb|0,C|0,Db|0,nb|0)|0;x=fd(nb|0,C|0,oa|0,x|0)|0;ib=fd(x|0,C|0,G|0,ib|0)|0;B=fd(ib|0,C|0,hb|0,B|0)|0;Cb=fd(B|0,C|0,Bb|0,Cb|0)|0;Bb=C;g=qd(E|0,Ka|0,g|0,0)|0;B=C;hb=qd(M|0,0,A|0,0)|0;ib=C;G=qd(Ra|0,0,k|0,0)|0;x=C;oa=qd(wa|0,Fa|0,t|0,0)|0;nb=C;Db=qd(Jc|0,xb|0,Va|0,0)|0;Eb=C;s=qd(n|0,0,yb|0,sa|0)|0;j=C;wb=qd(_a|0,0,Sa|0,qb|0)|0;tb=C;Wa=qd(Q|0,0,J|0,0)|0;na=C;mb=qd(h|0,0,Gc|0,0)|0;lb=C;Ua=qd(Ua|0,0,ma|0,Ma|0)|0;Ta=C;A=qd(E|0,Ka|0,A|0,0)|0;F=C;fb=qd(M|0,0,k|0,0)|0;P=C;L=qd(Ra|0,0,t|0,0)|0;gb=C;m=qd(wa|0,Fa|0,Va|0,0)|0;z=C;ia=qd(Jc|0,xb|0,yb|0,sa|0)|0;ga=C;aa=qd(n|0,0,Sa|0,qb|0)|0;y=C;qa=qd(_a|0,0,J|0,0)|0;$=C;q=qd(Q|0,0,Gc|0,0)|0;K=C;h=qd(h|0,0,ma|0,Ma|0)|0;h=fd(q|0,K|0,h|0,C|0)|0;$=fd(h|0,C|0,qa|0,$|0)|0;y=fd($|0,C|0,aa|0,y|0)|0;ga=fd(y|0,C|0,ia|0,ga|0)|0;z=fd(ga|0,C|0,m|0,z|0)|0;gb=fd(z|0,C|0,L|0,gb|0)|0;P=fd(gb|0,C|0,fb|0,P|0)|0;F=fd(P|0,C|0,A|0,F|0)|0;A=C;k=qd(E|0,Ka|0,k|0,0)|0;P=C;fb=qd(M|0,0,t|0,0)|0;gb=C;L=qd(Ra|0,0,Va|0,0)|0;z=C;m=qd(wa|0,Fa|0,yb|0,sa|0)|0;ga=C;ia=qd(Jc|0,xb|0,Sa|0,qb|0)|0;y=C;aa=qd(n|0,0,J|0,0)|0;$=C;qa=qd(_a|0,0,Gc|0,0)|0;h=C;Q=qd(Q|0,0,ma|0,Ma|0)|0;K=C;t=qd(E|0,Ka|0,t|0,0)|0;q=C;Da=qd(M|0,0,Va|0,0)|0;pa=C;_=qd(Ra|0,0,yb|0,sa|0)|0;D=C;W=qd(wa|0,Fa|0,Sa|0,qb|0)|0;Z=C;Za=qd(Jc|0,xb|0,J|0,0)|0;V=C;ca=qd(n|0,0,Gc|0,0)|0;p=C;_a=qd(_a|0,0,ma|0,Ma|0)|0;_a=fd(ca|0,p|0,_a|0,C|0)|0;V=fd(_a|0,C|0,Za|0,V|0)|0;Z=fd(V|0,C|0,W|0,Z|0)|0;D=fd(Z|0,C|0,_|0,D|0)|0;pa=fd(D|0,C|0,Da|0,pa|0)|0;q=fd(pa|0,C|0,t|0,q|0)|0;t=C;Va=qd(E|0,Ka|0,Va|0,0)|0;pa=C;Da=qd(M|0,0,yb|0,sa|0)|0;D=C;_=qd(Ra|0,0,Sa|0,qb|0)|0;Z=C;W=qd(wa|0,Fa|0,J|0,0)|0;V=C;Za=qd(Jc|0,xb|0,Gc|0,0)|0;_a=C;n=qd(n|0,0,ma|0,Ma|0)|0;p=C;sa=qd(E|0,Ka|0,yb|0,sa|0)|0;yb=C;ca=qd(M|0,0,Sa|0,qb|0)|0;La=C;Ea=qd(Ra|0,0,J|0,0)|0;ob=C;Hc=qd(wa|0,Fa|0,Gc|0,0)|0;Ic=C;xb=qd(Jc|0,xb|0,ma|0,Ma|0)|0;xb=fd(Hc|0,Ic|0,xb|0,C|0)|0;ob=fd(xb|0,C|0,Ea|0,ob|0)|0;La=fd(ob|0,C|0,ca|0,La|0)|0;yb=fd(La|0,C|0,sa|0,yb|0)|0;sa=C;qb=qd(E|0,Ka|0,Sa|0,qb|0)|0;Sa=C;La=qd(M|0,0,J|0,0)|0;ca=C;ob=qd(Ra|0,0,Gc|0,0)|0;Ea=C;Fa=qd(wa|0,Fa|0,ma|0,Ma|0)|0;wa=C;J=qd(E|0,Ka|0,J|0,0)|0;xb=C;Ic=qd(M|0,0,Gc|0,0)|0;Hc=C;Ra=qd(Ra|0,0,ma|0,Ma|0)|0;Ra=fd(Ic|0,Hc|0,Ra|0,C|0)|0;xb=fd(Ra|0,C|0,J|0,xb|0)|0;J=C;Gc=qd(E|0,Ka|0,Gc|0,0)|0;Ra=C;M=qd(M|0,0,ma|0,Ma|0)|0;M=fd(Gc|0,Ra|0,M|0,C|0)|0;Ra=C;Ma=qd(E|0,Ka|0,ma|0,Ma|0)|0;ma=C;Ka=fd(Ja|0,ba|0,1048576,0)|0;Ka=hd(Ka|0,C|0,21)|0;E=C;va=fd(Fc|0,Ec|0,Dc|0,va|0)|0;va=fd(va|0,C|0,Ka|0,E|0)|0;Ga=fd(va|0,C|0,Ga&2097151|0,0)|0;va=C;E=id(Ka|0,E|0,21)|0;E=ed(Ja|0,ba|0,E|0,C|0)|0;ba=C;Ja=fd(Oa|0,Na|0,1048576,0)|0;Ja=hd(Ja|0,C|0,21)|0;Ka=C;yc=fd(Bc|0,Ac|0,zc|0,yc|0)|0;Aa=fd(yc|0,C|0,wc|0,Aa|0)|0;ra=fd(Aa|0,C|0,za|0,ra|0)|0;ra=fd(ra|0,C|0,Ja|0,Ka|0)|0;pb=fd(ra|0,C|0,pb&2097151|0,0)|0;ra=C;Ka=id(Ja|0,Ka|0,21)|0;Ja=C;za=fd(Ca|0,Ba|0,1048576,0)|0;za=dd(za|0,C|0,21)|0;Aa=C;sc=fd(vc|0,uc|0,tc|0,sc|0)|0;nc=fd(sc|0,C|0,qc|0,nc|0)|0;lc=fd(nc|0,C|0,mc|0,lc|0)|0;Pa=fd(lc|0,C|0,kc|0,Pa|0)|0;Y=fd(Pa|0,C|0,Qa|0,Y|0)|0;X=fd(Y|0,C|0,X&2097151|0,0)|0;X=fd(X|0,C|0,za|0,Aa|0)|0;Y=C;Aa=id(za|0,Aa|0,21)|0;za=C;Qa=fd(R|0,S|0,1048576,0)|0;Qa=dd(Qa|0,C|0,21)|0;Pa=C;gc=fd(jc|0,ic|0,hc|0,gc|0)|0;ec=fd(gc|0,C|0,fc|0,ec|0)|0;cc=fd(ec|0,C|0,dc|0,cc|0)|0;ac=fd(cc|0,C|0,bc|0,ac|0)|0;_b=fd(ac|0,C|0,$b|0,_b|0)|0;Yb=fd(_b|0,C|0,Zb|0,Yb|0)|0;T=fd(Yb|0,C|0,U|0,T|0)|0;r=fd(T|0,C|0,I|0,r|0)|0;r=fd(r|0,C|0,Qa|0,Pa|0)|0;I=C;Pa=id(Qa|0,Pa|0,21)|0;Qa=C;T=fd(db|0,eb|0,1048576,0)|0;T=dd(T|0,C|0,21)|0;U=C;Ub=fd(Xb|0,Wb|0,Vb|0,Ub|0)|0;Sb=fd(Ub|0,C|0,Tb|0,Sb|0)|0;Qb=fd(Sb|0,C|0,Rb|0,Qb|0)|0;Ob=fd(Qb|0,C|0,Pb|0,Ob|0)|0;Mb=fd(Ob|0,C|0,Nb|0,Mb|0)|0;Kb=fd(Mb|0,C|0,Lb|0,Kb|0)|0;Ib=fd(Kb|0,C|0,Jb|0,Ib|0)|0;Ia=fd(Ib|0,C|0,Hb|0,Ia|0)|0;O=fd(Ia|0,C|0,Ha|0,O|0)|0;O=fd(O|0,C|0,T|0,U|0)|0;N=fd(O|0,C|0,N&2097151|0,0)|0;O=C;U=id(T|0,U|0,21)|0;T=C;Ha=fd(ya|0,xa|0,1048576,0)|0;Ha=dd(Ha|0,C|0,21)|0;Ia=C;w=fd(Gb|0,Fb|0,ha|0,w|0)|0;ab=fd(w|0,C|0,$a|0,ab|0)|0;ka=fd(ab|0,C|0,ja|0,ka|0)|0;kb=fd(ka|0,C|0,jb|0,kb|0)|0;Ya=fd(kb|0,C|0,Xa|0,Ya|0)|0;f=fd(Ya|0,C|0,la|0,f|0)|0;sb=fd(f|0,C|0,rb|0,sb|0)|0;ta=fd(sb|0,C|0,ua|0,ta|0)|0;cb=fd(ta|0,C|0,bb|0,cb|0)|0;ea=fd(cb|0,C|0,da|0,ea|0)|0;zb=fd(ea|0,C|0,Ab|0,zb|0)|0;fa=fd(zb|0,C|0,v|0,fa|0)|0;fa=fd(fa|0,C|0,Ha|0,Ia|0)|0;v=C;Ia=id(Ha|0,Ia|0,21)|0;Ha=C;zb=fd(Cb|0,Bb|0,1048576,0)|0;zb=dd(zb|0,C|0,21)|0;Ab=C;Ta=fd(mb|0,lb|0,Ua|0,Ta|0)|0;na=fd(Ta|0,C|0,Wa|0,na|0)|0;tb=fd(na|0,C|0,wb|0,tb|0)|0;j=fd(tb|0,C|0,s|0,j|0)|0;Eb=fd(j|0,C|0,Db|0,Eb|0)|0;nb=fd(Eb|0,C|0,oa|0,nb|0)|0;x=fd(nb|0,C|0,G|0,x|0)|0;ib=fd(x|0,C|0,hb|0,ib|0)|0;B=fd(ib|0,C|0,g|0,B|0)|0;B=fd(B|0,C|0,zb|0,Ab|0)|0;g=C;Ab=id(zb|0,Ab|0,21)|0;zb=C;ib=fd(F|0,A|0,1048576,0)|0;ib=dd(ib|0,C|0,21)|0;hb=C;K=fd(qa|0,h|0,Q|0,K|0)|0;$=fd(K|0,C|0,aa|0,$|0)|0;y=fd($|0,C|0,ia|0,y|0)|0;ga=fd(y|0,C|0,m|0,ga|0)|0;z=fd(ga|0,C|0,L|0,z|0)|0;gb=fd(z|0,C|0,fb|0,gb|0)|0;P=fd(gb|0,C|0,k|0,P|0)|0;P=fd(P|0,C|0,ib|0,hb|0)|0;k=C;hb=id(ib|0,hb|0,21)|0;ib=C;gb=fd(q|0,t|0,1048576,0)|0;gb=dd(gb|0,C|0,21)|0;fb=C;p=fd(Za|0,_a|0,n|0,p|0)|0;V=fd(p|0,C|0,W|0,V|0)|0;Z=fd(V|0,C|0,_|0,Z|0)|0;D=fd(Z|0,C|0,Da|0,D|0)|0;pa=fd(D|0,C|0,Va|0,pa|0)|0;pa=fd(pa|0,C|0,gb|0,fb|0)|0;Va=C;fb=id(gb|0,fb|0,21)|0;gb=C;D=fd(yb|0,sa|0,1048576,0)|0;D=dd(D|0,C|0,21)|0;Da=C;wa=fd(ob|0,Ea|0,Fa|0,wa|0)|0;ca=fd(wa|0,C|0,La|0,ca|0)|0;Sa=fd(ca|0,C|0,qb|0,Sa|0)|0;Sa=fd(Sa|0,C|0,D|0,Da|0)|0;qb=C;Da=id(D|0,Da|0,21)|0;Da=ed(yb|0,sa|0,Da|0,C|0)|0;sa=C;yb=fd(xb|0,J|0,1048576,0)|0;yb=dd(yb|0,C|0,21)|0;D=C;Ra=fd(M|0,Ra|0,yb|0,D|0)|0;M=C;D=id(yb|0,D|0,21)|0;D=ed(xb|0,J|0,D|0,C|0)|0;J=C;xb=fd(Ma|0,ma|0,1048576,0)|0;xb=dd(xb|0,C|0,21)|0;yb=C;ca=id(xb|0,yb|0,21)|0;ca=ed(Ma|0,ma|0,ca|0,C|0)|0;ma=C;Ma=fd(Ga|0,va|0,1048576,0)|0;Ma=hd(Ma|0,C|0,21)|0;La=C;wa=id(Ma|0,La|0,21)|0;wa=ed(Ga|0,va|0,wa|0,C|0)|0;va=C;Ga=fd(pb|0,ra|0,1048576,0)|0;Ga=dd(Ga|0,C|0,21)|0;Fa=C;Ea=id(Ga|0,Fa|0,21)|0;Ea=ed(pb|0,ra|0,Ea|0,C|0)|0;ra=C;pb=fd(X|0,Y|0,1048576,0)|0;pb=dd(pb|0,C|0,21)|0;ob=C;Z=id(pb|0,ob|0,21)|0;_=C;V=fd(r|0,I|0,1048576,0)|0;V=dd(V|0,C|0,21)|0;W=C;p=id(V|0,W|0,21)|0;n=C;_a=fd(N|0,O|0,1048576,0)|0;_a=dd(_a|0,C|0,21)|0;Za=C;z=id(_a|0,Za|0,21)|0;L=C;ga=fd(fa|0,v|0,1048576,0)|0;ga=dd(ga|0,C|0,21)|0;m=C;y=id(ga|0,m|0,21)|0;ia=C;$=fd(B|0,g|0,1048576,0)|0;$=dd($|0,C|0,21)|0;aa=C;K=id($|0,aa|0,21)|0;Q=C;h=fd(P|0,k|0,1048576,0)|0;h=dd(h|0,C|0,21)|0;qa=C;x=id(h|0,qa|0,21)|0;G=C;nb=fd(pa|0,Va|0,1048576,0)|0;nb=dd(nb|0,C|0,21)|0;oa=C;sa=fd(nb|0,oa|0,Da|0,sa|0)|0;Da=C;oa=id(nb|0,oa|0,21)|0;oa=ed(pa|0,Va|0,oa|0,C|0)|0;Va=C;pa=fd(Sa|0,qb|0,1048576,0)|0;pa=dd(pa|0,C|0,21)|0;nb=C;J=fd(pa|0,nb|0,D|0,J|0)|0;D=C;nb=id(pa|0,nb|0,21)|0;nb=ed(Sa|0,qb|0,nb|0,C|0)|0;qb=C;Sa=fd(Ra|0,M|0,1048576,0)|0;Sa=dd(Sa|0,C|0,21)|0;pa=C;ma=fd(Sa|0,pa|0,ca|0,ma|0)|0;ca=C;pa=id(Sa|0,pa|0,21)|0;pa=ed(Ra|0,M|0,pa|0,C|0)|0;M=C;Ra=qd(xb|0,yb|0,666643,0)|0;Sa=C;Eb=qd(xb|0,yb|0,470296,0)|0;Db=C;j=qd(xb|0,yb|0,654183,0)|0;s=C;tb=qd(xb|0,yb|0,-997805,-1)|0;wb=C;na=qd(xb|0,yb|0,136657,0)|0;Wa=C;yb=qd(xb|0,yb|0,-683901,-1)|0;t=fd(yb|0,C|0,q|0,t|0)|0;gb=ed(t|0,C|0,fb|0,gb|0)|0;qa=fd(gb|0,C|0,h|0,qa|0)|0;h=C;gb=qd(ma|0,ca|0,666643,0)|0;fb=C;t=qd(ma|0,ca|0,470296,0)|0;q=C;yb=qd(ma|0,ca|0,654183,0)|0;xb=C;Ta=qd(ma|0,ca|0,-997805,-1)|0;Ua=C;lb=qd(ma|0,ca|0,136657,0)|0;mb=C;ca=qd(ma|0,ca|0,-683901,-1)|0;ma=C;ea=qd(pa|0,M|0,666643,0)|0;da=C;cb=qd(pa|0,M|0,470296,0)|0;bb=C;ta=qd(pa|0,M|0,654183,0)|0;ua=C;sb=qd(pa|0,M|0,-997805,-1)|0;rb=C;f=qd(pa|0,M|0,136657,0)|0;la=C;M=qd(pa|0,M|0,-683901,-1)|0;pa=C;A=fd(tb|0,wb|0,F|0,A|0)|0;ib=ed(A|0,C|0,hb|0,ib|0)|0;aa=fd(ib|0,C|0,$|0,aa|0)|0;mb=fd(aa|0,C|0,lb|0,mb|0)|0;pa=fd(mb|0,C|0,M|0,pa|0)|0;M=C;mb=qd(J|0,D|0,666643,0)|0;lb=C;aa=qd(J|0,D|0,470296,0)|0;$=C;ib=qd(J|0,D|0,654183,0)|0;hb=C;A=qd(J|0,D|0,-997805,-1)|0;F=C;wb=qd(J|0,D|0,136657,0)|0;tb=C;D=qd(J|0,D|0,-683901,-1)|0;J=C;Ya=qd(nb|0,qb|0,666643,0)|0;Xa=C;kb=qd(nb|0,qb|0,470296,0)|0;jb=C;ka=qd(nb|0,qb|0,654183,0)|0;ja=C;ab=qd(nb|0,qb|0,-997805,-1)|0;$a=C;w=qd(nb|0,qb|0,136657,0)|0;ha=C;qb=qd(nb|0,qb|0,-683901,-1)|0;nb=C;Bb=fd(Eb|0,Db|0,Cb|0,Bb|0)|0;zb=ed(Bb|0,C|0,Ab|0,zb|0)|0;xb=fd(zb|0,C|0,yb|0,xb|0)|0;tb=fd(xb|0,C|0,wb|0,tb|0)|0;rb=fd(tb|0,C|0,sb|0,rb|0)|0;nb=fd(rb|0,C|0,qb|0,nb|0)|0;m=fd(nb|0,C|0,ga|0,m|0)|0;ga=C;nb=qd(sa|0,Da|0,666643,0)|0;nb=fd(pb|0,ob|0,nb|0,C|0)|0;S=fd(nb|0,C|0,R|0,S|0)|0;Qa=ed(S|0,C|0,Pa|0,Qa|0)|0;Pa=C;S=qd(sa|0,Da|0,470296,0)|0;R=C;nb=qd(sa|0,Da|0,654183,0)|0;lb=fd(nb|0,C|0,mb|0,lb|0)|0;jb=fd(lb|0,C|0,kb|0,jb|0)|0;eb=fd(jb|0,C|0,db|0,eb|0)|0;W=fd(eb|0,C|0,V|0,W|0)|0;T=ed(W|0,C|0,U|0,T|0)|0;U=C;W=qd(sa|0,Da|0,-997805,-1)|0;V=C;eb=qd(sa|0,Da|0,136657,0)|0;db=C;fb=fd(ib|0,hb|0,gb|0,fb|0)|0;db=fd(fb|0,C|0,eb|0,db|0)|0;bb=fd(db|0,C|0,cb|0,bb|0)|0;$a=fd(bb|0,C|0,ab|0,$a|0)|0;Za=fd($a|0,C|0,_a|0,Za|0)|0;xa=fd(Za|0,C|0,ya|0,xa|0)|0;Ha=ed(xa|0,C|0,Ia|0,Ha|0)|0;Ia=C;Da=qd(sa|0,Da|0,-683901,-1)|0;sa=C;xa=fd(Qa|0,Pa|0,1048576,0)|0;xa=dd(xa|0,C|0,21)|0;ya=C;R=fd(Ya|0,Xa|0,S|0,R|0)|0;I=fd(R|0,C|0,r|0,I|0)|0;n=ed(I|0,C|0,p|0,n|0)|0;n=fd(n|0,C|0,xa|0,ya|0)|0;p=C;ya=id(xa|0,ya|0,21)|0;xa=C;I=fd(T|0,U|0,1048576,0)|0;I=dd(I|0,C|0,21)|0;r=C;$=fd(W|0,V|0,aa|0,$|0)|0;da=fd($|0,C|0,ea|0,da|0)|0;ja=fd(da|0,C|0,ka|0,ja|0)|0;O=fd(ja|0,C|0,N|0,O|0)|0;O=fd(O|0,C|0,I|0,r|0)|0;L=ed(O|0,C|0,z|0,L|0)|0;z=C;r=id(I|0,r|0,21)|0;I=C;O=fd(Ha|0,Ia|0,1048576,0)|0;O=dd(O|0,C|0,21)|0;N=C;Sa=fd(t|0,q|0,Ra|0,Sa|0)|0;F=fd(Sa|0,C|0,A|0,F|0)|0;sa=fd(F|0,C|0,Da|0,sa|0)|0;ua=fd(sa|0,C|0,ta|0,ua|0)|0;ha=fd(ua|0,C|0,w|0,ha|0)|0;v=fd(ha|0,C|0,fa|0,v|0)|0;v=fd(v|0,C|0,O|0,N|0)|0;ia=ed(v|0,C|0,y|0,ia|0)|0;y=C;N=id(O|0,N|0,21)|0;O=C;v=fd(m|0,ga|0,1048576,0)|0;v=dd(v|0,C|0,21)|0;fa=C;s=fd(B|0,g|0,j|0,s|0)|0;Q=ed(s|0,C|0,K|0,Q|0)|0;Ua=fd(Q|0,C|0,Ta|0,Ua|0)|0;J=fd(Ua|0,C|0,D|0,J|0)|0;la=fd(J|0,C|0,f|0,la|0)|0;la=fd(la|0,C|0,v|0,fa|0)|0;f=C;fa=id(v|0,fa|0,21)|0;fa=ed(m|0,ga|0,fa|0,C|0)|0;ga=C;m=fd(pa|0,M|0,1048576,0)|0;m=dd(m|0,C|0,21)|0;v=C;Wa=fd(P|0,k|0,na|0,Wa|0)|0;G=ed(Wa|0,C|0,x|0,G|0)|0;ma=fd(G|0,C|0,ca|0,ma|0)|0;ma=fd(ma|0,C|0,m|0,v|0)|0;ca=C;v=id(m|0,v|0,21)|0;v=ed(pa|0,M|0,v|0,C|0)|0;M=C;pa=fd(qa|0,h|0,1048576,0)|0;pa=dd(pa|0,C|0,21)|0;m=C;Va=fd(pa|0,m|0,oa|0,Va|0)|0;oa=C;m=id(pa|0,m|0,21)|0;m=ed(qa|0,h|0,m|0,C|0)|0;h=C;qa=fd(n|0,p|0,1048576,0)|0;qa=dd(qa|0,C|0,21)|0;pa=C;G=id(qa|0,pa|0,21)|0;x=C;Wa=fd(L|0,z|0,1048576,0)|0;Wa=dd(Wa|0,C|0,21)|0;na=C;k=id(Wa|0,na|0,21)|0;P=C;J=fd(ia|0,y|0,1048576,0)|0;J=dd(J|0,C|0,21)|0;D=C;ga=fd(fa|0,ga|0,J|0,D|0)|0;fa=C;D=id(J|0,D|0,21)|0;D=ed(ia|0,y|0,D|0,C|0)|0;y=C;ia=fd(la|0,f|0,1048576,0)|0;ia=dd(ia|0,C|0,21)|0;J=C;M=fd(ia|0,J|0,v|0,M|0)|0;v=C;J=id(ia|0,J|0,21)|0;J=ed(la|0,f|0,J|0,C|0)|0;f=C;la=fd(ma|0,ca|0,1048576,0)|0;la=dd(la|0,C|0,21)|0;ia=C;h=fd(la|0,ia|0,m|0,h|0)|0;m=C;ia=id(la|0,ia|0,21)|0;ia=ed(ma|0,ca|0,ia|0,C|0)|0;ca=C;ma=qd(Va|0,oa|0,666643,0)|0;la=C;Ua=qd(Va|0,oa|0,470296,0)|0;Ta=C;Q=qd(Va|0,oa|0,654183,0)|0;K=C;s=qd(Va|0,oa|0,-997805,-1)|0;j=C;g=qd(Va|0,oa|0,136657,0)|0;B=C;oa=qd(Va|0,oa|0,-683901,-1)|0;oa=fd(Wa|0,na|0,oa|0,C|0)|0;Ia=fd(oa|0,C|0,Ha|0,Ia|0)|0;O=ed(Ia|0,C|0,N|0,O|0)|0;N=C;Ia=qd(h|0,m|0,666643,0)|0;Ha=C;oa=qd(h|0,m|0,470296,0)|0;na=C;Wa=qd(h|0,m|0,654183,0)|0;Va=C;ha=qd(h|0,m|0,-997805,-1)|0;w=C;ua=qd(h|0,m|0,136657,0)|0;ta=C;m=qd(h|0,m|0,-683901,-1)|0;h=C;sa=qd(ia|0,ca|0,666643,0)|0;sa=fd(Ea|0,ra|0,sa|0,C|0)|0;ra=C;Ea=qd(ia|0,ca|0,470296,0)|0;Da=C;F=qd(ia|0,ca|0,654183,0)|0;A=C;Sa=qd(ia|0,ca|0,-997805,-1)|0;Ra=C;q=qd(ia|0,ca|0,136657,0)|0;t=C;ca=qd(ia|0,ca|0,-683901,-1)|0;ia=C;j=fd(ua|0,ta|0,s|0,j|0)|0;ia=fd(j|0,C|0,ca|0,ia|0)|0;U=fd(ia|0,C|0,T|0,U|0)|0;pa=fd(U|0,C|0,qa|0,pa|0)|0;I=ed(pa|0,C|0,r|0,I|0)|0;r=C;pa=qd(M|0,v|0,666643,0)|0;qa=C;U=qd(M|0,v|0,470296,0)|0;T=C;ia=qd(M|0,v|0,654183,0)|0;ca=C;j=qd(M|0,v|0,-997805,-1)|0;s=C;ta=qd(M|0,v|0,136657,0)|0;ua=C;v=qd(M|0,v|0,-683901,-1)|0;M=C;ja=qd(J|0,f|0,666643,0)|0;ka=C;da=qd(J|0,f|0,470296,0)|0;ea=C;$=qd(J|0,f|0,654183,0)|0;aa=C;V=qd(J|0,f|0,-997805,-1)|0;W=C;R=qd(J|0,f|0,136657,0)|0;S=C;f=qd(J|0,f|0,-683901,-1)|0;J=C;Ta=fd(Wa|0,Va|0,Ua|0,Ta|0)|0;Ra=fd(Ta|0,C|0,Sa|0,Ra|0)|0;Pa=fd(Ra|0,C|0,Qa|0,Pa|0)|0;xa=ed(Pa|0,C|0,ya|0,xa|0)|0;ua=fd(xa|0,C|0,ta|0,ua|0)|0;J=fd(ua|0,C|0,f|0,J|0)|0;f=C;ua=qd(ga|0,fa|0,666643,0)|0;ba=fd(ua|0,C|0,E|0,ba|0)|0;E=C;ua=qd(ga|0,fa|0,470296,0)|0;ta=C;xa=qd(ga|0,fa|0,654183,0)|0;ya=C;La=fd(Oa|0,Na|0,Ma|0,La|0)|0;Ja=ed(La|0,C|0,Ka|0,Ja|0)|0;ya=fd(Ja|0,C|0,xa|0,ya|0)|0;qa=fd(ya|0,C|0,pa|0,qa|0)|0;ea=fd(qa|0,C|0,da|0,ea|0)|0;da=C;qa=qd(ga|0,fa|0,-997805,-1)|0;pa=C;ya=qd(ga|0,fa|0,136657,0)|0;xa=C;Fa=fd(Ia|0,Ha|0,Ga|0,Fa|0)|0;Da=fd(Fa|0,C|0,Ea|0,Da|0)|0;Ba=fd(Da|0,C|0,Ca|0,Ba|0)|0;za=ed(Ba|0,C|0,Aa|0,za|0)|0;xa=fd(za|0,C|0,ya|0,xa|0)|0;ca=fd(xa|0,C|0,ia|0,ca|0)|0;W=fd(ca|0,C|0,V|0,W|0)|0;V=C;fa=qd(ga|0,fa|0,-683901,-1)|0;ga=C;ca=fd(ba|0,E|0,1048576,0)|0;ca=dd(ca|0,C|0,21)|0;ia=C;ta=fd(wa|0,va|0,ua|0,ta|0)|0;ka=fd(ta|0,C|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,ca|0,ia|0)|0;ja=C;ia=id(ca|0,ia|0,21)|0;ia=ed(ba|0,E|0,ia|0,C|0)|0;E=C;ba=fd(ea|0,da|0,1048576,0)|0;ba=dd(ba|0,C|0,21)|0;ca=C;pa=fd(sa|0,ra|0,qa|0,pa|0)|0;T=fd(pa|0,C|0,U|0,T|0)|0;aa=fd(T|0,C|0,$|0,aa|0)|0;aa=fd(aa|0,C|0,ba|0,ca|0)|0;$=C;ca=id(ba|0,ca|0,21)|0;ba=C;T=fd(W|0,V|0,1048576,0)|0;T=dd(T|0,C|0,21)|0;U=C;la=fd(oa|0,na|0,ma|0,la|0)|0;A=fd(la|0,C|0,F|0,A|0)|0;Y=fd(A|0,C|0,X|0,Y|0)|0;_=ed(Y|0,C|0,Z|0,_|0)|0;ga=fd(_|0,C|0,fa|0,ga|0)|0;s=fd(ga|0,C|0,j|0,s|0)|0;S=fd(s|0,C|0,R|0,S|0)|0;S=fd(S|0,C|0,T|0,U|0)|0;R=C;U=id(T|0,U|0,21)|0;T=C;s=fd(J|0,f|0,1048576,0)|0;s=dd(s|0,C|0,21)|0;j=C;K=fd(ha|0,w|0,Q|0,K|0)|0;t=fd(K|0,C|0,q|0,t|0)|0;p=fd(t|0,C|0,n|0,p|0)|0;x=ed(p|0,C|0,G|0,x|0)|0;M=fd(x|0,C|0,v|0,M|0)|0;M=fd(M|0,C|0,s|0,j|0)|0;v=C;j=id(s|0,j|0,21)|0;j=ed(J|0,f|0,j|0,C|0)|0;f=C;J=fd(I|0,r|0,1048576,0)|0;J=dd(J|0,C|0,21)|0;s=C;B=fd(m|0,h|0,g|0,B|0)|0;z=fd(B|0,C|0,L|0,z|0)|0;z=fd(z|0,C|0,J|0,s|0)|0;P=ed(z|0,C|0,k|0,P|0)|0;k=C;s=id(J|0,s|0,21)|0;s=ed(I|0,r|0,s|0,C|0)|0;r=C;I=fd(O|0,N|0,1048576,0)|0;I=dd(I|0,C|0,21)|0;J=C;y=fd(D|0,y|0,I|0,J|0)|0;D=C;J=id(I|0,J|0,21)|0;I=C;z=fd(ka|0,ja|0,1048576,0)|0;z=dd(z|0,C|0,21)|0;L=C;B=id(z|0,L|0,21)|0;g=C;h=fd(aa|0,$|0,1048576,0)|0;h=dd(h|0,C|0,21)|0;m=C;x=id(h|0,m|0,21)|0;G=C;p=fd(S|0,R|0,1048576,0)|0;p=dd(p|0,C|0,21)|0;n=C;f=fd(j|0,f|0,p|0,n|0)|0;j=C;n=id(p|0,n|0,21)|0;p=C;t=fd(M|0,v|0,1048576,0)|0;t=dd(t|0,C|0,21)|0;q=C;r=fd(s|0,r|0,t|0,q|0)|0;s=C;q=id(t|0,q|0,21)|0;q=ed(M|0,v|0,q|0,C|0)|0;v=C;M=fd(P|0,k|0,1048576,0)|0;M=dd(M|0,C|0,21)|0;t=C;K=id(M|0,t|0,21)|0;K=ed(P|0,k|0,K|0,C|0)|0;k=C;P=fd(y|0,D|0,1048576,0)|0;P=dd(P|0,C|0,21)|0;Q=C;w=id(P|0,Q|0,21)|0;w=ed(y|0,D|0,w|0,C|0)|0;D=C;y=qd(P|0,Q|0,666643,0)|0;y=fd(ia|0,E|0,y|0,C|0)|0;E=C;ia=qd(P|0,Q|0,470296,0)|0;ha=C;ga=qd(P|0,Q|0,654183,0)|0;fa=C;_=qd(P|0,Q|0,-997805,-1)|0;Z=C;Y=qd(P|0,Q|0,136657,0)|0;X=C;Q=qd(P|0,Q|0,-683901,-1)|0;P=C;A=dd(y|0,E|0,21)|0;F=C;ha=fd(ka|0,ja|0,ia|0,ha|0)|0;g=ed(ha|0,C|0,B|0,g|0)|0;g=fd(g|0,C|0,A|0,F|0)|0;B=C;F=id(A|0,F|0,21)|0;F=ed(y|0,E|0,F|0,C|0)|0;E=C;y=dd(g|0,B|0,21)|0;A=C;da=fd(ga|0,fa|0,ea|0,da|0)|0;ba=ed(da|0,C|0,ca|0,ba|0)|0;L=fd(ba|0,C|0,z|0,L|0)|0;L=fd(L|0,C|0,y|0,A|0)|0;z=C;A=id(y|0,A|0,21)|0;A=ed(g|0,B|0,A|0,C|0)|0;B=C;g=dd(L|0,z|0,21)|0;y=C;Z=fd(aa|0,$|0,_|0,Z|0)|0;G=ed(Z|0,C|0,x|0,G|0)|0;G=fd(G|0,C|0,g|0,y|0)|0;x=C;y=id(g|0,y|0,21)|0;y=ed(L|0,z|0,y|0,C|0)|0;z=C;L=dd(G|0,x|0,21)|0;g=C;V=fd(Y|0,X|0,W|0,V|0)|0;T=ed(V|0,C|0,U|0,T|0)|0;m=fd(T|0,C|0,h|0,m|0)|0;m=fd(m|0,C|0,L|0,g|0)|0;h=C;g=id(L|0,g|0,21)|0;g=ed(G|0,x|0,g|0,C|0)|0;x=C;G=dd(m|0,h|0,21)|0;L=C;P=fd(S|0,R|0,Q|0,P|0)|0;p=ed(P|0,C|0,n|0,p|0)|0;p=fd(p|0,C|0,G|0,L|0)|0;n=C;L=id(G|0,L|0,21)|0;L=ed(m|0,h|0,L|0,C|0)|0;h=C;m=dd(p|0,n|0,21)|0;G=C;j=fd(f|0,j|0,m|0,G|0)|0;f=C;G=id(m|0,G|0,21)|0;G=ed(p|0,n|0,G|0,C|0)|0;n=C;p=dd(j|0,f|0,21)|0;m=C;v=fd(p|0,m|0,q|0,v|0)|0;q=C;m=id(p|0,m|0,21)|0;m=ed(j|0,f|0,m|0,C|0)|0;f=C;j=dd(v|0,q|0,21)|0;p=C;s=fd(r|0,s|0,j|0,p|0)|0;r=C;p=id(j|0,p|0,21)|0;p=ed(v|0,q|0,p|0,C|0)|0;q=C;v=dd(s|0,r|0,21)|0;j=C;k=fd(v|0,j|0,K|0,k|0)|0;K=C;j=id(v|0,j|0,21)|0;j=ed(s|0,r|0,j|0,C|0)|0;r=C;s=dd(k|0,K|0,21)|0;v=C;t=fd(O|0,N|0,M|0,t|0)|0;I=ed(t|0,C|0,J|0,I|0)|0;I=fd(I|0,C|0,s|0,v|0)|0;J=C;v=id(s|0,v|0,21)|0;v=ed(k|0,K|0,v|0,C|0)|0;K=C;k=dd(I|0,J|0,21)|0;s=C;D=fd(k|0,s|0,w|0,D|0)|0;w=C;s=id(k|0,s|0,21)|0;s=ed(I|0,J|0,s|0,C|0)|0;J=C;I=dd(D|0,w|0,21)|0;k=C;t=id(I|0,k|0,21)|0;t=ed(D|0,w|0,t|0,C|0)|0;w=C;D=qd(I|0,k|0,666643,0)|0;E=fd(D|0,C|0,F|0,E|0)|0;F=C;D=qd(I|0,k|0,470296,0)|0;D=fd(A|0,B|0,D|0,C|0)|0;B=C;A=qd(I|0,k|0,654183,0)|0;A=fd(y|0,z|0,A|0,C|0)|0;z=C;y=qd(I|0,k|0,-997805,-1)|0;y=fd(g|0,x|0,y|0,C|0)|0;x=C;g=qd(I|0,k|0,136657,0)|0;g=fd(L|0,h|0,g|0,C|0)|0;h=C;k=qd(I|0,k|0,-683901,-1)|0;k=fd(G|0,n|0,k|0,C|0)|0;n=C;G=dd(E|0,F|0,21)|0;I=C;B=fd(D|0,B|0,G|0,I|0)|0;D=C;I=id(G|0,I|0,21)|0;I=ed(E|0,F|0,I|0,C|0)|0;F=C;E=dd(B|0,D|0,21)|0;G=C;z=fd(A|0,z|0,E|0,G|0)|0;A=C;G=id(E|0,G|0,21)|0;G=ed(B|0,D|0,G|0,C|0)|0;D=C;B=dd(z|0,A|0,21)|0;E=C;x=fd(y|0,x|0,B|0,E|0)|0;y=C;E=id(B|0,E|0,21)|0;E=ed(z|0,A|0,E|0,C|0)|0;A=C;z=dd(x|0,y|0,21)|0;B=C;h=fd(g|0,h|0,z|0,B|0)|0;g=C;B=id(z|0,B|0,21)|0;B=ed(x|0,y|0,B|0,C|0)|0;y=C;x=dd(h|0,g|0,21)|0;z=C;n=fd(k|0,n|0,x|0,z|0)|0;k=C;z=id(x|0,z|0,21)|0;z=ed(h|0,g|0,z|0,C|0)|0;g=C;h=dd(n|0,k|0,21)|0;x=C;f=fd(h|0,x|0,m|0,f|0)|0;m=C;x=id(h|0,x|0,21)|0;x=ed(n|0,k|0,x|0,C|0)|0;k=C;n=dd(f|0,m|0,21)|0;h=C;q=fd(n|0,h|0,p|0,q|0)|0;p=C;h=id(n|0,h|0,21)|0;h=ed(f|0,m|0,h|0,C|0)|0;m=C;f=dd(q|0,p|0,21)|0;n=C;r=fd(f|0,n|0,j|0,r|0)|0;j=C;n=id(f|0,n|0,21)|0;n=ed(q|0,p|0,n|0,C|0)|0;p=C;q=dd(r|0,j|0,21)|0;f=C;K=fd(q|0,f|0,v|0,K|0)|0;v=C;f=id(q|0,f|0,21)|0;f=ed(r|0,j|0,f|0,C|0)|0;j=C;r=dd(K|0,v|0,21)|0;q=C;J=fd(r|0,q|0,s|0,J|0)|0;s=C;q=id(r|0,q|0,21)|0;q=ed(K|0,v|0,q|0,C|0)|0;v=C;K=dd(J|0,s|0,21)|0;r=C;w=fd(K|0,r|0,t|0,w|0)|0;t=C;r=id(K|0,r|0,21)|0;r=ed(J|0,s|0,r|0,C|0)|0;s=C;a[H>>0]=I;H=hd(I|0,F|0,8)|0;a[b+33>>0]=H;F=hd(I|0,F|0,16)|0;I=C;H=id(G|0,D|0,5)|0;a[b+34>>0]=H|F;F=hd(G|0,D|0,3)|0;a[b+35>>0]=F;F=hd(G|0,D|0,11)|0;a[b+36>>0]=F;D=hd(G|0,D|0,19)|0;G=C;F=id(E|0,A|0,2)|0;a[b+37>>0]=F|D;D=hd(E|0,A|0,6)|0;a[b+38>>0]=D;A=hd(E|0,A|0,14)|0;E=C;D=id(B|0,y|0,7)|0;a[b+39>>0]=D|A;A=hd(B|0,y|0,1)|0;a[b+40>>0]=A;A=hd(B|0,y|0,9)|0;a[b+41>>0]=A;y=hd(B|0,y|0,17)|0;B=C;A=id(z|0,g|0,4)|0;a[b+42>>0]=A|y;y=hd(z|0,g|0,4)|0;a[b+43>>0]=y;y=hd(z|0,g|0,12)|0;a[b+44>>0]=y;g=hd(z|0,g|0,20)|0;z=C;y=id(x|0,k|0,1)|0;a[b+45>>0]=y|g;g=hd(x|0,k|0,7)|0;a[b+46>>0]=g;k=hd(x|0,k|0,15)|0;x=C;g=id(h|0,m|0,6)|0;a[b+47>>0]=g|k;k=hd(h|0,m|0,2)|0;a[b+48>>0]=k;k=hd(h|0,m|0,10)|0;a[b+49>>0]=k;m=hd(h|0,m|0,18)|0;h=C;k=id(n|0,p|0,3)|0;a[b+50>>0]=k|m;m=hd(n|0,p|0,5)|0;a[b+51>>0]=m;p=hd(n|0,p|0,13)|0;a[b+52>>0]=p;a[b+53>>0]=f;p=hd(f|0,j|0,8)|0;a[b+54>>0]=p;j=hd(f|0,j|0,16)|0;f=C;p=id(q|0,v|0,5)|0;a[b+55>>0]=p|j;j=hd(q|0,v|0,3)|0;a[b+56>>0]=j;j=hd(q|0,v|0,11)|0;a[b+57>>0]=j;v=hd(q|0,v|0,19)|0;q=C;j=id(r|0,s|0,2)|0;a[b+58>>0]=j|v;v=hd(r|0,s|0,6)|0;a[b+59>>0]=v;s=hd(r|0,s|0,14)|0;r=C;v=id(w|0,t|0,7)|0;a[b+60>>0]=s|v;v=hd(w|0,t|0,1)|0;a[b+61>>0]=v;v=hd(w|0,t|0,9)|0;a[b+62>>0]=v;t=hd(w|0,t|0,17)|0;a[b+63>>0]=t;t=l+0|0;w=t+64|0;do{a[t>>0]=0;t=t+1|0}while((t|0)<(w|0));t=o+0|0;w=t+64|0;do{a[t>>0]=0;t=t+1|0}while((t|0)<(w|0));if(!e){i=u;return}Jc=e;c[Jc>>2]=64;c[Jc+4>>2]=0;i=u;return}function Ec(a,b,e,f,g,h){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0;k=i;j=i=i+63&-64;i=i+64|0;if((e|0)==0&(f|0)==0){i=k;return}Fc(j,h);c[j+48>>2]=1;c[j+52>>2]=0;c[j+56>>2]=(d[g+1>>0]|0)<<8|(d[g>>0]|0)|(d[g+2>>0]|0)<<16|(d[g+3>>0]|0)<<24;c[j+60>>2]=(d[g+5>>0]|0)<<8|(d[g+4>>0]|0)|(d[g+6>>0]|0)<<16|(d[g+7>>0]|0)<<24;Gc(j,b,a,e,f);f=j+0|0;e=f+64|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(e|0));i=k;return}function Fc(a,b){a=a|0;b=b|0;c[a+16>>2]=(d[b+1>>0]|0)<<8|(d[b>>0]|0)|(d[b+2>>0]|0)<<16|(d[b+3>>0]|0)<<24;c[a+20>>2]=(d[b+5>>0]|0)<<8|(d[b+4>>0]|0)|(d[b+6>>0]|0)<<16|(d[b+7>>0]|0)<<24;c[a+24>>2]=(d[b+9>>0]|0)<<8|(d[b+8>>0]|0)|(d[b+10>>0]|0)<<16|(d[b+11>>0]|0)<<24;c[a+28>>2]=(d[b+13>>0]|0)<<8|(d[b+12>>0]|0)|(d[b+14>>0]|0)<<16|(d[b+15>>0]|0)<<24;c[a+32>>2]=(d[b+17>>0]|0)<<8|(d[b+16>>0]|0)|(d[b+18>>0]|0)<<16|(d[b+19>>0]|0)<<24;c[a+36>>2]=(d[b+21>>0]|0)<<8|(d[b+20>>0]|0)|(d[b+22>>0]|0)<<16|(d[b+23>>0]|0)<<24;c[a+40>>2]=(d[b+25>>0]|0)<<8|(d[b+24>>0]|0)|(d[b+26>>0]|0)<<16|(d[b+27>>0]|0)<<24;c[a+44>>2]=(d[b+29>>0]|0)<<8|(d[b+28>>0]|0)|(d[b+30>>0]|0)<<16|(d[b+31>>0]|0)<<24;c[a>>2]=1634760805;c[a+4>>2]=857760878;c[a+8>>2]=2036477234;c[a+12>>2]=1797285236;return}function Gc(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0;V=i;S=i=i+63&-64;i=i+64|0;if((g|0)==0&(h|0)==0){i=V;return}P=c[b>>2]|0;Q=c[b+4>>2]|0;R=c[b+8>>2]|0;F=c[b+12>>2]|0;G=c[b+16>>2]|0;H=c[b+20>>2]|0;I=c[b+24>>2]|0;J=c[b+28>>2]|0;K=c[b+32>>2]|0;L=c[b+36>>2]|0;M=c[b+40>>2]|0;N=c[b+44>>2]|0;T=b+48|0;U=b+52|0;O=c[b+56>>2]|0;E=c[b+60>>2]|0;b=0;k=c[T>>2]|0;j=c[U>>2]|0;while(1){D=h>>>0<0|(h|0)==0&g>>>0<64;if(D)if((g|0)==0&(h|0)==0){e=S;B=S;A=f}else{b=0;do{a[S+b>>0]=a[e+b>>0]|0;b=b+1|0}while(0<h>>>0|0==(h|0)&b>>>0<g>>>0);e=S;B=S;A=f}else{B=f;A=b}f=20;b=P;l=Q;m=M;n=N;o=k;p=j;q=O;r=E;s=R;t=F;u=G;v=H;w=I;x=J;y=K;z=L;do{ja=b+u|0;ea=ja^o;ea=ea<<16|ea>>>16;$=ea+y|0;W=$^u;W=W<<12|W>>>20;ja=W+ja|0;ea=ja^ea;ea=ea<<8|ea>>>24;$=ea+$|0;W=$^W;W=W<<7|W>>>25;fa=l+v|0;aa=fa^p;aa=aa<<16|aa>>>16;X=aa+z|0;ga=X^v;ga=ga<<12|ga>>>20;fa=ga+fa|0;aa=fa^aa;aa=aa<<8|aa>>>24;X=aa+X|0;ga=X^ga;ga=ga<<7|ga>>>25;ba=s+w|0;Y=ba^q;Y=Y<<16|Y>>>16;ha=Y+m|0;ca=ha^w;ca=ca<<12|ca>>>20;ba=ca+ba|0;Y=ba^Y;Y=Y<<8|Y>>>24;ha=Y+ha|0;ca=ha^ca;ca=ca<<7|ca>>>25;Z=t+x|0;ia=Z^r;ia=ia<<16|ia>>>16;da=ia+n|0;_=da^x;_=_<<12|_>>>20;Z=_+Z|0;ia=Z^ia;ia=ia<<8|ia>>>24;da=ia+da|0;_=da^_;_=_<<7|_>>>25;ja=ga+ja|0;ia=ja^ia;ia=ia<<16|ia>>>16;ha=ia+ha|0;ga=ha^ga;ga=ga<<12|ga>>>20;b=ga+ja|0;ia=b^ia;r=ia<<8|ia>>>24;m=r+ha|0;ga=m^ga;v=ga<<7|ga>>>25;fa=ca+fa|0;ea=fa^ea;ea=ea<<16|ea>>>16;da=ea+da|0;ca=da^ca;ca=ca<<12|ca>>>20;l=ca+fa|0;ea=l^ea;o=ea<<8|ea>>>24;n=o+da|0;ca=n^ca;w=ca<<7|ca>>>25;ba=_+ba|0;aa=ba^aa;aa=aa<<16|aa>>>16;$=aa+$|0;_=$^_;_=_<<12|_>>>20;s=_+ba|0;aa=s^aa;p=aa<<8|aa>>>24;y=p+$|0;_=y^_;x=_<<7|_>>>25;Z=W+Z|0;Y=Z^Y;Y=Y<<16|Y>>>16;X=Y+X|0;W=X^W;W=W<<12|W>>>20;t=W+Z|0;Y=t^Y;q=Y<<8|Y>>>24;z=q+X|0;W=z^W;u=W<<7|W>>>25;f=f+-2|0}while((f|0)!=0);W=((d[e+1>>0]|0)<<8|(d[e>>0]|0)|(d[e+2>>0]|0)<<16|(d[e+3>>0]|0)<<24)^b+P;X=((d[e+5>>0]|0)<<8|(d[e+4>>0]|0)|(d[e+6>>0]|0)<<16|(d[e+7>>0]|0)<<24)^l+Q;Y=((d[e+9>>0]|0)<<8|(d[e+8>>0]|0)|(d[e+10>>0]|0)<<16|(d[e+11>>0]|0)<<24)^s+R;Z=((d[e+13>>0]|0)<<8|(d[e+12>>0]|0)|(d[e+14>>0]|0)<<16|(d[e+15>>0]|0)<<24)^t+F;_=((d[e+17>>0]|0)<<8|(d[e+16>>0]|0)|(d[e+18>>0]|0)<<16|(d[e+19>>0]|0)<<24)^u+G;$=((d[e+21>>0]|0)<<8|(d[e+20>>0]|0)|(d[e+22>>0]|0)<<16|(d[e+23>>0]|0)<<24)^v+H;aa=((d[e+25>>0]|0)<<8|(d[e+24>>0]|0)|(d[e+26>>0]|0)<<16|(d[e+27>>0]|0)<<24)^w+I;ba=((d[e+29>>0]|0)<<8|(d[e+28>>0]|0)|(d[e+30>>0]|0)<<16|(d[e+31>>0]|0)<<24)^x+J;ca=((d[e+33>>0]|0)<<8|(d[e+32>>0]|0)|(d[e+34>>0]|0)<<16|(d[e+35>>0]|0)<<24)^y+K;da=((d[e+37>>0]|0)<<8|(d[e+36>>0]|0)|(d[e+38>>0]|0)<<16|(d[e+39>>0]|0)<<24)^z+L;ea=((d[e+41>>0]|0)<<8|(d[e+40>>0]|0)|(d[e+42>>0]|0)<<16|(d[e+43>>0]|0)<<24)^m+M;fa=((d[e+45>>0]|0)<<8|(d[e+44>>0]|0)|(d[e+46>>0]|0)<<16|(d[e+47>>0]|0)<<24)^n+N;ga=((d[e+49>>0]|0)<<8|(d[e+48>>0]|0)|(d[e+50>>0]|0)<<16|(d[e+51>>0]|0)<<24)^o+k;ha=((d[e+53>>0]|0)<<8|(d[e+52>>0]|0)|(d[e+54>>0]|0)<<16|(d[e+55>>0]|0)<<24)^p+j;ia=((d[e+57>>0]|0)<<8|(d[e+56>>0]|0)|(d[e+58>>0]|0)<<16|(d[e+59>>0]|0)<<24)^q+O;ja=((d[e+61>>0]|0)<<8|(d[e+60>>0]|0)|(d[e+62>>0]|0)<<16|(d[e+63>>0]|0)<<24)^r+E;k=k+1|0;j=((k|0)==0&1)+j|0;a[B>>0]=W;a[B+1>>0]=W>>>8;a[B+2>>0]=W>>>16;a[B+3>>0]=W>>>24;a[B+4>>0]=X;a[B+5>>0]=X>>>8;a[B+6>>0]=X>>>16;a[B+7>>0]=X>>>24;a[B+8>>0]=Y;a[B+9>>0]=Y>>>8;a[B+10>>0]=Y>>>16;a[B+11>>0]=Y>>>24;a[B+12>>0]=Z;a[B+13>>0]=Z>>>8;a[B+14>>0]=Z>>>16;a[B+15>>0]=Z>>>24;a[B+16>>0]=_;a[B+17>>0]=_>>>8;a[B+18>>0]=_>>>16;a[B+19>>0]=_>>>24;a[B+20>>0]=$;a[B+21>>0]=$>>>8;a[B+22>>0]=$>>>16;a[B+23>>0]=$>>>24;a[B+24>>0]=aa;a[B+25>>0]=aa>>>8;a[B+26>>0]=aa>>>16;a[B+27>>0]=aa>>>24;a[B+28>>0]=ba;a[B+29>>0]=ba>>>8;a[B+30>>0]=ba>>>16;a[B+31>>0]=ba>>>24;a[B+32>>0]=ca;a[B+33>>0]=ca>>>8;a[B+34>>0]=ca>>>16;a[B+35>>0]=ca>>>24;a[B+36>>0]=da;a[B+37>>0]=da>>>8;a[B+38>>0]=da>>>16;a[B+39>>0]=da>>>24;a[B+40>>0]=ea;a[B+41>>0]=ea>>>8;a[B+42>>0]=ea>>>16;a[B+43>>0]=ea>>>24;a[B+44>>0]=fa;a[B+45>>0]=fa>>>8;a[B+46>>0]=fa>>>16;a[B+47>>0]=fa>>>24;a[B+48>>0]=ga;a[B+49>>0]=ga>>>8;a[B+50>>0]=ga>>>16;a[B+51>>0]=ga>>>24;a[B+52>>0]=ha;a[B+53>>0]=ha>>>8;a[B+54>>0]=ha>>>16;a[B+55>>0]=ha>>>24;a[B+56>>0]=ia;a[B+57>>0]=ia>>>8;a[B+58>>0]=ia>>>16;a[B+59>>0]=ia>>>24;a[B+60>>0]=ja;a[B+61>>0]=ja>>>8;a[B+62>>0]=ja>>>16;a[B+63>>0]=ja>>>24;if(h>>>0<0|(h|0)==0&g>>>0<65)break;b=fd(g|0,h|0,-64,-1)|0;e=e+64|0;f=B+64|0;h=C;g=b;b=A}if(D?(g|0)!=0:0){b=0;do{a[A+b>>0]=a[B+b>>0]|0;b=b+1|0}while((b|0)!=(g|0))}c[T>>2]=k;c[U>>2]=j;i=V;return}function Hc(b,c){b=b|0;c=c|0;return ((((a[c+1>>0]^a[b+1>>0]|a[c>>0]^a[b>>0]|a[c+2>>0]^a[b+2>>0]|a[c+3>>0]^a[b+3>>0]|a[c+4>>0]^a[b+4>>0]|a[c+5>>0]^a[b+5>>0]|a[c+6>>0]^a[b+6>>0]|a[c+7>>0]^a[b+7>>0]|a[c+8>>0]^a[b+8>>0]|a[c+9>>0]^a[b+9>>0]|a[c+10>>0]^a[b+10>>0]|a[c+11>>0]^a[b+11>>0]|a[c+12>>0]^a[b+12>>0]|a[c+13>>0]^a[b+13>>0]|a[c+14>>0]^a[b+14>>0]|a[c+15>>0]^a[b+15>>0]|a[c+16>>0]^a[b+16>>0]|a[c+17>>0]^a[b+17>>0]|a[c+18>>0]^a[b+18>>0]|a[c+19>>0]^a[b+19>>0]|a[c+20>>0]^a[b+20>>0]|a[c+21>>0]^a[b+21>>0]|a[c+22>>0]^a[b+22>>0]|a[c+23>>0]^a[b+23>>0]|a[c+24>>0]^a[b+24>>0]|a[c+25>>0]^a[b+25>>0]|a[c+26>>0]^a[b+26>>0]|a[c+27>>0]^a[b+27>>0]|a[c+28>>0]^a[b+28>>0]|a[c+29>>0]^a[b+29>>0]|a[c+30>>0]^a[b+30>>0]|a[c+31>>0]^a[b+31>>0])&255)+511|0)>>>8&1)+-1|0}function Ic(a){a=a|0;c[8092]=a;return 0}function Jc(){return na(32376)|0}function Kc(){ga(32416);return}function Lc(a){a=a|0;var b=0,d=0;b=c[8092]|0;if((b|0)!=0?(d=c[b+12>>2]|0,(d|0)!=0):0){a=sa[d&31](a)|0;return a|0}if(a>>>0<2){a=0;return a|0}d=((0-a|0)>>>0)%(a>>>0)|0;do b=na(32376)|0;while(b>>>0<d>>>0);a=(b>>>0)%(a>>>0)|0;return a|0}function Mc(b,c){b=b|0;c=c|0;var d=0;if(!c)return;else d=0;do{a[b+d>>0]=na(32376)|0;d=d+1|0}while((d|0)!=(c|0));return}function Nc(){var a=0;a=c[8092]|0;if(!a){a=0;return a|0}a=c[a+20>>2]|0;if(!a){a=0;return a|0}a=ra[a&31]()|0;return a|0}function Oc(){var a=0,b=0;if(c[8248]|0){b=1;return b|0}ga(32416);a=oa(30)|0;if((a|0)>0)c[8250]=a;else a=c[8250]|0;if(a>>>0<16)ia();else b=0;do{na(32376)|0;b=b+1|0}while((b|0)!=16);c[8248]=1;b=0;return b|0}function Pc(a,b){a=a|0;b=b|0;gd(a|0,0,b|0)|0;return}function Qc(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0;if(!d)e=0;else{e=0;f=0;do{e=a[c+f>>0]^a[b+f>>0]|e;f=f+1|0}while((f|0)!=(d|0))}return (((e&255)+511|0)>>>8&1)+-1|0}function Rc(b,c,e,f){b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;g=f<<1;if(f>>>0>2147483646|g>>>0>c>>>0)ia();if(!f){f=0;f=b+f|0;a[f>>0]=0;return b|0}else c=0;do{j=d[e+c>>0]|0;i=j&15;j=j>>>4;h=c<<1;a[b+h>>0]=j+87+((j+65526|0)>>>8&217);a[b+(h|1)>>0]=((i<<8)+22272+(i+65526&55552)|0)>>>8;c=c+1|0}while((c|0)!=(f|0));j=b+g|0;a[j>>0]=0;return b|0}function Sc(b,e,f,g,h,i,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;a:do if(!g){n=0;l=0;m=0;k=0}else{v=(h|0)!=0;n=0;u=0;l=0;k=0;while(1){t=k<<24>>24==0;b:do if(!(v&t)){q=d[f+l>>0]|0;m=q^48;o=(m+65526|0)>>>8;q=(q&223)+201|0;p=q&255;p=(p+65526^p+65520)>>>8;if(!((p|o)&255)){m=0;break a}}else while(1){s=a[f+l>>0]|0;r=s&255;m=r^48;o=(m+65526|0)>>>8;q=(r&223)+201|0;p=q&255;p=(p+65526^p+65520)>>>8;if((p|o)&255)break b;r=_c(h,r)|0;m=l+1|0;if((r|0)==0?1:(a[r>>0]|0)!=s<<24>>24){m=0;k=0;break a}if(m>>>0<g>>>0)l=m;else{l=m;m=0;k=0;break a}}while(0);m=p&q|o&m;if(n>>>0>=e>>>0)break;if(t)m=m<<4&255;else{a[b+n>>0]=m|u&255;n=n+1|0;m=u}k=(k&255^255)&255;l=l+1|0;if(l>>>0<g>>>0)u=m;else{m=0;break a}}c[(pa()|0)>>2]=34;m=-1}while(0);if(j)c[j>>2]=f+(((k<<24>>24!=0)<<31>>31)+l);if(!i)return m|0;c[i>>2]=n;return m|0}function Tc(){return 33008}function Uc(){return 7}function Vc(){return 4}function Wc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0;l=c[b>>2]|0;s=c[b+4>>2]|0;j=c[b+8>>2]|0;Rb=c[b+12>>2]|0;e=c[b+16>>2]|0;za=c[b+20>>2]|0;ya=c[b+24>>2]|0;zb=c[b+28>>2]|0;h=c[b+32>>2]|0;ga=c[b+36>>2]|0;H=c[d>>2]|0;J=c[d+4>>2]|0;F=c[d+8>>2]|0;D=c[d+12>>2]|0;A=c[d+16>>2]|0;y=c[d+20>>2]|0;w=c[d+24>>2]|0;u=c[d+28>>2]|0;k=c[d+32>>2]|0;t=c[d+36>>2]|0;Oc=J*19|0;bc=F*19|0;rb=D*19|0;Ha=A*19|0;jc=y*19|0;Db=w*19|0;Ta=u*19|0;Sc=k*19|0;Qc=t*19|0;p=s<<1;f=Rb<<1;M=za<<1;i=zb<<1;d=ga<<1;o=((l|0)<0)<<31>>31;I=((H|0)<0)<<31>>31;Mc=qd(H|0,I|0,l|0,o|0)|0;Lc=C;K=((J|0)<0)<<31>>31;wc=qd(J|0,K|0,l|0,o|0)|0;vc=C;G=((F|0)<0)<<31>>31;ub=qd(F|0,G|0,l|0,o|0)|0;tb=C;E=((D|0)<0)<<31>>31;Ka=qd(D|0,E|0,l|0,o|0)|0;Ja=C;B=((A|0)<0)<<31>>31;mc=qd(A|0,B|0,l|0,o|0)|0;lc=C;z=((y|0)<0)<<31>>31;Gb=qd(y|0,z|0,l|0,o|0)|0;Fb=C;x=((w|0)<0)<<31>>31;Wa=qd(w|0,x|0,l|0,o|0)|0;Va=C;v=((u|0)<0)<<31>>31;ja=qd(u|0,v|0,l|0,o|0)|0;ia=C;Pc=((k|0)<0)<<31>>31;P=qd(k|0,Pc|0,l|0,o|0)|0;O=C;o=qd(t|0,((t|0)<0)<<31>>31|0,l|0,o|0)|0;l=C;t=((s|0)<0)<<31>>31;dc=qd(H|0,I|0,s|0,t|0)|0;ec=C;n=((p|0)<0)<<31>>31;yb=qd(J|0,K|0,p|0,n|0)|0;xb=C;Ma=qd(F|0,G|0,s|0,t|0)|0;La=C;oc=qd(D|0,E|0,p|0,n|0)|0;nc=C;Ib=qd(A|0,B|0,s|0,t|0)|0;Hb=C;Ya=qd(y|0,z|0,p|0,n|0)|0;Xa=C;la=qd(w|0,x|0,s|0,t|0)|0;ka=C;R=qd(u|0,v|0,p|0,n|0)|0;Q=C;t=qd(k|0,Pc|0,s|0,t|0)|0;s=C;Pc=((Qc|0)<0)<<31>>31;n=qd(Qc|0,Pc|0,p|0,n|0)|0;p=C;k=((j|0)<0)<<31>>31;wb=qd(H|0,I|0,j|0,k|0)|0;vb=C;Qa=qd(J|0,K|0,j|0,k|0)|0;Pa=C;qc=qd(F|0,G|0,j|0,k|0)|0;pc=C;Kb=qd(D|0,E|0,j|0,k|0)|0;Jb=C;_a=qd(A|0,B|0,j|0,k|0)|0;Za=C;na=qd(y|0,z|0,j|0,k|0)|0;ma=C;T=qd(w|0,x|0,j|0,k|0)|0;S=C;v=qd(u|0,v|0,j|0,k|0)|0;u=C;Rc=((Sc|0)<0)<<31>>31;yc=qd(Sc|0,Rc|0,j|0,k|0)|0;xc=C;k=qd(Qc|0,Pc|0,j|0,k|0)|0;j=C;Sb=((Rb|0)<0)<<31>>31;Oa=qd(H|0,I|0,Rb|0,Sb|0)|0;Na=C;fa=((f|0)<0)<<31>>31;uc=qd(J|0,K|0,f|0,fa|0)|0;tc=C;Mb=qd(F|0,G|0,Rb|0,Sb|0)|0;Lb=C;ab=qd(D|0,E|0,f|0,fa|0)|0;$a=C;pa=qd(A|0,B|0,Rb|0,Sb|0)|0;oa=C;V=qd(y|0,z|0,f|0,fa|0)|0;U=C;x=qd(w|0,x|0,Rb|0,Sb|0)|0;w=C;Ua=((Ta|0)<0)<<31>>31;Ac=qd(Ta|0,Ua|0,f|0,fa|0)|0;zc=C;Sb=qd(Sc|0,Rc|0,Rb|0,Sb|0)|0;Rb=C;fa=qd(Qc|0,Pc|0,f|0,fa|0)|0;f=C;N=((e|0)<0)<<31>>31;sc=qd(H|0,I|0,e|0,N|0)|0;rc=C;Qb=qd(J|0,K|0,e|0,N|0)|0;Pb=C;cb=qd(F|0,G|0,e|0,N|0)|0;bb=C;ra=qd(D|0,E|0,e|0,N|0)|0;qa=C;X=qd(A|0,B|0,e|0,N|0)|0;W=C;z=qd(y|0,z|0,e|0,N|0)|0;y=C;Eb=((Db|0)<0)<<31>>31;Cc=qd(Db|0,Eb|0,e|0,N|0)|0;Bc=C;Ub=qd(Ta|0,Ua|0,e|0,N|0)|0;Tb=C;ib=qd(Sc|0,Rc|0,e|0,N|0)|0;hb=C;N=qd(Qc|0,Pc|0,e|0,N|0)|0;e=C;Aa=((za|0)<0)<<31>>31;Ob=qd(H|0,I|0,za|0,Aa|0)|0;Nb=C;b=((M|0)<0)<<31>>31;gb=qd(J|0,K|0,M|0,b|0)|0;fb=C;ta=qd(F|0,G|0,za|0,Aa|0)|0;sa=C;Z=qd(D|0,E|0,M|0,b|0)|0;Y=C;B=qd(A|0,B|0,za|0,Aa|0)|0;A=C;kc=((jc|0)<0)<<31>>31;Ec=qd(jc|0,kc|0,M|0,b|0)|0;Dc=C;Wb=qd(Db|0,Eb|0,za|0,Aa|0)|0;Vb=C;kb=qd(Ta|0,Ua|0,M|0,b|0)|0;jb=C;Aa=qd(Sc|0,Rc|0,za|0,Aa|0)|0;za=C;b=qd(Qc|0,Pc|0,M|0,b|0)|0;M=C;g=((ya|0)<0)<<31>>31;eb=qd(H|0,I|0,ya|0,g|0)|0;db=C;xa=qd(J|0,K|0,ya|0,g|0)|0;wa=C;$=qd(F|0,G|0,ya|0,g|0)|0;_=C;E=qd(D|0,E|0,ya|0,g|0)|0;D=C;Ia=((Ha|0)<0)<<31>>31;Gc=qd(Ha|0,Ia|0,ya|0,g|0)|0;Fc=C;Yb=qd(jc|0,kc|0,ya|0,g|0)|0;Xb=C;mb=qd(Db|0,Eb|0,ya|0,g|0)|0;lb=C;Ca=qd(Ta|0,Ua|0,ya|0,g|0)|0;Ba=C;m=qd(Sc|0,Rc|0,ya|0,g|0)|0;r=C;g=qd(Qc|0,Pc|0,ya|0,g|0)|0;ya=C;Ab=((zb|0)<0)<<31>>31;va=qd(H|0,I|0,zb|0,Ab|0)|0;ua=C;ea=((i|0)<0)<<31>>31;da=qd(J|0,K|0,i|0,ea|0)|0;ca=C;G=qd(F|0,G|0,zb|0,Ab|0)|0;F=C;sb=((rb|0)<0)<<31>>31;Ic=qd(rb|0,sb|0,i|0,ea|0)|0;Hc=C;_b=qd(Ha|0,Ia|0,zb|0,Ab|0)|0;Zb=C;ob=qd(jc|0,kc|0,i|0,ea|0)|0;nb=C;Ea=qd(Db|0,Eb|0,zb|0,Ab|0)|0;Da=C;gc=qd(Ta|0,Ua|0,i|0,ea|0)|0;fc=C;Ab=qd(Sc|0,Rc|0,zb|0,Ab|0)|0;zb=C;ea=qd(Qc|0,Pc|0,i|0,ea|0)|0;i=C;L=((h|0)<0)<<31>>31;ba=qd(H|0,I|0,h|0,L|0)|0;aa=C;K=qd(J|0,K|0,h|0,L|0)|0;J=C;cc=((bc|0)<0)<<31>>31;Kc=qd(bc|0,cc|0,h|0,L|0)|0;Jc=C;ac=qd(rb|0,sb|0,h|0,L|0)|0;$b=C;qb=qd(Ha|0,Ia|0,h|0,L|0)|0;pb=C;Ga=qd(jc|0,kc|0,h|0,L|0)|0;Fa=C;ic=qd(Db|0,Eb|0,h|0,L|0)|0;hc=C;Cb=qd(Ta|0,Ua|0,h|0,L|0)|0;Bb=C;Sa=qd(Sc|0,Rc|0,h|0,L|0)|0;Ra=C;L=qd(Qc|0,Pc|0,h|0,L|0)|0;h=C;ha=((ga|0)<0)<<31>>31;I=qd(H|0,I|0,ga|0,ha|0)|0;H=C;q=((d|0)<0)<<31>>31;Oc=qd(Oc|0,((Oc|0)<0)<<31>>31|0,d|0,q|0)|0;Nc=C;cc=qd(bc|0,cc|0,ga|0,ha|0)|0;bc=C;sb=qd(rb|0,sb|0,d|0,q|0)|0;rb=C;Ia=qd(Ha|0,Ia|0,ga|0,ha|0)|0;Ha=C;kc=qd(jc|0,kc|0,d|0,q|0)|0;jc=C;Eb=qd(Db|0,Eb|0,ga|0,ha|0)|0;Db=C;Ua=qd(Ta|0,Ua|0,d|0,q|0)|0;Ta=C;ha=qd(Sc|0,Rc|0,ga|0,ha|0)|0;ga=C;q=qd(Qc|0,Pc|0,d|0,q|0)|0;d=C;Lc=fd(Oc|0,Nc|0,Mc|0,Lc|0)|0;Jc=fd(Lc|0,C|0,Kc|0,Jc|0)|0;Hc=fd(Jc|0,C|0,Ic|0,Hc|0)|0;Fc=fd(Hc|0,C|0,Gc|0,Fc|0)|0;Dc=fd(Fc|0,C|0,Ec|0,Dc|0)|0;Bc=fd(Dc|0,C|0,Cc|0,Bc|0)|0;zc=fd(Bc|0,C|0,Ac|0,zc|0)|0;xc=fd(zc|0,C|0,yc|0,xc|0)|0;p=fd(xc|0,C|0,n|0,p|0)|0;n=C;ec=fd(wc|0,vc|0,dc|0,ec|0)|0;dc=C;rc=fd(uc|0,tc|0,sc|0,rc|0)|0;pc=fd(rc|0,C|0,qc|0,pc|0)|0;nc=fd(pc|0,C|0,oc|0,nc|0)|0;lc=fd(nc|0,C|0,mc|0,lc|0)|0;jc=fd(lc|0,C|0,kc|0,jc|0)|0;hc=fd(jc|0,C|0,ic|0,hc|0)|0;fc=fd(hc|0,C|0,gc|0,fc|0)|0;r=fd(fc|0,C|0,m|0,r|0)|0;M=fd(r|0,C|0,b|0,M|0)|0;b=C;r=fd(p|0,n|0,33554432,0)|0;r=dd(r|0,C|0,26)|0;m=C;bc=fd(ec|0,dc|0,cc|0,bc|0)|0;$b=fd(bc|0,C|0,ac|0,$b|0)|0;Zb=fd($b|0,C|0,_b|0,Zb|0)|0;Xb=fd(Zb|0,C|0,Yb|0,Xb|0)|0;Vb=fd(Xb|0,C|0,Wb|0,Vb|0)|0;Tb=fd(Vb|0,C|0,Ub|0,Tb|0)|0;Rb=fd(Tb|0,C|0,Sb|0,Rb|0)|0;j=fd(Rb|0,C|0,k|0,j|0)|0;j=fd(j|0,C|0,r|0,m|0)|0;k=C;m=id(r|0,m|0,26)|0;m=ed(p|0,n|0,m|0,C|0)|0;n=C;p=fd(M|0,b|0,33554432,0)|0;p=dd(p|0,C|0,26)|0;r=C;Nb=fd(Qb|0,Pb|0,Ob|0,Nb|0)|0;Lb=fd(Nb|0,C|0,Mb|0,Lb|0)|0;Jb=fd(Lb|0,C|0,Kb|0,Jb|0)|0;Hb=fd(Jb|0,C|0,Ib|0,Hb|0)|0;Fb=fd(Hb|0,C|0,Gb|0,Fb|0)|0;Db=fd(Fb|0,C|0,Eb|0,Db|0)|0;Bb=fd(Db|0,C|0,Cb|0,Bb|0)|0;zb=fd(Bb|0,C|0,Ab|0,zb|0)|0;ya=fd(zb|0,C|0,g|0,ya|0)|0;ya=fd(ya|0,C|0,p|0,r|0)|0;g=C;r=id(p|0,r|0,26)|0;r=ed(M|0,b|0,r|0,C|0)|0;b=C;M=fd(j|0,k|0,16777216,0)|0;M=dd(M|0,C|0,25)|0;p=C;vb=fd(yb|0,xb|0,wb|0,vb|0)|0;tb=fd(vb|0,C|0,ub|0,tb|0)|0;rb=fd(tb|0,C|0,sb|0,rb|0)|0;pb=fd(rb|0,C|0,qb|0,pb|0)|0;nb=fd(pb|0,C|0,ob|0,nb|0)|0;lb=fd(nb|0,C|0,mb|0,lb|0)|0;jb=fd(lb|0,C|0,kb|0,jb|0)|0;hb=fd(jb|0,C|0,ib|0,hb|0)|0;f=fd(hb|0,C|0,fa|0,f|0)|0;f=fd(f|0,C|0,M|0,p|0)|0;fa=C;p=id(M|0,p|0,25)|0;p=ed(j|0,k|0,p|0,C|0)|0;k=C;j=fd(ya|0,g|0,16777216,0)|0;j=dd(j|0,C|0,25)|0;M=C;db=fd(gb|0,fb|0,eb|0,db|0)|0;bb=fd(db|0,C|0,cb|0,bb|0)|0;$a=fd(bb|0,C|0,ab|0,$a|0)|0;Za=fd($a|0,C|0,_a|0,Za|0)|0;Xa=fd(Za|0,C|0,Ya|0,Xa|0)|0;Va=fd(Xa|0,C|0,Wa|0,Va|0)|0;Ta=fd(Va|0,C|0,Ua|0,Ta|0)|0;Ra=fd(Ta|0,C|0,Sa|0,Ra|0)|0;i=fd(Ra|0,C|0,ea|0,i|0)|0;i=fd(i|0,C|0,j|0,M|0)|0;ea=C;M=id(j|0,M|0,25)|0;M=ed(ya|0,g|0,M|0,C|0)|0;g=C;ya=fd(f|0,fa|0,33554432,0)|0;ya=dd(ya|0,C|0,26)|0;j=C;Na=fd(Qa|0,Pa|0,Oa|0,Na|0)|0;La=fd(Na|0,C|0,Ma|0,La|0)|0;Ja=fd(La|0,C|0,Ka|0,Ja|0)|0;Ha=fd(Ja|0,C|0,Ia|0,Ha|0)|0;Fa=fd(Ha|0,C|0,Ga|0,Fa|0)|0;Da=fd(Fa|0,C|0,Ea|0,Da|0)|0;Ba=fd(Da|0,C|0,Ca|0,Ba|0)|0;za=fd(Ba|0,C|0,Aa|0,za|0)|0;e=fd(za|0,C|0,N|0,e|0)|0;e=fd(e|0,C|0,ya|0,j|0)|0;N=C;j=id(ya|0,j|0,26)|0;j=ed(f|0,fa|0,j|0,C|0)|0;fa=fd(i|0,ea|0,33554432,0)|0;fa=dd(fa|0,C|0,26)|0;f=C;ua=fd(xa|0,wa|0,va|0,ua|0)|0;sa=fd(ua|0,C|0,ta|0,sa|0)|0;qa=fd(sa|0,C|0,ra|0,qa|0)|0;oa=fd(qa|0,C|0,pa|0,oa|0)|0;ma=fd(oa|0,C|0,na|0,ma|0)|0;ka=fd(ma|0,C|0,la|0,ka|0)|0;ia=fd(ka|0,C|0,ja|0,ia|0)|0;ga=fd(ia|0,C|0,ha|0,ga|0)|0;h=fd(ga|0,C|0,L|0,h|0)|0;h=fd(h|0,C|0,fa|0,f|0)|0;L=C;f=id(fa|0,f|0,26)|0;f=ed(i|0,ea|0,f|0,C|0)|0;ea=fd(e|0,N|0,16777216,0)|0;ea=dd(ea|0,C|0,25)|0;i=C;b=fd(ea|0,i|0,r|0,b|0)|0;r=C;i=id(ea|0,i|0,25)|0;i=ed(e|0,N|0,i|0,C|0)|0;N=fd(h|0,L|0,16777216,0)|0;N=dd(N|0,C|0,25)|0;e=C;aa=fd(da|0,ca|0,ba|0,aa|0)|0;_=fd(aa|0,C|0,$|0,_|0)|0;Y=fd(_|0,C|0,Z|0,Y|0)|0;W=fd(Y|0,C|0,X|0,W|0)|0;U=fd(W|0,C|0,V|0,U|0)|0;S=fd(U|0,C|0,T|0,S|0)|0;Q=fd(S|0,C|0,R|0,Q|0)|0;O=fd(Q|0,C|0,P|0,O|0)|0;d=fd(O|0,C|0,q|0,d|0)|0;d=fd(d|0,C|0,N|0,e|0)|0;q=C;e=id(N|0,e|0,25)|0;e=ed(h|0,L|0,e|0,C|0)|0;L=fd(b|0,r|0,33554432,0)|0;L=dd(L|0,C|0,26)|0;h=C;g=fd(M|0,g|0,L|0,h|0)|0;h=id(L|0,h|0,26)|0;h=ed(b|0,r|0,h|0,C|0)|0;r=fd(d|0,q|0,33554432,0)|0;r=dd(r|0,C|0,26)|0;b=C;H=fd(K|0,J|0,I|0,H|0)|0;F=fd(H|0,C|0,G|0,F|0)|0;D=fd(F|0,C|0,E|0,D|0)|0;A=fd(D|0,C|0,B|0,A|0)|0;y=fd(A|0,C|0,z|0,y|0)|0;w=fd(y|0,C|0,x|0,w|0)|0;u=fd(w|0,C|0,v|0,u|0)|0;s=fd(u|0,C|0,t|0,s|0)|0;l=fd(s|0,C|0,o|0,l|0)|0;l=fd(l|0,C|0,r|0,b|0)|0;o=C;b=id(r|0,b|0,26)|0;b=ed(d|0,q|0,b|0,C|0)|0;q=fd(l|0,o|0,16777216,0)|0;q=dd(q|0,C|0,25)|0;d=C;r=qd(q|0,d|0,19,0)|0;n=fd(r|0,C|0,m|0,n|0)|0;m=C;d=id(q|0,d|0,25)|0;d=ed(l|0,o|0,d|0,C|0)|0;o=fd(n|0,m|0,33554432,0)|0;o=dd(o|0,C|0,26)|0;l=C;k=fd(p|0,k|0,o|0,l|0)|0;l=id(o|0,l|0,26)|0;l=ed(n|0,m|0,l|0,C|0)|0;c[a>>2]=l;c[a+4>>2]=k;c[a+8>>2]=j;c[a+12>>2]=i;c[a+16>>2]=h;c[a+20>>2]=g;c[a+24>>2]=f;c[a+28>>2]=e;c[a+32>>2]=b;c[a+36>>2]=d;return}function Xc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0;bb=c[b>>2]|0;ua=c[b+4>>2]|0;j=c[b+8>>2]|0;la=c[b+12>>2]|0;e=c[b+16>>2]|0;db=c[b+20>>2]|0;Y=c[b+24>>2]|0;La=c[b+28>>2]|0;h=c[b+32>>2]|0;b=c[b+36>>2]|0;l=bb<<1;p=ua<<1;Xa=j<<1;f=la<<1;na=e<<1;B=db<<1;m=Y<<1;i=La<<1;Ka=db*38|0;ra=Y*19|0;va=La*38|0;da=h*19|0;gb=b*38|0;cb=((bb|0)<0)<<31>>31;cb=qd(bb|0,cb|0,bb|0,cb|0)|0;bb=C;o=((l|0)<0)<<31>>31;ta=((ua|0)<0)<<31>>31;Ia=qd(l|0,o|0,ua|0,ta|0)|0;Ha=C;k=((j|0)<0)<<31>>31;Wa=qd(j|0,k|0,l|0,o|0)|0;Va=C;ma=((la|0)<0)<<31>>31;Ua=qd(la|0,ma|0,l|0,o|0)|0;Ta=C;D=((e|0)<0)<<31>>31;Oa=qd(e|0,D|0,l|0,o|0)|0;Na=C;eb=((db|0)<0)<<31>>31;ya=qd(db|0,eb|0,l|0,o|0)|0;xa=C;g=((Y|0)<0)<<31>>31;ga=qd(Y|0,g|0,l|0,o|0)|0;fa=C;Ma=((La|0)<0)<<31>>31;R=qd(La|0,Ma|0,l|0,o|0)|0;Q=C;A=((h|0)<0)<<31>>31;F=qd(h|0,A|0,l|0,o|0)|0;E=C;q=((b|0)<0)<<31>>31;o=qd(b|0,q|0,l|0,o|0)|0;l=C;n=((p|0)<0)<<31>>31;ta=qd(p|0,n|0,ua|0,ta|0)|0;ua=C;ba=qd(p|0,n|0,j|0,k|0)|0;ca=C;P=((f|0)<0)<<31>>31;Sa=qd(f|0,P|0,p|0,n|0)|0;Ra=C;Ca=qd(e|0,D|0,p|0,n|0)|0;Ba=C;d=((B|0)<0)<<31>>31;ia=qd(B|0,d|0,p|0,n|0)|0;ha=C;T=qd(Y|0,g|0,p|0,n|0)|0;S=C;O=((i|0)<0)<<31>>31;H=qd(i|0,O|0,p|0,n|0)|0;G=C;t=qd(h|0,A|0,p|0,n|0)|0;s=C;fb=((gb|0)<0)<<31>>31;n=qd(gb|0,fb|0,p|0,n|0)|0;p=C;Qa=qd(j|0,k|0,j|0,k|0)|0;Pa=C;Ya=((Xa|0)<0)<<31>>31;Aa=qd(Xa|0,Ya|0,la|0,ma|0)|0;za=C;ka=qd(e|0,D|0,Xa|0,Ya|0)|0;ja=C;X=qd(db|0,eb|0,Xa|0,Ya|0)|0;W=C;N=qd(Y|0,g|0,Xa|0,Ya|0)|0;M=C;v=qd(La|0,Ma|0,Xa|0,Ya|0)|0;u=C;ea=((da|0)<0)<<31>>31;Ya=qd(da|0,ea|0,Xa|0,Ya|0)|0;Xa=C;k=qd(gb|0,fb|0,j|0,k|0)|0;j=C;ma=qd(f|0,P|0,la|0,ma|0)|0;la=C;V=qd(f|0,P|0,e|0,D|0)|0;U=C;J=qd(B|0,d|0,f|0,P|0)|0;I=C;z=qd(Y|0,g|0,f|0,P|0)|0;y=C;wa=((va|0)<0)<<31>>31;_a=qd(va|0,wa|0,f|0,P|0)|0;Za=C;Ea=qd(da|0,ea|0,f|0,P|0)|0;Da=C;P=qd(gb|0,fb|0,f|0,P|0)|0;f=C;L=qd(e|0,D|0,e|0,D|0)|0;K=C;oa=((na|0)<0)<<31>>31;x=qd(na|0,oa|0,db|0,eb|0)|0;w=C;sa=((ra|0)<0)<<31>>31;ab=qd(ra|0,sa|0,na|0,oa|0)|0;$a=C;Ga=qd(va|0,wa|0,e|0,D|0)|0;Fa=C;oa=qd(da|0,ea|0,na|0,oa|0)|0;na=C;D=qd(gb|0,fb|0,e|0,D|0)|0;e=C;eb=qd(Ka|0,((Ka|0)<0)<<31>>31|0,db|0,eb|0)|0;db=C;Ka=qd(ra|0,sa|0,B|0,d|0)|0;Ja=C;qa=qd(va|0,wa|0,B|0,d|0)|0;pa=C;_=qd(da|0,ea|0,B|0,d|0)|0;Z=C;d=qd(gb|0,fb|0,B|0,d|0)|0;B=C;sa=qd(ra|0,sa|0,Y|0,g|0)|0;ra=C;aa=qd(va|0,wa|0,Y|0,g|0)|0;$=C;m=qd(da|0,ea|0,m|0,((m|0)<0)<<31>>31|0)|0;r=C;g=qd(gb|0,fb|0,Y|0,g|0)|0;Y=C;Ma=qd(va|0,wa|0,La|0,Ma|0)|0;La=C;wa=qd(da|0,ea|0,i|0,O|0)|0;va=C;O=qd(gb|0,fb|0,i|0,O|0)|0;i=C;ea=qd(da|0,ea|0,h|0,A|0)|0;da=C;A=qd(gb|0,fb|0,h|0,A|0)|0;h=C;q=qd(gb|0,fb|0,b|0,q|0)|0;b=C;bb=fd(eb|0,db|0,cb|0,bb|0)|0;$a=fd(bb|0,C|0,ab|0,$a|0)|0;Za=fd($a|0,C|0,_a|0,Za|0)|0;Xa=fd(Za|0,C|0,Ya|0,Xa|0)|0;p=fd(Xa|0,C|0,n|0,p|0)|0;n=C;ua=fd(Wa|0,Va|0,ta|0,ua|0)|0;ta=C;ca=fd(Ua|0,Ta|0,ba|0,ca|0)|0;ba=C;Pa=fd(Sa|0,Ra|0,Qa|0,Pa|0)|0;Na=fd(Pa|0,C|0,Oa|0,Na|0)|0;La=fd(Na|0,C|0,Ma|0,La|0)|0;r=fd(La|0,C|0,m|0,r|0)|0;B=fd(r|0,C|0,d|0,B|0)|0;d=C;r=fd(p|0,n|0,33554432,0)|0;r=dd(r|0,C|0,26)|0;m=C;Ha=fd(Ka|0,Ja|0,Ia|0,Ha|0)|0;Fa=fd(Ha|0,C|0,Ga|0,Fa|0)|0;Da=fd(Fa|0,C|0,Ea|0,Da|0)|0;j=fd(Da|0,C|0,k|0,j|0)|0;j=fd(j|0,C|0,r|0,m|0)|0;k=C;m=id(r|0,m|0,26)|0;m=ed(p|0,n|0,m|0,C|0)|0;n=C;p=fd(B|0,d|0,33554432,0)|0;p=dd(p|0,C|0,26)|0;r=C;za=fd(Ca|0,Ba|0,Aa|0,za|0)|0;xa=fd(za|0,C|0,ya|0,xa|0)|0;va=fd(xa|0,C|0,wa|0,va|0)|0;Y=fd(va|0,C|0,g|0,Y|0)|0;Y=fd(Y|0,C|0,p|0,r|0)|0;g=C;r=id(p|0,r|0,26)|0;r=ed(B|0,d|0,r|0,C|0)|0;d=C;B=fd(j|0,k|0,16777216,0)|0;B=dd(B|0,C|0,25)|0;p=C;ra=fd(ua|0,ta|0,sa|0,ra|0)|0;pa=fd(ra|0,C|0,qa|0,pa|0)|0;na=fd(pa|0,C|0,oa|0,na|0)|0;f=fd(na|0,C|0,P|0,f|0)|0;f=fd(f|0,C|0,B|0,p|0)|0;P=C;p=id(B|0,p|0,25)|0;p=ed(j|0,k|0,p|0,C|0)|0;k=C;j=fd(Y|0,g|0,16777216,0)|0;j=dd(j|0,C|0,25)|0;B=C;ja=fd(ma|0,la|0,ka|0,ja|0)|0;ha=fd(ja|0,C|0,ia|0,ha|0)|0;fa=fd(ha|0,C|0,ga|0,fa|0)|0;da=fd(fa|0,C|0,ea|0,da|0)|0;i=fd(da|0,C|0,O|0,i|0)|0;i=fd(i|0,C|0,j|0,B|0)|0;O=C;B=id(j|0,B|0,25)|0;B=ed(Y|0,g|0,B|0,C|0)|0;g=C;Y=fd(f|0,P|0,33554432,0)|0;Y=dd(Y|0,C|0,26)|0;j=C;$=fd(ca|0,ba|0,aa|0,$|0)|0;Z=fd($|0,C|0,_|0,Z|0)|0;e=fd(Z|0,C|0,D|0,e|0)|0;e=fd(e|0,C|0,Y|0,j|0)|0;D=C;j=id(Y|0,j|0,26)|0;j=ed(f|0,P|0,j|0,C|0)|0;P=fd(i|0,O|0,33554432,0)|0;P=dd(P|0,C|0,26)|0;f=C;U=fd(X|0,W|0,V|0,U|0)|0;S=fd(U|0,C|0,T|0,S|0)|0;Q=fd(S|0,C|0,R|0,Q|0)|0;h=fd(Q|0,C|0,A|0,h|0)|0;h=fd(h|0,C|0,P|0,f|0)|0;A=C;f=id(P|0,f|0,26)|0;f=ed(i|0,O|0,f|0,C|0)|0;O=fd(e|0,D|0,16777216,0)|0;O=dd(O|0,C|0,25)|0;i=C;d=fd(O|0,i|0,r|0,d|0)|0;r=C;i=id(O|0,i|0,25)|0;i=ed(e|0,D|0,i|0,C|0)|0;D=fd(h|0,A|0,16777216,0)|0;D=dd(D|0,C|0,25)|0;e=C;K=fd(N|0,M|0,L|0,K|0)|0;I=fd(K|0,C|0,J|0,I|0)|0;G=fd(I|0,C|0,H|0,G|0)|0;E=fd(G|0,C|0,F|0,E|0)|0;b=fd(E|0,C|0,q|0,b|0)|0;b=fd(b|0,C|0,D|0,e|0)|0;q=C;e=id(D|0,e|0,25)|0;e=ed(h|0,A|0,e|0,C|0)|0;A=fd(d|0,r|0,33554432,0)|0;A=dd(A|0,C|0,26)|0;h=C;g=fd(B|0,g|0,A|0,h|0)|0;h=id(A|0,h|0,26)|0;h=ed(d|0,r|0,h|0,C|0)|0;r=fd(b|0,q|0,33554432,0)|0;r=dd(r|0,C|0,26)|0;d=C;w=fd(z|0,y|0,x|0,w|0)|0;u=fd(w|0,C|0,v|0,u|0)|0;s=fd(u|0,C|0,t|0,s|0)|0;l=fd(s|0,C|0,o|0,l|0)|0;l=fd(l|0,C|0,r|0,d|0)|0;o=C;d=id(r|0,d|0,26)|0;d=ed(b|0,q|0,d|0,C|0)|0;q=fd(l|0,o|0,16777216,0)|0;q=dd(q|0,C|0,25)|0;b=C;r=qd(q|0,b|0,19,0)|0;n=fd(r|0,C|0,m|0,n|0)|0;m=C;b=id(q|0,b|0,25)|0;b=ed(l|0,o|0,b|0,C|0)|0;o=fd(n|0,m|0,33554432,0)|0;o=dd(o|0,C|0,26)|0;l=C;k=fd(p|0,k|0,o|0,l|0)|0;l=id(o|0,l|0,26)|0;l=ed(n|0,m|0,l|0,C|0)|0;c[a>>2]=l;c[a+4>>2]=k;c[a+8>>2]=j;c[a+12>>2]=i;c[a+16>>2]=h;c[a+20>>2]=g;c[a+24>>2]=f;c[a+28>>2]=e;c[a+32>>2]=d;c[a+36>>2]=b;return}function Yc(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0;Ya=i;Oa=i=i+63&-64;i=i+480|0;Ta=Oa+120|0;Ua=Oa+160|0;Va=Oa+280|0;Sa=Oa+40|0;Ma=Oa+440|0;Pa=Oa+360|0;Wa=Oa+400|0;Xa=Oa+240|0;Qa=Oa+200|0;Ra=Oa+80|0;Na=Oa;Oa=Oa+320|0;h=Ma+0|0;e=e+0|0;g=h+32|0;do{a[h>>0]=a[e>>0]|0;h=h+1|0;e=e+1|0}while((h|0)<(g|0));a[Ma>>0]=(d[Ma>>0]|0)&248;va=Ma+31|0;a[va>>0]=(d[va>>0]|0)&63|64;va=d[f>>0]|0;m=id(d[f+1>>0]|0|0,0,8)|0;j=C;za=id(d[f+2>>0]|0|0,0,16)|0;j=j|C;Aa=id(d[f+3>>0]|0|0,0,24)|0;j=j|C;e=a[f+6>>0]|0;l=d[f+4>>0]|0;ya=id(d[f+5>>0]|0|0,0,8)|0;k=C;e=id(e&255|0,0,16)|0;k=id(ya|l|e|0,k|C|0,6)|0;e=C;l=a[f+9>>0]|0;ya=d[f+7>>0]|0;n=id(d[f+8>>0]|0|0,0,8)|0;Ea=C;l=id(l&255|0,0,16)|0;Ea=id(n|ya|l|0,Ea|C|0,5)|0;l=C;ya=a[f+12>>0]|0;n=d[f+10>>0]|0;Ga=id(d[f+11>>0]|0|0,0,8)|0;xa=C;ya=id(ya&255|0,0,16)|0;xa=id(Ga|n|ya|0,xa|C|0,3)|0;ya=C;n=a[f+15>>0]|0;Ga=d[f+13>>0]|0;h=id(d[f+14>>0]|0|0,0,8)|0;Ia=C;n=id(n&255|0,0,16)|0;Ia=id(h|Ga|n|0,Ia|C|0,2)|0;n=C;Ga=d[f+16>>0]|0;h=id(d[f+17>>0]|0|0,0,8)|0;Ca=C;q=id(d[f+18>>0]|0|0,0,16)|0;Ca=Ca|C;Ba=id(d[f+19>>0]|0|0,0,24)|0;Ba=h|Ga|q|Ba;Ca=Ca|C;q=a[f+22>>0]|0;Ga=d[f+20>>0]|0;h=id(d[f+21>>0]|0|0,0,8)|0;g=C;q=id(q&255|0,0,16)|0;g=id(h|Ga|q|0,g|C|0,7)|0;q=C;Ga=a[f+25>>0]|0;h=d[f+23>>0]|0;s=id(d[f+24>>0]|0|0,0,8)|0;Fa=C;Ga=id(Ga&255|0,0,16)|0;Fa=id(s|h|Ga|0,Fa|C|0,5)|0;Ga=C;h=a[f+28>>0]|0;s=d[f+26>>0]|0;Ka=id(d[f+27>>0]|0|0,0,8)|0;La=C;h=id(h&255|0,0,16)|0;La=id(Ka|s|h|0,La|C|0,4)|0;h=C;s=a[f+31>>0]|0;Ka=d[f+29>>0]|0;Da=id(d[f+30>>0]|0|0,0,8)|0;Ja=C;s=id(s&255|0,0,16)|0;Ja=id(Da|Ka|s|0,Ja|C|0,2)|0;Ja=Ja&33554428;s=fd(Ja|0,0,16777216,0)|0;s=hd(s|0,C|0,25)|0;Ka=C;Da=qd(s|0,Ka|0,19,0)|0;j=fd(Da|0,C|0,m|va|za|Aa|0,j|0)|0;Aa=C;Ka=id(s|0,Ka|0,25)|0;s=C;za=fd(k|0,e|0,16777216,0)|0;za=hd(za|0,C|0,25)|0;va=C;l=fd(Ea|0,l|0,za|0,va|0)|0;Ea=C;va=id(za|0,va|0,25)|0;va=ed(k|0,e|0,va|0,C|0)|0;e=C;k=fd(xa|0,ya|0,16777216,0)|0;k=hd(k|0,C|0,25)|0;za=C;n=fd(Ia|0,n|0,k|0,za|0)|0;Ia=C;za=id(k|0,za|0,25)|0;k=C;m=fd(Ba|0,Ca|0,16777216,0)|0;m=hd(m|0,C|0,25)|0;Da=C;q=fd(g|0,q|0,m|0,Da|0)|0;g=C;Da=id(m|0,Da|0,25)|0;m=C;o=fd(Fa|0,Ga|0,16777216,0)|0;o=hd(o|0,C|0,25)|0;Ha=C;h=fd(La|0,h|0,o|0,Ha|0)|0;La=C;Ha=id(o|0,Ha|0,25)|0;o=C;wa=fd(j|0,Aa|0,33554432,0)|0;wa=dd(wa|0,C|0,26)|0;f=C;e=fd(va|0,e|0,wa|0,f|0)|0;f=id(wa|0,f|0,26)|0;f=ed(j|0,Aa|0,f|0,C|0)|0;Aa=fd(l|0,Ea|0,33554432,0)|0;Aa=dd(Aa|0,C|0,26)|0;j=C;ya=fd(Aa|0,j|0,xa|0,ya|0)|0;k=ed(ya|0,C|0,za|0,k|0)|0;j=id(Aa|0,j|0,26)|0;j=ed(l|0,Ea|0,j|0,C|0)|0;Ea=fd(n|0,Ia|0,33554432,0)|0;Ea=dd(Ea|0,C|0,26)|0;l=C;Ca=fd(Ea|0,l|0,Ba|0,Ca|0)|0;m=ed(Ca|0,C|0,Da|0,m|0)|0;l=id(Ea|0,l|0,26)|0;l=ed(n|0,Ia|0,l|0,C|0)|0;Ia=fd(q|0,g|0,33554432,0)|0;Ia=dd(Ia|0,C|0,26)|0;n=C;Ga=fd(Ia|0,n|0,Fa|0,Ga|0)|0;o=ed(Ga|0,C|0,Ha|0,o|0)|0;n=id(Ia|0,n|0,26)|0;n=ed(q|0,g|0,n|0,C|0)|0;g=fd(h|0,La|0,33554432,0)|0;g=dd(g|0,C|0,26)|0;q=C;Ja=fd(Ja|0,0,g|0,q|0)|0;s=ed(Ja|0,C|0,Ka|0,s|0)|0;q=id(g|0,q|0,26)|0;q=ed(h|0,La|0,q|0,C|0)|0;c[Pa>>2]=f;c[Pa+4>>2]=e;c[Pa+8>>2]=j;c[Pa+12>>2]=k;c[Pa+16>>2]=l;c[Pa+20>>2]=m;c[Pa+24>>2]=n;c[Pa+28>>2]=o;c[Pa+32>>2]=q;c[Pa+36>>2]=s;c[Wa>>2]=1;La=Wa+4|0;h=La+0|0;g=h+36|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(g|0));h=Xa+0|0;g=h+40|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(g|0));c[Qa>>2]=f;ta=Qa+4|0;c[ta>>2]=e;ua=Qa+8|0;c[ua>>2]=j;va=Qa+12|0;c[va>>2]=k;wa=Qa+16|0;c[wa>>2]=l;xa=Qa+20|0;c[xa>>2]=m;ya=Qa+24|0;c[ya>>2]=n;za=Qa+28|0;c[za>>2]=o;Aa=Qa+32|0;c[Aa>>2]=q;Ba=Qa+36|0;c[Ba>>2]=s;c[Ra>>2]=1;Ca=Ra+4|0;h=Ca+0|0;g=h+36|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(g|0));Da=Wa+8|0;Ea=Wa+12|0;Fa=Wa+16|0;Ga=Wa+20|0;Ha=Wa+24|0;Ia=Wa+28|0;Ja=Wa+32|0;Ka=Wa+36|0;M=Xa+4|0;N=Xa+8|0;O=Xa+12|0;P=Xa+16|0;Q=Xa+20|0;R=Xa+24|0;S=Xa+28|0;T=Xa+32|0;U=Xa+36|0;V=Ra+8|0;W=Ra+12|0;X=Ra+16|0;Y=Ra+20|0;Z=Ra+24|0;_=Ra+28|0;$=Ra+32|0;aa=Ra+36|0;ba=Na+4|0;ca=Na+8|0;da=Na+12|0;ea=Na+16|0;fa=Na+20|0;ga=Na+24|0;ha=Na+28|0;ia=Na+32|0;ja=Na+36|0;ka=Oa+4|0;la=Oa+8|0;ma=Oa+12|0;na=Oa+16|0;oa=Oa+20|0;pa=Oa+24|0;qa=Oa+28|0;ra=Oa+32|0;sa=Oa+36|0;h=1;g=0;p=0;r=0;t=0;K=0;J=0;I=0;H=0;w=0;x=0;y=0;z=0;A=0;B=0;D=0;E=0;F=0;G=0;u=254;v=0;while(1){L=(d[Ma+((u|0)/8|0)>>0]|0)>>>(u&7)&1;bb=0-(L^v)|0;ab=(f^h)&bb;$a=(e^g)&bb;_a=(j^p)&bb;Za=(k^r)&bb;hb=(l^t)&bb;ib=(m^K)&bb;jb=(n^J)&bb;kb=(o^I)&bb;lb=(q^H)&bb;eb=(s^w)&bb;c[Wa>>2]=ab^h;c[La>>2]=$a^g;c[Da>>2]=_a^p;c[Ea>>2]=Za^r;c[Fa>>2]=hb^t;c[Ga>>2]=ib^K;c[Ha>>2]=jb^J;c[Ia>>2]=kb^I;c[Ja>>2]=lb^H;c[Ka>>2]=eb^w;ab=ab^f;c[Qa>>2]=ab;$a=$a^e;c[ta>>2]=$a;_a=_a^j;c[ua>>2]=_a;Za=Za^k;c[va>>2]=Za;e=hb^l;c[wa>>2]=e;r=ib^m;c[xa>>2]=r;j=jb^n;c[ya>>2]=j;n=kb^o;c[za>>2]=n;J=lb^q;c[Aa>>2]=J;I=eb^s;c[Ba>>2]=I;g=c[U>>2]|0;o=c[Ra>>2]|0;m=c[Ca>>2]|0;w=c[V>>2]|0;K=c[W>>2]|0;s=c[X>>2]|0;H=c[Y>>2]|0;eb=c[Z>>2]|0;t=c[_>>2]|0;p=c[$>>2]|0;h=c[aa>>2]|0;lb=(o^x)&bb;kb=(m^y)&bb;jb=(w^z)&bb;ib=(K^A)&bb;hb=(s^B)&bb;gb=(H^D)&bb;fb=(eb^E)&bb;db=(t^F)&bb;cb=(p^G)&bb;bb=(h^g)&bb;x=lb^x;c[Xa>>2]=x;y=kb^y;c[M>>2]=y;z=jb^z;c[N>>2]=z;A=ib^A;c[O>>2]=A;k=hb^B;c[P>>2]=k;q=gb^D;c[Q>>2]=q;l=fb^E;c[R>>2]=l;f=db^F;c[S>>2]=f;v=cb^G;c[T>>2]=v;g=bb^g;c[U>>2]=g;o=lb^o;c[Ra>>2]=o;m=kb^m;c[Ca>>2]=m;w=jb^w;c[V>>2]=w;K=ib^K;c[W>>2]=K;s=hb^s;c[X>>2]=s;H=gb^H;c[Y>>2]=H;G=fb^eb;c[Z>>2]=G;t=db^t;c[_>>2]=t;p=cb^p;c[$>>2]=p;h=bb^h;c[aa>>2]=h;c[Na>>2]=ab-o;c[ba>>2]=$a-m;c[ca>>2]=_a-w;c[da>>2]=Za-K;c[ea>>2]=e-s;c[fa>>2]=r-H;c[ga>>2]=j-G;c[ha>>2]=n-t;c[ia>>2]=J-p;c[ja>>2]=I-h;B=c[Wa>>2]|0;D=c[La>>2]|0;E=c[Da>>2]|0;I=c[Ea>>2]|0;J=c[Fa>>2]|0;n=c[Ga>>2]|0;j=c[Ha>>2]|0;F=c[Ia>>2]|0;r=c[Ja>>2]|0;e=c[Ka>>2]|0;c[Oa>>2]=B-x;c[ka>>2]=D-y;c[la>>2]=E-z;c[ma>>2]=I-A;c[na>>2]=J-k;c[oa>>2]=n-q;c[pa>>2]=j-l;c[qa>>2]=F-f;c[ra>>2]=r-v;c[sa>>2]=e-g;c[Wa>>2]=x+B;c[La>>2]=y+D;c[Da>>2]=z+E;c[Ea>>2]=A+I;c[Fa>>2]=k+J;c[Ga>>2]=q+n;c[Ha>>2]=l+j;c[Ia>>2]=f+F;c[Ja>>2]=v+r;c[Ka>>2]=g+e;m=m+(c[ta>>2]|0)|0;w=w+(c[ua>>2]|0)|0;K=K+(c[va>>2]|0)|0;s=s+(c[wa>>2]|0)|0;H=H+(c[xa>>2]|0)|0;G=G+(c[ya>>2]|0)|0;t=t+(c[za>>2]|0)|0;p=p+(c[Aa>>2]|0)|0;h=h+(c[Ba>>2]|0)|0;c[Xa>>2]=o+(c[Qa>>2]|0);c[M>>2]=m;c[N>>2]=w;c[O>>2]=K;c[P>>2]=s;c[Q>>2]=H;c[R>>2]=G;c[S>>2]=t;c[T>>2]=p;c[U>>2]=h;Wc(Ra,Na,Wa);Wc(Xa,Xa,Oa);Xc(Na,Oa);Xc(Oa,Wa);h=c[Ra>>2]|0;p=c[Ca>>2]|0;t=c[V>>2]|0;G=c[W>>2]|0;H=c[X>>2]|0;s=c[Y>>2]|0;K=c[Z>>2]|0;w=c[_>>2]|0;m=c[$>>2]|0;o=c[aa>>2]|0;e=c[Xa>>2]|0;g=c[M>>2]|0;r=c[N>>2]|0;v=c[O>>2]|0;F=c[P>>2]|0;f=c[Q>>2]|0;j=c[R>>2]|0;l=c[S>>2]|0;n=c[T>>2]|0;q=c[U>>2]|0;c[Qa>>2]=e+h;c[ta>>2]=g+p;c[ua>>2]=r+t;c[va>>2]=v+G;c[wa>>2]=F+H;c[xa>>2]=f+s;c[ya>>2]=j+K;c[za>>2]=l+w;c[Aa>>2]=n+m;c[Ba>>2]=q+o;c[Xa>>2]=h-e;c[M>>2]=p-g;c[N>>2]=t-r;c[O>>2]=G-v;c[P>>2]=H-F;c[Q>>2]=s-f;c[R>>2]=K-j;c[S>>2]=w-l;c[T>>2]=m-n;c[U>>2]=o-q;Wc(Wa,Oa,Na);q=(c[Oa>>2]|0)-(c[Na>>2]|0)|0;o=(c[ka>>2]|0)-(c[ba>>2]|0)|0;n=(c[la>>2]|0)-(c[ca>>2]|0)|0;m=(c[ma>>2]|0)-(c[da>>2]|0)|0;l=(c[na>>2]|0)-(c[ea>>2]|0)|0;w=(c[oa>>2]|0)-(c[fa>>2]|0)|0;j=(c[pa>>2]|0)-(c[ga>>2]|0)|0;K=(c[qa>>2]|0)-(c[ha>>2]|0)|0;f=(c[ra>>2]|0)-(c[ia>>2]|0)|0;s=(c[sa>>2]|0)-(c[ja>>2]|0)|0;c[Oa>>2]=q;c[ka>>2]=o;c[la>>2]=n;c[ma>>2]=m;c[na>>2]=l;c[oa>>2]=w;c[pa>>2]=j;c[qa>>2]=K;c[ra>>2]=f;c[sa>>2]=s;Xc(Xa,Xa);q=qd(q|0,((q|0)<0)<<31>>31|0,121666,0)|0;F=C;o=qd(o|0,((o|0)<0)<<31>>31|0,121666,0)|0;H=C;n=qd(n|0,((n|0)<0)<<31>>31|0,121666,0)|0;v=C;m=qd(m|0,((m|0)<0)<<31>>31|0,121666,0)|0;G=C;l=qd(l|0,((l|0)<0)<<31>>31|0,121666,0)|0;r=C;w=qd(w|0,((w|0)<0)<<31>>31|0,121666,0)|0;t=C;j=qd(j|0,((j|0)<0)<<31>>31|0,121666,0)|0;g=C;K=qd(K|0,((K|0)<0)<<31>>31|0,121666,0)|0;p=C;f=qd(f|0,((f|0)<0)<<31>>31|0,121666,0)|0;e=C;s=qd(s|0,((s|0)<0)<<31>>31|0,121666,0)|0;h=C;J=fd(s|0,h|0,16777216,0)|0;J=dd(J|0,C|0,25)|0;k=C;I=qd(J|0,k|0,19,0)|0;F=fd(I|0,C|0,q|0,F|0)|0;q=C;k=id(J|0,k|0,25)|0;k=ed(s|0,h|0,k|0,C|0)|0;h=C;s=fd(o|0,H|0,16777216,0)|0;s=dd(s|0,C|0,25)|0;J=C;v=fd(s|0,J|0,n|0,v|0)|0;n=C;J=id(s|0,J|0,25)|0;J=ed(o|0,H|0,J|0,C|0)|0;H=C;o=fd(m|0,G|0,16777216,0)|0;o=dd(o|0,C|0,25)|0;s=C;r=fd(o|0,s|0,l|0,r|0)|0;l=C;s=id(o|0,s|0,25)|0;s=ed(m|0,G|0,s|0,C|0)|0;G=C;m=fd(w|0,t|0,16777216,0)|0;m=dd(m|0,C|0,25)|0;o=C;g=fd(m|0,o|0,j|0,g|0)|0;j=C;o=id(m|0,o|0,25)|0;o=ed(w|0,t|0,o|0,C|0)|0;t=C;w=fd(K|0,p|0,16777216,0)|0;w=dd(w|0,C|0,25)|0;m=C;e=fd(w|0,m|0,f|0,e|0)|0;f=C;m=id(w|0,m|0,25)|0;m=ed(K|0,p|0,m|0,C|0)|0;p=C;K=fd(F|0,q|0,33554432,0)|0;K=dd(K|0,C|0,26)|0;w=C;H=fd(J|0,H|0,K|0,w|0)|0;w=id(K|0,w|0,26)|0;w=ed(F|0,q|0,w|0,C|0)|0;q=fd(v|0,n|0,33554432,0)|0;q=dd(q|0,C|0,26)|0;F=C;G=fd(s|0,G|0,q|0,F|0)|0;F=id(q|0,F|0,26)|0;F=ed(v|0,n|0,F|0,C|0)|0;n=fd(r|0,l|0,33554432,0)|0;n=dd(n|0,C|0,26)|0;v=C;t=fd(o|0,t|0,n|0,v|0)|0;v=id(n|0,v|0,26)|0;v=ed(r|0,l|0,v|0,C|0)|0;l=fd(g|0,j|0,33554432,0)|0;l=dd(l|0,C|0,26)|0;r=C;p=fd(m|0,p|0,l|0,r|0)|0;r=id(l|0,r|0,26)|0;r=ed(g|0,j|0,r|0,C|0)|0;j=fd(e|0,f|0,33554432,0)|0;j=dd(j|0,C|0,26)|0;g=C;h=fd(k|0,h|0,j|0,g|0)|0;g=id(j|0,g|0,26)|0;g=ed(e|0,f|0,g|0,C|0)|0;c[Ra>>2]=w;c[Ca>>2]=H;c[V>>2]=F;c[W>>2]=G;c[X>>2]=v;c[Y>>2]=t;c[Z>>2]=r;c[_>>2]=p;c[$>>2]=g;c[aa>>2]=h;Xc(Qa,Qa);H=H+(c[ba>>2]|0)|0;F=F+(c[ca>>2]|0)|0;G=G+(c[da>>2]|0)|0;v=v+(c[ea>>2]|0)|0;t=t+(c[fa>>2]|0)|0;r=r+(c[ga>>2]|0)|0;p=p+(c[ha>>2]|0)|0;g=g+(c[ia>>2]|0)|0;h=h+(c[ja>>2]|0)|0;c[Na>>2]=w+(c[Na>>2]|0);c[ba>>2]=H;c[ca>>2]=F;c[da>>2]=G;c[ea>>2]=v;c[fa>>2]=t;c[ga>>2]=r;c[ha>>2]=p;c[ia>>2]=g;c[ja>>2]=h;Wc(Ra,Pa,Xa);Wc(Xa,Oa,Na);u=u+-1|0;h=c[Wa>>2]|0;g=c[La>>2]|0;p=c[Da>>2]|0;r=c[Ea>>2]|0;t=c[Fa>>2]|0;v=c[Ga>>2]|0;G=c[Ha>>2]|0;F=c[Ia>>2]|0;H=c[Ja>>2]|0;w=c[Ka>>2]|0;f=c[Qa>>2]|0;e=c[ta>>2]|0;j=c[ua>>2]|0;k=c[va>>2]|0;l=c[wa>>2]|0;m=c[xa>>2]|0;n=c[ya>>2]|0;o=c[za>>2]|0;q=c[Aa>>2]|0;s=c[Ba>>2]|0;if((u|0)<=-1)break;K=v;J=G;I=F;x=c[Xa>>2]|0;y=c[M>>2]|0;z=c[N>>2]|0;A=c[O>>2]|0;B=c[P>>2]|0;D=c[Q>>2]|0;E=c[R>>2]|0;F=c[S>>2]|0;G=c[T>>2]|0;v=L}lb=0-L|0;Na=(f^h)&lb;kb=(e^g)&lb;ib=(j^p)&lb;gb=(k^r)&lb;eb=(l^t)&lb;cb=(m^v)&lb;ab=(n^G)&lb;_a=(o^F)&lb;Oa=(q^H)&lb;Ma=(s^w)&lb;c[Wa>>2]=Na^h;c[La>>2]=kb^g;c[Da>>2]=ib^p;c[Ea>>2]=gb^r;c[Fa>>2]=eb^t;c[Ga>>2]=cb^v;c[Ha>>2]=ab^G;c[Ia>>2]=_a^F;c[Ja>>2]=Oa^H;c[Ka>>2]=Ma^w;c[Qa>>2]=Na^f;c[ta>>2]=kb^e;c[ua>>2]=ib^j;c[va>>2]=gb^k;c[wa>>2]=eb^l;c[xa>>2]=cb^m;c[ya>>2]=ab^n;c[za>>2]=_a^o;c[Aa>>2]=Oa^q;c[Ba>>2]=Ma^s;ta=c[Xa>>2]|0;ua=c[M>>2]|0;va=c[N>>2]|0;wa=c[O>>2]|0;xa=c[P>>2]|0;ya=c[Q>>2]|0;za=c[R>>2]|0;Aa=c[S>>2]|0;Ba=c[T>>2]|0;Ma=c[U>>2]|0;Oa=c[Ra>>2]|0;Qa=c[Ca>>2]|0;_a=c[V>>2]|0;ab=c[W>>2]|0;cb=c[X>>2]|0;eb=c[Y>>2]|0;gb=c[Z>>2]|0;ib=c[_>>2]|0;kb=c[$>>2]|0;e=c[aa>>2]|0;Na=(Oa^ta)&lb;Pa=(Qa^ua)&lb;Za=(_a^va)&lb;$a=(ab^wa)&lb;bb=(cb^xa)&lb;db=(eb^ya)&lb;fb=(gb^za)&lb;hb=(ib^Aa)&lb;jb=(kb^Ba)&lb;lb=(e^Ma)&lb;c[Xa>>2]=Na^ta;c[M>>2]=Pa^ua;c[N>>2]=Za^va;c[O>>2]=$a^wa;c[P>>2]=bb^xa;c[Q>>2]=db^ya;c[R>>2]=fb^za;c[S>>2]=hb^Aa;c[T>>2]=jb^Ba;c[U>>2]=lb^Ma;c[Ra>>2]=Na^Oa;c[Ca>>2]=Pa^Qa;c[V>>2]=Za^_a;c[W>>2]=$a^ab;c[X>>2]=bb^cb;c[Y>>2]=db^eb;c[Z>>2]=fb^gb;c[_>>2]=hb^ib;c[$>>2]=jb^kb;c[aa>>2]=lb^e;Xc(Ta,Xa);Xc(Ua,Ta);Xc(Ua,Ua);Wc(Ua,Xa,Ua);Wc(Ta,Ta,Ua);Xc(Va,Ta);Wc(Ua,Ua,Va);Xc(Va,Ua);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Wc(Ua,Va,Ua);Xc(Va,Ua);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Wc(Va,Va,Ua);Xc(Sa,Va);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Xc(Sa,Sa);Wc(Va,Sa,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Xc(Va,Va);Wc(Ua,Va,Ua);Xc(Va,Ua);e=1;do{Xc(Va,Va);e=e+1|0}while((e|0)!=50);Wc(Va,Va,Ua);Xc(Sa,Va);e=1;do{Xc(Sa,Sa);e=e+1|0}while((e|0)!=100);Wc(Va,Sa,Va);Xc(Va,Va);e=1;do{Xc(Va,Va);e=e+1|0}while((e|0)!=50);Wc(Ua,Va,Ua);Xc(Ua,Ua);Xc(Ua,Ua);Xc(Ua,Ua);Xc(Ua,Ua);Xc(Ua,Ua);Wc(Xa,Ua,Ta);Wc(Wa,Wa,Xa);cb=c[Wa>>2]|0;db=c[La>>2]|0;eb=c[Da>>2]|0;fb=c[Ea>>2]|0;gb=c[Fa>>2]|0;hb=c[Ga>>2]|0;ib=c[Ha>>2]|0;jb=c[Ia>>2]|0;lb=c[Ja>>2]|0;kb=c[Ka>>2]|0;cb=(((((((((((((kb*19|0)+16777216>>25)+cb>>26)+db>>25)+eb>>26)+fb>>25)+gb>>26)+hb>>25)+ib>>26)+jb>>25)+lb>>26)+kb>>25)*19|0)+cb|0;bb=cb>>26;db=bb+db|0;bb=cb-(bb<<26)|0;cb=db>>25;eb=cb+eb|0;cb=db-(cb<<25)|0;db=eb>>26;fb=db+fb|0;db=eb-(db<<26)|0;eb=fb>>25;gb=eb+gb|0;eb=fb-(eb<<25)|0;fb=gb>>26;hb=fb+hb|0;fb=gb-(fb<<26)|0;gb=hb>>25;ib=gb+ib|0;gb=hb-(gb<<25)|0;hb=ib>>26;jb=hb+jb|0;hb=ib-(hb<<26)|0;ib=jb>>25;lb=ib+lb|0;ib=jb-(ib<<25)|0;jb=lb>>26;kb=jb+kb|0;jb=lb-(jb<<26)|0;lb=kb&33554431;a[b>>0]=bb;a[b+1>>0]=bb>>>8;a[b+2>>0]=bb>>>16;a[b+3>>0]=cb<<2|bb>>>24;a[b+4>>0]=cb>>>6;a[b+5>>0]=cb>>>14;a[b+6>>0]=db<<3|cb>>>22;a[b+7>>0]=db>>>5;a[b+8>>0]=db>>>13;a[b+9>>0]=eb<<5|db>>>21;a[b+10>>0]=eb>>>3;a[b+11>>0]=eb>>>11;a[b+12>>0]=fb<<6|eb>>>19;a[b+13>>0]=fb>>>2;a[b+14>>0]=fb>>>10;a[b+15>>0]=fb>>>18;a[b+16>>0]=gb;a[b+17>>0]=gb>>>8;a[b+18>>0]=gb>>>16;a[b+19>>0]=hb<<1|gb>>>24;a[b+20>>0]=hb>>>7;a[b+21>>0]=hb>>>15;a[b+22>>0]=ib<<3|hb>>>23;a[b+23>>0]=ib>>>5;a[b+24>>0]=ib>>>13;a[b+25>>0]=jb<<4|ib>>>21;a[b+26>>0]=jb>>>4;a[b+27>>0]=jb>>>12;a[b+28>>0]=jb>>>20|lb<<6;a[b+29>>0]=kb>>>2;a[b+30>>0]=kb>>>10;a[b+31>>0]=lb>>>18;i=Ya;return}function Zc(b,e,f,g,h,j,k,l){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0;G=i;F=i=i+63&-64;i=i+112|0;y=F;E=F+48|0;F=F+16|0;if((f|0)==0&(g|0)==0){i=G;return}n=F+0|0;l=l+0|0;m=n+32|0;do{a[n>>0]=a[l>>0]|0;n=n+1|0;l=l+1|0}while((n|0)<(m|0));u=h;r=u;u=u+4|0;u=d[u>>0]|d[u+1>>0]<<8|d[u+2>>0]<<16|d[u+3>>0]<<24;q=y;c[q>>2]=d[r>>0]|d[r+1>>0]<<8|d[r+2>>0]<<16|d[r+3>>0]<<24;c[q+4>>2]=u;q=y+8|0;a[q>>0]=j;u=hd(j|0,k|0,8)|0;r=y+9|0;a[r>>0]=u;u=hd(j|0,k|0,16)|0;s=y+10|0;a[s>>0]=u;u=hd(j|0,k|0,24)|0;t=y+11|0;a[t>>0]=u;u=y+12|0;a[u>>0]=k;p=hd(j|0,k|0,40)|0;v=y+13|0;a[v>>0]=p;p=hd(j|0,k|0,48)|0;w=y+14|0;a[w>>0]=p;p=hd(j|0,k|0,56)|0;l=y+15|0;a[l>>0]=p;if(g>>>0>0|(g|0)==0&f>>>0>63){o=fd(f|0,g|0,-64,-1)|0;p=o+64&-64;j=b;m=e;k=f;n=g;while(1){cb(E,y,F,33064);h=0;do{a[j+h>>0]=a[E+h>>0]^a[m+h>>0];h=h+1|0}while((h|0)!=64);f=c[q>>2]|0;g=(f&255)+1|0;a[q>>0]=g;g=(f>>>8&255)+(g>>>8)|0;a[r>>0]=g;g=(f>>>16&255)+(g>>>8)|0;a[s>>0]=g;g=(f>>>24)+(g>>>8)|0;a[t>>0]=g;f=c[u>>2]|0;g=(f&255)+(g>>>8)|0;a[u>>0]=g;g=(f>>>8&255)+(g>>>8)|0;a[v>>0]=g;g=(f>>>16&255)+(g>>>8)|0;a[w>>0]=g;a[l>>0]=(f>>>24)+(g>>>8);k=fd(k|0,n|0,-64,-1)|0;n=C;if(!(n>>>0>0|(n|0)==0&k>>>0>63))break;else{j=j+64|0;m=m+64|0}}l=o&63;if(!((l|0)==0&0==0)){A=b+p|0;B=l;D=e+p|0;x=y;z=9}}else{A=b;B=f;D=e;x=y;z=9}if((z|0)==9?(cb(E,x,F,33064),(B|0)!=0):0){l=0;do{a[A+l>>0]=a[E+l>>0]^a[D+l>>0];l=l+1|0}while((l|0)!=(B|0))}n=E+0|0;m=n+64|0;do{a[n>>0]=0;n=n+1|0}while((n|0)<(m|0));n=F+0|0;m=n+32|0;do{a[n>>0]=0;n=n+1|0}while((n|0)<(m|0));i=G;return}function _c(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=d&255;if(!g){d=b+(jd(b|0)|0)|0;return d|0}a:do if(b&3){f=d&255;e=b;while(1){h=a[e>>0]|0;b=e+1|0;if(h<<24>>24==0?1:h<<24>>24==f<<24>>24){b=e;break}if(!(b&3))break a;else e=b}return b|0}while(0);g=_(g,16843009)|0;e=c[b>>2]|0;b:do if(!((e&-2139062144^-2139062144)&e+-16843009)){f=b;while(1){h=e^g;b=f+4|0;if((h&-2139062144^-2139062144)&h+-16843009){b=f;break b}e=c[b>>2]|0;if((e&-2139062144^-2139062144)&e+-16843009)break;else f=b}}while(0);e=d&255;while(1){h=a[b>>0]|0;if(h<<24>>24==0?1:h<<24>>24==e<<24>>24)break;else b=b+1|0}return b|0}
function xb(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;h=i;g=i=i+63&-64;i=i+640|0;e=0;do{j=e<<3;o=d[b+(j|7)>>0]|0;p=id(d[b+(j|6)>>0]|0|0,0,8)|0;f=C;n=id(d[b+(j|5)>>0]|0|0,0,16)|0;f=f|C;m=id(d[b+(j|4)>>0]|0|0,0,24)|0;f=f|C|(d[b+(j|3)>>0]|0);l=id(d[b+(j|2)>>0]|0|0,0,40)|0;f=f|C;k=id(d[b+(j|1)>>0]|0|0,0,48)|0;k=fd(p|o|n|m|l|0,f|0,k|0,C|0)|0;f=C;j=id(d[b+j>>0]|0|0,0,56)|0;j=fd(k|0,f|0,j|0,C|0)|0;f=g+(e<<3)|0;c[f>>2]=j;c[f+4>>2]=C;e=e+1|0}while((e|0)!=16);b=g;e=c[b>>2]|0;b=c[b+4>>2]|0;f=16;do{s=g+(f+-2<<3)|0;w=c[s>>2]|0;s=c[s+4>>2]|0;r=hd(w|0,s|0,19)|0;j=C;q=id(w|0,s|0,45)|0;j=j|C;u=hd(w|0,s|0,61)|0;v=C;t=id(w|0,s|0,3)|0;v=v|C;s=hd(w|0,s|0,6)|0;j=v^C^j;v=g+(f+-7<<3)|0;w=c[v>>2]|0;v=c[v+4>>2]|0;n=g+(f+-15<<3)|0;y=e;e=c[n>>2]|0;x=b;b=c[n+4>>2]|0;n=hd(e|0,b|0,1)|0;o=C;p=id(e|0,b|0,63)|0;o=o|C;k=hd(e|0,b|0,8)|0;z=C;l=id(e|0,b|0,56)|0;z=z|C;m=hd(e|0,b|0,7)|0;o=z^C^o;v=fd(y|0,x|0,w|0,v|0)|0;j=fd(v|0,C|0,(u|t)^s^(r|q)|0,j|0)|0;o=fd(j|0,C|0,(k|l)^m^(n|p)|0,o|0)|0;p=g+(f<<3)|0;c[p>>2]=o;c[p+4>>2]=C;f=f+1|0}while((f|0)!=80);K=a;I=c[K>>2]|0;K=c[K+4>>2]|0;e=a+8|0;A=e;B=c[A>>2]|0;A=c[A+4>>2]|0;k=a+16|0;f=k;b=c[f>>2]|0;f=c[f+4>>2]|0;n=a+24|0;l=n;j=c[l>>2]|0;l=c[l+4>>2]|0;q=a+32|0;m=q;p=c[m>>2]|0;m=c[m+4>>2]|0;t=a+40|0;o=t;s=c[o>>2]|0;o=c[o+4>>2]|0;w=a+48|0;r=w;v=c[r>>2]|0;r=c[r+4>>2]|0;z=a+56|0;u=z;y=c[u>>2]|0;u=c[u+4>>2]|0;H=hd(p|0,m|0,14)|0;D=C;x=id(p|0,m|0,50)|0;D=D|C;M=hd(p|0,m|0,18)|0;E=C;L=id(p|0,m|0,46)|0;E=D^(E|C);D=hd(p|0,m|0,41)|0;G=C;J=id(p|0,m|0,23)|0;G=E^(G|C);E=g;F=c[E>>2]|0;E=c[E+4>>2]|0;u=fd(y|0,u|0,-685199838,1116352408)|0;E=fd(u|0,C|0,F|0,E|0)|0;G=fd(E|0,C|0,(H|x)^(M|L)^(D|J)|0,G|0)|0;G=fd(G|0,C|0,(v^s)&p^v|0,(r^o)&m^r|0)|0;J=C;D=hd(I|0,K|0,28)|0;L=C;M=id(I|0,K|0,36)|0;L=L|C;x=hd(I|0,K|0,34)|0;H=C;E=id(I|0,K|0,30)|0;H=L^(H|C);L=hd(I|0,K|0,39)|0;F=C;u=id(I|0,K|0,25)|0;F=fd((b|B)&I|b&B|0,(f|A)&K|f&A|0,(D|M)^(x|E)^(L|u)|0,H^(F|C)|0)|0;H=C;l=fd(j|0,l|0,G|0,J|0)|0;j=C;J=fd(F|0,H|0,G|0,J|0)|0;G=C;H=hd(l|0,j|0,14)|0;F=C;u=id(l|0,j|0,50)|0;F=F|C;L=hd(l|0,j|0,18)|0;E=C;x=id(l|0,j|0,46)|0;E=F^(E|C);F=hd(l|0,j|0,41)|0;M=C;D=id(l|0,j|0,23)|0;M=E^(M|C);E=g+8|0;y=c[E>>2]|0;E=c[E+4>>2]|0;r=fd(v|0,r|0,602891725,1899447441)|0;E=fd(r|0,C|0,y|0,E|0)|0;M=fd(E|0,C|0,(H|u)^(L|x)^(F|D)|0,M|0)|0;M=fd(M|0,C|0,(s^p)&l^s|0,(o^m)&j^o|0)|0;D=C;F=hd(J|0,G|0,28)|0;x=C;L=id(J|0,G|0,36)|0;x=x|C;u=hd(J|0,G|0,34)|0;H=C;E=id(J|0,G|0,30)|0;H=x^(H|C);x=hd(J|0,G|0,39)|0;y=C;r=id(J|0,G|0,25)|0;y=fd((B|I)&J|B&I|0,(A|K)&G|A&K|0,(F|L)^(u|E)^(x|r)|0,H^(y|C)|0)|0;H=C;f=fd(b|0,f|0,M|0,D|0)|0;b=C;D=fd(y|0,H|0,M|0,D|0)|0;M=C;H=hd(f|0,b|0,14)|0;y=C;r=id(f|0,b|0,50)|0;y=y|C;x=hd(f|0,b|0,18)|0;E=C;u=id(f|0,b|0,46)|0;E=y^(E|C);y=hd(f|0,b|0,41)|0;L=C;F=id(f|0,b|0,23)|0;L=E^(L|C);E=g+16|0;v=c[E>>2]|0;E=c[E+4>>2]|0;o=fd(s|0,o|0,-330482897,-1245643825)|0;E=fd(o|0,C|0,v|0,E|0)|0;L=fd(E|0,C|0,(H|r)^(x|u)^(y|F)|0,L|0)|0;L=fd(L|0,C|0,(p^l)&f^p|0,(m^j)&b^m|0)|0;F=C;y=hd(D|0,M|0,28)|0;u=C;x=id(D|0,M|0,36)|0;u=u|C;r=hd(D|0,M|0,34)|0;H=C;E=id(D|0,M|0,30)|0;H=u^(H|C);u=hd(D|0,M|0,39)|0;v=C;o=id(D|0,M|0,25)|0;v=fd((I|J)&D|I&J|0,(K|G)&M|K&G|0,(y|x)^(r|E)^(u|o)|0,H^(v|C)|0)|0;H=C;A=fd(B|0,A|0,L|0,F|0)|0;B=C;F=fd(v|0,H|0,L|0,F|0)|0;L=C;H=hd(A|0,B|0,14)|0;v=C;o=id(A|0,B|0,50)|0;v=v|C;u=hd(A|0,B|0,18)|0;E=C;r=id(A|0,B|0,46)|0;E=v^(E|C);v=hd(A|0,B|0,41)|0;x=C;y=id(A|0,B|0,23)|0;x=E^(x|C);E=g+24|0;s=c[E>>2]|0;E=c[E+4>>2]|0;m=fd(p|0,m|0,-2121671748,-373957723)|0;E=fd(m|0,C|0,s|0,E|0)|0;x=fd(E|0,C|0,(H|o)^(u|r)^(v|y)|0,x|0)|0;x=fd(x|0,C|0,(l^f)&A^l|0,(j^b)&B^j|0)|0;y=C;v=hd(F|0,L|0,28)|0;r=C;u=id(F|0,L|0,36)|0;r=r|C;o=hd(F|0,L|0,34)|0;H=C;E=id(F|0,L|0,30)|0;H=r^(H|C);r=hd(F|0,L|0,39)|0;s=C;m=id(F|0,L|0,25)|0;s=fd((J|D)&F|J&D|0,(G|M)&L|G&M|0,(v|u)^(o|E)^(r|m)|0,H^(s|C)|0)|0;H=C;K=fd(I|0,K|0,x|0,y|0)|0;I=C;y=fd(s|0,H|0,x|0,y|0)|0;x=C;H=hd(K|0,I|0,14)|0;s=C;m=id(K|0,I|0,50)|0;s=s|C;r=hd(K|0,I|0,18)|0;E=C;o=id(K|0,I|0,46)|0;E=s^(E|C);s=hd(K|0,I|0,41)|0;u=C;v=id(K|0,I|0,23)|0;u=E^(u|C);E=g+32|0;p=c[E>>2]|0;E=c[E+4>>2]|0;j=fd(l|0,j|0,-213338824,961987163)|0;E=fd(j|0,C|0,p|0,E|0)|0;u=fd(E|0,C|0,(H|m)^(r|o)^(s|v)|0,u|0)|0;u=fd(u|0,C|0,(f^A)&K^f|0,(b^B)&I^b|0)|0;v=C;s=hd(y|0,x|0,28)|0;o=C;r=id(y|0,x|0,36)|0;o=o|C;m=hd(y|0,x|0,34)|0;H=C;E=id(y|0,x|0,30)|0;H=o^(H|C);o=hd(y|0,x|0,39)|0;p=C;j=id(y|0,x|0,25)|0;p=fd((D|F)&y|D&F|0,(M|L)&x|M&L|0,(s|r)^(m|E)^(o|j)|0,H^(p|C)|0)|0;H=C;G=fd(J|0,G|0,u|0,v|0)|0;J=C;v=fd(p|0,H|0,u|0,v|0)|0;u=C;H=hd(G|0,J|0,14)|0;p=C;j=id(G|0,J|0,50)|0;p=p|C;o=hd(G|0,J|0,18)|0;E=C;m=id(G|0,J|0,46)|0;E=p^(E|C);p=hd(G|0,J|0,41)|0;r=C;s=id(G|0,J|0,23)|0;r=E^(r|C);E=g+40|0;l=c[E>>2]|0;E=c[E+4>>2]|0;b=fd(f|0,b|0,-1241133031,1508970993)|0;E=fd(b|0,C|0,l|0,E|0)|0;r=fd(E|0,C|0,(H|j)^(o|m)^(p|s)|0,r|0)|0;r=fd(r|0,C|0,(A^K)&G^A|0,(B^I)&J^B|0)|0;s=C;p=hd(v|0,u|0,28)|0;m=C;o=id(v|0,u|0,36)|0;m=m|C;j=hd(v|0,u|0,34)|0;H=C;E=id(v|0,u|0,30)|0;H=m^(H|C);m=hd(v|0,u|0,39)|0;l=C;b=id(v|0,u|0,25)|0;l=fd((F|y)&v|F&y|0,(L|x)&u|L&x|0,(p|o)^(j|E)^(m|b)|0,H^(l|C)|0)|0;H=C;M=fd(D|0,M|0,r|0,s|0)|0;D=C;s=fd(l|0,H|0,r|0,s|0)|0;r=C;H=hd(M|0,D|0,14)|0;l=C;b=id(M|0,D|0,50)|0;l=l|C;m=hd(M|0,D|0,18)|0;E=C;j=id(M|0,D|0,46)|0;E=l^(E|C);l=hd(M|0,D|0,41)|0;o=C;p=id(M|0,D|0,23)|0;o=E^(o|C);E=g+48|0;f=c[E>>2]|0;E=c[E+4>>2]|0;B=fd(A|0,B|0,-1357295717,-1841331548)|0;E=fd(B|0,C|0,f|0,E|0)|0;o=fd(E|0,C|0,(H|b)^(m|j)^(l|p)|0,o|0)|0;o=fd(o|0,C|0,(K^G)&M^K|0,(I^J)&D^I|0)|0;p=C;l=hd(s|0,r|0,28)|0;j=C;m=id(s|0,r|0,36)|0;j=j|C;b=hd(s|0,r|0,34)|0;H=C;E=id(s|0,r|0,30)|0;H=j^(H|C);j=hd(s|0,r|0,39)|0;f=C;B=id(s|0,r|0,25)|0;f=fd((y|v)&s|y&v|0,(x|u)&r|x&u|0,(l|m)^(b|E)^(j|B)|0,H^(f|C)|0)|0;H=C;L=fd(F|0,L|0,o|0,p|0)|0;F=C;p=fd(f|0,H|0,o|0,p|0)|0;o=C;H=hd(L|0,F|0,14)|0;f=C;B=id(L|0,F|0,50)|0;f=f|C;j=hd(L|0,F|0,18)|0;E=C;b=id(L|0,F|0,46)|0;E=f^(E|C);f=hd(L|0,F|0,41)|0;m=C;l=id(L|0,F|0,23)|0;m=E^(m|C);E=g+56|0;A=c[E>>2]|0;E=c[E+4>>2]|0;I=fd(K|0,I|0,-630357736,-1424204075)|0;E=fd(I|0,C|0,A|0,E|0)|0;m=fd(E|0,C|0,(H|B)^(j|b)^(f|l)|0,m|0)|0;m=fd(m|0,C|0,(G^M)&L^G|0,(J^D)&F^J|0)|0;l=C;f=hd(p|0,o|0,28)|0;b=C;j=id(p|0,o|0,36)|0;b=b|C;B=hd(p|0,o|0,34)|0;H=C;E=id(p|0,o|0,30)|0;H=b^(H|C);b=hd(p|0,o|0,39)|0;A=C;I=id(p|0,o|0,25)|0;A=fd((v|s)&p|v&s|0,(u|r)&o|u&r|0,(f|j)^(B|E)^(b|I)|0,H^(A|C)|0)|0;H=C;x=fd(y|0,x|0,m|0,l|0)|0;y=C;l=fd(A|0,H|0,m|0,l|0)|0;m=C;H=hd(x|0,y|0,14)|0;A=C;I=id(x|0,y|0,50)|0;A=A|C;b=hd(x|0,y|0,18)|0;E=C;B=id(x|0,y|0,46)|0;E=A^(E|C);A=hd(x|0,y|0,41)|0;j=C;f=id(x|0,y|0,23)|0;j=E^(j|C);E=g+64|0;K=c[E>>2]|0;E=c[E+4>>2]|0;J=fd(G|0,J|0,-1560083902,-670586216)|0;E=fd(J|0,C|0,K|0,E|0)|0;j=fd(E|0,C|0,(H|I)^(b|B)^(A|f)|0,j|0)|0;j=fd(j|0,C|0,(M^L)&x^M|0,(D^F)&y^D|0)|0;f=C;A=hd(l|0,m|0,28)|0;B=C;b=id(l|0,m|0,36)|0;B=B|C;I=hd(l|0,m|0,34)|0;H=C;E=id(l|0,m|0,30)|0;H=B^(H|C);B=hd(l|0,m|0,39)|0;K=C;J=id(l|0,m|0,25)|0;K=fd((s|p)&l|s&p|0,(r|o)&m|r&o|0,(A|b)^(I|E)^(B|J)|0,H^(K|C)|0)|0;H=C;u=fd(v|0,u|0,j|0,f|0)|0;v=C;f=fd(K|0,H|0,j|0,f|0)|0;j=C;H=hd(u|0,v|0,14)|0;K=C;J=id(u|0,v|0,50)|0;K=K|C;B=hd(u|0,v|0,18)|0;E=C;I=id(u|0,v|0,46)|0;E=K^(E|C);K=hd(u|0,v|0,41)|0;b=C;A=id(u|0,v|0,23)|0;b=E^(b|C);E=g+72|0;G=c[E>>2]|0;E=c[E+4>>2]|0;D=fd(M|0,D|0,1164996542,310598401)|0;E=fd(D|0,C|0,G|0,E|0)|0;b=fd(E|0,C|0,(H|J)^(B|I)^(K|A)|0,b|0)|0;b=fd(b|0,C|0,(L^x)&u^L|0,(F^y)&v^F|0)|0;A=C;K=hd(f|0,j|0,28)|0;I=C;B=id(f|0,j|0,36)|0;I=I|C;J=hd(f|0,j|0,34)|0;H=C;E=id(f|0,j|0,30)|0;H=I^(H|C);I=hd(f|0,j|0,39)|0;G=C;D=id(f|0,j|0,25)|0;G=fd((p|l)&f|p&l|0,(o|m)&j|o&m|0,(K|B)^(J|E)^(I|D)|0,H^(G|C)|0)|0;H=C;r=fd(s|0,r|0,b|0,A|0)|0;s=C;A=fd(G|0,H|0,b|0,A|0)|0;b=C;H=hd(r|0,s|0,14)|0;G=C;D=id(r|0,s|0,50)|0;G=G|C;I=hd(r|0,s|0,18)|0;E=C;J=id(r|0,s|0,46)|0;E=G^(E|C);G=hd(r|0,s|0,41)|0;B=C;K=id(r|0,s|0,23)|0;B=E^(B|C);E=g+80|0;M=c[E>>2]|0;E=c[E+4>>2]|0;F=fd(L|0,F|0,1323610764,607225278)|0;E=fd(F|0,C|0,M|0,E|0)|0;B=fd(E|0,C|0,(H|D)^(I|J)^(G|K)|0,B|0)|0;B=fd(B|0,C|0,(x^u)&r^x|0,(y^v)&s^y|0)|0;K=C;G=hd(A|0,b|0,28)|0;J=C;I=id(A|0,b|0,36)|0;J=J|C;D=hd(A|0,b|0,34)|0;H=C;E=id(A|0,b|0,30)|0;H=J^(H|C);J=hd(A|0,b|0,39)|0;M=C;F=id(A|0,b|0,25)|0;M=fd((l|f)&A|l&f|0,(m|j)&b|m&j|0,(G|I)^(D|E)^(J|F)|0,H^(M|C)|0)|0;H=C;o=fd(p|0,o|0,B|0,K|0)|0;p=C;K=fd(M|0,H|0,B|0,K|0)|0;B=C;H=hd(o|0,p|0,14)|0;M=C;F=id(o|0,p|0,50)|0;M=M|C;J=hd(o|0,p|0,18)|0;E=C;D=id(o|0,p|0,46)|0;E=M^(E|C);M=hd(o|0,p|0,41)|0;I=C;G=id(o|0,p|0,23)|0;I=E^(I|C);E=g+88|0;L=c[E>>2]|0;E=c[E+4>>2]|0;y=fd(x|0,y|0,-704662302,1426881987)|0;E=fd(y|0,C|0,L|0,E|0)|0;I=fd(E|0,C|0,(H|F)^(J|D)^(M|G)|0,I|0)|0;I=fd(I|0,C|0,(u^r)&o^u|0,(v^s)&p^v|0)|0;G=C;M=hd(K|0,B|0,28)|0;D=C;J=id(K|0,B|0,36)|0;D=D|C;F=hd(K|0,B|0,34)|0;H=C;E=id(K|0,B|0,30)|0;H=D^(H|C);D=hd(K|0,B|0,39)|0;L=C;y=id(K|0,B|0,25)|0;L=fd((f|A)&K|f&A|0,(j|b)&B|j&b|0,(M|J)^(F|E)^(D|y)|0,H^(L|C)|0)|0;H=C;m=fd(l|0,m|0,I|0,G|0)|0;l=C;G=fd(L|0,H|0,I|0,G|0)|0;I=C;H=hd(m|0,l|0,14)|0;L=C;y=id(m|0,l|0,50)|0;L=L|C;D=hd(m|0,l|0,18)|0;E=C;F=id(m|0,l|0,46)|0;E=L^(E|C);L=hd(m|0,l|0,41)|0;J=C;M=id(m|0,l|0,23)|0;J=E^(J|C);E=g+96|0;x=c[E>>2]|0;E=c[E+4>>2]|0;v=fd(u|0,v|0,-226784913,1925078388)|0;E=fd(v|0,C|0,x|0,E|0)|0;J=fd(E|0,C|0,(H|y)^(D|F)^(L|M)|0,J|0)|0;J=fd(J|0,C|0,(r^o)&m^r|0,(s^p)&l^s|0)|0;M=C;L=hd(G|0,I|0,28)|0;F=C;D=id(G|0,I|0,36)|0;F=F|C;y=hd(G|0,I|0,34)|0;H=C;E=id(G|0,I|0,30)|0;H=F^(H|C);F=hd(G|0,I|0,39)|0;x=C;v=id(G|0,I|0,25)|0;x=fd((A|K)&G|A&K|0,(b|B)&I|b&B|0,(L|D)^(y|E)^(F|v)|0,H^(x|C)|0)|0;H=C;j=fd(f|0,j|0,J|0,M|0)|0;f=C;M=fd(x|0,H|0,J|0,M|0)|0;J=C;H=hd(j|0,f|0,14)|0;x=C;v=id(j|0,f|0,50)|0;x=x|C;F=hd(j|0,f|0,18)|0;E=C;y=id(j|0,f|0,46)|0;E=x^(E|C);x=hd(j|0,f|0,41)|0;D=C;L=id(j|0,f|0,23)|0;D=E^(D|C);E=g+104|0;u=c[E>>2]|0;E=c[E+4>>2]|0;s=fd(r|0,s|0,991336113,-2132889090)|0;E=fd(s|0,C|0,u|0,E|0)|0;D=fd(E|0,C|0,(H|v)^(F|y)^(x|L)|0,D|0)|0;D=fd(D|0,C|0,(o^m)&j^o|0,(p^l)&f^p|0)|0;L=C;x=hd(M|0,J|0,28)|0;y=C;F=id(M|0,J|0,36)|0;y=y|C;v=hd(M|0,J|0,34)|0;H=C;E=id(M|0,J|0,30)|0;H=y^(H|C);y=hd(M|0,J|0,39)|0;u=C;s=id(M|0,J|0,25)|0;u=fd((K|G)&M|K&G|0,(B|I)&J|B&I|0,(x|F)^(v|E)^(y|s)|0,H^(u|C)|0)|0;H=C;b=fd(A|0,b|0,D|0,L|0)|0;A=C;L=fd(u|0,H|0,D|0,L|0)|0;D=C;H=hd(b|0,A|0,14)|0;u=C;s=id(b|0,A|0,50)|0;u=u|C;y=hd(b|0,A|0,18)|0;E=C;v=id(b|0,A|0,46)|0;E=u^(E|C);u=hd(b|0,A|0,41)|0;F=C;x=id(b|0,A|0,23)|0;F=E^(F|C);E=g+112|0;r=c[E>>2]|0;E=c[E+4>>2]|0;p=fd(o|0,p|0,633803317,-1680079193)|0;E=fd(p|0,C|0,r|0,E|0)|0;F=fd(E|0,C|0,(H|s)^(y|v)^(u|x)|0,F|0)|0;F=fd(F|0,C|0,(m^j)&b^m|0,(l^f)&A^l|0)|0;x=C;u=hd(L|0,D|0,28)|0;v=C;y=id(L|0,D|0,36)|0;v=v|C;s=hd(L|0,D|0,34)|0;H=C;E=id(L|0,D|0,30)|0;H=v^(H|C);v=hd(L|0,D|0,39)|0;r=C;p=id(L|0,D|0,25)|0;r=fd((G|M)&L|G&M|0,(I|J)&D|I&J|0,(u|y)^(s|E)^(v|p)|0,H^(r|C)|0)|0;H=C;B=fd(K|0,B|0,F|0,x|0)|0;K=C;x=fd(r|0,H|0,F|0,x|0)|0;F=C;H=hd(B|0,K|0,14)|0;r=C;p=id(B|0,K|0,50)|0;r=r|C;v=hd(B|0,K|0,18)|0;E=C;s=id(B|0,K|0,46)|0;E=r^(E|C);r=hd(B|0,K|0,41)|0;y=C;u=id(B|0,K|0,23)|0;y=E^(y|C);E=g+120|0;o=c[E>>2]|0;E=c[E+4>>2]|0;l=fd(m|0,l|0,-815192428,-1046744716)|0;E=fd(l|0,C|0,o|0,E|0)|0;y=fd(E|0,C|0,(H|p)^(v|s)^(r|u)|0,y|0)|0;y=fd(y|0,C|0,(j^b)&B^j|0,(f^A)&K^f|0)|0;u=C;r=hd(x|0,F|0,28)|0;s=C;v=id(x|0,F|0,36)|0;s=s|C;p=hd(x|0,F|0,34)|0;H=C;E=id(x|0,F|0,30)|0;H=s^(H|C);s=hd(x|0,F|0,39)|0;o=C;l=id(x|0,F|0,25)|0;o=fd((M|L)&x|M&L|0,(J|D)&F|J&D|0,(r|v)^(p|E)^(s|l)|0,H^(o|C)|0)|0;H=C;I=fd(G|0,I|0,y|0,u|0)|0;G=C;u=fd(o|0,H|0,y|0,u|0)|0;y=C;H=hd(I|0,G|0,14)|0;o=C;l=id(I|0,G|0,50)|0;o=o|C;s=hd(I|0,G|0,18)|0;E=C;p=id(I|0,G|0,46)|0;E=o^(E|C);o=hd(I|0,G|0,41)|0;v=C;r=id(I|0,G|0,23)|0;v=E^(v|C);E=g+128|0;m=c[E>>2]|0;E=c[E+4>>2]|0;f=fd(j|0,f|0,-1628353838,-459576895)|0;E=fd(f|0,C|0,m|0,E|0)|0;v=fd(E|0,C|0,(H|l)^(s|p)^(o|r)|0,v|0)|0;v=fd(v|0,C|0,(b^B)&I^b|0,(A^K)&G^A|0)|0;r=C;o=hd(u|0,y|0,28)|0;p=C;s=id(u|0,y|0,36)|0;p=p|C;l=hd(u|0,y|0,34)|0;H=C;E=id(u|0,y|0,30)|0;H=p^(H|C);p=hd(u|0,y|0,39)|0;m=C;f=id(u|0,y|0,25)|0;m=fd((L|x)&u|L&x|0,(D|F)&y|D&F|0,(o|s)^(l|E)^(p|f)|0,H^(m|C)|0)|0;H=C;J=fd(M|0,J|0,v|0,r|0)|0;M=C;r=fd(m|0,H|0,v|0,r|0)|0;v=C;H=hd(J|0,M|0,14)|0;m=C;f=id(J|0,M|0,50)|0;m=m|C;p=hd(J|0,M|0,18)|0;E=C;l=id(J|0,M|0,46)|0;E=m^(E|C);m=hd(J|0,M|0,41)|0;s=C;o=id(J|0,M|0,23)|0;s=E^(s|C);E=g+136|0;j=c[E>>2]|0;E=c[E+4>>2]|0;A=fd(b|0,A|0,944711139,-272742522)|0;E=fd(A|0,C|0,j|0,E|0)|0;s=fd(E|0,C|0,(H|f)^(p|l)^(m|o)|0,s|0)|0;s=fd(s|0,C|0,(B^I)&J^B|0,(K^G)&M^K|0)|0;o=C;m=hd(r|0,v|0,28)|0;l=C;p=id(r|0,v|0,36)|0;l=l|C;f=hd(r|0,v|0,34)|0;H=C;E=id(r|0,v|0,30)|0;H=l^(H|C);l=hd(r|0,v|0,39)|0;j=C;A=id(r|0,v|0,25)|0;j=fd((x|u)&r|x&u|0,(F|y)&v|F&y|0,(m|p)^(f|E)^(l|A)|0,H^(j|C)|0)|0;H=C;D=fd(L|0,D|0,s|0,o|0)|0;L=C;o=fd(j|0,H|0,s|0,o|0)|0;s=C;H=hd(D|0,L|0,14)|0;j=C;A=id(D|0,L|0,50)|0;j=j|C;l=hd(D|0,L|0,18)|0;E=C;f=id(D|0,L|0,46)|0;E=j^(E|C);j=hd(D|0,L|0,41)|0;p=C;m=id(D|0,L|0,23)|0;p=E^(p|C);E=g+144|0;b=c[E>>2]|0;E=c[E+4>>2]|0;K=fd(B|0,K|0,-1953704523,264347078)|0;E=fd(K|0,C|0,b|0,E|0)|0;p=fd(E|0,C|0,(H|A)^(l|f)^(j|m)|0,p|0)|0;p=fd(p|0,C|0,(I^J)&D^I|0,(G^M)&L^G|0)|0;m=C;j=hd(o|0,s|0,28)|0;f=C;l=id(o|0,s|0,36)|0;f=f|C;A=hd(o|0,s|0,34)|0;H=C;E=id(o|0,s|0,30)|0;H=f^(H|C);f=hd(o|0,s|0,39)|0;b=C;K=id(o|0,s|0,25)|0;b=fd((u|r)&o|u&r|0,(y|v)&s|y&v|0,(j|l)^(A|E)^(f|K)|0,H^(b|C)|0)|0;H=C;F=fd(x|0,F|0,p|0,m|0)|0;x=C;m=fd(b|0,H|0,p|0,m|0)|0;p=C;H=hd(F|0,x|0,14)|0;b=C;K=id(F|0,x|0,50)|0;b=b|C;f=hd(F|0,x|0,18)|0;E=C;A=id(F|0,x|0,46)|0;E=b^(E|C);b=hd(F|0,x|0,41)|0;l=C;j=id(F|0,x|0,23)|0;l=E^(l|C);E=g+152|0;B=c[E>>2]|0;E=c[E+4>>2]|0;G=fd(I|0,G|0,2007800933,604807628)|0;E=fd(G|0,C|0,B|0,E|0)|0;l=fd(E|0,C|0,(H|K)^(f|A)^(b|j)|0,l|0)|0;l=fd(l|0,C|0,(J^D)&F^J|0,(M^L)&x^M|0)|0;j=C;b=hd(m|0,p|0,28)|0;A=C;f=id(m|0,p|0,36)|0;A=A|C;K=hd(m|0,p|0,34)|0;H=C;E=id(m|0,p|0,30)|0;H=A^(H|C);A=hd(m|0,p|0,39)|0;B=C;G=id(m|0,p|0,25)|0;B=fd((r|o)&m|r&o|0,(v|s)&p|v&s|0,(b|f)^(K|E)^(A|G)|0,H^(B|C)|0)|0;H=C;y=fd(u|0,y|0,l|0,j|0)|0;u=C;j=fd(B|0,H|0,l|0,j|0)|0;l=C;H=hd(y|0,u|0,14)|0;B=C;G=id(y|0,u|0,50)|0;B=B|C;A=hd(y|0,u|0,18)|0;E=C;K=id(y|0,u|0,46)|0;E=B^(E|C);B=hd(y|0,u|0,41)|0;f=C;b=id(y|0,u|0,23)|0;f=E^(f|C);E=g+160|0;I=c[E>>2]|0;E=c[E+4>>2]|0;M=fd(J|0,M|0,1495990901,770255983)|0;E=fd(M|0,C|0,I|0,E|0)|0;f=fd(E|0,C|0,(H|G)^(A|K)^(B|b)|0,f|0)|0;f=fd(f|0,C|0,(D^F)&y^D|0,(L^x)&u^L|0)|0;b=C;B=hd(j|0,l|0,28)|0;K=C;A=id(j|0,l|0,36)|0;K=K|C;G=hd(j|0,l|0,34)|0;H=C;E=id(j|0,l|0,30)|0;H=K^(H|C);K=hd(j|0,l|0,39)|0;I=C;M=id(j|0,l|0,25)|0;I=fd((o|m)&j|o&m|0,(s|p)&l|s&p|0,(B|A)^(G|E)^(K|M)|0,H^(I|C)|0)|0;H=C;v=fd(r|0,v|0,f|0,b|0)|0;r=C;b=fd(I|0,H|0,f|0,b|0)|0;f=C;H=hd(v|0,r|0,14)|0;I=C;M=id(v|0,r|0,50)|0;I=I|C;K=hd(v|0,r|0,18)|0;E=C;G=id(v|0,r|0,46)|0;E=I^(E|C);I=hd(v|0,r|0,41)|0;A=C;B=id(v|0,r|0,23)|0;A=E^(A|C);E=g+168|0;J=c[E>>2]|0;E=c[E+4>>2]|0;L=fd(D|0,L|0,1856431235,1249150122)|0;E=fd(L|0,C|0,J|0,E|0)|0;A=fd(E|0,C|0,(H|M)^(K|G)^(I|B)|0,A|0)|0;A=fd(A|0,C|0,(F^y)&v^F|0,(x^u)&r^x|0)|0;B=C;I=hd(b|0,f|0,28)|0;G=C;K=id(b|0,f|0,36)|0;G=G|C;M=hd(b|0,f|0,34)|0;H=C;E=id(b|0,f|0,30)|0;H=G^(H|C);G=hd(b|0,f|0,39)|0;J=C;L=id(b|0,f|0,25)|0;J=fd((m|j)&b|m&j|0,(p|l)&f|p&l|0,(I|K)^(M|E)^(G|L)|0,H^(J|C)|0)|0;H=C;s=fd(o|0,s|0,A|0,B|0)|0;o=C;B=fd(J|0,H|0,A|0,B|0)|0;A=C;H=hd(s|0,o|0,14)|0;J=C;L=id(s|0,o|0,50)|0;J=J|C;G=hd(s|0,o|0,18)|0;E=C;M=id(s|0,o|0,46)|0;E=J^(E|C);J=hd(s|0,o|0,41)|0;K=C;I=id(s|0,o|0,23)|0;K=E^(K|C);E=g+176|0;D=c[E>>2]|0;E=c[E+4>>2]|0;x=fd(F|0,x|0,-1119749164,1555081692)|0;E=fd(x|0,C|0,D|0,E|0)|0;K=fd(E|0,C|0,(H|L)^(G|M)^(J|I)|0,K|0)|0;K=fd(K|0,C|0,(y^v)&s^y|0,(u^r)&o^u|0)|0;I=C;J=hd(B|0,A|0,28)|0;M=C;G=id(B|0,A|0,36)|0;M=M|C;L=hd(B|0,A|0,34)|0;H=C;E=id(B|0,A|0,30)|0;H=M^(H|C);M=hd(B|0,A|0,39)|0;D=C;x=id(B|0,A|0,25)|0;D=fd((j|b)&B|j&b|0,(l|f)&A|l&f|0,(J|G)^(L|E)^(M|x)|0,H^(D|C)|0)|0;H=C;p=fd(m|0,p|0,K|0,I|0)|0;m=C;I=fd(D|0,H|0,K|0,I|0)|0;K=C;H=hd(p|0,m|0,14)|0;D=C;x=id(p|0,m|0,50)|0;D=D|C;M=hd(p|0,m|0,18)|0;E=C;L=id(p|0,m|0,46)|0;E=D^(E|C);D=hd(p|0,m|0,41)|0;G=C;J=id(p|0,m|0,23)|0;G=E^(G|C);E=g+184|0;F=c[E>>2]|0;E=c[E+4>>2]|0;u=fd(y|0,u|0,-2096016459,1996064986)|0;E=fd(u|0,C|0,F|0,E|0)|0;G=fd(E|0,C|0,(H|x)^(M|L)^(D|J)|0,G|0)|0;G=fd(G|0,C|0,(v^s)&p^v|0,(r^o)&m^r|0)|0;J=C;D=hd(I|0,K|0,28)|0;L=C;M=id(I|0,K|0,36)|0;L=L|C;x=hd(I|0,K|0,34)|0;H=C;E=id(I|0,K|0,30)|0;H=L^(H|C);L=hd(I|0,K|0,39)|0;F=C;u=id(I|0,K|0,25)|0;F=fd((b|B)&I|b&B|0,(f|A)&K|f&A|0,(D|M)^(x|E)^(L|u)|0,H^(F|C)|0)|0;H=C;l=fd(j|0,l|0,G|0,J|0)|0;j=C;J=fd(F|0,H|0,G|0,J|0)|0;G=C;H=hd(l|0,j|0,14)|0;F=C;u=id(l|0,j|0,50)|0;F=F|C;L=hd(l|0,j|0,18)|0;E=C;x=id(l|0,j|0,46)|0;E=F^(E|C);F=hd(l|0,j|0,41)|0;M=C;D=id(l|0,j|0,23)|0;M=E^(M|C);E=g+192|0;y=c[E>>2]|0;E=c[E+4>>2]|0;r=fd(v|0,r|0,-295247957,-1740746414)|0;E=fd(r|0,C|0,y|0,E|0)|0;M=fd(E|0,C|0,(H|u)^(L|x)^(F|D)|0,M|0)|0;M=fd(M|0,C|0,(s^p)&l^s|0,(o^m)&j^o|0)|0;D=C;F=hd(J|0,G|0,28)|0;x=C;L=id(J|0,G|0,36)|0;x=x|C;u=hd(J|0,G|0,34)|0;H=C;E=id(J|0,G|0,30)|0;H=x^(H|C);x=hd(J|0,G|0,39)|0;y=C;r=id(J|0,G|0,25)|0;y=fd((B|I)&J|B&I|0,(A|K)&G|A&K|0,(F|L)^(u|E)^(x|r)|0,H^(y|C)|0)|0;H=C;f=fd(b|0,f|0,M|0,D|0)|0;b=C;D=fd(y|0,H|0,M|0,D|0)|0;M=C;H=hd(f|0,b|0,14)|0;y=C;r=id(f|0,b|0,50)|0;y=y|C;x=hd(f|0,b|0,18)|0;E=C;u=id(f|0,b|0,46)|0;E=y^(E|C);y=hd(f|0,b|0,41)|0;L=C;F=id(f|0,b|0,23)|0;L=E^(L|C);E=g+200|0;v=c[E>>2]|0;E=c[E+4>>2]|0;o=fd(s|0,o|0,766784016,-1473132947)|0;E=fd(o|0,C|0,v|0,E|0)|0;L=fd(E|0,C|0,(H|r)^(x|u)^(y|F)|0,L|0)|0;L=fd(L|0,C|0,(p^l)&f^p|0,(m^j)&b^m|0)|0;F=C;y=hd(D|0,M|0,28)|0;u=C;x=id(D|0,M|0,36)|0;u=u|C;r=hd(D|0,M|0,34)|0;H=C;E=id(D|0,M|0,30)|0;H=u^(H|C);u=hd(D|0,M|0,39)|0;v=C;o=id(D|0,M|0,25)|0;v=fd((I|J)&D|I&J|0,(K|G)&M|K&G|0,(y|x)^(r|E)^(u|o)|0,H^(v|C)|0)|0;H=C;A=fd(B|0,A|0,L|0,F|0)|0;B=C;F=fd(v|0,H|0,L|0,F|0)|0;L=C;H=hd(A|0,B|0,14)|0;v=C;o=id(A|0,B|0,50)|0;v=v|C;u=hd(A|0,B|0,18)|0;E=C;r=id(A|0,B|0,46)|0;E=v^(E|C);v=hd(A|0,B|0,41)|0;x=C;y=id(A|0,B|0,23)|0;x=E^(x|C);E=g+208|0;s=c[E>>2]|0;E=c[E+4>>2]|0;m=fd(p|0,m|0,-1728372417,-1341970488)|0;E=fd(m|0,C|0,s|0,E|0)|0;x=fd(E|0,C|0,(H|o)^(u|r)^(v|y)|0,x|0)|0;x=fd(x|0,C|0,(l^f)&A^l|0,(j^b)&B^j|0)|0;y=C;v=hd(F|0,L|0,28)|0;r=C;u=id(F|0,L|0,36)|0;r=r|C;o=hd(F|0,L|0,34)|0;H=C;E=id(F|0,L|0,30)|0;H=r^(H|C);r=hd(F|0,L|0,39)|0;s=C;m=id(F|0,L|0,25)|0;s=fd((J|D)&F|J&D|0,(G|M)&L|G&M|0,(v|u)^(o|E)^(r|m)|0,H^(s|C)|0)|0;H=C;K=fd(I|0,K|0,x|0,y|0)|0;I=C;y=fd(s|0,H|0,x|0,y|0)|0;x=C;H=hd(K|0,I|0,14)|0;s=C;m=id(K|0,I|0,50)|0;s=s|C;r=hd(K|0,I|0,18)|0;E=C;o=id(K|0,I|0,46)|0;E=s^(E|C);s=hd(K|0,I|0,41)|0;u=C;v=id(K|0,I|0,23)|0;u=E^(u|C);E=g+216|0;p=c[E>>2]|0;E=c[E+4>>2]|0;j=fd(l|0,j|0,-1091629340,-1084653625)|0;E=fd(j|0,C|0,p|0,E|0)|0;u=fd(E|0,C|0,(H|m)^(r|o)^(s|v)|0,u|0)|0;u=fd(u|0,C|0,(f^A)&K^f|0,(b^B)&I^b|0)|0;v=C;s=hd(y|0,x|0,28)|0;o=C;r=id(y|0,x|0,36)|0;o=o|C;m=hd(y|0,x|0,34)|0;H=C;E=id(y|0,x|0,30)|0;H=o^(H|C);o=hd(y|0,x|0,39)|0;p=C;j=id(y|0,x|0,25)|0;p=fd((D|F)&y|D&F|0,(M|L)&x|M&L|0,(s|r)^(m|E)^(o|j)|0,H^(p|C)|0)|0;H=C;G=fd(J|0,G|0,u|0,v|0)|0;J=C;v=fd(p|0,H|0,u|0,v|0)|0;u=C;H=hd(G|0,J|0,14)|0;p=C;j=id(G|0,J|0,50)|0;p=p|C;o=hd(G|0,J|0,18)|0;E=C;m=id(G|0,J|0,46)|0;E=p^(E|C);p=hd(G|0,J|0,41)|0;r=C;s=id(G|0,J|0,23)|0;r=E^(r|C);E=g+224|0;l=c[E>>2]|0;E=c[E+4>>2]|0;b=fd(f|0,b|0,1034457026,-958395405)|0;E=fd(b|0,C|0,l|0,E|0)|0;r=fd(E|0,C|0,(H|j)^(o|m)^(p|s)|0,r|0)|0;r=fd(r|0,C|0,(A^K)&G^A|0,(B^I)&J^B|0)|0;s=C;p=hd(v|0,u|0,28)|0;m=C;o=id(v|0,u|0,36)|0;m=m|C;j=hd(v|0,u|0,34)|0;H=C;E=id(v|0,u|0,30)|0;H=m^(H|C);m=hd(v|0,u|0,39)|0;l=C;b=id(v|0,u|0,25)|0;l=fd((F|y)&v|F&y|0,(L|x)&u|L&x|0,(p|o)^(j|E)^(m|b)|0,H^(l|C)|0)|0;H=C;M=fd(D|0,M|0,r|0,s|0)|0;D=C;s=fd(l|0,H|0,r|0,s|0)|0;r=C;H=hd(M|0,D|0,14)|0;l=C;b=id(M|0,D|0,50)|0;l=l|C;m=hd(M|0,D|0,18)|0;E=C;j=id(M|0,D|0,46)|0;E=l^(E|C);l=hd(M|0,D|0,41)|0;o=C;p=id(M|0,D|0,23)|0;o=E^(o|C);E=g+232|0;f=c[E>>2]|0;E=c[E+4>>2]|0;B=fd(A|0,B|0,-1828018395,-710438585)|0;E=fd(B|0,C|0,f|0,E|0)|0;o=fd(E|0,C|0,(H|b)^(m|j)^(l|p)|0,o|0)|0;o=fd(o|0,C|0,(K^G)&M^K|0,(I^J)&D^I|0)|0;p=C;l=hd(s|0,r|0,28)|0;j=C;m=id(s|0,r|0,36)|0;j=j|C;b=hd(s|0,r|0,34)|0;H=C;E=id(s|0,r|0,30)|0;H=j^(H|C);j=hd(s|0,r|0,39)|0;f=C;B=id(s|0,r|0,25)|0;f=fd((y|v)&s|y&v|0,(x|u)&r|x&u|0,(l|m)^(b|E)^(j|B)|0,H^(f|C)|0)|0;H=C;L=fd(F|0,L|0,o|0,p|0)|0;F=C;p=fd(f|0,H|0,o|0,p|0)|0;o=C;H=hd(L|0,F|0,14)|0;f=C;B=id(L|0,F|0,50)|0;f=f|C;j=hd(L|0,F|0,18)|0;E=C;b=id(L|0,F|0,46)|0;E=f^(E|C);f=hd(L|0,F|0,41)|0;m=C;l=id(L|0,F|0,23)|0;m=E^(m|C);E=g+240|0;A=c[E>>2]|0;E=c[E+4>>2]|0;I=fd(K|0,I|0,-536640913,113926993)|0;E=fd(I|0,C|0,A|0,E|0)|0;m=fd(E|0,C|0,(H|B)^(j|b)^(f|l)|0,m|0)|0;m=fd(m|0,C|0,(G^M)&L^G|0,(J^D)&F^J|0)|0;l=C;f=hd(p|0,o|0,28)|0;b=C;j=id(p|0,o|0,36)|0;b=b|C;B=hd(p|0,o|0,34)|0;H=C;E=id(p|0,o|0,30)|0;H=b^(H|C);b=hd(p|0,o|0,39)|0;A=C;I=id(p|0,o|0,25)|0;A=fd((v|s)&p|v&s|0,(u|r)&o|u&r|0,(f|j)^(B|E)^(b|I)|0,H^(A|C)|0)|0;H=C;x=fd(y|0,x|0,m|0,l|0)|0;y=C;l=fd(A|0,H|0,m|0,l|0)|0;m=C;H=hd(x|0,y|0,14)|0;A=C;I=id(x|0,y|0,50)|0;A=A|C;b=hd(x|0,y|0,18)|0;E=C;B=id(x|0,y|0,46)|0;E=A^(E|C);A=hd(x|0,y|0,41)|0;j=C;f=id(x|0,y|0,23)|0;j=E^(j|C);E=g+248|0;K=c[E>>2]|0;E=c[E+4>>2]|0;J=fd(G|0,J|0,168717936,338241895)|0;E=fd(J|0,C|0,K|0,E|0)|0;j=fd(E|0,C|0,(H|I)^(b|B)^(A|f)|0,j|0)|0;j=fd(j|0,C|0,(M^L)&x^M|0,(D^F)&y^D|0)|0;f=C;A=hd(l|0,m|0,28)|0;B=C;b=id(l|0,m|0,36)|0;B=B|C;I=hd(l|0,m|0,34)|0;H=C;E=id(l|0,m|0,30)|0;H=B^(H|C);B=hd(l|0,m|0,39)|0;K=C;J=id(l|0,m|0,25)|0;K=fd((s|p)&l|s&p|0,(r|o)&m|r&o|0,(A|b)^(I|E)^(B|J)|0,H^(K|C)|0)|0;H=C;u=fd(v|0,u|0,j|0,f|0)|0;v=C;f=fd(K|0,H|0,j|0,f|0)|0;j=C;H=hd(u|0,v|0,14)|0;K=C;J=id(u|0,v|0,50)|0;K=K|C;B=hd(u|0,v|0,18)|0;E=C;I=id(u|0,v|0,46)|0;E=K^(E|C);K=hd(u|0,v|0,41)|0;b=C;A=id(u|0,v|0,23)|0;b=E^(b|C);E=g+256|0;G=c[E>>2]|0;E=c[E+4>>2]|0;D=fd(M|0,D|0,1188179964,666307205)|0;E=fd(D|0,C|0,G|0,E|0)|0;b=fd(E|0,C|0,(H|J)^(B|I)^(K|A)|0,b|0)|0;b=fd(b|0,C|0,(L^x)&u^L|0,(F^y)&v^F|0)|0;A=C;K=hd(f|0,j|0,28)|0;I=C;B=id(f|0,j|0,36)|0;I=I|C;J=hd(f|0,j|0,34)|0;H=C;E=id(f|0,j|0,30)|0;H=I^(H|C);I=hd(f|0,j|0,39)|0;G=C;D=id(f|0,j|0,25)|0;G=fd((p|l)&f|p&l|0,(o|m)&j|o&m|0,(K|B)^(J|E)^(I|D)|0,H^(G|C)|0)|0;H=C;r=fd(s|0,r|0,b|0,A|0)|0;s=C;A=fd(G|0,H|0,b|0,A|0)|0;b=C;H=hd(r|0,s|0,14)|0;G=C;D=id(r|0,s|0,50)|0;G=G|C;I=hd(r|0,s|0,18)|0;E=C;J=id(r|0,s|0,46)|0;E=G^(E|C);G=hd(r|0,s|0,41)|0;B=C;K=id(r|0,s|0,23)|0;B=E^(B|C);E=g+264|0;M=c[E>>2]|0;E=c[E+4>>2]|0;F=fd(L|0,F|0,1546045734,773529912)|0;E=fd(F|0,C|0,M|0,E|0)|0;B=fd(E|0,C|0,(H|D)^(I|J)^(G|K)|0,B|0)|0;B=fd(B|0,C|0,(x^u)&r^x|0,(y^v)&s^y|0)|0;K=C;G=hd(A|0,b|0,28)|0;J=C;I=id(A|0,b|0,36)|0;J=J|C;D=hd(A|0,b|0,34)|0;H=C;E=id(A|0,b|0,30)|0;H=J^(H|C);J=hd(A|0,b|0,39)|0;M=C;F=id(A|0,b|0,25)|0;M=fd((l|f)&A|l&f|0,(m|j)&b|m&j|0,(G|I)^(D|E)^(J|F)|0,H^(M|C)|0)|0;H=C;o=fd(p|0,o|0,B|0,K|0)|0;p=C;K=fd(M|0,H|0,B|0,K|0)|0;B=C;H=hd(o|0,p|0,14)|0;M=C;F=id(o|0,p|0,50)|0;M=M|C;J=hd(o|0,p|0,18)|0;E=C;D=id(o|0,p|0,46)|0;E=M^(E|C);M=hd(o|0,p|0,41)|0;I=C;G=id(o|0,p|0,23)|0;I=E^(I|C);E=g+272|0;L=c[E>>2]|0;E=c[E+4>>2]|0;y=fd(x|0,y|0,1522805485,1294757372)|0;E=fd(y|0,C|0,L|0,E|0)|0;I=fd(E|0,C|0,(H|F)^(J|D)^(M|G)|0,I|0)|0;I=fd(I|0,C|0,(u^r)&o^u|0,(v^s)&p^v|0)|0;G=C;M=hd(K|0,B|0,28)|0;D=C;J=id(K|0,B|0,36)|0;D=D|C;F=hd(K|0,B|0,34)|0;H=C;E=id(K|0,B|0,30)|0;H=D^(H|C);D=hd(K|0,B|0,39)|0;L=C;y=id(K|0,B|0,25)|0;L=fd((f|A)&K|f&A|0,(j|b)&B|j&b|0,(M|J)^(F|E)^(D|y)|0,H^(L|C)|0)|0;H=C;m=fd(l|0,m|0,I|0,G|0)|0;l=C;G=fd(L|0,H|0,I|0,G|0)|0;I=C;H=hd(m|0,l|0,14)|0;L=C;y=id(m|0,l|0,50)|0;L=L|C;D=hd(m|0,l|0,18)|0;E=C;F=id(m|0,l|0,46)|0;E=L^(E|C);L=hd(m|0,l|0,41)|0;J=C;M=id(m|0,l|0,23)|0;J=E^(J|C);E=g+280|0;x=c[E>>2]|0;E=c[E+4>>2]|0;v=fd(u|0,v|0,-1651133473,1396182291)|0;E=fd(v|0,C|0,x|0,E|0)|0;J=fd(E|0,C|0,(H|y)^(D|F)^(L|M)|0,J|0)|0;J=fd(J|0,C|0,(r^o)&m^r|0,(s^p)&l^s|0)|0;M=C;L=hd(G|0,I|0,28)|0;F=C;D=id(G|0,I|0,36)|0;F=F|C;y=hd(G|0,I|0,34)|0;H=C;E=id(G|0,I|0,30)|0;H=F^(H|C);F=hd(G|0,I|0,39)|0;x=C;v=id(G|0,I|0,25)|0;x=fd((A|K)&G|A&K|0,(b|B)&I|b&B|0,(L|D)^(y|E)^(F|v)|0,H^(x|C)|0)|0;H=C;j=fd(f|0,j|0,J|0,M|0)|0;f=C;M=fd(x|0,H|0,J|0,M|0)|0;J=C;H=hd(j|0,f|0,14)|0;x=C;v=id(j|0,f|0,50)|0;x=x|C;F=hd(j|0,f|0,18)|0;E=C;y=id(j|0,f|0,46)|0;E=x^(E|C);x=hd(j|0,f|0,41)|0;D=C;L=id(j|0,f|0,23)|0;D=E^(D|C);E=g+288|0;u=c[E>>2]|0;E=c[E+4>>2]|0;s=fd(r|0,s|0,-1951439906,1695183700)|0;E=fd(s|0,C|0,u|0,E|0)|0;D=fd(E|0,C|0,(H|v)^(F|y)^(x|L)|0,D|0)|0;D=fd(D|0,C|0,(o^m)&j^o|0,(p^l)&f^p|0)|0;L=C;x=hd(M|0,J|0,28)|0;y=C;F=id(M|0,J|0,36)|0;y=y|C;v=hd(M|0,J|0,34)|0;H=C;E=id(M|0,J|0,30)|0;H=y^(H|C);y=hd(M|0,J|0,39)|0;u=C;s=id(M|0,J|0,25)|0;u=fd((K|G)&M|K&G|0,(B|I)&J|B&I|0,(x|F)^(v|E)^(y|s)|0,H^(u|C)|0)|0;H=C;b=fd(A|0,b|0,D|0,L|0)|0;A=C;L=fd(u|0,H|0,D|0,L|0)|0;D=C;H=hd(b|0,A|0,14)|0;u=C;s=id(b|0,A|0,50)|0;u=u|C;y=hd(b|0,A|0,18)|0;E=C;v=id(b|0,A|0,46)|0;E=u^(E|C);u=hd(b|0,A|0,41)|0;F=C;x=id(b|0,A|0,23)|0;F=E^(F|C);E=g+296|0;r=c[E>>2]|0;E=c[E+4>>2]|0;p=fd(o|0,p|0,1014477480,1986661051)|0;E=fd(p|0,C|0,r|0,E|0)|0;F=fd(E|0,C|0,(H|s)^(y|v)^(u|x)|0,F|0)|0;F=fd(F|0,C|0,(m^j)&b^m|0,(l^f)&A^l|0)|0;x=C;u=hd(L|0,D|0,28)|0;v=C;y=id(L|0,D|0,36)|0;v=v|C;s=hd(L|0,D|0,34)|0;H=C;E=id(L|0,D|0,30)|0;H=v^(H|C);v=hd(L|0,D|0,39)|0;r=C;p=id(L|0,D|0,25)|0;r=fd((G|M)&L|G&M|0,(I|J)&D|I&J|0,(u|y)^(s|E)^(v|p)|0,H^(r|C)|0)|0;H=C;B=fd(K|0,B|0,F|0,x|0)|0;K=C;x=fd(r|0,H|0,F|0,x|0)|0;F=C;H=hd(B|0,K|0,14)|0;r=C;p=id(B|0,K|0,50)|0;r=r|C;v=hd(B|0,K|0,18)|0;E=C;s=id(B|0,K|0,46)|0;E=r^(E|C);r=hd(B|0,K|0,41)|0;y=C;u=id(B|0,K|0,23)|0;y=E^(y|C);E=g+304|0;o=c[E>>2]|0;E=c[E+4>>2]|0;l=fd(m|0,l|0,1206759142,-2117940946)|0;E=fd(l|0,C|0,o|0,E|0)|0;y=fd(E|0,C|0,(H|p)^(v|s)^(r|u)|0,y|0)|0;y=fd(y|0,C|0,(j^b)&B^j|0,(f^A)&K^f|0)|0;u=C;r=hd(x|0,F|0,28)|0;s=C;v=id(x|0,F|0,36)|0;s=s|C;p=hd(x|0,F|0,34)|0;H=C;E=id(x|0,F|0,30)|0;H=s^(H|C);s=hd(x|0,F|0,39)|0;o=C;l=id(x|0,F|0,25)|0;o=fd((M|L)&x|M&L|0,(J|D)&F|J&D|0,(r|v)^(p|E)^(s|l)|0,H^(o|C)|0)|0;H=C;I=fd(G|0,I|0,y|0,u|0)|0;G=C;u=fd(o|0,H|0,y|0,u|0)|0;y=C;H=hd(I|0,G|0,14)|0;o=C;l=id(I|0,G|0,50)|0;o=o|C;s=hd(I|0,G|0,18)|0;E=C;p=id(I|0,G|0,46)|0;E=o^(E|C);o=hd(I|0,G|0,41)|0;v=C;r=id(I|0,G|0,23)|0;v=E^(v|C);E=g+312|0;m=c[E>>2]|0;E=c[E+4>>2]|0;f=fd(j|0,f|0,344077627,-1838011259)|0;E=fd(f|0,C|0,m|0,E|0)|0;v=fd(E|0,C|0,(H|l)^(s|p)^(o|r)|0,v|0)|0;v=fd(v|0,C|0,(b^B)&I^b|0,(A^K)&G^A|0)|0;r=C;o=hd(u|0,y|0,28)|0;p=C;s=id(u|0,y|0,36)|0;p=p|C;l=hd(u|0,y|0,34)|0;H=C;E=id(u|0,y|0,30)|0;H=p^(H|C);p=hd(u|0,y|0,39)|0;m=C;f=id(u|0,y|0,25)|0;m=fd((L|x)&u|L&x|0,(D|F)&y|D&F|0,(o|s)^(l|E)^(p|f)|0,H^(m|C)|0)|0;H=C;J=fd(M|0,J|0,v|0,r|0)|0;M=C;r=fd(m|0,H|0,v|0,r|0)|0;v=C;H=hd(J|0,M|0,14)|0;m=C;f=id(J|0,M|0,50)|0;m=m|C;p=hd(J|0,M|0,18)|0;E=C;l=id(J|0,M|0,46)|0;E=m^(E|C);m=hd(J|0,M|0,41)|0;s=C;o=id(J|0,M|0,23)|0;s=E^(s|C);E=g+320|0;j=c[E>>2]|0;E=c[E+4>>2]|0;A=fd(b|0,A|0,1290863460,-1564481375)|0;E=fd(A|0,C|0,j|0,E|0)|0;s=fd(E|0,C|0,(H|f)^(p|l)^(m|o)|0,s|0)|0;s=fd(s|0,C|0,(B^I)&J^B|0,(K^G)&M^K|0)|0;o=C;m=hd(r|0,v|0,28)|0;l=C;p=id(r|0,v|0,36)|0;l=l|C;f=hd(r|0,v|0,34)|0;H=C;E=id(r|0,v|0,30)|0;H=l^(H|C);l=hd(r|0,v|0,39)|0;j=C;A=id(r|0,v|0,25)|0;j=fd((x|u)&r|x&u|0,(F|y)&v|F&y|0,(m|p)^(f|E)^(l|A)|0,H^(j|C)|0)|0;H=C;D=fd(L|0,D|0,s|0,o|0)|0;L=C;o=fd(j|0,H|0,s|0,o|0)|0;s=C;H=hd(D|0,L|0,14)|0;j=C;A=id(D|0,L|0,50)|0;j=j|C;l=hd(D|0,L|0,18)|0;E=C;f=id(D|0,L|0,46)|0;E=j^(E|C);j=hd(D|0,L|0,41)|0;p=C;m=id(D|0,L|0,23)|0;p=E^(p|C);E=g+328|0;b=c[E>>2]|0;E=c[E+4>>2]|0;K=fd(B|0,K|0,-1136513023,-1474664885)|0;E=fd(K|0,C|0,b|0,E|0)|0;p=fd(E|0,C|0,(H|A)^(l|f)^(j|m)|0,p|0)|0;p=fd(p|0,C|0,(I^J)&D^I|0,(G^M)&L^G|0)|0;m=C;j=hd(o|0,s|0,28)|0;f=C;l=id(o|0,s|0,36)|0;f=f|C;A=hd(o|0,s|0,34)|0;H=C;E=id(o|0,s|0,30)|0;H=f^(H|C);f=hd(o|0,s|0,39)|0;b=C;K=id(o|0,s|0,25)|0;b=fd((u|r)&o|u&r|0,(y|v)&s|y&v|0,(j|l)^(A|E)^(f|K)|0,H^(b|C)|0)|0;H=C;F=fd(x|0,F|0,p|0,m|0)|0;x=C;m=fd(b|0,H|0,p|0,m|0)|0;p=C;H=hd(F|0,x|0,14)|0;b=C;K=id(F|0,x|0,50)|0;b=b|C;f=hd(F|0,x|0,18)|0;E=C;A=id(F|0,x|0,46)|0;E=b^(E|C);b=hd(F|0,x|0,41)|0;l=C;j=id(F|0,x|0,23)|0;l=E^(l|C);E=g+336|0;B=c[E>>2]|0;E=c[E+4>>2]|0;G=fd(I|0,G|0,-789014639,-1035236496)|0;E=fd(G|0,C|0,B|0,E|0)|0;l=fd(E|0,C|0,(H|K)^(f|A)^(b|j)|0,l|0)|0;l=fd(l|0,C|0,(J^D)&F^J|0,(M^L)&x^M|0)|0;j=C;b=hd(m|0,p|0,28)|0;A=C;f=id(m|0,p|0,36)|0;A=A|C;K=hd(m|0,p|0,34)|0;H=C;E=id(m|0,p|0,30)|0;H=A^(H|C);A=hd(m|0,p|0,39)|0;B=C;G=id(m|0,p|0,25)|0;B=fd((r|o)&m|r&o|0,(v|s)&p|v&s|0,(b|f)^(K|E)^(A|G)|0,H^(B|C)|0)|0;H=C;y=fd(u|0,y|0,l|0,j|0)|0;u=C;j=fd(B|0,H|0,l|0,j|0)|0;l=C;H=hd(y|0,u|0,14)|0;B=C;G=id(y|0,u|0,50)|0;B=B|C;A=hd(y|0,u|0,18)|0;E=C;K=id(y|0,u|0,46)|0;E=B^(E|C);B=hd(y|0,u|0,41)|0;f=C;b=id(y|0,u|0,23)|0;f=E^(f|C);E=g+344|0;I=c[E>>2]|0;E=c[E+4>>2]|0;M=fd(J|0,M|0,106217008,-949202525)|0;E=fd(M|0,C|0,I|0,E|0)|0;f=fd(E|0,C|0,(H|G)^(A|K)^(B|b)|0,f|0)|0;f=fd(f|0,C|0,(D^F)&y^D|0,(L^x)&u^L|0)|0;b=C;B=hd(j|0,l|0,28)|0;K=C;A=id(j|0,l|0,36)|0;K=K|C;G=hd(j|0,l|0,34)|0;H=C;E=id(j|0,l|0,30)|0;H=K^(H|C);K=hd(j|0,l|0,39)|0;I=C;M=id(j|0,l|0,25)|0;I=fd((o|m)&j|o&m|0,(s|p)&l|s&p|0,(B|A)^(G|E)^(K|M)|0,H^(I|C)|0)|0;H=C;v=fd(r|0,v|0,f|0,b|0)|0;r=C;b=fd(I|0,H|0,f|0,b|0)|0;f=C;H=hd(v|0,r|0,14)|0;I=C;M=id(v|0,r|0,50)|0;I=I|C;K=hd(v|0,r|0,18)|0;E=C;G=id(v|0,r|0,46)|0;E=I^(E|C);I=hd(v|0,r|0,41)|0;A=C;B=id(v|0,r|0,23)|0;A=E^(A|C);E=g+352|0;J=c[E>>2]|0;E=c[E+4>>2]|0;L=fd(D|0,L|0,-688958952,-778901479)|0;E=fd(L|0,C|0,J|0,E|0)|0;A=fd(E|0,C|0,(H|M)^(K|G)^(I|B)|0,A|0)|0;A=fd(A|0,C|0,(F^y)&v^F|0,(x^u)&r^x|0)|0;B=C;I=hd(b|0,f|0,28)|0;G=C;K=id(b|0,f|0,36)|0;G=G|C;M=hd(b|0,f|0,34)|0;H=C;E=id(b|0,f|0,30)|0;H=G^(H|C);G=hd(b|0,f|0,39)|0;J=C;L=id(b|0,f|0,25)|0;J=fd((m|j)&b|m&j|0,(p|l)&f|p&l|0,(I|K)^(M|E)^(G|L)|0,H^(J|C)|0)|0;H=C;s=fd(o|0,s|0,A|0,B|0)|0;o=C;B=fd(J|0,H|0,A|0,B|0)|0;A=C;H=hd(s|0,o|0,14)|0;J=C;L=id(s|0,o|0,50)|0;J=J|C;G=hd(s|0,o|0,18)|0;E=C;M=id(s|0,o|0,46)|0;E=J^(E|C);J=hd(s|0,o|0,41)|0;K=C;I=id(s|0,o|0,23)|0;K=E^(K|C);E=g+360|0;D=c[E>>2]|0;E=c[E+4>>2]|0;x=fd(F|0,x|0,1432725776,-694614492)|0;E=fd(x|0,C|0,D|0,E|0)|0;K=fd(E|0,C|0,(H|L)^(G|M)^(J|I)|0,K|0)|0;K=fd(K|0,C|0,(y^v)&s^y|0,(u^r)&o^u|0)|0;I=C;J=hd(B|0,A|0,28)|0;M=C;G=id(B|0,A|0,36)|0;M=M|C;L=hd(B|0,A|0,34)|0;H=C;E=id(B|0,A|0,30)|0;H=M^(H|C);M=hd(B|0,A|0,39)|0;D=C;x=id(B|0,A|0,25)|0;D=fd((j|b)&B|j&b|0,(l|f)&A|l&f|0,(J|G)^(L|E)^(M|x)|0,H^(D|C)|0)|0;H=C;p=fd(m|0,p|0,K|0,I|0)|0;m=C;I=fd(D|0,H|0,K|0,I|0)|0;K=C;H=hd(p|0,m|0,14)|0;D=C;x=id(p|0,m|0,50)|0;D=D|C;M=hd(p|0,m|0,18)|0;E=C;L=id(p|0,m|0,46)|0;E=D^(E|C);D=hd(p|0,m|0,41)|0;G=C;J=id(p|0,m|0,23)|0;G=E^(G|C);E=g+368|0;F=c[E>>2]|0;E=c[E+4>>2]|0;u=fd(y|0,u|0,1467031594,-200395387)|0;E=fd(u|0,C|0,F|0,E|0)|0;G=fd(E|0,C|0,(H|x)^(M|L)^(D|J)|0,G|0)|0;G=fd(G|0,C|0,(v^s)&p^v|0,(r^o)&m^r|0)|0;J=C;D=hd(I|0,K|0,28)|0;L=C;M=id(I|0,K|0,36)|0;L=L|C;x=hd(I|0,K|0,34)|0;H=C;E=id(I|0,K|0,30)|0;H=L^(H|C);L=hd(I|0,K|0,39)|0;F=C;u=id(I|0,K|0,25)|0;F=fd((b|B)&I|b&B|0,(f|A)&K|f&A|0,(D|M)^(x|E)^(L|u)|0,H^(F|C)|0)|0;H=C;l=fd(j|0,l|0,G|0,J|0)|0;j=C;J=fd(F|0,H|0,G|0,J|0)|0;G=C;H=hd(l|0,j|0,14)|0;F=C;u=id(l|0,j|0,50)|0;F=F|C;L=hd(l|0,j|0,18)|0;E=C;x=id(l|0,j|0,46)|0;E=F^(E|C);F=hd(l|0,j|0,41)|0;M=C;D=id(l|0,j|0,23)|0;M=E^(M|C);E=g+376|0;y=c[E>>2]|0;E=c[E+4>>2]|0;r=fd(v|0,r|0,851169720,275423344)|0;E=fd(r|0,C|0,y|0,E|0)|0;M=fd(E|0,C|0,(H|u)^(L|x)^(F|D)|0,M|0)|0;M=fd(M|0,C|0,(s^p)&l^s|0,(o^m)&j^o|0)|0;D=C;F=hd(J|0,G|0,28)|0;x=C;L=id(J|0,G|0,36)|0;x=x|C;u=hd(J|0,G|0,34)|0;H=C;E=id(J|0,G|0,30)|0;H=x^(H|C);x=hd(J|0,G|0,39)|0;y=C;r=id(J|0,G|0,25)|0;y=fd((B|I)&J|B&I|0,(A|K)&G|A&K|0,(F|L)^(u|E)^(x|r)|0,H^(y|C)|0)|0;H=C;f=fd(b|0,f|0,M|0,D|0)|0;b=C;D=fd(y|0,H|0,M|0,D|0)|0;M=C;H=hd(f|0,b|0,14)|0;y=C;r=id(f|0,b|0,50)|0;y=y|C;x=hd(f|0,b|0,18)|0;E=C;u=id(f|0,b|0,46)|0;E=y^(E|C);y=hd(f|0,b|0,41)|0;L=C;F=id(f|0,b|0,23)|0;L=E^(L|C);E=g+384|0;v=c[E>>2]|0;E=c[E+4>>2]|0;o=fd(s|0,o|0,-1194143544,430227734)|0;E=fd(o|0,C|0,v|0,E|0)|0;L=fd(E|0,C|0,(H|r)^(x|u)^(y|F)|0,L|0)|0;L=fd(L|0,C|0,(p^l)&f^p|0,(m^j)&b^m|0)|0;F=C;y=hd(D|0,M|0,28)|0;u=C;x=id(D|0,M|0,36)|0;u=u|C;r=hd(D|0,M|0,34)|0;H=C;E=id(D|0,M|0,30)|0;H=u^(H|C);u=hd(D|0,M|0,39)|0;v=C;o=id(D|0,M|0,25)|0;v=fd((I|J)&D|I&J|0,(K|G)&M|K&G|0,(y|x)^(r|E)^(u|o)|0,H^(v|C)|0)|0;H=C;A=fd(B|0,A|0,L|0,F|0)|0;B=C;F=fd(v|0,H|0,L|0,F|0)|0;L=C;H=hd(A|0,B|0,14)|0;v=C;o=id(A|0,B|0,50)|0;v=v|C;u=hd(A|0,B|0,18)|0;E=C;r=id(A|0,B|0,46)|0;E=v^(E|C);v=hd(A|0,B|0,41)|0;x=C;y=id(A|0,B|0,23)|0;x=E^(x|C);E=g+392|0;s=c[E>>2]|0;E=c[E+4>>2]|0;m=fd(p|0,m|0,1363258195,506948616)|0;E=fd(m|0,C|0,s|0,E|0)|0;x=fd(E|0,C|0,(H|o)^(u|r)^(v|y)|0,x|0)|0;x=fd(x|0,C|0,(l^f)&A^l|0,(j^b)&B^j|0)|0;y=C;v=hd(F|0,L|0,28)|0;r=C;u=id(F|0,L|0,36)|0;r=r|C;o=hd(F|0,L|0,34)|0;H=C;E=id(F|0,L|0,30)|0;H=r^(H|C);r=hd(F|0,L|0,39)|0;s=C;m=id(F|0,L|0,25)|0;s=fd((J|D)&F|J&D|0,(G|M)&L|G&M|0,(v|u)^(o|E)^(r|m)|0,H^(s|C)|0)|0;H=C;K=fd(I|0,K|0,x|0,y|0)|0;I=C;y=fd(s|0,H|0,x|0,y|0)|0;x=C;H=hd(K|0,I|0,14)|0;s=C;m=id(K|0,I|0,50)|0;s=s|C;r=hd(K|0,I|0,18)|0;E=C;o=id(K|0,I|0,46)|0;E=s^(E|C);s=hd(K|0,I|0,41)|0;u=C;v=id(K|0,I|0,23)|0;u=E^(u|C);E=g+400|0;p=c[E>>2]|0;E=c[E+4>>2]|0;j=fd(l|0,j|0,-544281703,659060556)|0;E=fd(j|0,C|0,p|0,E|0)|0;u=fd(E|0,C|0,(H|m)^(r|o)^(s|v)|0,u|0)|0;u=fd(u|0,C|0,(f^A)&K^f|0,(b^B)&I^b|0)|0;v=C;s=hd(y|0,x|0,28)|0;o=C;r=id(y|0,x|0,36)|0;o=o|C;m=hd(y|0,x|0,34)|0;H=C;E=id(y|0,x|0,30)|0;H=o^(H|C);o=hd(y|0,x|0,39)|0;p=C;j=id(y|0,x|0,25)|0;p=fd((D|F)&y|D&F|0,(M|L)&x|M&L|0,(s|r)^(m|E)^(o|j)|0,H^(p|C)|0)|0;H=C;G=fd(J|0,G|0,u|0,v|0)|0;J=C;v=fd(p|0,H|0,u|0,v|0)|0;u=C;H=hd(G|0,J|0,14)|0;p=C;j=id(G|0,J|0,50)|0;p=p|C;o=hd(G|0,J|0,18)|0;E=C;m=id(G|0,J|0,46)|0;E=p^(E|C);p=hd(G|0,J|0,41)|0;r=C;s=id(G|0,J|0,23)|0;r=E^(r|C);E=g+408|0;l=c[E>>2]|0;E=c[E+4>>2]|0;b=fd(f|0,b|0,-509917016,883997877)|0;E=fd(b|0,C|0,l|0,E|0)|0;r=fd(E|0,C|0,(H|j)^(o|m)^(p|s)|0,r|0)|0;r=fd(r|0,C|0,(A^K)&G^A|0,(B^I)&J^B|0)|0;s=C;p=hd(v|0,u|0,28)|0;m=C;o=id(v|0,u|0,36)|0;m=m|C;j=hd(v|0,u|0,34)|0;H=C;E=id(v|0,u|0,30)|0;H=m^(H|C);m=hd(v|0,u|0,39)|0;l=C;b=id(v|0,u|0,25)|0;l=fd((F|y)&v|F&y|0,(L|x)&u|L&x|0,(p|o)^(j|E)^(m|b)|0,H^(l|C)|0)|0;H=C;M=fd(D|0,M|0,r|0,s|0)|0;D=C;s=fd(l|0,H|0,r|0,s|0)|0;r=C;H=hd(M|0,D|0,14)|0;l=C;b=id(M|0,D|0,50)|0;l=l|C;m=hd(M|0,D|0,18)|0;E=C;j=id(M|0,D|0,46)|0;E=l^(E|C);l=hd(M|0,D|0,41)|0;o=C;p=id(M|0,D|0,23)|0;o=E^(o|C);E=g+416|0;f=c[E>>2]|0;E=c[E+4>>2]|0;B=fd(A|0,B|0,-976659869,958139571)|0;E=fd(B|0,C|0,f|0,E|0)|0;o=fd(E|0,C|0,(H|b)^(m|j)^(l|p)|0,o|0)|0;o=fd(o|0,C|0,(K^G)&M^K|0,(I^J)&D^I|0)|0;p=C;l=hd(s|0,r|0,28)|0;j=C;m=id(s|0,r|0,36)|0;j=j|C;b=hd(s|0,r|0,34)|0;H=C;E=id(s|0,r|0,30)|0;H=j^(H|C);j=hd(s|0,r|0,39)|0;f=C;B=id(s|0,r|0,25)|0;f=fd((y|v)&s|y&v|0,(x|u)&r|x&u|0,(l|m)^(b|E)^(j|B)|0,H^(f|C)|0)|0;H=C;L=fd(F|0,L|0,o|0,p|0)|0;F=C;p=fd(f|0,H|0,o|0,p|0)|0;o=C;H=hd(L|0,F|0,14)|0;f=C;B=id(L|0,F|0,50)|0;f=f|C;j=hd(L|0,F|0,18)|0;E=C;b=id(L|0,F|0,46)|0;E=f^(E|C);f=hd(L|0,F|0,41)|0;m=C;l=id(L|0,F|0,23)|0;m=E^(m|C);E=g+424|0;A=c[E>>2]|0;E=c[E+4>>2]|0;I=fd(K|0,I|0,-482243893,1322822218)|0;E=fd(I|0,C|0,A|0,E|0)|0;m=fd(E|0,C|0,(H|B)^(j|b)^(f|l)|0,m|0)|0;m=fd(m|0,C|0,(G^M)&L^G|0,(J^D)&F^J|0)|0;l=C;f=hd(p|0,o|0,28)|0;b=C;j=id(p|0,o|0,36)|0;b=b|C;B=hd(p|0,o|0,34)|0;H=C;E=id(p|0,o|0,30)|0;H=b^(H|C);b=hd(p|0,o|0,39)|0;A=C;I=id(p|0,o|0,25)|0;A=fd((v|s)&p|v&s|0,(u|r)&o|u&r|0,(f|j)^(B|E)^(b|I)|0,H^(A|C)|0)|0;H=C;x=fd(y|0,x|0,m|0,l|0)|0;y=C;l=fd(A|0,H|0,m|0,l|0)|0;m=C;H=hd(x|0,y|0,14)|0;A=C;I=id(x|0,y|0,50)|0;A=A|C;b=hd(x|0,y|0,18)|0;E=C;B=id(x|0,y|0,46)|0;E=A^(E|C);A=hd(x|0,y|0,41)|0;j=C;f=id(x|0,y|0,23)|0;j=E^(j|C);E=g+432|0;K=c[E>>2]|0;E=c[E+4>>2]|0;J=fd(G|0,J|0,2003034995,1537002063)|0;E=fd(J|0,C|0,K|0,E|0)|0;j=fd(E|0,C|0,(H|I)^(b|B)^(A|f)|0,j|0)|0;j=fd(j|0,C|0,(M^L)&x^M|0,(D^F)&y^D|0)|0;f=C;A=hd(l|0,m|0,28)|0;B=C;b=id(l|0,m|0,36)|0;B=B|C;I=hd(l|0,m|0,34)|0;H=C;E=id(l|0,m|0,30)|0;H=B^(H|C);B=hd(l|0,m|0,39)|0;K=C;J=id(l|0,m|0,25)|0;K=fd((s|p)&l|s&p|0,(r|o)&m|r&o|0,(A|b)^(I|E)^(B|J)|0,H^(K|C)|0)|0;H=C;u=fd(v|0,u|0,j|0,f|0)|0;v=C;f=fd(K|0,H|0,j|0,f|0)|0;j=C;H=hd(u|0,v|0,14)|0;K=C;J=id(u|0,v|0,50)|0;K=K|C;B=hd(u|0,v|0,18)|0;E=C;I=id(u|0,v|0,46)|0;E=K^(E|C);K=hd(u|0,v|0,41)|0;b=C;A=id(u|0,v|0,23)|0;b=E^(b|C);E=g+440|0;G=c[E>>2]|0;E=c[E+4>>2]|0;D=fd(M|0,D|0,-692930397,1747873779)|0;E=fd(D|0,C|0,G|0,E|0)|0;b=fd(E|0,C|0,(H|J)^(B|I)^(K|A)|0,b|0)|0;b=fd(b|0,C|0,(L^x)&u^L|0,(F^y)&v^F|0)|0;A=C;K=hd(f|0,j|0,28)|0;I=C;B=id(f|0,j|0,36)|0;I=I|C;J=hd(f|0,j|0,34)|0;H=C;E=id(f|0,j|0,30)|0;H=I^(H|C);I=hd(f|0,j|0,39)|0;G=C;D=id(f|0,j|0,25)|0;G=fd((p|l)&f|p&l|0,(o|m)&j|o&m|0,(K|B)^(J|E)^(I|D)|0,H^(G|C)|0)|0;H=C;r=fd(s|0,r|0,b|0,A|0)|0;s=C;A=fd(G|0,H|0,b|0,A|0)|0;b=C;H=hd(r|0,s|0,14)|0;G=C;D=id(r|0,s|0,50)|0;G=G|C;I=hd(r|0,s|0,18)|0;E=C;J=id(r|0,s|0,46)|0;E=G^(E|C);G=hd(r|0,s|0,41)|0;B=C;K=id(r|0,s|0,23)|0;B=E^(B|C);E=g+448|0;M=c[E>>2]|0;E=c[E+4>>2]|0;F=fd(L|0,F|0,1575990012,1955562222)|0;E=fd(F|0,C|0,M|0,E|0)|0;B=fd(E|0,C|0,(H|D)^(I|J)^(G|K)|0,B|0)|0;B=fd(B|0,C|0,(x^u)&r^x|0,(y^v)&s^y|0)|0;K=C;G=hd(A|0,b|0,28)|0;J=C;I=id(A|0,b|0,36)|0;J=J|C;D=hd(A|0,b|0,34)|0;H=C;E=id(A|0,b|0,30)|0;H=J^(H|C);J=hd(A|0,b|0,39)|0;M=C;F=id(A|0,b|0,25)|0;M=fd((l|f)&A|l&f|0,(m|j)&b|m&j|0,(G|I)^(D|E)^(J|F)|0,H^(M|C)|0)|0;H=C;o=fd(p|0,o|0,B|0,K|0)|0;p=C;K=fd(M|0,H|0,B|0,K|0)|0;B=C;H=hd(o|0,p|0,14)|0;M=C;F=id(o|0,p|0,50)|0;M=M|C;J=hd(o|0,p|0,18)|0;E=C;D=id(o|0,p|0,46)|0;E=M^(E|C);M=hd(o|0,p|0,41)|0;I=C;G=id(o|0,p|0,23)|0;I=E^(I|C);E=g+456|0;L=c[E>>2]|0;E=c[E+4>>2]|0;y=fd(x|0,y|0,1125592928,2024104815)|0;E=fd(y|0,C|0,L|0,E|0)|0;I=fd(E|0,C|0,(H|F)^(J|D)^(M|G)|0,I|0)|0;I=fd(I|0,C|0,(u^r)&o^u|0,(v^s)&p^v|0)|0;G=C;M=hd(K|0,B|0,28)|0;D=C;J=id(K|0,B|0,36)|0;D=D|C;F=hd(K|0,B|0,34)|0;H=C;E=id(K|0,B|0,30)|0;H=D^(H|C);D=hd(K|0,B|0,39)|0;L=C;y=id(K|0,B|0,25)|0;L=fd((f|A)&K|f&A|0,(j|b)&B|j&b|0,(M|J)^(F|E)^(D|y)|0,H^(L|C)|0)|0;H=C;m=fd(l|0,m|0,I|0,G|0)|0;l=C;G=fd(L|0,H|0,I|0,G|0)|0;I=C;H=hd(m|0,l|0,14)|0;L=C;y=id(m|0,l|0,50)|0;L=L|C;D=hd(m|0,l|0,18)|0;E=C;F=id(m|0,l|0,46)|0;E=L^(E|C);L=hd(m|0,l|0,41)|0;J=C;M=id(m|0,l|0,23)|0;J=E^(J|C);E=g+464|0;x=c[E>>2]|0;E=c[E+4>>2]|0;v=fd(u|0,v|0,-1578062990,-2067236844)|0;E=fd(v|0,C|0,x|0,E|0)|0;J=fd(E|0,C|0,(H|y)^(D|F)^(L|M)|0,J|0)|0;J=fd(J|0,C|0,(r^o)&m^r|0,(s^p)&l^s|0)|0;M=C;L=hd(G|0,I|0,28)|0;F=C;D=id(G|0,I|0,36)|0;F=F|C;y=hd(G|0,I|0,34)|0;H=C;E=id(G|0,I|0,30)|0;H=F^(H|C);F=hd(G|0,I|0,39)|0;x=C;v=id(G|0,I|0,25)|0;x=fd((A|K)&G|A&K|0,(b|B)&I|b&B|0,(L|D)^(y|E)^(F|v)|0,H^(x|C)|0)|0;H=C;j=fd(f|0,j|0,J|0,M|0)|0;f=C;M=fd(x|0,H|0,J|0,M|0)|0;J=C;H=hd(j|0,f|0,14)|0;x=C;v=id(j|0,f|0,50)|0;x=x|C;F=hd(j|0,f|0,18)|0;E=C;y=id(j|0,f|0,46)|0;E=x^(E|C);x=hd(j|0,f|0,41)|0;D=C;L=id(j|0,f|0,23)|0;D=E^(D|C);E=g+472|0;u=c[E>>2]|0;E=c[E+4>>2]|0;s=fd(r|0,s|0,442776044,-1933114872)|0;E=fd(s|0,C|0,u|0,E|0)|0;D=fd(E|0,C|0,(H|v)^(F|y)^(x|L)|0,D|0)|0;D=fd(D|0,C|0,(o^m)&j^o|0,(p^l)&f^p|0)|0;L=C;x=hd(M|0,J|0,28)|0;y=C;F=id(M|0,J|0,36)|0;y=y|C;v=hd(M|0,J|0,34)|0;H=C;E=id(M|0,J|0,30)|0;H=y^(H|C);y=hd(M|0,J|0,39)|0;u=C;s=id(M|0,J|0,25)|0;u=fd((K|G)&M|K&G|0,(B|I)&J|B&I|0,(x|F)^(v|E)^(y|s)|0,H^(u|C)|0)|0;H=C;b=fd(A|0,b|0,D|0,L|0)|0;A=C;L=fd(u|0,H|0,D|0,L|0)|0;D=C;H=hd(b|0,A|0,14)|0;u=C;s=id(b|0,A|0,50)|0;u=u|C;y=hd(b|0,A|0,18)|0;E=C;v=id(b|0,A|0,46)|0;E=u^(E|C);u=hd(b|0,A|0,41)|0;F=C;x=id(b|0,A|0,23)|0;F=E^(F|C);E=g+480|0;r=c[E>>2]|0;E=c[E+4>>2]|0;p=fd(o|0,p|0,593698344,-1866530822)|0;E=fd(p|0,C|0,r|0,E|0)|0;F=fd(E|0,C|0,(H|s)^(y|v)^(u|x)|0,F|0)|0;F=fd(F|0,C|0,(m^j)&b^m|0,(l^f)&A^l|0)|0;x=C;u=hd(L|0,D|0,28)|0;v=C;y=id(L|0,D|0,36)|0;v=v|C;s=hd(L|0,D|0,34)|0;H=C;E=id(L|0,D|0,30)|0;H=v^(H|C);v=hd(L|0,D|0,39)|0;r=C;p=id(L|0,D|0,25)|0;r=fd((G|M)&L|G&M|0,(I|J)&D|I&J|0,(u|y)^(s|E)^(v|p)|0,H^(r|C)|0)|0;H=C;B=fd(K|0,B|0,F|0,x|0)|0;K=C;x=fd(r|0,H|0,F|0,x|0)|0;F=C;H=hd(B|0,K|0,14)|0;r=C;p=id(B|0,K|0,50)|0;r=r|C;v=hd(B|0,K|0,18)|0;E=C;s=id(B|0,K|0,46)|0;E=r^(E|C);r=hd(B|0,K|0,41)|0;y=C;u=id(B|0,K|0,23)|0;y=E^(y|C);E=g+488|0;o=c[E>>2]|0;E=c[E+4>>2]|0;l=fd(m|0,l|0,-561857047,-1538233109)|0;E=fd(l|0,C|0,o|0,E|0)|0;y=fd(E|0,C|0,(H|p)^(v|s)^(r|u)|0,y|0)|0;y=fd(y|0,C|0,(j^b)&B^j|0,(f^A)&K^f|0)|0;u=C;r=hd(x|0,F|0,28)|0;s=C;v=id(x|0,F|0,36)|0;s=s|C;p=hd(x|0,F|0,34)|0;H=C;E=id(x|0,F|0,30)|0;H=s^(H|C);s=hd(x|0,F|0,39)|0;o=C;l=id(x|0,F|0,25)|0;o=fd((M|L)&x|M&L|0,(J|D)&F|J&D|0,(r|v)^(p|E)^(s|l)|0,H^(o|C)|0)|0;H=C;I=fd(G|0,I|0,y|0,u|0)|0;G=C;u=fd(o|0,H|0,y|0,u|0)|0;y=C;H=hd(I|0,G|0,14)|0;o=C;l=id(I|0,G|0,50)|0;o=o|C;s=hd(I|0,G|0,18)|0;E=C;p=id(I|0,G|0,46)|0;E=o^(E|C);o=hd(I|0,G|0,41)|0;v=C;r=id(I|0,G|0,23)|0;v=E^(v|C);E=g+496|0;m=c[E>>2]|0;E=c[E+4>>2]|0;f=fd(j|0,f|0,-1295615723,-1090935817)|0;E=fd(f|0,C|0,m|0,E|0)|0;v=fd(E|0,C|0,(H|l)^(s|p)^(o|r)|0,v|0)|0;v=fd(v|0,C|0,(b^B)&I^b|0,(A^K)&G^A|0)|0;r=C;o=hd(u|0,y|0,28)|0;p=C;s=id(u|0,y|0,36)|0;p=p|C;l=hd(u|0,y|0,34)|0;H=C;E=id(u|0,y|0,30)|0;H=p^(H|C);p=hd(u|0,y|0,39)|0;m=C;f=id(u|0,y|0,25)|0;m=fd((L|x)&u|L&x|0,(D|F)&y|D&F|0,(o|s)^(l|E)^(p|f)|0,H^(m|C)|0)|0;H=C;J=fd(M|0,J|0,v|0,r|0)|0;M=C;r=fd(m|0,H|0,v|0,r|0)|0;v=C;H=hd(J|0,M|0,14)|0;m=C;f=id(J|0,M|0,50)|0;m=m|C;p=hd(J|0,M|0,18)|0;E=C;l=id(J|0,M|0,46)|0;E=m^(E|C);m=hd(J|0,M|0,41)|0;s=C;o=id(J|0,M|0,23)|0;s=E^(s|C);E=g+504|0;j=c[E>>2]|0;E=c[E+4>>2]|0;A=fd(b|0,A|0,-479046869,-965641998)|0;E=fd(A|0,C|0,j|0,E|0)|0;s=fd(E|0,C|0,(H|f)^(p|l)^(m|o)|0,s|0)|0;s=fd(s|0,C|0,(B^I)&J^B|0,(K^G)&M^K|0)|0;o=C;m=hd(r|0,v|0,28)|0;l=C;p=id(r|0,v|0,36)|0;l=l|C;f=hd(r|0,v|0,34)|0;H=C;E=id(r|0,v|0,30)|0;H=l^(H|C);l=hd(r|0,v|0,39)|0;j=C;A=id(r|0,v|0,25)|0;j=fd((x|u)&r|x&u|0,(F|y)&v|F&y|0,(m|p)^(f|E)^(l|A)|0,H^(j|C)|0)|0;H=C;D=fd(L|0,D|0,s|0,o|0)|0;L=C;o=fd(j|0,H|0,s|0,o|0)|0;s=C;H=hd(D|0,L|0,14)|0;j=C;A=id(D|0,L|0,50)|0;j=j|C;l=hd(D|0,L|0,18)|0;E=C;f=id(D|0,L|0,46)|0;E=j^(E|C);j=hd(D|0,L|0,41)|0;p=C;m=id(D|0,L|0,23)|0;p=E^(p|C);E=g+512|0;b=c[E>>2]|0;E=c[E+4>>2]|0;K=fd(B|0,K|0,-366583396,-903397682)|0;E=fd(K|0,C|0,b|0,E|0)|0;p=fd(E|0,C|0,(H|A)^(l|f)^(j|m)|0,p|0)|0;p=fd(p|0,C|0,(I^J)&D^I|0,(G^M)&L^G|0)|0;m=C;j=hd(o|0,s|0,28)|0;f=C;l=id(o|0,s|0,36)|0;f=f|C;A=hd(o|0,s|0,34)|0;H=C;E=id(o|0,s|0,30)|0;H=f^(H|C);f=hd(o|0,s|0,39)|0;b=C;K=id(o|0,s|0,25)|0;b=fd((u|r)&o|u&r|0,(y|v)&s|y&v|0,(j|l)^(A|E)^(f|K)|0,H^(b|C)|0)|0;H=C;F=fd(x|0,F|0,p|0,m|0)|0;x=C;m=fd(b|0,H|0,p|0,m|0)|0;p=C;H=hd(F|0,x|0,14)|0;b=C;K=id(F|0,x|0,50)|0;b=b|C;f=hd(F|0,x|0,18)|0;E=C;A=id(F|0,x|0,46)|0;E=b^(E|C);b=hd(F|0,x|0,41)|0;l=C;j=id(F|0,x|0,23)|0;l=E^(l|C);E=g+520|0;B=c[E>>2]|0;E=c[E+4>>2]|0;G=fd(I|0,G|0,566280711,-779700025)|0;E=fd(G|0,C|0,B|0,E|0)|0;l=fd(E|0,C|0,(H|K)^(f|A)^(b|j)|0,l|0)|0;l=fd(l|0,C|0,(J^D)&F^J|0,(M^L)&x^M|0)|0;j=C;b=hd(m|0,p|0,28)|0;A=C;f=id(m|0,p|0,36)|0;A=A|C;K=hd(m|0,p|0,34)|0;H=C;E=id(m|0,p|0,30)|0;H=A^(H|C);A=hd(m|0,p|0,39)|0;B=C;G=id(m|0,p|0,25)|0;B=fd((r|o)&m|r&o|0,(v|s)&p|v&s|0,(b|f)^(K|E)^(A|G)|0,H^(B|C)|0)|0;H=C;y=fd(u|0,y|0,l|0,j|0)|0;u=C;j=fd(B|0,H|0,l|0,j|0)|0;l=C;H=hd(y|0,u|0,14)|0;B=C;G=id(y|0,u|0,50)|0;B=B|C;A=hd(y|0,u|0,18)|0;E=C;K=id(y|0,u|0,46)|0;E=B^(E|C);B=hd(y|0,u|0,41)|0;f=C;b=id(y|0,u|0,23)|0;f=E^(f|C);E=g+528|0;I=c[E>>2]|0;E=c[E+4>>2]|0;M=fd(J|0,M|0,-840897762,-354779690)|0;E=fd(M|0,C|0,I|0,E|0)|0;f=fd(E|0,C|0,(H|G)^(A|K)^(B|b)|0,f|0)|0;f=fd(f|0,C|0,(D^F)&y^D|0,(L^x)&u^L|0)|0;b=C;B=hd(j|0,l|0,28)|0;K=C;A=id(j|0,l|0,36)|0;K=K|C;G=hd(j|0,l|0,34)|0;H=C;E=id(j|0,l|0,30)|0;H=K^(H|C);K=hd(j|0,l|0,39)|0;I=C;M=id(j|0,l|0,25)|0;I=fd((o|m)&j|o&m|0,(s|p)&l|s&p|0,(B|A)^(G|E)^(K|M)|0,H^(I|C)|0)|0;H=C;v=fd(r|0,v|0,f|0,b|0)|0;r=C;b=fd(I|0,H|0,f|0,b|0)|0;f=C;H=hd(v|0,r|0,14)|0;I=C;M=id(v|0,r|0,50)|0;I=I|C;K=hd(v|0,r|0,18)|0;E=C;G=id(v|0,r|0,46)|0;E=I^(E|C);I=hd(v|0,r|0,41)|0;A=C;B=id(v|0,r|0,23)|0;A=E^(A|C);E=g+536|0;J=c[E>>2]|0;E=c[E+4>>2]|0;L=fd(D|0,L|0,-294727304,-176337025)|0;E=fd(L|0,C|0,J|0,E|0)|0;A=fd(E|0,C|0,(H|M)^(K|G)^(I|B)|0,A|0)|0;A=fd(A|0,C|0,(F^y)&v^F|0,(x^u)&r^x|0)|0;B=C;I=hd(b|0,f|0,28)|0;G=C;K=id(b|0,f|0,36)|0;G=G|C;M=hd(b|0,f|0,34)|0;H=C;E=id(b|0,f|0,30)|0;H=G^(H|C);G=hd(b|0,f|0,39)|0;J=C;L=id(b|0,f|0,25)|0;J=fd((m|j)&b|m&j|0,(p|l)&f|p&l|0,(I|K)^(M|E)^(G|L)|0,H^(J|C)|0)|0;H=C;s=fd(o|0,s|0,A|0,B|0)|0;o=C;B=fd(J|0,H|0,A|0,B|0)|0;A=C;H=hd(s|0,o|0,14)|0;J=C;L=id(s|0,o|0,50)|0;J=J|C;G=hd(s|0,o|0,18)|0;E=C;M=id(s|0,o|0,46)|0;E=J^(E|C);J=hd(s|0,o|0,41)|0;K=C;I=id(s|0,o|0,23)|0;K=E^(K|C);E=g+544|0;D=c[E>>2]|0;E=c[E+4>>2]|0;x=fd(F|0,x|0,1914138554,116418474)|0;E=fd(x|0,C|0,D|0,E|0)|0;K=fd(E|0,C|0,(H|L)^(G|M)^(J|I)|0,K|0)|0;K=fd(K|0,C|0,(y^v)&s^y|0,(u^r)&o^u|0)|0;I=C;J=hd(B|0,A|0,28)|0;M=C;G=id(B|0,A|0,36)|0;M=M|C;L=hd(B|0,A|0,34)|0;H=C;E=id(B|0,A|0,30)|0;H=M^(H|C);M=hd(B|0,A|0,39)|0;D=C;x=id(B|0,A|0,25)|0;D=fd((j|b)&B|j&b|0,(l|f)&A|l&f|0,(J|G)^(L|E)^(M|x)|0,H^(D|C)|0)|0;H=C;p=fd(m|0,p|0,K|0,I|0)|0;m=C;I=fd(D|0,H|0,K|0,I|0)|0;K=C;H=hd(p|0,m|0,14)|0;D=C;x=id(p|0,m|0,50)|0;D=D|C;M=hd(p|0,m|0,18)|0;E=C;L=id(p|0,m|0,46)|0;E=D^(E|C);D=hd(p|0,m|0,41)|0;G=C;J=id(p|0,m|0,23)|0;G=E^(G|C);E=g+552|0;F=c[E>>2]|0;E=c[E+4>>2]|0;u=fd(y|0,u|0,-1563912026,174292421)|0;E=fd(u|0,C|0,F|0,E|0)|0;G=fd(E|0,C|0,(H|x)^(M|L)^(D|J)|0,G|0)|0;G=fd(G|0,C|0,(v^s)&p^v|0,(r^o)&m^r|0)|0;J=C;D=hd(I|0,K|0,28)|0;L=C;M=id(I|0,K|0,36)|0;L=L|C;x=hd(I|0,K|0,34)|0;H=C;E=id(I|0,K|0,30)|0;H=L^(H|C);L=hd(I|0,K|0,39)|0;F=C;u=id(I|0,K|0,25)|0;F=fd((b|B)&I|b&B|0,(f|A)&K|f&A|0,(D|M)^(x|E)^(L|u)|0,H^(F|C)|0)|0;H=C;l=fd(j|0,l|0,G|0,J|0)|0;j=C;J=fd(F|0,H|0,G|0,J|0)|0;G=C;H=hd(l|0,j|0,14)|0;F=C;u=id(l|0,j|0,50)|0;F=F|C;L=hd(l|0,j|0,18)|0;E=C;x=id(l|0,j|0,46)|0;E=F^(E|C);F=hd(l|0,j|0,41)|0;M=C;D=id(l|0,j|0,23)|0;M=E^(M|C);E=g+560|0;y=c[E>>2]|0;E=c[E+4>>2]|0;r=fd(v|0,r|0,-1090974290,289380356)|0;E=fd(r|0,C|0,y|0,E|0)|0;M=fd(E|0,C|0,(H|u)^(L|x)^(F|D)|0,M|0)|0;M=fd(M|0,C|0,(s^p)&l^s|0,(o^m)&j^o|0)|0;D=C;F=hd(J|0,G|0,28)|0;x=C;L=id(J|0,G|0,36)|0;x=x|C;u=hd(J|0,G|0,34)|0;H=C;E=id(J|0,G|0,30)|0;H=x^(H|C);x=hd(J|0,G|0,39)|0;y=C;r=id(J|0,G|0,25)|0;y=fd((B|I)&J|B&I|0,(A|K)&G|A&K|0,(F|L)^(u|E)^(x|r)|0,H^(y|C)|0)|0;H=C;f=fd(b|0,f|0,M|0,D|0)|0;b=C;D=fd(y|0,H|0,M|0,D|0)|0;M=C;H=hd(f|0,b|0,14)|0;y=C;r=id(f|0,b|0,50)|0;y=y|C;x=hd(f|0,b|0,18)|0;E=C;u=id(f|0,b|0,46)|0;E=y^(E|C);y=hd(f|0,b|0,41)|0;L=C;F=id(f|0,b|0,23)|0;L=E^(L|C);E=g+568|0;v=c[E>>2]|0;E=c[E+4>>2]|0;o=fd(s|0,o|0,320620315,460393269)|0;E=fd(o|0,C|0,v|0,E|0)|0;L=fd(E|0,C|0,(H|r)^(x|u)^(y|F)|0,L|0)|0;L=fd(L|0,C|0,(p^l)&f^p|0,(m^j)&b^m|0)|0;F=C;y=hd(D|0,M|0,28)|0;u=C;x=id(D|0,M|0,36)|0;u=u|C;r=hd(D|0,M|0,34)|0;H=C;E=id(D|0,M|0,30)|0;H=u^(H|C);u=hd(D|0,M|0,39)|0;v=C;o=id(D|0,M|0,25)|0;v=fd((I|J)&D|I&J|0,(K|G)&M|K&G|0,(y|x)^(r|E)^(u|o)|0,H^(v|C)|0)|0;H=C;A=fd(B|0,A|0,L|0,F|0)|0;B=C;F=fd(v|0,H|0,L|0,F|0)|0;L=C;H=hd(A|0,B|0,14)|0;v=C;o=id(A|0,B|0,50)|0;v=v|C;u=hd(A|0,B|0,18)|0;E=C;r=id(A|0,B|0,46)|0;E=v^(E|C);v=hd(A|0,B|0,41)|0;x=C;y=id(A|0,B|0,23)|0;x=E^(x|C);E=g+576|0;s=c[E>>2]|0;E=c[E+4>>2]|0;m=fd(p|0,m|0,587496836,685471733)|0;E=fd(m|0,C|0,s|0,E|0)|0;x=fd(E|0,C|0,(H|o)^(u|r)^(v|y)|0,x|0)|0;x=fd(x|0,C|0,(l^f)&A^l|0,(j^b)&B^j|0)|0;y=C;v=hd(F|0,L|0,28)|0;r=C;u=id(F|0,L|0,36)|0;r=r|C;o=hd(F|0,L|0,34)|0;H=C;E=id(F|0,L|0,30)|0;H=r^(H|C);r=hd(F|0,L|0,39)|0;s=C;m=id(F|0,L|0,25)|0;s=fd((J|D)&F|J&D|0,(G|M)&L|G&M|0,(v|u)^(o|E)^(r|m)|0,H^(s|C)|0)|0;H=C;K=fd(I|0,K|0,x|0,y|0)|0;I=C;y=fd(s|0,H|0,x|0,y|0)|0;x=C;H=hd(K|0,I|0,14)|0;s=C;m=id(K|0,I|0,50)|0;s=s|C;r=hd(K|0,I|0,18)|0;E=C;o=id(K|0,I|0,46)|0;E=s^(E|C);s=hd(K|0,I|0,41)|0;u=C;v=id(K|0,I|0,23)|0;u=E^(u|C);E=g+584|0;p=c[E>>2]|0;E=c[E+4>>2]|0;j=fd(l|0,j|0,1086792851,852142971)|0;E=fd(j|0,C|0,p|0,E|0)|0;u=fd(E|0,C|0,(H|m)^(r|o)^(s|v)|0,u|0)|0;u=fd(u|0,C|0,(f^A)&K^f|0,(b^B)&I^b|0)|0;v=C;s=hd(y|0,x|0,28)|0;o=C;r=id(y|0,x|0,36)|0;o=o|C;m=hd(y|0,x|0,34)|0;H=C;E=id(y|0,x|0,30)|0;H=o^(H|C);o=hd(y|0,x|0,39)|0;p=C;j=id(y|0,x|0,25)|0;p=fd((D|F)&y|D&F|0,(M|L)&x|M&L|0,(s|r)^(m|E)^(o|j)|0,H^(p|C)|0)|0;H=C;G=fd(J|0,G|0,u|0,v|0)|0;J=C;v=fd(p|0,H|0,u|0,v|0)|0;u=C;H=hd(G|0,J|0,14)|0;p=C;j=id(G|0,J|0,50)|0;p=p|C;o=hd(G|0,J|0,18)|0;E=C;m=id(G|0,J|0,46)|0;E=p^(E|C);p=hd(G|0,J|0,41)|0;r=C;s=id(G|0,J|0,23)|0;r=E^(r|C);E=g+592|0;l=c[E>>2]|0;E=c[E+4>>2]|0;b=fd(f|0,b|0,365543100,1017036298)|0;E=fd(b|0,C|0,l|0,E|0)|0;r=fd(E|0,C|0,(H|j)^(o|m)^(p|s)|0,r|0)|0;r=fd(r|0,C|0,(A^K)&G^A|0,(B^I)&J^B|0)|0;s=C;p=hd(v|0,u|0,28)|0;m=C;o=id(v|0,u|0,36)|0;m=m|C;j=hd(v|0,u|0,34)|0;H=C;E=id(v|0,u|0,30)|0;H=m^(H|C);m=hd(v|0,u|0,39)|0;l=C;b=id(v|0,u|0,25)|0;l=fd((F|y)&v|F&y|0,(L|x)&u|L&x|0,(p|o)^(j|E)^(m|b)|0,H^(l|C)|0)|0;H=C;M=fd(D|0,M|0,r|0,s|0)|0;D=C;s=fd(l|0,H|0,r|0,s|0)|0;r=C;H=hd(M|0,D|0,14)|0;l=C;b=id(M|0,D|0,50)|0;l=l|C;m=hd(M|0,D|0,18)|0;E=C;j=id(M|0,D|0,46)|0;E=l^(E|C);l=hd(M|0,D|0,41)|0;o=C;p=id(M|0,D|0,23)|0;o=E^(o|C);E=g+600|0;f=c[E>>2]|0;E=c[E+4>>2]|0;B=fd(A|0,B|0,-1676669620,1126000580)|0;E=fd(B|0,C|0,f|0,E|0)|0;o=fd(E|0,C|0,(H|b)^(m|j)^(l|p)|0,o|0)|0;o=fd(o|0,C|0,(K^G)&M^K|0,(I^J)&D^I|0)|0;p=C;l=hd(s|0,r|0,28)|0;j=C;m=id(s|0,r|0,36)|0;j=j|C;b=hd(s|0,r|0,34)|0;H=C;E=id(s|0,r|0,30)|0;H=j^(H|C);j=hd(s|0,r|0,39)|0;f=C;B=id(s|0,r|0,25)|0;f=fd((y|v)&s|y&v|0,(x|u)&r|x&u|0,(l|m)^(b|E)^(j|B)|0,H^(f|C)|0)|0;H=C;L=fd(F|0,L|0,o|0,p|0)|0;F=C;p=fd(f|0,H|0,o|0,p|0)|0;o=C;H=hd(L|0,F|0,14)|0;f=C;B=id(L|0,F|0,50)|0;f=f|C;j=hd(L|0,F|0,18)|0;E=C;b=id(L|0,F|0,46)|0;E=f^(E|C);f=hd(L|0,F|0,41)|0;m=C;l=id(L|0,F|0,23)|0;m=E^(m|C);E=g+608|0;A=c[E>>2]|0;E=c[E+4>>2]|0;I=fd(K|0,I|0,-885112138,1288033470)|0;E=fd(I|0,C|0,A|0,E|0)|0;m=fd(E|0,C|0,(H|B)^(j|b)^(f|l)|0,m|0)|0;m=fd(m|0,C|0,(G^M)&L^G|0,(J^D)&F^J|0)|0;l=C;f=hd(p|0,o|0,28)|0;b=C;j=id(p|0,o|0,36)|0;b=b|C;B=hd(p|0,o|0,34)|0;H=C;E=id(p|0,o|0,30)|0;H=b^(H|C);b=hd(p|0,o|0,39)|0;A=C;I=id(p|0,o|0,25)|0;A=fd((v|s)&p|v&s|0,(u|r)&o|u&r|0,(f|j)^(B|E)^(b|I)|0,H^(A|C)|0)|0;H=C;x=fd(y|0,x|0,m|0,l|0)|0;y=C;l=fd(A|0,H|0,m|0,l|0)|0;m=C;H=hd(x|0,y|0,14)|0;A=C;I=id(x|0,y|0,50)|0;A=A|C;b=hd(x|0,y|0,18)|0;E=C;B=id(x|0,y|0,46)|0;E=A^(E|C);A=hd(x|0,y|0,41)|0;j=C;f=id(x|0,y|0,23)|0;j=E^(j|C);E=g+616|0;K=c[E>>2]|0;E=c[E+4>>2]|0;J=fd(G|0,J|0,-60457430,1501505948)|0;E=fd(J|0,C|0,K|0,E|0)|0;j=fd(E|0,C|0,(H|I)^(b|B)^(A|f)|0,j|0)|0;j=fd(j|0,C|0,(M^L)&x^M|0,(D^F)&y^D|0)|0;f=C;A=hd(l|0,m|0,28)|0;B=C;b=id(l|0,m|0,36)|0;B=B|C;I=hd(l|0,m|0,34)|0;H=C;E=id(l|0,m|0,30)|0;H=B^(H|C);B=hd(l|0,m|0,39)|0;K=C;J=id(l|0,m|0,25)|0;K=fd((s|p)&l|s&p|0,(r|o)&m|r&o|0,(A|b)^(I|E)^(B|J)|0,H^(K|C)|0)|0;H=C;u=fd(v|0,u|0,j|0,f|0)|0;v=C;f=fd(K|0,H|0,j|0,f|0)|0;j=C;H=hd(u|0,v|0,14)|0;K=C;J=id(u|0,v|0,50)|0;K=K|C;B=hd(u|0,v|0,18)|0;E=C;I=id(u|0,v|0,46)|0;E=K^(E|C);K=hd(u|0,v|0,41)|0;b=C;A=id(u|0,v|0,23)|0;b=E^(b|C);E=g+624|0;G=c[E>>2]|0;E=c[E+4>>2]|0;D=fd(M|0,D|0,987167468,1607167915)|0;E=fd(D|0,C|0,G|0,E|0)|0;b=fd(E|0,C|0,(H|J)^(B|I)^(K|A)|0,b|0)|0;b=fd(b|0,C|0,(L^x)&u^L|0,(F^y)&v^F|0)|0;A=C;K=hd(f|0,j|0,28)|0;I=C;B=id(f|0,j|0,36)|0;I=I|C;J=hd(f|0,j|0,34)|0;H=C;E=id(f|0,j|0,30)|0;H=I^(H|C);I=hd(f|0,j|0,39)|0;G=C;D=id(f|0,j|0,25)|0;G=fd((p|l)&f|p&l|0,(o|m)&j|o&m|0,(K|B)^(J|E)^(I|D)|0,H^(G|C)|0)|0;H=C;r=fd(s|0,r|0,b|0,A|0)|0;s=C;A=fd(G|0,H|0,b|0,A|0)|0;b=C;H=hd(r|0,s|0,14)|0;G=C;D=id(r|0,s|0,50)|0;G=G|C;I=hd(r|0,s|0,18)|0;E=C;J=id(r|0,s|0,46)|0;E=G^(E|C);G=hd(r|0,s|0,41)|0;B=C;K=id(r|0,s|0,23)|0;B=E^(B|C);g=g+632|0;E=c[g>>2]|0;g=c[g+4>>2]|0;F=fd(L|0,F|0,1246189591,1816402316)|0;g=fd(F|0,C|0,E|0,g|0)|0;g=fd(g|0,C|0,(H|D)^(I|J)^(G|K)|0,B|0)|0;g=fd(g|0,C|0,(x^u)&r^x|0,(y^v)&s^y|0)|0;B=C;K=hd(A|0,b|0,28)|0;G=C;J=id(A|0,b|0,36)|0;G=G|C;I=hd(A|0,b|0,34)|0;D=C;H=id(A|0,b|0,30)|0;D=G^(D|C);G=hd(A|0,b|0,39)|0;E=C;F=id(A|0,b|0,25)|0;E=fd((l|f)&A|l&f|0,(m|j)&b|m&j|0,(K|J)^(I|H)^(G|F)|0,D^(E|C)|0)|0;D=C;o=fd(p|0,o|0,g|0,B|0)|0;p=C;B=fd(E|0,D|0,g|0,B|0)|0;g=a;B=fd(c[g>>2]|0,c[g+4>>2]|0,B|0,C|0)|0;g=a;c[g>>2]=B;c[g+4>>2]=C;g=e;g=fd(c[g>>2]|0,c[g+4>>2]|0,A|0,b|0)|0;a=e;c[a>>2]=g;c[a+4>>2]=C;a=k;j=fd(c[a>>2]|0,c[a+4>>2]|0,f|0,j|0)|0;c[k>>2]=j;c[k+4>>2]=C;k=n;m=fd(c[k>>2]|0,c[k+4>>2]|0,l|0,m|0)|0;c[n>>2]=m;c[n+4>>2]=C;n=q;p=fd(c[n>>2]|0,c[n+4>>2]|0,o|0,p|0)|0;c[q>>2]=p;c[q+4>>2]=C;q=t;s=fd(c[q>>2]|0,c[q+4>>2]|0,r|0,s|0)|0;c[t>>2]=s;c[t+4>>2]=C;t=w;v=fd(c[t>>2]|0,c[t+4>>2]|0,u|0,v|0)|0;c[w>>2]=v;c[w+4>>2]=C;w=z;y=fd(c[w>>2]|0,c[w+4>>2]|0,x|0,y|0)|0;c[z>>2]=y;c[z+4>>2]=C;i=h;return}function yb(b,e){b=b|0;e=e|0;var f=0,g=0;f=e+3|0;c[b>>2]=(d[e+1>>0]|0)<<8|(d[e>>0]|0)|(d[e+2>>0]|0)<<16|(d[f>>0]|0)<<24&50331648;g=e+6|0;c[b+4>>2]=((d[e+4>>0]|0)<<8|(d[f>>0]|0)|(d[e+5>>0]|0)<<16|(d[g>>0]|0)<<24)>>>2&67108611;f=e+9|0;c[b+8>>2]=((d[e+7>>0]|0)<<8|(d[g>>0]|0)|(d[e+8>>0]|0)<<16|(d[f>>0]|0)<<24)>>>4&67092735;c[b+12>>2]=((d[e+10>>0]|0)<<8|(d[f>>0]|0)|(d[e+11>>0]|0)<<16|(d[e+12>>0]|0)<<24)>>>6&66076671;c[b+16>>2]=(d[e+14>>0]|0)<<8|(d[e+13>>0]|0)|(d[e+15>>0]|0)<<16&983040;f=b+20|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[b+40>>2]=(d[e+17>>0]|0)<<8|(d[e+16>>0]|0)|(d[e+18>>0]|0)<<16|(d[e+19>>0]|0)<<24;c[b+44>>2]=(d[e+21>>0]|0)<<8|(d[e+20>>0]|0)|(d[e+22>>0]|0)<<16|(d[e+23>>0]|0)<<24;c[b+48>>2]=(d[e+25>>0]|0)<<8|(d[e+24>>0]|0)|(d[e+26>>0]|0)<<16|(d[e+27>>0]|0)<<24;c[b+52>>2]=(d[e+29>>0]|0)<<8|(d[e+28>>0]|0)|(d[e+30>>0]|0)<<16|(d[e+31>>0]|0)<<24;e=b+56|0;c[e>>2]=0;c[e+4>>2]=0;a[b+80>>0]=0;return}function zb(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;m=b+56|0;h=m;g=c[h>>2]|0;h=c[h+4>>2]|0;do if(!((g|0)==0&(h|0)==0)){k=ed(16,0,g|0,h|0)|0;l=C;j=l>>>0>f>>>0|(l|0)==(f|0)&k>>>0>e>>>0;k=j?e:k;l=j?f:l;if(!((k|0)==0&(l|0)==0)){j=0;i=0;do{n=a[d+j>>0]|0;h=fd(g|0,h|0,j|0,i|0)|0;a[b+(h+56)+8>>0]=n;j=fd(j|0,i|0,1,0)|0;i=C;h=m;g=c[h>>2]|0;h=c[h+4>>2]|0}while(i>>>0<l>>>0|(i|0)==(l|0)&j>>>0<k>>>0)}n=fd(g|0,h|0,k|0,l|0)|0;j=C;i=m;c[i>>2]=n;c[i+4>>2]=j;if(j>>>0<0|(j|0)==0&n>>>0<16)return;else{e=ed(e|0,f|0,k|0,l|0)|0;f=C;Bb(b,b+64|0,16,0);n=m;c[n>>2]=0;c[n+4>>2]=0;d=d+k|0;break}}while(0);if(f>>>0>0|(f|0)==0&e>>>0>15){n=e&-16;Bb(b,d,n,f);e=ed(e|0,f|0,n|0,f|0)|0;d=d+n|0;f=C}if((e|0)==0&(f|0)==0)return;else{g=0;h=0}do{l=a[d+g>>0]|0;n=m;n=fd(c[n>>2]|0,c[n+4>>2]|0,g|0,h|0)|0;a[b+(n+56)+8>>0]=l;g=fd(g|0,h|0,1,0)|0;h=C}while(h>>>0<f>>>0|(h|0)==(f|0)&g>>>0<e>>>0);b=m;b=fd(c[b>>2]|0,c[b+4>>2]|0,e|0,f|0)|0;n=m;c[n>>2]=b;c[n+4>>2]=C;return}function Ab(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;g=b+56|0;e=c[g>>2]|0;g=c[g+4>>2]|0;if(!((e|0)==0&(g|0)==0)){a[b+(e+56)+8>>0]=1;f=fd(e|0,g|0,1,0)|0;h=C;if(h>>>0<0|(h|0)==0&f>>>0<16){h=ed(14,0,e|0,g|0)|0;gd(b+(f+64)|0,0,h+1|0)|0}a[b+80>>0]=1;Bb(b,b+64|0,16,0)}f=c[b+24>>2]|0;p=(c[b+28>>2]|0)+(f>>>26)|0;e=p&67108863;n=(p>>>26)+(c[b+32>>2]|0)|0;m=n&67108863;i=(n>>>26)+(c[b+36>>2]|0)|0;h=((i>>>26)*5|0)+(c[b+20>>2]|0)|0;g=h&67108863;f=(h>>>26)+(f&67108863)|0;r=((g+5|0)>>>26)+f|0;q=r>>>26;o=(q+e|0)>>>26;k=(i|-67108864)+((o+m|0)>>>26)|0;l=(k>>>31)+-1|0;j=k>>31;f=r&67108863&l|j&f;e=q+p&67108863&l|j&e;m=o+n&67108863&l|j&m;g=fd(h+5&67108863&l|j&g|f<<26|0,0,c[b+40>>2]|0,0)|0;h=C;f=fd(f>>>6|e<<20|0,0,c[b+44>>2]|0,0)|0;h=fd(f|0,C|0,h|0,0)|0;f=C;e=fd(e>>>12|m<<14|0,0,c[b+48>>2]|0,0)|0;f=fd(e|0,C|0,f|0,0)|0;e=C;i=fd(m>>>18|(l&k|j&i)<<8|0,0,c[b+52>>2]|0,0)|0;e=fd(i|0,C|0,e|0,0)|0;a[d>>0]=g;a[d+1>>0]=g>>>8;a[d+2>>0]=g>>>16;a[d+3>>0]=g>>>24;a[d+4>>0]=h;a[d+5>>0]=h>>>8;a[d+6>>0]=h>>>16;a[d+7>>0]=h>>>24;a[d+8>>0]=f;a[d+9>>0]=f>>>8;a[d+10>>0]=f>>>16;a[d+11>>0]=f>>>24;a[d+12>>0]=e;a[d+13>>0]=e>>>8;a[d+14>>0]=e>>>16;a[d+15>>0]=e>>>24;e=b+0|0;f=e+88|0;do{a[e>>0]=0;e=e+1|0}while((e|0)<(f|0));return}function Bb(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;s=(a[b+80>>0]|0)!=0?0:16777216;t=c[b+4>>2]|0;u=c[b+8>>2]|0;m=c[b+12>>2]|0;n=c[b+16>>2]|0;v=b+20|0;l=c[v>>2]|0;w=b+24|0;k=c[w>>2]|0;x=b+28|0;j=c[x>>2]|0;y=b+32|0;i=c[y>>2]|0;z=b+36|0;h=c[z>>2]|0;if(!(g>>>0>0|(g|0)==0&f>>>0>15)){q=l;r=k;s=j;t=i;u=h;c[v>>2]=q;c[w>>2]=r;c[x>>2]=s;c[y>>2]=t;c[z>>2]=u;return}o=n*5|0;p=m*5|0;q=u*5|0;r=t*5|0;b=c[b>>2]|0;while(1){J=d[e+3>>0]|0;B=(d[e+1>>0]<<8|d[e>>0]|d[e+2>>0]<<16|J<<24&50331648)+l|0;H=d[e+6>>0]|0;J=((d[e+4>>0]<<8|J|d[e+5>>0]<<16|H<<24)>>>2&67108863)+k|0;G=d[e+9>>0]|0;H=((d[e+7>>0]<<8|H|d[e+8>>0]<<16|G<<24)>>>4&67108863)+j|0;G=((d[e+10>>0]<<8|G|d[e+11>>0]<<16|d[e+12>>0]<<24)>>>6)+i|0;l=(d[e+13>>0]|s|d[e+14>>0]<<8|d[e+15>>0]<<16)+h|0;k=qd(B|0,0,b|0,0)|0;j=C;A=qd(J|0,0,o|0,0)|0;j=fd(A|0,C|0,k|0,j|0)|0;k=C;A=qd(H|0,0,p|0,0)|0;A=fd(j|0,k|0,A|0,C|0)|0;k=C;j=qd(G|0,0,q|0,0)|0;j=fd(A|0,k|0,j|0,C|0)|0;k=C;A=qd(l|0,0,r|0,0)|0;A=fd(j|0,k|0,A|0,C|0)|0;k=C;j=qd(B|0,0,t|0,0)|0;i=C;F=qd(J|0,0,b|0,0)|0;i=fd(F|0,C|0,j|0,i|0)|0;j=C;F=qd(H|0,0,o|0,0)|0;F=fd(i|0,j|0,F|0,C|0)|0;j=C;i=qd(G|0,0,p|0,0)|0;i=fd(F|0,j|0,i|0,C|0)|0;j=C;F=qd(l|0,0,q|0,0)|0;F=fd(i|0,j|0,F|0,C|0)|0;j=C;i=qd(B|0,0,u|0,0)|0;h=C;E=qd(J|0,0,t|0,0)|0;h=fd(E|0,C|0,i|0,h|0)|0;i=C;E=qd(H|0,0,b|0,0)|0;E=fd(h|0,i|0,E|0,C|0)|0;i=C;h=qd(G|0,0,o|0,0)|0;h=fd(E|0,i|0,h|0,C|0)|0;i=C;E=qd(l|0,0,p|0,0)|0;E=fd(h|0,i|0,E|0,C|0)|0;i=C;h=qd(B|0,0,m|0,0)|0;I=C;D=qd(J|0,0,u|0,0)|0;I=fd(D|0,C|0,h|0,I|0)|0;h=C;D=qd(H|0,0,t|0,0)|0;D=fd(I|0,h|0,D|0,C|0)|0;h=C;I=qd(G|0,0,b|0,0)|0;I=fd(D|0,h|0,I|0,C|0)|0;h=C;D=qd(l|0,0,o|0,0)|0;D=fd(I|0,h|0,D|0,C|0)|0;h=C;B=qd(B|0,0,n|0,0)|0;I=C;J=qd(J|0,0,m|0,0)|0;I=fd(J|0,C|0,B|0,I|0)|0;B=C;H=qd(H|0,0,u|0,0)|0;H=fd(I|0,B|0,H|0,C|0)|0;B=C;G=qd(G|0,0,t|0,0)|0;G=fd(H|0,B|0,G|0,C|0)|0;B=C;l=qd(l|0,0,b|0,0)|0;l=fd(G|0,B|0,l|0,C|0)|0;B=C;k=hd(A|0,k|0,26)|0;k=fd(F|0,j|0,k|0,0)|0;j=hd(k|0,C|0,26)|0;j=fd(E|0,i|0,j|0,0)|0;i=hd(j|0,C|0,26)|0;j=j&67108863;i=fd(D|0,h|0,i|0,0)|0;h=hd(i|0,C|0,26)|0;i=i&67108863;h=fd(l|0,B|0,h|0,0)|0;B=hd(h|0,C|0,26)|0;h=h&67108863;B=B*5|0;l=B+A&67108863;k=((B+(A&67108863)|0)>>>26)+(k&67108863)|0;f=fd(f|0,g|0,-16,-1)|0;g=C;if(!(g>>>0>0|(g|0)==0&f>>>0>15))break;else e=e+16|0}c[v>>2]=l;c[w>>2]=k;c[x>>2]=j;c[y>>2]=i;c[z>>2]=h;return}function Cb(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;M=i;K=i=i+63&-64;i=i+32|0;if((a[g>>0]|0)!=36){h=0;i=M;return h|0}if((a[g+1>>0]|0)!=55){h=0;i=M;return h|0}if((a[g+2>>0]|0)!=36){h=0;i=M;return h|0}s=a[g+3>>0]|0;n=s&255;a:do if(0){o=65;l=440;do{if((a[l>>0]|0)==s<<24>>24){k=o;j=l;J=8;break a}l=l+1|0;o=o+-1|0;m=(o|0)!=0}while((l&3|0)!=0&m);if(m){k=o;j=l;J=8}else{r=0;p=l}}else{k=65;j=440;J=8}while(0);b:do if((J|0)==8)if((a[j>>0]|0)!=s<<24>>24){o=_(n,16843009)|0;c:do if(k>>>0>3){r=k;p=j;do{A=c[p>>2]^o;if((A&-2139062144^-2139062144)&A+-16843009)break c;p=p+4|0;r=r+-4|0}while(r>>>0>3)}else{r=k;p=j}while(0);if(!r)r=0;else while(1){if((a[p>>0]|0)==s<<24>>24)break b;p=p+1|0;r=r+-1|0;if(!r){r=0;break}}}else{r=k;p=j}while(0);r=(r|0)!=0?p:0;if(!r){h=0;i=M;return h|0}y=id(1,0,r-440|0)|0;z=C;l=g+4|0;m=0;A=0;while(1){s=a[l>>0]|0;p=s&255;d:do if(0){r=65;n=440;do{if((a[n>>0]|0)==s<<24>>24){v=r;x=n;J=21;break d}n=n+1|0;r=r+-1|0;o=(r|0)!=0}while((n&3|0)!=0&o);if(o){v=r;x=n;J=21}else{u=0;t=n}}else{v=65;x=440;J=21}while(0);e:do if((J|0)==21){J=0;if((a[x>>0]|0)!=s<<24>>24){o=_(p,16843009)|0;f:do if(v>>>0>3){r=v;p=x;do{u=c[p>>2]^o;if((u&-2139062144^-2139062144)&u+-16843009)break f;p=p+4|0;r=r+-4|0}while(r>>>0>3)}else{r=v;p=x}while(0);if(!r){u=0;t=p}else while(1){if((a[p>>0]|0)==s<<24>>24){u=r;t=p;break e}p=p+1|0;r=r+-1|0;if(!r){u=0;t=p;break}}}else{u=v;t=x}}while(0);r=(u|0)!=0?t:0;if(!r){D=0;J=64;break}w=l+1|0;A=r-440<<m|A;m=m+6|0;if(m>>>0>=30)break;else l=w}if((J|0)==64){i=M;return D|0}if(!w){h=0;i=M;return h|0}else{k=w;s=l;l=0;j=0}while(1){m=a[k>>0]|0;p=m&255;g:do if(0){r=65;n=440;do{if((a[n>>0]|0)==m<<24>>24){E=r;F=n;J=35;break g}n=n+1|0;r=r+-1|0;o=(r|0)!=0}while((n&3|0)!=0&o);if(o){E=r;F=n;J=35}else{B=0;q=n}}else{E=65;F=440;J=35}while(0);h:do if((J|0)==35){J=0;if((a[F>>0]|0)!=m<<24>>24){p=_(p,16843009)|0;i:do if(E>>>0>3){r=E;q=F;do{B=c[q>>2]^p;if((B&-2139062144^-2139062144)&B+-16843009)break i;q=q+4|0;r=r+-4|0}while(r>>>0>3)}else{r=E;q=F}while(0);if(!r)B=0;else while(1){if((a[q>>0]|0)==m<<24>>24){B=r;break h}q=q+1|0;r=r+-1|0;if(!r){B=0;break}}}else{B=E;q=F}}while(0);r=(B|0)!=0?q:0;if(!r){D=0;J=64;break}H=s+2|0;j=r-440<<l|j;l=l+6|0;if(l>>>0>=30)break;else{s=k;k=H}}if((J|0)==64){i=M;return D|0}if(!H){h=0;i=M;return h|0}r=H;p=r-g|0;q=(jd(H|0)|0)+1|0;while(1){if(!q){J=50;break}G=s+(q+1)|0;if((a[G>>0]|0)==36){J=48;break}else q=q+-1|0}if((J|0)==48)if(!G)J=50;else I=G-r|0;if((J|0)==50)I=jd(H|0)|0;o=I+p|0;G=o+45|0;if(G>>>0>102|G>>>0<I>>>0){h=0;i=M;return h|0}if(Pb(b,e,f,H,I,y,z,A,j,K,32)|0){h=0;i=M;return h|0}kd(h|0,g|0,o|0)|0;a[h+o>>0]=36;r=h+(o+1)|0;p=101-o|0;q=0;j:while(1){l=q+1|0;l=q-(l>>>0<32?32:l)|0;l=l>>>0>4294967293?l:-3;k=0;j=q;q=q-l|0;m=0;while(1){g=j;j=j+1|0;m=d[K+g>>0]<<k|m;if((j|0)==(q|0))break;else k=k+8|0}o=_(l,-8)|0;if(!o)L=r;else{l=p;k=r;n=0;while(1){if(!l){J=61;break j}j=k+1|0;a[k>>0]=a[440+(m&63)>>0]|0;n=n+6|0;if(n>>>0>=o>>>0){L=j;break}else{m=m>>>6;l=l+-1|0;k=j}}}if(!L){J=61;break}p=r+p-L|0;if(q>>>0>=32)break;else r=L}if((J|0)==61){j=K+0|0;k=j+32|0;do{a[j>>0]=0;j=j+1|0}while((j|0)<(k|0));h=0;i=M;return h|0}j=K+0|0;k=j+32|0;do{a[j>>0]=0;j=j+1|0}while((j|0)<(k|0));if(L>>>0>=(h+102|0)>>>0){h=0;i=M;return h|0}a[L>>0]=0;i=M;return h|0}function Db(a,b,d,e,f,g,h,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0;m=i;n=i=i+63&-64;i=i+16|0;c[n+4>>2]=0;c[n>>2]=0;c[n+8>>2]=0;g=Pb(n,a,b,d,e,f,g,h,j,k,l)|0;f=c[n>>2]|0;if(!f){i=m;return g|0}ad(f);i=m;return g|0}function Eb(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;z=i;v=i=i+63&-64;i=i+560|0;t=v+488|0;y=v+456|0;u=v+208|0;w=v;x=v+448|0;v=v+416|0;m=u+36|0;if(d>>>0>64){c[m>>2]=0;p=u+32|0;c[p>>2]=0;c[u>>2]=1779033703;r=u+4|0;c[r>>2]=-1150833019;s=u+8|0;c[s>>2]=1013904242;l=u+12|0;c[l>>2]=-1521486534;k=u+16|0;c[k>>2]=1359893119;j=u+20|0;c[j>>2]=-1694144372;n=u+24|0;c[n>>2]=528734635;o=u+28|0;c[o>>2]=1541459225;rb(u,b,d,0);sb(u,y);b=y;d=32;q=u}else{l=u+12|0;k=u+16|0;j=u+20|0;n=u+24|0;o=u+28|0;p=u+32|0;q=u;r=u+4|0;s=u+8|0}c[m>>2]=0;c[p>>2]=0;c[q>>2]=1779033703;c[r>>2]=-1150833019;c[s>>2]=1013904242;c[l>>2]=-1521486534;c[k>>2]=1359893119;c[j>>2]=-1694144372;c[n>>2]=528734635;c[o>>2]=1541459225;m=t+0|0;l=m+64|0;do{a[m>>0]=54;m=m+1|0}while((m|0)<(l|0));k=(d|0)==0;a:do if(!k){l=54;m=0;while(1){a[t+m>>0]=l^a[b+m>>0];m=m+1|0;if((m|0)==(d|0))break a;l=a[t+m>>0]|0}}while(0);rb(u,t,64,0);j=u+104|0;c[u+140>>2]=0;c[u+136>>2]=0;c[j>>2]=1779033703;c[u+108>>2]=-1150833019;c[u+112>>2]=1013904242;c[u+116>>2]=-1521486534;c[u+120>>2]=1359893119;c[u+124>>2]=-1694144372;c[u+128>>2]=528734635;c[u+132>>2]=1541459225;m=t+0|0;l=m+64|0;do{a[m>>0]=92;m=m+1|0}while((m|0)<(l|0));b:do if(!k){l=92;m=0;while(1){a[t+m>>0]=l^a[b+m>>0];m=m+1|0;if((m|0)==(d|0))break b;l=a[t+m>>0]|0}}while(0);rb(j,t,64,0);rb(u,e,f,0);if(!h){i=z;return}j=x+3|0;k=x+2|0;l=x+1|0;m=w+104|0;d=0;b=0;do{b=b+1|0;a[j>>0]=b;a[k>>0]=b>>>8;a[l>>0]=b>>>16;a[x>>0]=b>>>24;kd(w|0,u|0,208)|0;rb(w,x,4,0);sb(w,y);rb(m,y,32,0);sb(m,v);f=h-d|0;kd(g+d|0,v|0,(f>>>0>32?32:f)|0)|0;d=b<<5}while(d>>>0<h>>>0);i=z;return}function Fb(){return 32}function Gb(){return 102}function Hb(){return 512}function Ib(){return 524288}function Jb(){return 16777216}function Kb(){return 33554432}function Lb(){return 1073741824}function Mb(a,b,d,e,f,g,h,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0;o=i;n=i=i+63&-64;i=i+16|0;gd(a|0,0,b|0)|0;m=g|d;if(m>>>0>0|(m|0)==0&(f|b)>>>0>4294967295){c[(pa()|0)>>2]=27;n=-1;i=o;return n|0}d=k>>>0<0|(k|0)==0&j>>>0<32768;m=d?32768:j;k=d?0:k;a:do if(k>>>0<0|(k|0)==0&m>>>0<l>>>5>>>0){k=hd(m|0,k|0,6)|0;g=C;d=1;while(1){m=id(1,0,d|0)|0;l=C;j=d+1|0;if(l>>>0>g>>>0|(l|0)==(g|0)&m>>>0>k>>>0){j=d;k=1;break a}if(j>>>0<63)d=j;else{k=1;break}}}else{d=l>>>11;g=1;while(1){l=id(1,0,g|0)|0;p=C;j=g+1|0;if(p>>>0>0|(p|0)==0&l>>>0>d>>>0){j=g;break}if(j>>>0<63)g=j;else break}k=hd(m|0,k|0,2)|0;k=hd(k|0,C|0,j|0)|0;p=C;k=p>>>0>0|(p|0)==0&k>>>0>1073741823?134217727:k>>>3}while(0);j=id(1,0,j|0)|0;c[n+4>>2]=0;c[n>>2]=0;c[n+8>>2]=0;j=Pb(n,e,f,h,32,j,C,8,k,a,b)|0;k=c[n>>2]|0;if(!k){p=j;i=o;return p|0}ad(k);p=j;i=o;return p|0}function Nb(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=i;s=i=i+63&-64;i=i+112|0;q=s+72|0;r=s+12|0;m=b+0|0;l=m+102|0;do{a[m>>0]=0;m=m+1|0}while((m|0)<(l|0));if(g>>>0>0|(g|0)==0&f>>>0>4294967295){c[(pa()|0)>>2]=27;s=-1;i=t;return s|0}l=j>>>0<0|(j|0)==0&h>>>0<32768;n=l?32768:h;l=l?0:j;a:do if(l>>>0<0|(l|0)==0&n>>>0<k>>>5>>>0){h=hd(n|0,l|0,6)|0;m=C;l=1;while(1){p=id(1,0,l|0)|0;o=C;g=l+1|0;if(o>>>0>m>>>0|(o|0)==(m|0)&p>>>0>h>>>0){g=l;k=1;break a}if(g>>>0<63)l=g;else{k=1;break}}}else{m=k>>>11;g=1;while(1){p=id(1,0,g|0)|0;o=C;h=g+1|0;if(o>>>0>0|(o|0)==0&p>>>0>m>>>0)break;if(h>>>0<63)g=h;else{g=h;break}}k=hd(n|0,l|0,2)|0;k=hd(k|0,C|0,g|0)|0;p=C;k=p>>>0>0|(p|0)==0&k>>>0>1073741823?134217727:k>>>3}while(0);h=0;do{a[q+h>>0]=na(32376)|0;h=h+1|0}while((h|0)!=32);b:do if(g>>>0<=63?(p=id(k|0,0,3)|0,o=C,!(o>>>0>0|(o|0)==0&p>>>0>1073741823)):0){a[r>>0]=36;a[r+1>>0]=55;a[r+2>>0]=36;a[r+3>>0]=a[440+g>>0]|0;h=r;g=8;l=r+4|0;m=0;while(1){j=l+1|0;a[l>>0]=a[440+(g&63)>>0]|0;m=m+6|0;if(m>>>0>=30)break;else{g=g>>>6;l=j}}if(j){o=h+58|0;n=o-j|0;m=j;g=l;h=0;while(1){if(!n)break b;j=g+2|0;a[m>>0]=a[440+(k&63)>>0]|0;h=h+6|0;if(h>>>0>=30)break;else{g=m;k=k>>>6;n=n+-1|0;m=j}}if(j){p=j;o=o-j|0;l=0;while(1){h=l+1|0;h=l-(h>>>0<32?32:h)|0;h=h>>>0>4294967293?h:-3;j=0;g=l;l=l-h|0;k=0;while(1){n=g;g=g+1|0;k=(d[q+n>>0]|0)<<j|k;if((g|0)==(l|0))break;else j=j+8|0}m=_(h,-8)|0;if(!m)g=p;else{n=o;j=p;h=0;while(1){if(!n)break b;g=j+1|0;a[j>>0]=a[440+(k&63)>>0]|0;h=h+6|0;if(h>>>0>=m>>>0)break;else{k=k>>>6;n=n+-1|0;j=g}}}if(!g)break b;o=p+o-g|0;if(l>>>0>=32)break;else p=g}if(g>>>0<(r+58|0)>>>0){a[g>>0]=0;h=s+4|0;c[h>>2]=0;c[s>>2]=0;g=s+8|0;c[g>>2]=0;l=(Cb(s,e,f,r,b)|0)==0;m=c[s>>2]|0;if(m)ad(m);c[h>>2]=0;c[s>>2]=0;c[g>>2]=0;if(!l){s=0;i=t;return s|0}c[(pa()|0)>>2]=22;s=-1;i=t;return s|0}}}}while(0);c[(pa()|0)>>2]=22;s=-1;i=t;return s|0}function Ob(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;m=i;k=i=i+63&-64;i=i+128|0;l=k+12|0;a:do if(b&3){h=102;f=b;do{if(!(a[f>>0]|0)){j=5;break a}f=f+1|0;h=h+-1|0;g=(h|0)!=0}while((f&3|0)!=0&g);if(g)j=5;else h=0}else{h=102;f=b;j=5}while(0);b:do if((j|0)==5)if(a[f>>0]|0){c:do if(h>>>0>3)do{j=c[f>>2]|0;if((j&-2139062144^-2139062144)&j+-16843009)break c;f=f+4|0;h=h+-4|0}while(h>>>0>3);while(0);if(!h)h=0;else while(1){if(!(a[f>>0]|0))break b;f=f+1|0;h=h+-1|0;if(!h){h=0;break}}}while(0);if((((h|0)!=0?f:0)|0)!=(b+101|0)){l=-1;i=m;return l|0}g=k+4|0;c[g>>2]=0;c[k>>2]=0;j=k+8|0;c[j>>2]=0;h=(Cb(k,d,e,b,l)|0)==0;f=c[k>>2]|0;if(f)ad(f);c[g>>2]=0;c[k>>2]=0;c[j>>2]=0;if(h){l=-1;i=m;return l|0}else{h=0;f=0}do{h=a[b+f>>0]^a[l+f>>0]|h;f=f+1|0}while((f|0)!=102);h=(((h&255)+511|0)>>>8&1)+-1|0;g=l+0|0;f=g+102|0;do{a[g>>0]=0;g=g+1|0}while((g|0)<(f|0));l=h;i=m;return l|0}function Pb(b,e,f,g,h,i,j,k,l,m,n){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;K=qd(l|0,0,k|0,0)|0;J=C;if(J>>>0>0|(J|0)==0&K>>>0>1073741823){c[(pa()|0)>>2]=27;f=-1;return f|0}I=fd(i|0,j|0,-1,-1)|0;J=C;if((I&i|0)!=0|(J&j|0)!=0|(j>>>0<0|(j|0)==0&i>>>0<2)){c[(pa()|0)>>2]=22;f=-1;return f|0}if((k|0)==0|(l|0)==0){c[(pa()|0)>>2]=22;f=-1;return f|0}if(!(k>>>0>16777215?1:(33554431/(l>>>0)|0)>>>0<k>>>0)?!(0<j>>>0|(0==(j|0)?(33554431/(k>>>0)|0)>>>0<i>>>0:0)):0){D=k<<7;K=_(D,l)|0;B=qd(D|0,0,i|0,j|0)|0;B=K+B|0;if(B>>>0<K>>>0){c[(pa()|0)>>2]=12;f=-1;return f|0}A=B+(k<<8|64)|0;if(A>>>0<B>>>0){c[(pa()|0)>>2]=12;f=-1;return f|0}z=b+8|0;a:do if((c[z>>2]|0)>>>0<A>>>0){o=c[b>>2]|0;if(o)ad(o);y=b+4|0;c[y>>2]=0;c[b>>2]=0;c[z>>2]=0;do if(A>>>0<=4294967168){if(A>>>0>=4294967168){c[(pa()|0)>>2]=12;break}w=A|8;o=$c(w+76|0)|0;if(o){r=o+-8|0;do if(o&63){s=o+63&-64;q=s+-8|0;t=r;u=(q-t|0)>>>0>15;p=u?-4:60;q=u?q:s+56|0;t=q-t|0;u=o+-4|0;H=c[u>>2]|0;v=(H&-8)-t|0;if(!(H&3)){c[q>>2]=(c[r>>2]|0)+t;c[s+p>>2]=v;break}else{H=s+p|0;c[H>>2]=v|c[H>>2]&1|2;H=s+(p+v)|0;c[H>>2]=c[H>>2]|1;c[u>>2]=t|c[u>>2]&1|2;H=o+(t+-4)|0;c[H>>2]=c[H>>2]|1;bd(r,t);break}}else q=r;while(0);o=q+4|0;p=c[o>>2]|0;if((p&3|0)!=0?(x=p&-8,x>>>0>(w+16|0)>>>0):0){H=x-w|0;c[o>>2]=w|p&1|2;c[q+(A|12)>>2]=H|3;G=q+(x|4)|0;c[G>>2]=c[G>>2]|1;bd(q+w|0,H)}o=q+8|0;c[(pa()|0)>>2]=0;c[b>>2]=o;c[y>>2]=o;c[z>>2]=(o|0)!=0?A:0;if(!o)o=-1;else break a;return o|0}}while(0);c[(pa()|0)>>2]=12;c[b>>2]=0;c[y>>2]=0;c[z>>2]=0;f=-1;return f|0}else o=c[b+4>>2]|0;while(0);H=o+K|0;G=o+B|0;Eb(e,f,g,h,o,K);z=k<<5;y=G+(z<<2)|0;t=G+(k<<6<<2)|0;s=(z|0)==0;r=(i|0)==0&(j|0)==0;E=z&1073741792;F=(E|0)==0;h=D+-64|0;D=G+h|0;h=y+h|0;g=h+4|0;B=D+4|0;b=0;do{A=_(b<<7,k)|0;if(!s){q=0;do{x=q<<2;c[G+(q<<2)>>2]=(d[o+((x|1)+A)>>0]|0)<<8|(d[o+(x+A)>>0]|0)|(d[o+((x|2)+A)>>0]|0)<<16|(d[o+((x|3)+A)>>0]|0)<<24;q=q+1|0}while((q|0)!=(z|0))}b:do if(!r){if(F){q=0;p=0;do{Qb(G,y,t,k);Qb(y,G,t,k);q=fd(q|0,p|0,2,0)|0;p=C}while(p>>>0<j>>>0|(p|0)==(j|0)&q>>>0<i>>>0)}else{x=0;w=0;do{v=qd(x|0,w|0,z|0,0)|0;u=0;do{c[H+(u+v<<2)>>2]=c[G+(u<<2)>>2];u=u+1|0}while((u|0)<(E|0));Qb(G,y,t,k);v=qd(x|1|0,w|0,z|0,0)|0;u=0;do{c[H+(u+v<<2)>>2]=c[G+(u+z<<2)>>2];u=u+1|0}while((u|0)<(E|0));Qb(y,G,t,k);x=fd(x|0,w|0,2,0)|0;w=C}while(w>>>0<j>>>0|(w|0)==(j|0)&x>>>0<i>>>0)}if(F){q=0;p=0;while(1){Qb(G,y,t,k);Qb(y,G,t,k);q=fd(q|0,p|0,2,0)|0;p=C;if(!(p>>>0<j>>>0|(p|0)==(j|0)&q>>>0<i>>>0))break b}}else{x=0;w=0}do{v=qd(c[D>>2]&I|0,c[B>>2]&J|0,z|0,0)|0;u=0;do{q=G+(u<<2)|0;c[q>>2]=c[q>>2]^c[H+(u+v<<2)>>2];u=u+1|0}while((u|0)<(E|0));Qb(G,y,t,k);v=qd(c[h>>2]&I|0,c[g>>2]&J|0,z|0,0)|0;u=0;do{q=G+(u+z<<2)|0;c[q>>2]=c[q>>2]^c[H+(u+v<<2)>>2];u=u+1|0}while((u|0)<(E|0));Qb(y,G,t,k);x=fd(x|0,w|0,2,0)|0;w=C}while(w>>>0<j>>>0|(w|0)==(j|0)&x>>>0<i>>>0)}while(0);if(!s){q=0;do{x=q<<2;w=c[G+(q<<2)>>2]|0;a[o+(x+A)>>0]=w;a[o+((x|1)+A)>>0]=w>>>8;a[o+((x|2)+A)>>0]=w>>>16;a[o+((x|3)+A)>>0]=w>>>24;q=q+1|0}while((q|0)!=(z|0))}b=b+1|0}while((b|0)!=(l|0));Eb(e,f,o,K,m,n);f=0;return f|0}c[(pa()|0)>>2]=12;f=-1;return f|0}function Qb(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;w=e<<1;m=e<<5;o=c[a+(m+-16<<2)>>2]|0;c[d>>2]=o;q=c[a+(m+-15<<2)>>2]|0;L=d+4|0;c[L>>2]=q;t=c[a+(m+-14<<2)>>2]|0;x=d+8|0;c[x>>2]=t;u=c[a+(m+-13<<2)>>2]|0;y=d+12|0;c[y>>2]=u;s=c[a+(m+-12<<2)>>2]|0;z=d+16|0;c[z>>2]=s;r=c[a+(m+-11<<2)>>2]|0;A=d+20|0;c[A>>2]=r;p=c[a+(m+-10<<2)>>2]|0;B=d+24|0;c[B>>2]=p;n=c[a+(m+-9<<2)>>2]|0;C=d+28|0;c[C>>2]=n;l=c[a+(m+-8<<2)>>2]|0;D=d+32|0;c[D>>2]=l;j=c[a+(m+-7<<2)>>2]|0;E=d+36|0;c[E>>2]=j;h=c[a+(m+-6<<2)>>2]|0;F=d+40|0;c[F>>2]=h;f=c[a+(m+-5<<2)>>2]|0;G=d+44|0;c[G>>2]=f;g=c[a+(m+-4<<2)>>2]|0;H=d+48|0;c[H>>2]=g;i=c[a+(m+-3<<2)>>2]|0;I=d+52|0;c[I>>2]=i;k=c[a+(m+-2<<2)>>2]|0;J=d+56|0;c[J>>2]=k;m=c[a+(m+-1<<2)>>2]|0;K=d+60|0;c[K>>2]=m;if(!w)return;v=e<<4;e=0;while(1){M=e<<4;c[d>>2]=o^c[a+(M<<2)>>2];c[L>>2]=q^c[a+((M|1)<<2)>>2];c[x>>2]=t^c[a+((M|2)<<2)>>2];c[y>>2]=u^c[a+((M|3)<<2)>>2];c[z>>2]=s^c[a+((M|4)<<2)>>2];c[A>>2]=r^c[a+((M|5)<<2)>>2];c[B>>2]=p^c[a+((M|6)<<2)>>2];c[C>>2]=n^c[a+((M|7)<<2)>>2];c[D>>2]=l^c[a+((M|8)<<2)>>2];c[E>>2]=j^c[a+((M|9)<<2)>>2];c[F>>2]=h^c[a+((M|10)<<2)>>2];c[G>>2]=f^c[a+((M|11)<<2)>>2];c[H>>2]=g^c[a+((M|12)<<2)>>2];c[I>>2]=i^c[a+((M|13)<<2)>>2];c[J>>2]=k^c[a+((M|14)<<2)>>2];c[K>>2]=m^c[a+((M|15)<<2)>>2];Rb(d);u=e<<3;c[b+(u<<2)>>2]=c[d>>2];c[b+((u|1)<<2)>>2]=c[L>>2];c[b+((u|2)<<2)>>2]=c[x>>2];c[b+((u|3)<<2)>>2]=c[y>>2];c[b+((u|4)<<2)>>2]=c[z>>2];c[b+((u|5)<<2)>>2]=c[A>>2];c[b+((u|6)<<2)>>2]=c[B>>2];c[b+((u|7)<<2)>>2]=c[C>>2];c[b+((u|8)<<2)>>2]=c[D>>2];c[b+((u|9)<<2)>>2]=c[E>>2];c[b+((u|10)<<2)>>2]=c[F>>2];c[b+((u|11)<<2)>>2]=c[G>>2];c[b+((u|12)<<2)>>2]=c[H>>2];c[b+((u|13)<<2)>>2]=c[I>>2];c[b+((u|14)<<2)>>2]=c[J>>2];c[b+((u|15)<<2)>>2]=c[K>>2];c[d>>2]=c[d>>2]^c[a+((M|16)<<2)>>2];c[L>>2]=c[L>>2]^c[a+((M|17)<<2)>>2];c[x>>2]=c[x>>2]^c[a+((M|18)<<2)>>2];c[y>>2]=c[y>>2]^c[a+((M|19)<<2)>>2];c[z>>2]=c[z>>2]^c[a+((M|20)<<2)>>2];c[A>>2]=c[A>>2]^c[a+((M|21)<<2)>>2];c[B>>2]=c[B>>2]^c[a+((M|22)<<2)>>2];c[C>>2]=c[C>>2]^c[a+((M|23)<<2)>>2];c[D>>2]=c[D>>2]^c[a+((M|24)<<2)>>2];c[E>>2]=c[E>>2]^c[a+((M|25)<<2)>>2];c[F>>2]=c[F>>2]^c[a+((M|26)<<2)>>2];c[G>>2]=c[G>>2]^c[a+((M|27)<<2)>>2];c[H>>2]=c[H>>2]^c[a+((M|28)<<2)>>2];c[I>>2]=c[I>>2]^c[a+((M|29)<<2)>>2];c[J>>2]=c[J>>2]^c[a+((M|30)<<2)>>2];c[K>>2]=c[K>>2]^c[a+((M|31)<<2)>>2];Rb(d);u=u+v|0;c[b+(u<<2)>>2]=c[d>>2];c[b+((u|1)<<2)>>2]=c[L>>2];c[b+((u|2)<<2)>>2]=c[x>>2];c[b+((u|3)<<2)>>2]=c[y>>2];c[b+((u|4)<<2)>>2]=c[z>>2];c[b+((u|5)<<2)>>2]=c[A>>2];c[b+((u|6)<<2)>>2]=c[B>>2];c[b+((u|7)<<2)>>2]=c[C>>2];c[b+((u|8)<<2)>>2]=c[D>>2];c[b+((u|9)<<2)>>2]=c[E>>2];c[b+((u|10)<<2)>>2]=c[F>>2];c[b+((u|11)<<2)>>2]=c[G>>2];c[b+((u|12)<<2)>>2]=c[H>>2];c[b+((u|13)<<2)>>2]=c[I>>2];c[b+((u|14)<<2)>>2]=c[J>>2];c[b+((u|15)<<2)>>2]=c[K>>2];e=e+2|0;if(e>>>0>=w>>>0)break;f=c[G>>2]|0;g=c[H>>2]|0;i=c[I>>2]|0;k=c[J>>2]|0;m=c[K>>2]|0;o=c[d>>2]|0;q=c[L>>2]|0;t=c[x>>2]|0;u=c[y>>2]|0;s=c[z>>2]|0;r=c[A>>2]|0;p=c[B>>2]|0;n=c[C>>2]|0;l=c[D>>2]|0;j=c[E>>2]|0;h=c[F>>2]|0}return}function Rb(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;b=a+4|0;z=a+8|0;A=a+12|0;B=a+16|0;F=a+20|0;f=a+24|0;k=a+28|0;n=a+32|0;s=a+36|0;t=a+40|0;u=a+44|0;v=a+48|0;w=a+52|0;x=a+56|0;y=a+60|0;d=c[b>>2]|0;e=c[F>>2]|0;g=c[s>>2]|0;h=c[w>>2]|0;i=c[f>>2]|0;j=c[t>>2]|0;l=c[x>>2]|0;m=c[z>>2]|0;o=c[u>>2]|0;p=c[y>>2]|0;q=c[A>>2]|0;r=c[k>>2]|0;C=c[v>>2]|0;D=c[a>>2]|0;E=c[B>>2]|0;G=c[n>>2]|0;H=0;do{R=C+D|0;R=(R<<7|R>>>25)^E;O=R+D|0;O=(O<<9|O>>>23)^G;L=O+R|0;L=(L<<13|L>>>19)^C;U=L+O|0;U=(U<<18|U>>>14)^D;N=d+e|0;N=(N<<7|N>>>25)^g;K=N+e|0;K=(K<<9|K>>>23)^h;X=K+N|0;X=(X<<13|X>>>19)^d;Q=X+K|0;Q=(Q<<18|Q>>>14)^e;J=i+j|0;J=(J<<7|J>>>25)^l;W=J+j|0;W=(W<<9|W>>>23)^m;T=W+J|0;T=(T<<13|T>>>19)^i;M=T+W|0;M=(M<<18|M>>>14)^j;V=o+p|0;V=(V<<7|V>>>25)^q;S=V+p|0;S=(S<<9|S>>>23)^r;P=S+V|0;P=(P<<13|P>>>19)^o;I=P+S|0;I=(I<<18|I>>>14)^p;Y=V+U|0;d=(Y<<7|Y>>>25)^X;X=d+U|0;m=(X<<9|X>>>23)^W;W=m+d|0;q=(W<<13|W>>>19)^V;V=q+m|0;D=(V<<18|V>>>14)^U;U=R+Q|0;i=(U<<7|U>>>25)^T;T=i+Q|0;r=(T<<9|T>>>23)^S;S=r+i|0;E=(S<<13|S>>>19)^R;R=E+r|0;e=(R<<18|R>>>14)^Q;Q=N+M|0;o=(Q<<7|Q>>>25)^P;P=o+M|0;G=(P<<9|P>>>23)^O;O=G+o|0;g=(O<<13|O>>>19)^N;N=g+G|0;j=(N<<18|N>>>14)^M;M=J+I|0;C=(M<<7|M>>>25)^L;L=C+I|0;h=(L<<9|L>>>23)^K;K=h+C|0;l=(K<<13|K>>>19)^J;J=l+h|0;p=(J<<18|J>>>14)^I;H=H+2|0}while(H>>>0<8);c[a>>2]=(c[a>>2]|0)+D;c[b>>2]=(c[b>>2]|0)+d;c[z>>2]=(c[z>>2]|0)+m;c[A>>2]=(c[A>>2]|0)+q;c[B>>2]=(c[B>>2]|0)+E;c[F>>2]=(c[F>>2]|0)+e;c[f>>2]=(c[f>>2]|0)+i;c[k>>2]=(c[k>>2]|0)+r;c[n>>2]=(c[n>>2]|0)+G;c[s>>2]=(c[s>>2]|0)+g;c[t>>2]=(c[t>>2]|0)+j;c[u>>2]=(c[u>>2]|0)+o;c[v>>2]=(c[v>>2]|0)+C;c[w>>2]=(c[w>>2]|0)+h;c[x>>2]=(c[x>>2]|0)+l;c[y>>2]=(c[y>>2]|0)+p;return}function Sb(){return 32}function Tb(){return 32}function Ub(a,b){a=a|0;b=b|0;Yc(a,b,33016);return 0}function Vb(a,b,c){a=a|0;b=b|0;c=c|0;Yc(a,b,c);return 0}function Wb(){return 32}function Xb(){return 24}function Yb(){return 16}function Zb(b,c,d,e,f,g,h){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;q=i=i+63&-64;i=i+240|0;p=q;o=q+176|0;q=q+144|0;bb(q,g,h,520);h=b;j=d;if(b>>>0>=d>>>0?0<f>>>0|0==(f|0)&(h-j|0)>>>0<e>>>0:0)k=5;else if(d>>>0>=b>>>0?0<f>>>0|0==(f|0)&(j-h|0)>>>0<e>>>0:0)k=5;if((k|0)==5){ld(b|0,d|0,e|0)|0;d=b}j=o+0|0;h=j+32|0;do{a[j>>0]=0;j=j+1|0}while((j|0)<(h|0));l=f>>>0>0|(f|0)==0&e>>>0>32;m=l?32:e;n=l?0:f;j=o+32|0;if(!((m|0)==0&(n|0)==0)){k=fd(e|0,f|0,-1,0)|0;kd(j|0,d|0,(f>>>0<0|(f|0)==0&e>>>0<32?k+1|0:32)|0)|0}h=fd(m|0,n|0,32,0)|0;k=g+16|0;Zc(o,o,h,C,k,0,0,q);yb(p,o);kd(b|0,j|0,m|0)|0;j=o+0|0;h=j+64|0;do{a[j>>0]=0;j=j+1|0}while((j|0)<(h|0));if(!l){zb(p,b,e,f);Ab(p,c);i=r;return 0}o=ed(e|0,f|0,m|0,n|0)|0;Zc(b+m|0,d+m|0,o,C,k,1,0,q);zb(p,b,e,f);Ab(p,c);i=r;return 0}function _b(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0>0|(d|0)==0&c>>>0>4294967279){e=-1;return e|0}Zb(a+16|0,a,b,c,d,e,f)|0;e=0;return e|0}function $b(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=i;s=i=i+63&-64;i=i+288|0;n=s+16|0;o=s;l=s+256|0;r=s+192|0;s=s+160|0;bb(s,j,k,520);q=j+16|0;k=l+0|0;j=s+0|0;m=k+32|0;do{a[k>>0]=a[j>>0]|0;k=k+1|0;j=j+1|0}while((k|0)<(m|0));k=q;m=k;k=k+4|0;k=d[k>>0]|d[k+1>>0]<<8|d[k+2>>0]<<16|d[k+3>>0]<<24;j=o;c[j>>2]=d[m>>0]|d[m+1>>0]<<8|d[m+2>>0]<<16|d[m+3>>0]<<24;c[j+4>>2]=k;j=o+8|0;k=j;c[k>>2]=0;c[k+4>>2]=0;cb(n,o,l,33048);k=0;do{a[r+k>>0]=a[n+k>>0]|0;k=k+1|0}while((k|0)!=32);yb(n,r);zb(n,e,g,h);Ab(n,o);m=c[o>>2]|0;k=c[o+4>>2]|0;n=c[j>>2]|0;o=c[o+12>>2]|0;if(!((((m&65535)>>>8&255^a[f+1>>0]|m&255^a[f>>0]|m>>>16&255^a[f+2>>0]|m>>>24&255^a[f+3>>0]|k&255^a[f+4>>0]|(k&65535)>>>8&255^a[f+5>>0]|k>>>16&255^a[f+6>>0]|k>>>24&255^a[f+7>>0]|n&255^a[f+8>>0]|(n&65535)>>>8&255^a[f+9>>0]|n>>>16&255^a[f+10>>0]|n>>>24&255^a[f+11>>0]|o&255^a[f+12>>0]|(o&65535)>>>8&255^a[f+13>>0]|o>>>16&255^a[f+14>>0]|o>>>24&255^a[f+15>>0])&255)+511&256)){k=s+0|0;m=k+32|0;do{a[k>>0]=0;k=k+1|0}while((k|0)<(m|0));s=-1;i=t;return s|0}l=e;m=b;if(e>>>0>=b>>>0?0<h>>>0|0==(h|0)&(l-m|0)>>>0<g>>>0:0)p=9;else if(b>>>0>=e>>>0?0<h>>>0|0==(h|0)&(m-l|0)>>>0<g>>>0:0)p=9;if((p|0)==9){ld(b|0,e|0,g|0)|0;e=b}m=h>>>0>0|(h|0)==0&g>>>0>32;l=m?32:g;j=m?0:h;k=r+32|0;kd(k|0,e|0,l|0)|0;p=fd(l|0,j|0,32,0)|0;Zc(r,r,p,C,q,0,0,s);if(!((l|0)==0&(j|0)==0)){r=fd(g|0,h|0,-1,0)|0;kd(b|0,k|0,(h>>>0<0|(h|0)==0&g>>>0<32?r+1|0:32)|0)|0}if(m){r=ed(g|0,h|0,l|0,j|0)|0;Zc(b+l|0,e+l|0,r,C,q,1,0,s)}k=s+0|0;m=k+32|0;do{a[k>>0]=0;k=k+1|0}while((k|0)<(m|0));s=0;i=t;return s|0}function ac(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0<0|(d|0)==0&c>>>0<16){e=-1;return e|0}d=fd(c|0,d|0,-16,-1)|0;e=$b(a,b+16|0,b,d,C,e,f)|0;return e|0}function bc(){return 8}function cc(){return 16}function dc(b,c,e,f,g){b=b|0;c=c|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;h=d[g>>0]|0;o=id(d[g+1>>0]|0|0,0,8)|0;n=C;j=id(d[g+2>>0]|0|0,0,16)|0;n=n|C;k=id(d[g+3>>0]|0|0,0,24)|0;n=n|C|(d[g+4>>0]|0);r=id(d[g+5>>0]|0|0,0,40)|0;n=n|C;i=id(d[g+6>>0]|0|0,0,48)|0;n=n|C;l=id(d[g+7>>0]|0|0,0,56)|0;l=o|h|j|k|r|i|l;n=n|C;i=d[g+8>>0]|0;r=id(d[g+9>>0]|0|0,0,8)|0;k=C;j=id(d[g+10>>0]|0|0,0,16)|0;k=k|C;h=id(d[g+11>>0]|0|0,0,24)|0;k=k|C|(d[g+12>>0]|0);o=id(d[g+13>>0]|0|0,0,40)|0;k=k|C;p=id(d[g+14>>0]|0|0,0,48)|0;k=k|C;m=id(d[g+15>>0]|0|0,0,56)|0;m=r|i|j|h|o|p|m;k=k|C;p=e&7;o=c+(e-p)|0;e=id(e|0,f|0,56)|0;f=C;h=m^2037671283;j=k^1952801890;i=l^1852142177;g=n^1819895653;m=m^1852075885;k=k^1685025377;l=l^1886610805;n=n^1936682341;if((o|0)!=(c|0)){do{x=d[c>>0]|0;y=id(d[c+1>>0]|0|0,0,8)|0;r=C;w=id(d[c+2>>0]|0|0,0,16)|0;r=r|C;t=id(d[c+3>>0]|0|0,0,24)|0;r=r|C|(d[c+4>>0]|0);u=id(d[c+5>>0]|0|0,0,40)|0;r=r|C;v=id(d[c+6>>0]|0|0,0,48)|0;r=r|C;s=id(d[c+7>>0]|0|0,0,56)|0;s=y|x|w|t|u|v|s;r=r|C;v=s^h;u=r^j;n=fd(l|0,n|0,m|0,k|0)|0;l=C;t=id(m|0,k|0,13)|0;h=C;m=hd(m|0,k|0,51)|0;m=(t|m)^n;h=(h|C)^l;g=fd(v|0,u|0,i|0,g|0)|0;i=C;t=id(v|0,u|0,16)|0;j=C;u=hd(v|0,u|0,48)|0;u=(t|u)^g;j=(j|C)^i;n=fd(u|0,j|0,l|0,n|0)|0;l=C;t=id(u|0,j|0,21)|0;k=C;j=hd(u|0,j|0,43)|0;j=(t|j)^n;k=(k|C)^l;i=fd(g|0,i|0,m|0,h|0)|0;g=C;t=id(m|0,h|0,17)|0;u=C;h=hd(m|0,h|0,47)|0;h=i^(t|h);u=g^(u|C);l=fd(n|0,l|0,h|0,u|0)|0;n=C;t=id(h|0,u|0,13)|0;m=C;u=hd(h|0,u|0,51)|0;u=(t|u)^l;m=(m|C)^n;i=fd(j|0,k|0,g|0,i|0)|0;g=C;t=id(j|0,k|0,16)|0;h=C;k=hd(j|0,k|0,48)|0;k=(t|k)^i;h=(h|C)^g;l=fd(k|0,h|0,n|0,l|0)|0;n=C;t=id(k|0,h|0,21)|0;j=C;h=hd(k|0,h|0,43)|0;h=(t|h)^l;j=(j|C)^n;g=fd(i|0,g|0,u|0,m|0)|0;i=C;t=id(u|0,m|0,17)|0;k=C;m=hd(u|0,m|0,47)|0;m=(t|m)^g;k=(k|C)^i;l=l^s;n=n^r;c=c+8|0}while((c|0)!=(o|0));c=o}switch(p|0){case 3:{q=8;break}case 2:{q=9;break}case 1:{q=10;break}case 7:{e=id(d[c+6>>0]|0|0,0,48)|0|e;f=C|f;q=5;break}case 6:{q=5;break}case 5:{q=6;break}case 4:{q=7;break}default:{}}if((q|0)==5){y=id(d[c+5>>0]|0|0,0,40)|0;f=C|f;e=y|e;q=6}if((q|0)==6){f=d[c+4>>0]|0|f;q=7}if((q|0)==7){y=id(d[c+3>>0]|0|0,0,24)|0;e=y|e;f=C|f;q=8}if((q|0)==8){y=id(d[c+2>>0]|0|0,0,16)|0;e=y|e;f=C|f;q=9}if((q|0)==9){y=id(d[c+1>>0]|0|0,0,8)|0;e=y|e;f=C|f;q=10}if((q|0)==10)e=d[c>>0]|0|e;y=e^h;r=f^j;s=fd(l|0,n|0,m|0,k|0)|0;q=C;w=id(m|0,k|0,13)|0;t=C;x=hd(m|0,k|0,51)|0;x=(w|x)^s;t=(t|C)^q;w=fd(y|0,r|0,i|0,g|0)|0;v=C;u=id(y|0,r|0,16)|0;p=C;r=hd(y|0,r|0,48)|0;r=(u|r)^w;p=(p|C)^v;s=fd(r|0,p|0,q|0,s|0)|0;q=C;u=id(r|0,p|0,21)|0;y=C;p=hd(r|0,p|0,43)|0;p=(u|p)^s;y=(y|C)^q;v=fd(w|0,v|0,x|0,t|0)|0;w=C;u=id(x|0,t|0,17)|0;r=C;t=hd(x|0,t|0,47)|0;t=v^(u|t);r=w^(r|C);q=fd(s|0,q|0,t|0,r|0)|0;s=C;u=id(t|0,r|0,13)|0;x=C;r=hd(t|0,r|0,51)|0;r=(u|r)^q;x=(x|C)^s;v=fd(p|0,y|0,w|0,v|0)|0;w=C;u=id(p|0,y|0,16)|0;t=C;y=hd(p|0,y|0,48)|0;y=(u|y)^v;t=(t|C)^w;q=fd(y|0,t|0,s|0,q|0)|0;s=C;u=id(y|0,t|0,21)|0;p=C;t=hd(y|0,t|0,43)|0;t=(u|t)^q;p=(p|C)^s;w=fd(v|0,w|0,r|0,x|0)|0;v=C;u=id(r|0,x|0,17)|0;y=C;x=hd(r|0,x|0,47)|0;x=(u|x)^w;y=(y|C)^v;s=fd(q^e|0,s^f|0,x|0,y|0)|0;q=C;u=id(x|0,y|0,13)|0;r=C;y=hd(x|0,y|0,51)|0;y=s^(u|y);r=q^(r|C);w=fd(t|0,p|0,v^255|0,w|0)|0;v=C;u=id(t|0,p|0,16)|0;x=C;p=hd(t|0,p|0,48)|0;p=(u|p)^w;x=(x|C)^v;s=fd(p|0,x|0,q|0,s|0)|0;q=C;u=id(p|0,x|0,21)|0;t=C;x=hd(p|0,x|0,43)|0;x=(u|x)^s;t=(t|C)^q;v=fd(w|0,v|0,y|0,r|0)|0;w=C;u=id(y|0,r|0,17)|0;p=C;r=hd(y|0,r|0,47)|0;r=(u|r)^v;p=(p|C)^w;q=fd(s|0,q|0,r|0,p|0)|0;s=C;u=id(r|0,p|0,13)|0;y=C;p=hd(r|0,p|0,51)|0;p=(u|p)^q;y=(y|C)^s;v=fd(x|0,t|0,w|0,v|0)|0;w=C;u=id(x|0,t|0,16)|0;r=C;t=hd(x|0,t|0,48)|0;t=(u|t)^v;r=(r|C)^w;q=fd(t|0,r|0,s|0,q|0)|0;s=C;u=id(t|0,r|0,21)|0;x=C;r=hd(t|0,r|0,43)|0;r=(u|r)^q;x=(x|C)^s;w=fd(v|0,w|0,p|0,y|0)|0;v=C;u=id(p|0,y|0,17)|0;t=C;y=hd(p|0,y|0,47)|0;y=(u|y)^w;t=(t|C)^v;s=fd(q|0,s|0,y|0,t|0)|0;q=C;u=id(y|0,t|0,13)|0;p=C;t=hd(y|0,t|0,51)|0;t=(u|t)^s;p=(p|C)^q;w=fd(r|0,x|0,v|0,w|0)|0;v=C;u=id(r|0,x|0,16)|0;y=C;x=hd(r|0,x|0,48)|0;x=(u|x)^w;y=(y|C)^v;s=fd(x|0,y|0,q|0,s|0)|0;q=C;u=id(x|0,y|0,21)|0;r=C;y=hd(x|0,y|0,43)|0;y=(u|y)^s;r=(r|C)^q;v=fd(w|0,v|0,t|0,p|0)|0;w=C;u=id(t|0,p|0,17)|0;x=C;p=hd(t|0,p|0,47)|0;p=(u|p)^v;x=(x|C)^w;q=fd(s|0,q|0,p|0,x|0)|0;s=C;u=id(p|0,x|0,13)|0;t=C;x=hd(p|0,x|0,51)|0;q=(u|x)^q;s=(t|C)^s;v=fd(y|0,r|0,w|0,v|0)|0;w=C;t=id(y|0,r|0,16)|0;x=C;r=hd(y|0,r|0,48)|0;r=(t|r)^v;x=(x|C)^w;t=id(r|0,x|0,21)|0;y=C;x=hd(r|0,x|0,43)|0;y=y|C;w=fd(v|0,w|0,q|0,s|0)|0;v=C;r=id(q|0,s|0,17)|0;u=C;s=hd(q|0,s|0,47)|0;x=(r|s)^w^v^(t|x);y=(u|C)^v^w^y;a[b>>0]=x;a[b+1>>0]=x>>>8;a[b+2>>0]=x>>>16;a[b+3>>0]=x>>>24;a[b+4>>0]=y;w=hd(x|0,y|0,40)|0;a[b+5>>0]=w;w=hd(x|0,y|0,48)|0;a[b+6>>0]=w;y=hd(x|0,y|0,56)|0;a[b+7>>0]=y;return 0}function ec(){return 64}function fc(){return 32}function gc(){return 32}function hc(){return 64}function ic(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;n=i;g=i=i+63&-64;i=i+496|0;j=g;h=g+448|0;k=g+408|0;l=g+368|0;g=g+208|0;m=j;c[m>>2]=-205731576;c[m+4>>2]=1779033703;m=j+8|0;c[m>>2]=-2067093701;c[m+4>>2]=-1150833019;m=j+16|0;c[m>>2]=-23791573;c[m+4>>2]=1013904242;m=j+24|0;c[m>>2]=1595750129;c[m+4>>2]=-1521486534;m=j+32|0;c[m>>2]=-1377402159;c[m+4>>2]=1359893119;m=j+40|0;c[m>>2]=725511199;c[m+4>>2]=-1694144372;m=j+48|0;c[m>>2]=-79577749;c[m+4>>2]=528734635;m=j+56|0;c[m>>2]=327033209;c[m+4>>2]=1541459225;m=j+72|0;c[m>>2]=256;c[m+4>>2]=0;m=j+64|0;c[m>>2]=0;c[m+4>>2]=0;m=j+80|0;o=f+0|0;p=m+32|0;do{a[m>>0]=a[o>>0]|0;m=m+1|0;o=o+1|0}while((m|0)<(p|0));vb(j,e);a[e>>0]=(d[e>>0]|0)&248;p=e+31|0;a[p>>0]=(d[p>>0]|0)&63|64;xc(g,e);oc(h,g+80|0);pc(k,g,h);pc(l,g+40|0,h);rc(b,l);rc(j,k);p=b+31|0;a[p>>0]=(d[p>>0]|0)^(d[j>>0]|0)<<7;ld(e|0,f|0,32)|0;ld(e+32|0,b|0,32)|0;i=n;return 0}function jc(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=i;m=i=i+63&-64;i=i+528|0;l=m;k=m+448|0;n=m+408|0;o=m+368|0;j=m+208|0;m=m+488|0;f=0;do{a[m+f>>0]=na(32376)|0;f=f+1|0}while((f|0)!=32);f=l;c[f>>2]=-205731576;c[f+4>>2]=1779033703;f=l+8|0;c[f>>2]=-2067093701;c[f+4>>2]=-1150833019;f=l+16|0;c[f>>2]=-23791573;c[f+4>>2]=1013904242;f=l+24|0;c[f>>2]=1595750129;c[f+4>>2]=-1521486534;f=l+32|0;c[f>>2]=-1377402159;c[f+4>>2]=1359893119;f=l+40|0;c[f>>2]=725511199;c[f+4>>2]=-1694144372;f=l+48|0;c[f>>2]=-79577749;c[f+4>>2]=528734635;f=l+56|0;c[f>>2]=327033209;c[f+4>>2]=1541459225;f=l+72|0;c[f>>2]=256;c[f+4>>2]=0;f=l+64|0;c[f>>2]=0;c[f+4>>2]=0;f=l+80|0;g=m+0|0;h=f+32|0;do{a[f>>0]=a[g>>0]|0;f=f+1|0;g=g+1|0}while((f|0)<(h|0));vb(l,e);a[e>>0]=(d[e>>0]|0)&248;f=e+31|0;a[f>>0]=(d[f>>0]|0)&63|64;xc(j,e);oc(k,j+80|0);pc(n,j,k);pc(o,j+40|0,k);rc(b,o);rc(l,n);f=b+31|0;a[f>>0]=(d[f>>0]|0)^(d[l>>0]|0)<<7;f=e+0|0;g=m+0|0;h=f+32|0;do{a[f>>0]=a[g>>0]|0;f=f+1|0;g=g+1|0}while((f|0)<(h|0));ld(e+32|0,b|0,32)|0;i=p;return 0}function kc(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;j=i=i+63&-64;i=i+16|0;k=a+64|0;ld(k|0,d|0,e|0)|0;Dc(a,j,k,e,f,g);g=j;d=(b|0)!=0;if((c[g>>2]|0)==64&(c[g+4>>2]|0)==0){if(!d){k=0;i=h;return k|0}j=fd(e|0,f|0,64,0)|0;k=b;c[k>>2]=j;c[k+4>>2]=C;k=0;i=h;return k|0}else{if(d){k=b;c[k>>2]=0;c[k+4>>2]=0}k=fd(e|0,f|0,64,0)|0;gd(a|0,0,k|0)|0;k=-1;i=h;return k|0}return 0}function lc(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;f=fd(e|0,f|0,-64,-1)|0;e=C;do if(!(e>>>0>0|(e|0)==0&f>>>0>4294967231)){h=d+64|0;if(Bc(d,h,f,e,g)|0){gd(a|0,0,f|0)|0;break}if(b){d=b;c[d>>2]=f;c[d+4>>2]=e}ld(a|0,h|0,f|0)|0;d=0;return d|0}while(0);if(!b){d=-1;return d|0}d=b;c[d>>2]=0;c[d+4>>2]=0;d=-1;return d|0}function mc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Dc(a,b,c,d,e,f);return 0}function nc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Bc(a,b,c,d,e)|0}function oc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0;g=i;c=i=i+63&-64;i=i+160|0;d=c+120|0;e=c+80|0;f=c+40|0;qc(d,b);qc(e,d);qc(e,e);pc(e,b,e);pc(d,d,e);qc(f,d);pc(e,e,f);qc(f,e);qc(f,f);qc(f,f);qc(f,f);qc(f,f);pc(e,f,e);qc(f,e);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);pc(f,f,e);qc(c,f);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);qc(c,c);pc(f,c,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);qc(f,f);pc(e,f,e);qc(f,e);b=1;do{qc(f,f);b=b+1|0}while((b|0)!=50);pc(f,f,e);qc(c,f);b=1;do{qc(c,c);b=b+1|0}while((b|0)!=100);pc(f,c,f);qc(f,f);b=1;do{qc(f,f);b=b+1|0}while((b|0)!=50);pc(e,f,e);qc(e,e);qc(e,e);qc(e,e);qc(e,e);qc(e,e);pc(a,e,d);i=g;return}function pc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0;l=c[b>>2]|0;s=c[b+4>>2]|0;j=c[b+8>>2]|0;Rb=c[b+12>>2]|0;e=c[b+16>>2]|0;za=c[b+20>>2]|0;ya=c[b+24>>2]|0;zb=c[b+28>>2]|0;h=c[b+32>>2]|0;ga=c[b+36>>2]|0;H=c[d>>2]|0;J=c[d+4>>2]|0;F=c[d+8>>2]|0;D=c[d+12>>2]|0;A=c[d+16>>2]|0;y=c[d+20>>2]|0;w=c[d+24>>2]|0;u=c[d+28>>2]|0;k=c[d+32>>2]|0;t=c[d+36>>2]|0;Oc=J*19|0;bc=F*19|0;rb=D*19|0;Ha=A*19|0;jc=y*19|0;Db=w*19|0;Ta=u*19|0;Sc=k*19|0;Qc=t*19|0;p=s<<1;f=Rb<<1;M=za<<1;i=zb<<1;d=ga<<1;o=((l|0)<0)<<31>>31;I=((H|0)<0)<<31>>31;Mc=qd(H|0,I|0,l|0,o|0)|0;Lc=C;K=((J|0)<0)<<31>>31;wc=qd(J|0,K|0,l|0,o|0)|0;vc=C;G=((F|0)<0)<<31>>31;ub=qd(F|0,G|0,l|0,o|0)|0;tb=C;E=((D|0)<0)<<31>>31;Ka=qd(D|0,E|0,l|0,o|0)|0;Ja=C;B=((A|0)<0)<<31>>31;mc=qd(A|0,B|0,l|0,o|0)|0;lc=C;z=((y|0)<0)<<31>>31;Gb=qd(y|0,z|0,l|0,o|0)|0;Fb=C;x=((w|0)<0)<<31>>31;Wa=qd(w|0,x|0,l|0,o|0)|0;Va=C;v=((u|0)<0)<<31>>31;ja=qd(u|0,v|0,l|0,o|0)|0;ia=C;Pc=((k|0)<0)<<31>>31;P=qd(k|0,Pc|0,l|0,o|0)|0;O=C;o=qd(t|0,((t|0)<0)<<31>>31|0,l|0,o|0)|0;l=C;t=((s|0)<0)<<31>>31;dc=qd(H|0,I|0,s|0,t|0)|0;ec=C;n=((p|0)<0)<<31>>31;yb=qd(J|0,K|0,p|0,n|0)|0;xb=C;Ma=qd(F|0,G|0,s|0,t|0)|0;La=C;oc=qd(D|0,E|0,p|0,n|0)|0;nc=C;Ib=qd(A|0,B|0,s|0,t|0)|0;Hb=C;Ya=qd(y|0,z|0,p|0,n|0)|0;Xa=C;la=qd(w|0,x|0,s|0,t|0)|0;ka=C;R=qd(u|0,v|0,p|0,n|0)|0;Q=C;t=qd(k|0,Pc|0,s|0,t|0)|0;s=C;Pc=((Qc|0)<0)<<31>>31;n=qd(Qc|0,Pc|0,p|0,n|0)|0;p=C;k=((j|0)<0)<<31>>31;wb=qd(H|0,I|0,j|0,k|0)|0;vb=C;Qa=qd(J|0,K|0,j|0,k|0)|0;Pa=C;qc=qd(F|0,G|0,j|0,k|0)|0;pc=C;Kb=qd(D|0,E|0,j|0,k|0)|0;Jb=C;_a=qd(A|0,B|0,j|0,k|0)|0;Za=C;na=qd(y|0,z|0,j|0,k|0)|0;ma=C;T=qd(w|0,x|0,j|0,k|0)|0;S=C;v=qd(u|0,v|0,j|0,k|0)|0;u=C;Rc=((Sc|0)<0)<<31>>31;yc=qd(Sc|0,Rc|0,j|0,k|0)|0;xc=C;k=qd(Qc|0,Pc|0,j|0,k|0)|0;j=C;Sb=((Rb|0)<0)<<31>>31;Oa=qd(H|0,I|0,Rb|0,Sb|0)|0;Na=C;fa=((f|0)<0)<<31>>31;uc=qd(J|0,K|0,f|0,fa|0)|0;tc=C;Mb=qd(F|0,G|0,Rb|0,Sb|0)|0;Lb=C;ab=qd(D|0,E|0,f|0,fa|0)|0;$a=C;pa=qd(A|0,B|0,Rb|0,Sb|0)|0;oa=C;V=qd(y|0,z|0,f|0,fa|0)|0;U=C;x=qd(w|0,x|0,Rb|0,Sb|0)|0;w=C;Ua=((Ta|0)<0)<<31>>31;Ac=qd(Ta|0,Ua|0,f|0,fa|0)|0;zc=C;Sb=qd(Sc|0,Rc|0,Rb|0,Sb|0)|0;Rb=C;fa=qd(Qc|0,Pc|0,f|0,fa|0)|0;f=C;N=((e|0)<0)<<31>>31;sc=qd(H|0,I|0,e|0,N|0)|0;rc=C;Qb=qd(J|0,K|0,e|0,N|0)|0;Pb=C;cb=qd(F|0,G|0,e|0,N|0)|0;bb=C;ra=qd(D|0,E|0,e|0,N|0)|0;qa=C;X=qd(A|0,B|0,e|0,N|0)|0;W=C;z=qd(y|0,z|0,e|0,N|0)|0;y=C;Eb=((Db|0)<0)<<31>>31;Cc=qd(Db|0,Eb|0,e|0,N|0)|0;Bc=C;Ub=qd(Ta|0,Ua|0,e|0,N|0)|0;Tb=C;ib=qd(Sc|0,Rc|0,e|0,N|0)|0;hb=C;N=qd(Qc|0,Pc|0,e|0,N|0)|0;e=C;Aa=((za|0)<0)<<31>>31;Ob=qd(H|0,I|0,za|0,Aa|0)|0;Nb=C;b=((M|0)<0)<<31>>31;gb=qd(J|0,K|0,M|0,b|0)|0;fb=C;ta=qd(F|0,G|0,za|0,Aa|0)|0;sa=C;Z=qd(D|0,E|0,M|0,b|0)|0;Y=C;B=qd(A|0,B|0,za|0,Aa|0)|0;A=C;kc=((jc|0)<0)<<31>>31;Ec=qd(jc|0,kc|0,M|0,b|0)|0;Dc=C;Wb=qd(Db|0,Eb|0,za|0,Aa|0)|0;Vb=C;kb=qd(Ta|0,Ua|0,M|0,b|0)|0;jb=C;Aa=qd(Sc|0,Rc|0,za|0,Aa|0)|0;za=C;b=qd(Qc|0,Pc|0,M|0,b|0)|0;M=C;g=((ya|0)<0)<<31>>31;eb=qd(H|0,I|0,ya|0,g|0)|0;db=C;xa=qd(J|0,K|0,ya|0,g|0)|0;wa=C;$=qd(F|0,G|0,ya|0,g|0)|0;_=C;E=qd(D|0,E|0,ya|0,g|0)|0;D=C;Ia=((Ha|0)<0)<<31>>31;Gc=qd(Ha|0,Ia|0,ya|0,g|0)|0;Fc=C;Yb=qd(jc|0,kc|0,ya|0,g|0)|0;Xb=C;mb=qd(Db|0,Eb|0,ya|0,g|0)|0;lb=C;Ca=qd(Ta|0,Ua|0,ya|0,g|0)|0;Ba=C;m=qd(Sc|0,Rc|0,ya|0,g|0)|0;r=C;g=qd(Qc|0,Pc|0,ya|0,g|0)|0;ya=C;Ab=((zb|0)<0)<<31>>31;va=qd(H|0,I|0,zb|0,Ab|0)|0;ua=C;ea=((i|0)<0)<<31>>31;da=qd(J|0,K|0,i|0,ea|0)|0;ca=C;G=qd(F|0,G|0,zb|0,Ab|0)|0;F=C;sb=((rb|0)<0)<<31>>31;Ic=qd(rb|0,sb|0,i|0,ea|0)|0;Hc=C;_b=qd(Ha|0,Ia|0,zb|0,Ab|0)|0;Zb=C;ob=qd(jc|0,kc|0,i|0,ea|0)|0;nb=C;Ea=qd(Db|0,Eb|0,zb|0,Ab|0)|0;Da=C;gc=qd(Ta|0,Ua|0,i|0,ea|0)|0;fc=C;Ab=qd(Sc|0,Rc|0,zb|0,Ab|0)|0;zb=C;ea=qd(Qc|0,Pc|0,i|0,ea|0)|0;i=C;L=((h|0)<0)<<31>>31;ba=qd(H|0,I|0,h|0,L|0)|0;aa=C;K=qd(J|0,K|0,h|0,L|0)|0;J=C;cc=((bc|0)<0)<<31>>31;Kc=qd(bc|0,cc|0,h|0,L|0)|0;Jc=C;ac=qd(rb|0,sb|0,h|0,L|0)|0;$b=C;qb=qd(Ha|0,Ia|0,h|0,L|0)|0;pb=C;Ga=qd(jc|0,kc|0,h|0,L|0)|0;Fa=C;ic=qd(Db|0,Eb|0,h|0,L|0)|0;hc=C;Cb=qd(Ta|0,Ua|0,h|0,L|0)|0;Bb=C;Sa=qd(Sc|0,Rc|0,h|0,L|0)|0;Ra=C;L=qd(Qc|0,Pc|0,h|0,L|0)|0;h=C;ha=((ga|0)<0)<<31>>31;I=qd(H|0,I|0,ga|0,ha|0)|0;H=C;q=((d|0)<0)<<31>>31;Oc=qd(Oc|0,((Oc|0)<0)<<31>>31|0,d|0,q|0)|0;Nc=C;cc=qd(bc|0,cc|0,ga|0,ha|0)|0;bc=C;sb=qd(rb|0,sb|0,d|0,q|0)|0;rb=C;Ia=qd(Ha|0,Ia|0,ga|0,ha|0)|0;Ha=C;kc=qd(jc|0,kc|0,d|0,q|0)|0;jc=C;Eb=qd(Db|0,Eb|0,ga|0,ha|0)|0;Db=C;Ua=qd(Ta|0,Ua|0,d|0,q|0)|0;Ta=C;ha=qd(Sc|0,Rc|0,ga|0,ha|0)|0;ga=C;q=qd(Qc|0,Pc|0,d|0,q|0)|0;d=C;Lc=fd(Oc|0,Nc|0,Mc|0,Lc|0)|0;Jc=fd(Lc|0,C|0,Kc|0,Jc|0)|0;Hc=fd(Jc|0,C|0,Ic|0,Hc|0)|0;Fc=fd(Hc|0,C|0,Gc|0,Fc|0)|0;Dc=fd(Fc|0,C|0,Ec|0,Dc|0)|0;Bc=fd(Dc|0,C|0,Cc|0,Bc|0)|0;zc=fd(Bc|0,C|0,Ac|0,zc|0)|0;xc=fd(zc|0,C|0,yc|0,xc|0)|0;p=fd(xc|0,C|0,n|0,p|0)|0;n=C;ec=fd(wc|0,vc|0,dc|0,ec|0)|0;dc=C;rc=fd(uc|0,tc|0,sc|0,rc|0)|0;pc=fd(rc|0,C|0,qc|0,pc|0)|0;nc=fd(pc|0,C|0,oc|0,nc|0)|0;lc=fd(nc|0,C|0,mc|0,lc|0)|0;jc=fd(lc|0,C|0,kc|0,jc|0)|0;hc=fd(jc|0,C|0,ic|0,hc|0)|0;fc=fd(hc|0,C|0,gc|0,fc|0)|0;r=fd(fc|0,C|0,m|0,r|0)|0;M=fd(r|0,C|0,b|0,M|0)|0;b=C;r=fd(p|0,n|0,33554432,0)|0;r=dd(r|0,C|0,26)|0;m=C;bc=fd(ec|0,dc|0,cc|0,bc|0)|0;$b=fd(bc|0,C|0,ac|0,$b|0)|0;Zb=fd($b|0,C|0,_b|0,Zb|0)|0;Xb=fd(Zb|0,C|0,Yb|0,Xb|0)|0;Vb=fd(Xb|0,C|0,Wb|0,Vb|0)|0;Tb=fd(Vb|0,C|0,Ub|0,Tb|0)|0;Rb=fd(Tb|0,C|0,Sb|0,Rb|0)|0;j=fd(Rb|0,C|0,k|0,j|0)|0;j=fd(j|0,C|0,r|0,m|0)|0;k=C;m=id(r|0,m|0,26)|0;m=ed(p|0,n|0,m|0,C|0)|0;n=C;p=fd(M|0,b|0,33554432,0)|0;p=dd(p|0,C|0,26)|0;r=C;Nb=fd(Qb|0,Pb|0,Ob|0,Nb|0)|0;Lb=fd(Nb|0,C|0,Mb|0,Lb|0)|0;Jb=fd(Lb|0,C|0,Kb|0,Jb|0)|0;Hb=fd(Jb|0,C|0,Ib|0,Hb|0)|0;Fb=fd(Hb|0,C|0,Gb|0,Fb|0)|0;Db=fd(Fb|0,C|0,Eb|0,Db|0)|0;Bb=fd(Db|0,C|0,Cb|0,Bb|0)|0;zb=fd(Bb|0,C|0,Ab|0,zb|0)|0;ya=fd(zb|0,C|0,g|0,ya|0)|0;ya=fd(ya|0,C|0,p|0,r|0)|0;g=C;r=id(p|0,r|0,26)|0;r=ed(M|0,b|0,r|0,C|0)|0;b=C;M=fd(j|0,k|0,16777216,0)|0;M=dd(M|0,C|0,25)|0;p=C;vb=fd(yb|0,xb|0,wb|0,vb|0)|0;tb=fd(vb|0,C|0,ub|0,tb|0)|0;rb=fd(tb|0,C|0,sb|0,rb|0)|0;pb=fd(rb|0,C|0,qb|0,pb|0)|0;nb=fd(pb|0,C|0,ob|0,nb|0)|0;lb=fd(nb|0,C|0,mb|0,lb|0)|0;jb=fd(lb|0,C|0,kb|0,jb|0)|0;hb=fd(jb|0,C|0,ib|0,hb|0)|0;f=fd(hb|0,C|0,fa|0,f|0)|0;f=fd(f|0,C|0,M|0,p|0)|0;fa=C;p=id(M|0,p|0,25)|0;p=ed(j|0,k|0,p|0,C|0)|0;k=C;j=fd(ya|0,g|0,16777216,0)|0;j=dd(j|0,C|0,25)|0;M=C;db=fd(gb|0,fb|0,eb|0,db|0)|0;bb=fd(db|0,C|0,cb|0,bb|0)|0;$a=fd(bb|0,C|0,ab|0,$a|0)|0;Za=fd($a|0,C|0,_a|0,Za|0)|0;Xa=fd(Za|0,C|0,Ya|0,Xa|0)|0;Va=fd(Xa|0,C|0,Wa|0,Va|0)|0;Ta=fd(Va|0,C|0,Ua|0,Ta|0)|0;Ra=fd(Ta|0,C|0,Sa|0,Ra|0)|0;i=fd(Ra|0,C|0,ea|0,i|0)|0;i=fd(i|0,C|0,j|0,M|0)|0;ea=C;M=id(j|0,M|0,25)|0;M=ed(ya|0,g|0,M|0,C|0)|0;g=C;ya=fd(f|0,fa|0,33554432,0)|0;ya=dd(ya|0,C|0,26)|0;j=C;Na=fd(Qa|0,Pa|0,Oa|0,Na|0)|0;La=fd(Na|0,C|0,Ma|0,La|0)|0;Ja=fd(La|0,C|0,Ka|0,Ja|0)|0;Ha=fd(Ja|0,C|0,Ia|0,Ha|0)|0;Fa=fd(Ha|0,C|0,Ga|0,Fa|0)|0;Da=fd(Fa|0,C|0,Ea|0,Da|0)|0;Ba=fd(Da|0,C|0,Ca|0,Ba|0)|0;za=fd(Ba|0,C|0,Aa|0,za|0)|0;e=fd(za|0,C|0,N|0,e|0)|0;e=fd(e|0,C|0,ya|0,j|0)|0;N=C;j=id(ya|0,j|0,26)|0;j=ed(f|0,fa|0,j|0,C|0)|0;fa=fd(i|0,ea|0,33554432,0)|0;fa=dd(fa|0,C|0,26)|0;f=C;ua=fd(xa|0,wa|0,va|0,ua|0)|0;sa=fd(ua|0,C|0,ta|0,sa|0)|0;qa=fd(sa|0,C|0,ra|0,qa|0)|0;oa=fd(qa|0,C|0,pa|0,oa|0)|0;ma=fd(oa|0,C|0,na|0,ma|0)|0;ka=fd(ma|0,C|0,la|0,ka|0)|0;ia=fd(ka|0,C|0,ja|0,ia|0)|0;ga=fd(ia|0,C|0,ha|0,ga|0)|0;h=fd(ga|0,C|0,L|0,h|0)|0;h=fd(h|0,C|0,fa|0,f|0)|0;L=C;f=id(fa|0,f|0,26)|0;f=ed(i|0,ea|0,f|0,C|0)|0;ea=fd(e|0,N|0,16777216,0)|0;ea=dd(ea|0,C|0,25)|0;i=C;b=fd(ea|0,i|0,r|0,b|0)|0;r=C;i=id(ea|0,i|0,25)|0;i=ed(e|0,N|0,i|0,C|0)|0;N=fd(h|0,L|0,16777216,0)|0;N=dd(N|0,C|0,25)|0;e=C;aa=fd(da|0,ca|0,ba|0,aa|0)|0;_=fd(aa|0,C|0,$|0,_|0)|0;Y=fd(_|0,C|0,Z|0,Y|0)|0;W=fd(Y|0,C|0,X|0,W|0)|0;U=fd(W|0,C|0,V|0,U|0)|0;S=fd(U|0,C|0,T|0,S|0)|0;Q=fd(S|0,C|0,R|0,Q|0)|0;O=fd(Q|0,C|0,P|0,O|0)|0;d=fd(O|0,C|0,q|0,d|0)|0;d=fd(d|0,C|0,N|0,e|0)|0;q=C;e=id(N|0,e|0,25)|0;e=ed(h|0,L|0,e|0,C|0)|0;L=fd(b|0,r|0,33554432,0)|0;L=dd(L|0,C|0,26)|0;h=C;g=fd(M|0,g|0,L|0,h|0)|0;h=id(L|0,h|0,26)|0;h=ed(b|0,r|0,h|0,C|0)|0;r=fd(d|0,q|0,33554432,0)|0;r=dd(r|0,C|0,26)|0;b=C;H=fd(K|0,J|0,I|0,H|0)|0;F=fd(H|0,C|0,G|0,F|0)|0;D=fd(F|0,C|0,E|0,D|0)|0;A=fd(D|0,C|0,B|0,A|0)|0;y=fd(A|0,C|0,z|0,y|0)|0;w=fd(y|0,C|0,x|0,w|0)|0;u=fd(w|0,C|0,v|0,u|0)|0;s=fd(u|0,C|0,t|0,s|0)|0;l=fd(s|0,C|0,o|0,l|0)|0;l=fd(l|0,C|0,r|0,b|0)|0;o=C;b=id(r|0,b|0,26)|0;b=ed(d|0,q|0,b|0,C|0)|0;q=fd(l|0,o|0,16777216,0)|0;q=dd(q|0,C|0,25)|0;d=C;r=qd(q|0,d|0,19,0)|0;n=fd(r|0,C|0,m|0,n|0)|0;m=C;d=id(q|0,d|0,25)|0;d=ed(l|0,o|0,d|0,C|0)|0;o=fd(n|0,m|0,33554432,0)|0;o=dd(o|0,C|0,26)|0;l=C;k=fd(p|0,k|0,o|0,l|0)|0;l=id(o|0,l|0,26)|0;l=ed(n|0,m|0,l|0,C|0)|0;c[a>>2]=l;c[a+4>>2]=k;c[a+8>>2]=j;c[a+12>>2]=i;c[a+16>>2]=h;c[a+20>>2]=g;c[a+24>>2]=f;c[a+28>>2]=e;c[a+32>>2]=b;c[a+36>>2]=d;return}function qc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0;bb=c[b>>2]|0;ua=c[b+4>>2]|0;j=c[b+8>>2]|0;la=c[b+12>>2]|0;e=c[b+16>>2]|0;db=c[b+20>>2]|0;Y=c[b+24>>2]|0;La=c[b+28>>2]|0;h=c[b+32>>2]|0;b=c[b+36>>2]|0;l=bb<<1;p=ua<<1;Xa=j<<1;f=la<<1;na=e<<1;B=db<<1;m=Y<<1;i=La<<1;Ka=db*38|0;ra=Y*19|0;va=La*38|0;da=h*19|0;gb=b*38|0;cb=((bb|0)<0)<<31>>31;cb=qd(bb|0,cb|0,bb|0,cb|0)|0;bb=C;o=((l|0)<0)<<31>>31;ta=((ua|0)<0)<<31>>31;Ia=qd(l|0,o|0,ua|0,ta|0)|0;Ha=C;k=((j|0)<0)<<31>>31;Wa=qd(j|0,k|0,l|0,o|0)|0;Va=C;ma=((la|0)<0)<<31>>31;Ua=qd(la|0,ma|0,l|0,o|0)|0;Ta=C;D=((e|0)<0)<<31>>31;Oa=qd(e|0,D|0,l|0,o|0)|0;Na=C;eb=((db|0)<0)<<31>>31;ya=qd(db|0,eb|0,l|0,o|0)|0;xa=C;g=((Y|0)<0)<<31>>31;ga=qd(Y|0,g|0,l|0,o|0)|0;fa=C;Ma=((La|0)<0)<<31>>31;R=qd(La|0,Ma|0,l|0,o|0)|0;Q=C;A=((h|0)<0)<<31>>31;F=qd(h|0,A|0,l|0,o|0)|0;E=C;q=((b|0)<0)<<31>>31;o=qd(b|0,q|0,l|0,o|0)|0;l=C;n=((p|0)<0)<<31>>31;ta=qd(p|0,n|0,ua|0,ta|0)|0;ua=C;ba=qd(p|0,n|0,j|0,k|0)|0;ca=C;P=((f|0)<0)<<31>>31;Sa=qd(f|0,P|0,p|0,n|0)|0;Ra=C;Ca=qd(e|0,D|0,p|0,n|0)|0;Ba=C;d=((B|0)<0)<<31>>31;ia=qd(B|0,d|0,p|0,n|0)|0;ha=C;T=qd(Y|0,g|0,p|0,n|0)|0;S=C;O=((i|0)<0)<<31>>31;H=qd(i|0,O|0,p|0,n|0)|0;G=C;t=qd(h|0,A|0,p|0,n|0)|0;s=C;fb=((gb|0)<0)<<31>>31;n=qd(gb|0,fb|0,p|0,n|0)|0;p=C;Qa=qd(j|0,k|0,j|0,k|0)|0;Pa=C;Ya=((Xa|0)<0)<<31>>31;Aa=qd(Xa|0,Ya|0,la|0,ma|0)|0;za=C;ka=qd(e|0,D|0,Xa|0,Ya|0)|0;ja=C;X=qd(db|0,eb|0,Xa|0,Ya|0)|0;W=C;N=qd(Y|0,g|0,Xa|0,Ya|0)|0;M=C;v=qd(La|0,Ma|0,Xa|0,Ya|0)|0;u=C;ea=((da|0)<0)<<31>>31;Ya=qd(da|0,ea|0,Xa|0,Ya|0)|0;Xa=C;k=qd(gb|0,fb|0,j|0,k|0)|0;j=C;ma=qd(f|0,P|0,la|0,ma|0)|0;la=C;V=qd(f|0,P|0,e|0,D|0)|0;U=C;J=qd(B|0,d|0,f|0,P|0)|0;I=C;z=qd(Y|0,g|0,f|0,P|0)|0;y=C;wa=((va|0)<0)<<31>>31;_a=qd(va|0,wa|0,f|0,P|0)|0;Za=C;Ea=qd(da|0,ea|0,f|0,P|0)|0;Da=C;P=qd(gb|0,fb|0,f|0,P|0)|0;f=C;L=qd(e|0,D|0,e|0,D|0)|0;K=C;oa=((na|0)<0)<<31>>31;x=qd(na|0,oa|0,db|0,eb|0)|0;w=C;sa=((ra|0)<0)<<31>>31;ab=qd(ra|0,sa|0,na|0,oa|0)|0;$a=C;Ga=qd(va|0,wa|0,e|0,D|0)|0;Fa=C;oa=qd(da|0,ea|0,na|0,oa|0)|0;na=C;D=qd(gb|0,fb|0,e|0,D|0)|0;e=C;eb=qd(Ka|0,((Ka|0)<0)<<31>>31|0,db|0,eb|0)|0;db=C;Ka=qd(ra|0,sa|0,B|0,d|0)|0;Ja=C;qa=qd(va|0,wa|0,B|0,d|0)|0;pa=C;_=qd(da|0,ea|0,B|0,d|0)|0;Z=C;d=qd(gb|0,fb|0,B|0,d|0)|0;B=C;sa=qd(ra|0,sa|0,Y|0,g|0)|0;ra=C;aa=qd(va|0,wa|0,Y|0,g|0)|0;$=C;m=qd(da|0,ea|0,m|0,((m|0)<0)<<31>>31|0)|0;r=C;g=qd(gb|0,fb|0,Y|0,g|0)|0;Y=C;Ma=qd(va|0,wa|0,La|0,Ma|0)|0;La=C;wa=qd(da|0,ea|0,i|0,O|0)|0;va=C;O=qd(gb|0,fb|0,i|0,O|0)|0;i=C;ea=qd(da|0,ea|0,h|0,A|0)|0;da=C;A=qd(gb|0,fb|0,h|0,A|0)|0;h=C;q=qd(gb|0,fb|0,b|0,q|0)|0;b=C;bb=fd(eb|0,db|0,cb|0,bb|0)|0;$a=fd(bb|0,C|0,ab|0,$a|0)|0;Za=fd($a|0,C|0,_a|0,Za|0)|0;Xa=fd(Za|0,C|0,Ya|0,Xa|0)|0;p=fd(Xa|0,C|0,n|0,p|0)|0;n=C;ua=fd(Wa|0,Va|0,ta|0,ua|0)|0;ta=C;ca=fd(Ua|0,Ta|0,ba|0,ca|0)|0;ba=C;Pa=fd(Sa|0,Ra|0,Qa|0,Pa|0)|0;Na=fd(Pa|0,C|0,Oa|0,Na|0)|0;La=fd(Na|0,C|0,Ma|0,La|0)|0;r=fd(La|0,C|0,m|0,r|0)|0;B=fd(r|0,C|0,d|0,B|0)|0;d=C;r=fd(p|0,n|0,33554432,0)|0;r=dd(r|0,C|0,26)|0;m=C;Ha=fd(Ka|0,Ja|0,Ia|0,Ha|0)|0;Fa=fd(Ha|0,C|0,Ga|0,Fa|0)|0;Da=fd(Fa|0,C|0,Ea|0,Da|0)|0;j=fd(Da|0,C|0,k|0,j|0)|0;j=fd(j|0,C|0,r|0,m|0)|0;k=C;m=id(r|0,m|0,26)|0;m=ed(p|0,n|0,m|0,C|0)|0;n=C;p=fd(B|0,d|0,33554432,0)|0;p=dd(p|0,C|0,26)|0;r=C;za=fd(Ca|0,Ba|0,Aa|0,za|0)|0;xa=fd(za|0,C|0,ya|0,xa|0)|0;va=fd(xa|0,C|0,wa|0,va|0)|0;Y=fd(va|0,C|0,g|0,Y|0)|0;Y=fd(Y|0,C|0,p|0,r|0)|0;g=C;r=id(p|0,r|0,26)|0;r=ed(B|0,d|0,r|0,C|0)|0;d=C;B=fd(j|0,k|0,16777216,0)|0;B=dd(B|0,C|0,25)|0;p=C;ra=fd(ua|0,ta|0,sa|0,ra|0)|0;pa=fd(ra|0,C|0,qa|0,pa|0)|0;na=fd(pa|0,C|0,oa|0,na|0)|0;f=fd(na|0,C|0,P|0,f|0)|0;f=fd(f|0,C|0,B|0,p|0)|0;P=C;p=id(B|0,p|0,25)|0;p=ed(j|0,k|0,p|0,C|0)|0;k=C;j=fd(Y|0,g|0,16777216,0)|0;j=dd(j|0,C|0,25)|0;B=C;ja=fd(ma|0,la|0,ka|0,ja|0)|0;ha=fd(ja|0,C|0,ia|0,ha|0)|0;fa=fd(ha|0,C|0,ga|0,fa|0)|0;da=fd(fa|0,C|0,ea|0,da|0)|0;i=fd(da|0,C|0,O|0,i|0)|0;i=fd(i|0,C|0,j|0,B|0)|0;O=C;B=id(j|0,B|0,25)|0;B=ed(Y|0,g|0,B|0,C|0)|0;g=C;Y=fd(f|0,P|0,33554432,0)|0;Y=dd(Y|0,C|0,26)|0;j=C;$=fd(ca|0,ba|0,aa|0,$|0)|0;Z=fd($|0,C|0,_|0,Z|0)|0;e=fd(Z|0,C|0,D|0,e|0)|0;e=fd(e|0,C|0,Y|0,j|0)|0;D=C;j=id(Y|0,j|0,26)|0;j=ed(f|0,P|0,j|0,C|0)|0;P=fd(i|0,O|0,33554432,0)|0;P=dd(P|0,C|0,26)|0;f=C;U=fd(X|0,W|0,V|0,U|0)|0;S=fd(U|0,C|0,T|0,S|0)|0;Q=fd(S|0,C|0,R|0,Q|0)|0;h=fd(Q|0,C|0,A|0,h|0)|0;h=fd(h|0,C|0,P|0,f|0)|0;A=C;f=id(P|0,f|0,26)|0;f=ed(i|0,O|0,f|0,C|0)|0;O=fd(e|0,D|0,16777216,0)|0;O=dd(O|0,C|0,25)|0;i=C;d=fd(O|0,i|0,r|0,d|0)|0;r=C;i=id(O|0,i|0,25)|0;i=ed(e|0,D|0,i|0,C|0)|0;D=fd(h|0,A|0,16777216,0)|0;D=dd(D|0,C|0,25)|0;e=C;K=fd(N|0,M|0,L|0,K|0)|0;I=fd(K|0,C|0,J|0,I|0)|0;G=fd(I|0,C|0,H|0,G|0)|0;E=fd(G|0,C|0,F|0,E|0)|0;b=fd(E|0,C|0,q|0,b|0)|0;b=fd(b|0,C|0,D|0,e|0)|0;q=C;e=id(D|0,e|0,25)|0;e=ed(h|0,A|0,e|0,C|0)|0;A=fd(d|0,r|0,33554432,0)|0;A=dd(A|0,C|0,26)|0;h=C;g=fd(B|0,g|0,A|0,h|0)|0;h=id(A|0,h|0,26)|0;h=ed(d|0,r|0,h|0,C|0)|0;r=fd(b|0,q|0,33554432,0)|0;r=dd(r|0,C|0,26)|0;d=C;w=fd(z|0,y|0,x|0,w|0)|0;u=fd(w|0,C|0,v|0,u|0)|0;s=fd(u|0,C|0,t|0,s|0)|0;l=fd(s|0,C|0,o|0,l|0)|0;l=fd(l|0,C|0,r|0,d|0)|0;o=C;d=id(r|0,d|0,26)|0;d=ed(b|0,q|0,d|0,C|0)|0;q=fd(l|0,o|0,16777216,0)|0;q=dd(q|0,C|0,25)|0;b=C;r=qd(q|0,b|0,19,0)|0;n=fd(r|0,C|0,m|0,n|0)|0;m=C;b=id(q|0,b|0,25)|0;b=ed(l|0,o|0,b|0,C|0)|0;o=fd(n|0,m|0,33554432,0)|0;o=dd(o|0,C|0,26)|0;l=C;k=fd(p|0,k|0,o|0,l|0)|0;l=id(o|0,l|0,26)|0;l=ed(n|0,m|0,l|0,C|0)|0;c[a>>2]=l;c[a+4>>2]=k;c[a+8>>2]=j;c[a+12>>2]=i;c[a+16>>2]=h;c[a+20>>2]=g;c[a+24>>2]=f;c[a+28>>2]=e;c[a+32>>2]=d;c[a+36>>2]=b;return}function rc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;m=c[d>>2]|0;l=c[d+4>>2]|0;k=c[d+8>>2]|0;j=c[d+12>>2]|0;i=c[d+16>>2]|0;h=c[d+20>>2]|0;g=c[d+24>>2]|0;f=c[d+28>>2]|0;o=c[d+32>>2]|0;e=c[d+36>>2]|0;m=(((((((((((((e*19|0)+16777216>>25)+m>>26)+l>>25)+k>>26)+j>>25)+i>>26)+h>>25)+g>>26)+f>>25)+o>>26)+e>>25)*19|0)+m|0;n=m>>26;l=n+l|0;n=m-(n<<26)|0;m=l>>25;k=m+k|0;m=l-(m<<25)|0;l=k>>26;j=l+j|0;l=k-(l<<26)|0;k=j>>25;i=k+i|0;k=j-(k<<25)|0;j=i>>26;h=j+h|0;j=i-(j<<26)|0;i=h>>25;g=i+g|0;i=h-(i<<25)|0;h=g>>26;f=h+f|0;h=g-(h<<26)|0;g=f>>25;d=g+o|0;g=f-(g<<25)|0;f=d>>26;e=f+e|0;f=d-(f<<26)|0;d=e&33554431;a[b>>0]=n;a[b+1>>0]=n>>>8;a[b+2>>0]=n>>>16;a[b+3>>0]=m<<2|n>>>24;a[b+4>>0]=m>>>6;a[b+5>>0]=m>>>14;a[b+6>>0]=l<<3|m>>>22;a[b+7>>0]=l>>>5;a[b+8>>0]=l>>>13;a[b+9>>0]=k<<5|l>>>21;a[b+10>>0]=k>>>3;a[b+11>>0]=k>>>11;a[b+12>>0]=j<<6|k>>>19;a[b+13>>0]=j>>>2;a[b+14>>0]=j>>>10;a[b+15>>0]=j>>>18;a[b+16>>0]=i;a[b+17>>0]=i>>>8;a[b+18>>0]=i>>>16;a[b+19>>0]=h<<1|i>>>24;a[b+20>>0]=h>>>7;a[b+21>>0]=h>>>15;a[b+22>>0]=g<<3|h>>>23;a[b+23>>0]=g>>>5;a[b+24>>0]=g>>>13;a[b+25>>0]=f<<4|g>>>21;a[b+26>>0]=f>>>4;a[b+27>>0]=f>>>12;a[b+28>>0]=f>>>20|d<<6;a[b+29>>0]=e>>>2;a[b+30>>0]=e>>>10;a[b+31>>0]=d>>>18;return}function sc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0;V=b+40|0;j=b+44|0;m=b+48|0;p=b+52|0;s=b+56|0;v=b+60|0;y=b+64|0;B=b+68|0;E=b+72|0;C=b+76|0;S=b+4|0;P=b+8|0;e=b+12|0;l=b+16|0;n=b+20|0;u=b+24|0;w=b+28|0;D=b+32|0;O=b+36|0;ga=(c[S>>2]|0)+(c[j>>2]|0)|0;fa=(c[P>>2]|0)+(c[m>>2]|0)|0;ea=(c[e>>2]|0)+(c[p>>2]|0)|0;da=(c[l>>2]|0)+(c[s>>2]|0)|0;ca=(c[n>>2]|0)+(c[v>>2]|0)|0;ba=(c[u>>2]|0)+(c[y>>2]|0)|0;aa=(c[w>>2]|0)+(c[B>>2]|0)|0;$=(c[D>>2]|0)+(c[E>>2]|0)|0;Y=(c[O>>2]|0)+(c[C>>2]|0)|0;c[a>>2]=(c[b>>2]|0)+(c[V>>2]|0);ha=a+4|0;c[ha>>2]=ga;ga=a+8|0;c[ga>>2]=fa;fa=a+12|0;c[fa>>2]=ea;ea=a+16|0;c[ea>>2]=da;da=a+20|0;c[da>>2]=ca;ca=a+24|0;c[ca>>2]=ba;ba=a+28|0;c[ba>>2]=aa;aa=a+32|0;c[aa>>2]=$;$=a+36|0;c[$>>2]=Y;Y=a+40|0;S=(c[j>>2]|0)-(c[S>>2]|0)|0;P=(c[m>>2]|0)-(c[P>>2]|0)|0;e=(c[p>>2]|0)-(c[e>>2]|0)|0;l=(c[s>>2]|0)-(c[l>>2]|0)|0;n=(c[v>>2]|0)-(c[n>>2]|0)|0;u=(c[y>>2]|0)-(c[u>>2]|0)|0;w=(c[B>>2]|0)-(c[w>>2]|0)|0;D=(c[E>>2]|0)-(c[D>>2]|0)|0;O=(c[C>>2]|0)-(c[O>>2]|0)|0;c[Y>>2]=(c[V>>2]|0)-(c[b>>2]|0);V=a+44|0;c[V>>2]=S;S=a+48|0;c[S>>2]=P;P=a+52|0;c[P>>2]=e;e=a+56|0;c[e>>2]=l;l=a+60|0;c[l>>2]=n;n=a+64|0;c[n>>2]=u;u=a+68|0;c[u>>2]=w;w=a+72|0;c[w>>2]=D;D=a+76|0;c[D>>2]=O;O=a+80|0;pc(O,a,d);pc(Y,Y,d+40|0);C=a+120|0;pc(C,d+120|0,b+120|0);pc(a,b+80|0,d+80|0);E=c[a>>2]<<1;B=c[ha>>2]<<1;y=c[ga>>2]<<1;v=c[fa>>2]<<1;s=c[ea>>2]<<1;p=c[da>>2]<<1;m=c[ca>>2]<<1;j=c[ba>>2]<<1;g=c[aa>>2]<<1;b=c[$>>2]<<1;Z=c[O>>2]|0;N=a+84|0;W=c[N>>2]|0;M=a+88|0;T=c[M>>2]|0;L=a+92|0;Q=c[L>>2]|0;K=a+96|0;f=c[K>>2]|0;J=a+100|0;h=c[J>>2]|0;I=a+104|0;o=c[I>>2]|0;H=a+108|0;q=c[H>>2]|0;G=a+112|0;x=c[G>>2]|0;F=a+116|0;z=c[F>>2]|0;_=c[Y>>2]|0;X=c[V>>2]|0;U=c[S>>2]|0;R=c[P>>2]|0;d=c[e>>2]|0;i=c[l>>2]|0;k=c[n>>2]|0;r=c[u>>2]|0;t=c[w>>2]|0;A=c[D>>2]|0;c[a>>2]=Z-_;c[ha>>2]=W-X;c[ga>>2]=T-U;c[fa>>2]=Q-R;c[ea>>2]=f-d;c[da>>2]=h-i;c[ca>>2]=o-k;c[ba>>2]=q-r;c[aa>>2]=x-t;c[$>>2]=z-A;c[Y>>2]=_+Z;c[V>>2]=X+W;c[S>>2]=U+T;c[P>>2]=R+Q;c[e>>2]=d+f;c[l>>2]=i+h;c[n>>2]=k+o;c[u>>2]=r+q;c[w>>2]=t+x;c[D>>2]=A+z;D=c[C>>2]|0;z=a+124|0;A=c[z>>2]|0;w=a+128|0;x=c[w>>2]|0;t=a+132|0;u=c[t>>2]|0;q=a+136|0;r=c[q>>2]|0;n=a+140|0;o=c[n>>2]|0;k=a+144|0;l=c[k>>2]|0;h=a+148|0;i=c[h>>2]|0;e=a+152|0;f=c[e>>2]|0;a=a+156|0;d=c[a>>2]|0;c[O>>2]=D+E;c[N>>2]=A+B;c[M>>2]=x+y;c[L>>2]=u+v;c[K>>2]=r+s;c[J>>2]=o+p;c[I>>2]=l+m;c[H>>2]=i+j;c[G>>2]=f+g;c[F>>2]=d+b;c[C>>2]=E-D;c[z>>2]=B-A;c[w>>2]=y-x;c[t>>2]=v-u;c[q>>2]=s-r;c[n>>2]=p-o;c[k>>2]=m-l;c[h>>2]=j-i;c[e>>2]=g-f;c[a>>2]=b-d;return}function tc(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;R=i;P=i=i+63&-64;i=i+320|0;Q=P+40|0;k=P+160|0;j=P+80|0;s=P+200|0;l=P+280|0;m=P;r=P+120|0;P=P+240|0;O=b+40|0;T=d[e>>0]|0;M=id(d[e+1>>0]|0|0,0,8)|0;J=C;p=id(d[e+2>>0]|0|0,0,16)|0;J=J|C;q=id(d[e+3>>0]|0|0,0,24)|0;J=J|C;I=a[e+6>>0]|0;L=d[e+4>>0]|0;o=id(d[e+5>>0]|0|0,0,8)|0;K=C;I=id(I&255|0,0,16)|0;K=id(o|L|I|0,K|C|0,6)|0;I=C;L=a[e+9>>0]|0;o=d[e+7>>0]|0;f=id(d[e+8>>0]|0|0,0,8)|0;w=C;L=id(L&255|0,0,16)|0;w=id(f|o|L|0,w|C|0,5)|0;L=C;o=a[e+12>>0]|0;f=d[e+10>>0]|0;y=id(d[e+11>>0]|0|0,0,8)|0;n=C;o=id(o&255|0,0,16)|0;n=id(y|f|o|0,n|C|0,3)|0;o=C;f=a[e+15>>0]|0;y=d[e+13>>0]|0;F=id(d[e+14>>0]|0|0,0,8)|0;A=C;f=id(f&255|0,0,16)|0;A=id(F|y|f|0,A|C|0,2)|0;f=C;y=d[e+16>>0]|0;F=id(d[e+17>>0]|0|0,0,8)|0;u=C;h=id(d[e+18>>0]|0|0,0,16)|0;u=u|C;t=id(d[e+19>>0]|0|0,0,24)|0;t=F|y|h|t;u=u|C;h=a[e+22>>0]|0;y=d[e+20>>0]|0;F=id(d[e+21>>0]|0|0,0,8)|0;E=C;h=id(h&255|0,0,16)|0;E=id(F|y|h|0,E|C|0,7)|0;h=C;y=a[e+25>>0]|0;F=d[e+23>>0]|0;N=id(d[e+24>>0]|0|0,0,8)|0;x=C;y=id(y&255|0,0,16)|0;x=id(N|F|y|0,x|C|0,5)|0;y=C;F=a[e+28>>0]|0;N=d[e+26>>0]|0;g=id(d[e+27>>0]|0|0,0,8)|0;G=C;F=id(F&255|0,0,16)|0;G=id(g|N|F|0,G|C|0,4)|0;F=C;N=e+31|0;g=a[N>>0]|0;D=d[e+29>>0]|0;v=id(d[e+30>>0]|0|0,0,8)|0;B=C;g=id(g&255|0,0,16)|0;B=id(v|D|g|0,B|C|0,2)|0;B=B&33554428;g=fd(B|0,0,16777216,0)|0;g=hd(g|0,C|0,25)|0;D=C;v=qd(g|0,D|0,19,0)|0;J=fd(v|0,C|0,M|T|p|q|0,J|0)|0;q=C;D=id(g|0,D|0,25)|0;g=C;p=fd(K|0,I|0,16777216,0)|0;p=hd(p|0,C|0,25)|0;T=C;L=fd(w|0,L|0,p|0,T|0)|0;w=C;T=id(p|0,T|0,25)|0;T=ed(K|0,I|0,T|0,C|0)|0;I=C;K=fd(n|0,o|0,16777216,0)|0;K=hd(K|0,C|0,25)|0;p=C;f=fd(A|0,f|0,K|0,p|0)|0;A=C;p=id(K|0,p|0,25)|0;K=C;M=fd(t|0,u|0,16777216,0)|0;M=hd(M|0,C|0,25)|0;v=C;h=fd(E|0,h|0,M|0,v|0)|0;E=C;v=id(M|0,v|0,25)|0;M=C;e=fd(x|0,y|0,16777216,0)|0;e=hd(e|0,C|0,25)|0;z=C;F=fd(G|0,F|0,e|0,z|0)|0;G=C;z=id(e|0,z|0,25)|0;e=C;S=fd(J|0,q|0,33554432,0)|0;S=dd(S|0,C|0,26)|0;H=C;I=fd(T|0,I|0,S|0,H|0)|0;H=id(S|0,H|0,26)|0;H=ed(J|0,q|0,H|0,C|0)|0;q=fd(L|0,w|0,33554432,0)|0;q=dd(q|0,C|0,26)|0;J=C;o=fd(q|0,J|0,n|0,o|0)|0;K=ed(o|0,C|0,p|0,K|0)|0;J=id(q|0,J|0,26)|0;J=ed(L|0,w|0,J|0,C|0)|0;w=fd(f|0,A|0,33554432,0)|0;w=dd(w|0,C|0,26)|0;L=C;u=fd(w|0,L|0,t|0,u|0)|0;M=ed(u|0,C|0,v|0,M|0)|0;L=id(w|0,L|0,26)|0;L=ed(f|0,A|0,L|0,C|0)|0;A=fd(h|0,E|0,33554432,0)|0;A=dd(A|0,C|0,26)|0;f=C;y=fd(A|0,f|0,x|0,y|0)|0;e=ed(y|0,C|0,z|0,e|0)|0;f=id(A|0,f|0,26)|0;f=ed(h|0,E|0,f|0,C|0)|0;E=fd(F|0,G|0,33554432,0)|0;E=dd(E|0,C|0,26)|0;h=C;B=fd(B|0,0,E|0,h|0)|0;g=ed(B|0,C|0,D|0,g|0)|0;h=id(E|0,h|0,26)|0;h=ed(F|0,G|0,h|0,C|0)|0;c[O>>2]=H;c[b+44>>2]=I;c[b+48>>2]=J;c[b+52>>2]=K;c[b+56>>2]=L;c[b+60>>2]=M;c[b+64>>2]=f;c[b+68>>2]=e;c[b+72>>2]=h;c[b+76>>2]=g;g=b+80|0;c[g>>2]=1;h=b+84|0;e=h+0|0;f=e+36|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0));qc(s,O);pc(l,s,1528);p=s+4|0;q=s+8|0;o=s+12|0;n=s+16|0;e=s+20|0;v=s+24|0;x=s+28|0;z=s+32|0;B=s+36|0;g=c[g>>2]|0;t=c[h>>2]|0;w=c[b+88>>2]|0;A=c[b+92>>2]|0;E=c[b+96>>2]|0;G=c[b+100>>2]|0;I=c[b+104>>2]|0;K=c[b+108>>2]|0;M=c[b+112>>2]|0;T=c[b+116>>2]|0;f=(c[p>>2]|0)-t|0;S=(c[q>>2]|0)-w|0;L=(c[o>>2]|0)-A|0;J=(c[n>>2]|0)-E|0;H=(c[e>>2]|0)-G|0;F=(c[v>>2]|0)-I|0;D=(c[x>>2]|0)-K|0;y=(c[z>>2]|0)-M|0;u=(c[B>>2]|0)-T|0;c[s>>2]=(c[s>>2]|0)-g;c[p>>2]=f;c[q>>2]=S;c[o>>2]=L;c[n>>2]=J;c[e>>2]=H;c[v>>2]=F;c[x>>2]=D;c[z>>2]=y;c[B>>2]=u;u=l+4|0;y=l+8|0;D=l+12|0;F=l+16|0;H=l+20|0;J=l+24|0;L=l+28|0;S=l+32|0;f=l+36|0;t=t+(c[u>>2]|0)|0;w=w+(c[y>>2]|0)|0;A=A+(c[D>>2]|0)|0;E=E+(c[F>>2]|0)|0;G=G+(c[H>>2]|0)|0;I=I+(c[J>>2]|0)|0;K=K+(c[L>>2]|0)|0;M=M+(c[S>>2]|0)|0;T=T+(c[f>>2]|0)|0;c[l>>2]=g+(c[l>>2]|0);c[u>>2]=t;c[y>>2]=w;c[D>>2]=A;c[F>>2]=E;c[H>>2]=G;c[J>>2]=I;c[L>>2]=K;c[S>>2]=M;c[f>>2]=T;qc(m,l);pc(m,m,l);qc(b,m);pc(b,b,l);pc(b,b,s);qc(Q,b);qc(k,Q);qc(k,k);pc(k,b,k);pc(Q,Q,k);qc(Q,Q);pc(Q,k,Q);qc(k,Q);qc(k,k);qc(k,k);qc(k,k);qc(k,k);pc(Q,k,Q);qc(k,Q);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);pc(k,k,Q);qc(j,k);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);qc(j,j);pc(k,j,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);qc(k,k);pc(Q,k,Q);qc(k,Q);f=1;do{qc(k,k);f=f+1|0}while((f|0)!=50);pc(k,k,Q);qc(j,k);f=1;do{qc(j,j);f=f+1|0}while((f|0)!=100);pc(k,j,k);qc(k,k);f=1;do{qc(k,k);f=f+1|0}while((f|0)!=50);pc(Q,k,Q);qc(Q,Q);qc(Q,Q);pc(b,Q,b);pc(b,b,m);pc(b,b,s);qc(r,b);pc(r,r,l);E=c[r>>2]|0;F=c[r+4>>2]|0;G=c[r+8>>2]|0;H=c[r+12>>2]|0;I=c[r+16>>2]|0;J=c[r+20>>2]|0;K=c[r+24>>2]|0;L=c[r+28>>2]|0;M=c[r+32>>2]|0;D=c[r+36>>2]|0;A=c[s>>2]|0;y=c[p>>2]|0;w=c[q>>2]|0;u=c[o>>2]|0;t=c[n>>2]|0;s=c[e>>2]|0;r=c[v>>2]|0;q=c[x>>2]|0;p=c[z>>2]|0;m=c[B>>2]|0;c[P>>2]=E-A;l=P+4|0;c[l>>2]=F-y;k=P+8|0;c[k>>2]=G-w;j=P+12|0;c[j>>2]=H-u;h=P+16|0;c[h>>2]=I-t;g=P+20|0;c[g>>2]=J-s;f=P+24|0;c[f>>2]=K-r;e=P+28|0;c[e>>2]=L-q;n=P+32|0;c[n>>2]=M-p;o=P+36|0;c[o>>2]=D-m;rc(Q,P);do if(Hc(Q,536)|0){c[P>>2]=A+E;c[l>>2]=y+F;c[k>>2]=w+G;c[j>>2]=u+H;c[h>>2]=t+I;c[g>>2]=s+J;c[f>>2]=r+K;c[e>>2]=q+L;c[n>>2]=p+M;c[o>>2]=m+D;rc(Q,P);if(!(Hc(Q,536)|0)){pc(b,b,1568);break}else{T=-1;i=R;return T|0}}while(0);rc(Q,b);if(((d[Q>>0]|0)&1|0)==((d[N>>0]|0)>>>7|0)){A=b+4|0;D=b+8|0;F=b+12|0;H=b+16|0;J=b+20|0;L=b+24|0;N=b+28|0;Q=b+32|0;T=b+36|0;z=0-(c[A>>2]|0)|0;B=0-(c[D>>2]|0)|0;E=0-(c[F>>2]|0)|0;G=0-(c[H>>2]|0)|0;I=0-(c[J>>2]|0)|0;K=0-(c[L>>2]|0)|0;M=0-(c[N>>2]|0)|0;P=0-(c[Q>>2]|0)|0;S=0-(c[T>>2]|0)|0;c[b>>2]=0-(c[b>>2]|0);c[A>>2]=z;c[D>>2]=B;c[F>>2]=E;c[H>>2]=G;c[J>>2]=I;c[L>>2]=K;c[N>>2]=M;c[Q>>2]=P;c[T>>2]=S}pc(b+120|0,b,O);T=0;i=R;return T|0}
function ta(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function ua(){return i|0}function va(a){a=a|0;i=a}function wa(a,b){a=a|0;b=b|0;if(!n){n=a;o=b}}function xa(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0]}function ya(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0];a[k+4>>0]=a[b+4>>0];a[k+5>>0]=a[b+5>>0];a[k+6>>0]=a[b+6>>0];a[k+7>>0]=a[b+7>>0]}function za(a){a=a|0;C=a}function Aa(){return C|0}function Ba(b,e,f,g,h,j,k,l,m,n,o){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;t=i;i=i+288|0;p=t+144|0;r=t;m=t+216|0;q=t+208|0;Fc(p,o);c[p+48>>2]=0;c[p+52>>2]=0;c[p+56>>2]=(d[n+1>>0]|0)<<8|(d[n>>0]|0)|(d[n+2>>0]|0)<<16|(d[n+3>>0]|0)<<24;c[p+60>>2]=(d[n+5>>0]|0)<<8|(d[n+4>>0]|0)|(d[n+6>>0]|0)<<16|(d[n+7>>0]|0)<<24;s=m+0|0;u=s+64|0;do{a[s>>0]=0;s=s+1|0}while((s|0)<(u|0));Gc(p,m,m,64,0);yb(r,m);s=m+0|0;u=s+64|0;do{a[s>>0]=0;s=s+1|0}while((s|0)<(u|0));zb(r,j,k,l);a[q>>0]=k;p=hd(k|0,l|0,8)|0;w=q+1|0;a[w>>0]=p;p=hd(k|0,l|0,16)|0;v=q+2|0;a[v>>0]=p;p=hd(k|0,l|0,24)|0;m=q+3|0;a[m>>0]=p;p=q+4|0;a[p>>0]=l;j=hd(k|0,l|0,40)|0;s=q+5|0;a[s>>0]=j;j=hd(k|0,l|0,48)|0;u=q+6|0;a[u>>0]=j;l=hd(k|0,l|0,56)|0;j=q+7|0;a[j>>0]=l;zb(r,q,8,0);Ec(b,f,g,h,n,o);zb(r,b,g,h);a[q>>0]=g;n=hd(g|0,h|0,8)|0;a[w>>0]=n;n=hd(g|0,h|0,16)|0;a[v>>0]=n;n=hd(g|0,h|0,24)|0;a[m>>0]=n;a[p>>0]=h;n=hd(g|0,h|0,40)|0;a[s>>0]=n;n=hd(g|0,h|0,48)|0;a[u>>0]=n;n=hd(g|0,h|0,56)|0;a[j>>0]=n;zb(r,q,8,0);Ab(r,b+g|0);gd(r|0,0,144)|0;if(!e){i=t;return 0}v=fd(g|0,h|0,16,0)|0;w=e;c[w>>2]=v;c[w+4>>2]=C;i=t;return 0}function Ca(b,e,f,g,h,j,k,l,m,n,o){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;v=i;i=i+304|0;p=v+144|0;r=v;q=v+232|0;f=v+224|0;t=v+208|0;s=(e|0)!=0;if(s){w=e;c[w>>2]=0;c[w+4>>2]=0}if(j>>>0<0|(j|0)==0&h>>>0<16){n=-1;i=v;return n|0}Fc(p,o);c[p+48>>2]=0;c[p+52>>2]=0;c[p+56>>2]=(d[n+1>>0]|0)<<8|(d[n>>0]|0)|(d[n+2>>0]|0)<<16|(d[n+3>>0]|0)<<24;c[p+60>>2]=(d[n+5>>0]|0)<<8|(d[n+4>>0]|0)|(d[n+6>>0]|0)<<16|(d[n+7>>0]|0)<<24;u=q+0|0;w=u+64|0;do{a[u>>0]=0;u=u+1|0}while((u|0)<(w|0));Gc(p,q,q,64,0);yb(r,q);u=q+0|0;w=u+64|0;do{a[u>>0]=0;u=u+1|0}while((u|0)<(w|0));zb(r,k,l,m);a[f>>0]=l;x=hd(l|0,m|0,8)|0;A=f+1|0;a[A>>0]=x;x=hd(l|0,m|0,16)|0;z=f+2|0;a[z>>0]=x;x=hd(l|0,m|0,24)|0;y=f+3|0;a[y>>0]=x;x=f+4|0;a[x>>0]=m;p=hd(l|0,m|0,40)|0;k=f+5|0;a[k>>0]=p;p=hd(l|0,m|0,48)|0;w=f+6|0;a[w>>0]=p;p=hd(l|0,m|0,56)|0;u=f+7|0;a[u>>0]=p;zb(r,f,8,0);p=fd(h|0,j|0,-16,-1)|0;q=C;zb(r,g,p,q);a[f>>0]=p;m=hd(p|0,q|0,8)|0;a[A>>0]=m;m=hd(p|0,q|0,16)|0;a[z>>0]=m;m=hd(p|0,q|0,24)|0;a[y>>0]=m;a[x>>0]=q;m=hd(p|0,q|0,40)|0;a[k>>0]=m;k=hd(p|0,q|0,48)|0;a[w>>0]=k;w=hd(p|0,q|0,56)|0;a[u>>0]=w;zb(r,f,8,0);Ab(r,t);gd(r|0,0,144)|0;f=((a[g+(h+-15)>>0]^a[t+1>>0]|a[g+(h+-16)>>0]^a[t>>0]|a[g+(h+-14)>>0]^a[t+2>>0]|a[g+(h+-13)>>0]^a[t+3>>0]|a[g+(h+-12)>>0]^a[t+4>>0]|a[g+(h+-11)>>0]^a[t+5>>0]|a[g+(h+-10)>>0]^a[t+6>>0]|a[g+(h+-9)>>0]^a[t+7>>0]|a[g+(h+-8)>>0]^a[t+8>>0]|a[g+(h+-7)>>0]^a[t+9>>0]|a[g+(h+-6)>>0]^a[t+10>>0]|a[g+(h+-5)>>0]^a[t+11>>0]|a[g+(h+-4)>>0]^a[t+12>>0]|a[g+(h+-3)>>0]^a[t+13>>0]|a[g+(h+-2)>>0]^a[t+14>>0]|a[g+(h+-1)>>0]^a[t+15>>0])&255)+511&256;u=t+0|0;w=u+16|0;do{a[u>>0]=0;u=u+1|0}while((u|0)<(w|0));if(!f){gd(b|0,0,p|0)|0;A=-1;i=v;return A|0}Ec(b,g,p,q,n,o);if(!s){A=0;i=v;return A|0}A=e;c[A>>2]=p;c[A+4>>2]=q;A=0;i=v;return A|0}function Da(){return 32}function Ea(){return 8}function Fa(){return 0}function Ga(){return 16}function Ha(){return 32}function Ia(){return 32}function Ja(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;La(a,b,c,d,e);return 0}function Ka(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=i;i=i+32|0;g=h;La(g,c,d,e,f);e=Hc(b,g)|0;d=(g|0)==(b|0);f=0;c=0;do{f=a[b+c>>0]^a[g+c>>0]|f;c=c+1|0}while((c|0)!=32);i=h;return (d?-1:e)|(((f&255)+511|0)>>>8&1)+-1|0}function La(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=i;i=i+608|0;n=p+480|0;m=p+416|0;o=p;j=o+64|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;j=o;c[j>>2]=-205731576;c[j+4>>2]=1779033703;j=o+8|0;c[j>>2]=-2067093701;c[j+4>>2]=-1150833019;j=o+16|0;c[j>>2]=-23791573;c[j+4>>2]=1013904242;j=o+24|0;c[j>>2]=1595750129;c[j+4>>2]=-1521486534;j=o+32|0;c[j>>2]=-1377402159;c[j+4>>2]=1359893119;j=o+40|0;c[j>>2]=725511199;c[j+4>>2]=-1694144372;j=o+48|0;c[j>>2]=-79577749;c[j+4>>2]=528734635;j=o+56|0;c[j>>2]=327033209;c[j+4>>2]=1541459225;j=n+0|0;k=j+128|0;do{a[j>>0]=54;j=j+1|0}while((j|0)<(k|0));j=54;h=0;while(1){a[n+h>>0]=j^a[g+h>>0];h=h+1|0;if((h|0)==32)break;j=a[n+h>>0]|0}ub(o,n,128,0);l=o+208|0;j=o+272|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;j=l;c[j>>2]=-205731576;c[j+4>>2]=1779033703;j=o+216|0;c[j>>2]=-2067093701;c[j+4>>2]=-1150833019;j=o+224|0;c[j>>2]=-23791573;c[j+4>>2]=1013904242;j=o+232|0;c[j>>2]=1595750129;c[j+4>>2]=-1521486534;j=o+240|0;c[j>>2]=-1377402159;c[j+4>>2]=1359893119;j=o+248|0;c[j>>2]=725511199;c[j+4>>2]=-1694144372;j=o+256|0;c[j>>2]=-79577749;c[j+4>>2]=528734635;j=o+264|0;c[j>>2]=327033209;c[j+4>>2]=1541459225;j=n+0|0;k=j+128|0;do{a[j>>0]=92;j=j+1|0}while((j|0)<(k|0));h=92;j=0;while(1){a[n+j>>0]=h^a[g+j>>0];j=j+1|0;if((j|0)==32)break;h=a[n+j>>0]|0}ub(l,n,128,0);ub(o,d,e,f);vb(o,m);ub(l,m,64,0);vb(l,n);j=b+0|0;h=n+0|0;k=j+32|0;do{a[j>>0]=a[h>>0]|0;j=j+1|0;h=h+1|0}while((j|0)<(k|0));i=p;return}function Ma(){return 32}function Na(){return 32}function Oa(){return 32}function Pa(){return 32}function Qa(){return 24}function Ra(){return 16}function Sa(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;k=i;i=i+272|0;h=k;g=k+208|0;j=h;c[j>>2]=-205731576;c[j+4>>2]=1779033703;j=h+8|0;c[j>>2]=-2067093701;c[j+4>>2]=-1150833019;j=h+16|0;c[j>>2]=-23791573;c[j+4>>2]=1013904242;j=h+24|0;c[j>>2]=1595750129;c[j+4>>2]=-1521486534;j=h+32|0;c[j>>2]=-1377402159;c[j+4>>2]=1359893119;j=h+40|0;c[j>>2]=725511199;c[j+4>>2]=-1694144372;j=h+48|0;c[j>>2]=-79577749;c[j+4>>2]=528734635;j=h+56|0;c[j>>2]=327033209;c[j+4>>2]=1541459225;j=h+72|0;c[j>>2]=256;c[j+4>>2]=0;j=h+64|0;c[j>>2]=0;c[j+4>>2]=0;j=h+80|0;e=e+0|0;f=j+32|0;do{a[j>>0]=a[e>>0]|0;j=j+1|0;e=e+1|0}while((j|0)<(f|0));vb(h,g);j=d+0|0;e=g+0|0;f=j+32|0;do{a[j>>0]=a[e>>0]|0;j=j+1|0;e=e+1|0}while((j|0)<(f|0));Yc(b,d,33016);i=k;return 0}function Ta(b,c){b=b|0;c=c|0;var d=0;d=0;do{a[c+d>>0]=na(32376)|0;d=d+1|0}while((d|0)!=32);Yc(b,c,33016);return 0}function Ua(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=i;i=i+32|0;e=d;Yc(e,c,b);bb(a,8,e,24);i=d;return 0}function Va(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Zb(a,b,c,d,e,f,g)|0;return 0}function Wa(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;i=i+64|0;l=j+32|0;k=j;Yc(l,h,g);bb(k,8,l,24);Zb(a,b,c,d,e,f,k)|0;i=j;return 0}function Xa(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0>0|(d|0)==0&c>>>0>4294967279){e=-1;return e|0}Zb(a+16|0,a,b,c,d,e,f)|0;e=0;return e|0}function Ya(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;k=i;i=i+64|0;j=k+32|0;h=k;if(d>>>0>0|(d|0)==0&c>>>0>4294967279){g=-1;i=k;return g|0}Yc(j,g,f);bb(h,8,j,24);Zb(a+16|0,a,b,c,d,e,h)|0;g=0;i=k;return g|0}function Za(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return $b(a,b,c,d,e,f,g)|0}function _a(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;i=i+64|0;l=j+32|0;k=j;Yc(l,h,g);bb(k,8,l,24);h=$b(a,b,c,d,e,f,k)|0;i=j;return h|0}function $a(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if(d>>>0<0|(d|0)==0&c>>>0<16){e=-1;return e|0}d=fd(c|0,d|0,-16,-1)|0;e=$b(a,b+16|0,b,d,C,e,f)|0;return e|0}function ab(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;k=i;i=i+64|0;j=k+32|0;h=k;if(d>>>0<0|(d|0)==0&c>>>0<16){g=-1;i=k;return g|0}c=fd(c|0,d|0,-16,-1)|0;d=C;Yc(j,g,f);bb(h,8,j,24);g=$b(a,b+16|0,b,c,d,e,h)|0;i=k;return g|0}function bb(b,c,e,f){b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;k=20;l=(d[f+1>>0]|0)<<8|(d[f>>0]|0)|(d[f+2>>0]|0)<<16|(d[f+3>>0]|0)<<24;m=(d[e+1>>0]|0)<<8|(d[e>>0]|0)|(d[e+2>>0]|0)<<16|(d[e+3>>0]|0)<<24;n=(d[f+9>>0]|0)<<8|(d[f+8>>0]|0)|(d[f+10>>0]|0)<<16|(d[f+11>>0]|0)<<24;o=(d[e+17>>0]|0)<<8|(d[e+16>>0]|0)|(d[e+18>>0]|0)<<16|(d[e+19>>0]|0)<<24;p=(d[e+21>>0]|0)<<8|(d[e+20>>0]|0)|(d[e+22>>0]|0)<<16|(d[e+23>>0]|0)<<24;q=(d[e+25>>0]|0)<<8|(d[e+24>>0]|0)|(d[e+26>>0]|0)<<16|(d[e+27>>0]|0)<<24;r=(d[e+29>>0]|0)<<8|(d[e+28>>0]|0)|(d[e+30>>0]|0)<<16|(d[e+31>>0]|0)<<24;s=(d[f+13>>0]|0)<<8|(d[f+12>>0]|0)|(d[f+14>>0]|0)<<16|(d[f+15>>0]|0)<<24;t=(d[e+5>>0]|0)<<8|(d[e+4>>0]|0)|(d[e+6>>0]|0)<<16|(d[e+7>>0]|0)<<24;u=(d[e+9>>0]|0)<<8|(d[e+8>>0]|0)|(d[e+10>>0]|0)<<16|(d[e+11>>0]|0)<<24;j=(d[e+13>>0]|0)<<8|(d[e+12>>0]|0)|(d[e+14>>0]|0)<<16|(d[e+15>>0]|0)<<24;e=(d[f+5>>0]|0)<<8|(d[f+4>>0]|0)|(d[f+6>>0]|0)<<16|(d[f+7>>0]|0)<<24;g=(d[c+1>>0]|0)<<8|(d[c>>0]|0)|(d[c+2>>0]|0)<<16|(d[c+3>>0]|0)<<24;h=(d[c+5>>0]|0)<<8|(d[c+4>>0]|0)|(d[c+6>>0]|0)<<16|(d[c+7>>0]|0)<<24;i=(d[c+9>>0]|0)<<8|(d[c+8>>0]|0)|(d[c+10>>0]|0)<<16|(d[c+11>>0]|0)<<24;f=(d[c+13>>0]|0)<<8|(d[c+12>>0]|0)|(d[c+14>>0]|0)<<16|(d[c+15>>0]|0)<<24;do{D=p+l|0;D=(D>>>25|D<<7)^j;A=D+l|0;A=(A>>>23|A<<9)^i;x=A+D|0;x=(x>>>19|x<<13)^p;G=x+A|0;G=(G>>>14|G<<18)^l;z=e+m|0;z=f^(z>>>25|z<<7);w=z+e|0;w=q^(w>>>23|w<<9);J=w+z|0;J=(J>>>19|J<<13)^m;C=J+w|0;C=(C>>>14|C<<18)^e;v=n+g|0;v=r^(v>>>25|v<<7);I=v+n|0;I=(I>>>23|I<<9)^t;F=I+v|0;F=(F>>>19|F<<13)^g;y=F+I|0;y=(y>>>14|y<<18)^n;H=s+o|0;H=(H>>>25|H<<7)^u;E=H+s|0;E=(E>>>23|E<<9)^h;B=E+H|0;B=(B>>>19|B<<13)^o;c=B+E|0;c=(c>>>14|c<<18)^s;K=G+H|0;m=(K>>>25|K<<7)^J;J=m+G|0;t=(J>>>23|J<<9)^I;I=t+m|0;u=(I>>>19|I<<13)^H;H=u+t|0;l=(H>>>14|H<<18)^G;G=C+D|0;g=(G>>>25|G<<7)^F;F=g+C|0;h=(F>>>23|F<<9)^E;E=h+g|0;j=(E>>>19|E<<13)^D;D=j+h|0;e=(D>>>14|D<<18)^C;C=y+z|0;o=(C>>>25|C<<7)^B;B=o+y|0;i=(B>>>23|B<<9)^A;A=i+o|0;f=(A>>>19|A<<13)^z;z=f+i|0;n=(z>>>14|z<<18)^y;y=c+v|0;p=(y>>>25|y<<7)^x;x=p+c|0;q=(x>>>23|x<<9)^w;w=q+p|0;r=(w>>>19|w<<13)^v;v=r+q|0;s=(v>>>14|v<<18)^c;k=k+-2|0}while((k|0)>0);a[b>>0]=l;a[b+1>>0]=l>>>8;a[b+2>>0]=l>>>16;a[b+3>>0]=l>>>24;a[b+4>>0]=e;a[b+5>>0]=e>>>8;a[b+6>>0]=e>>>16;a[b+7>>0]=e>>>24;a[b+8>>0]=n;a[b+9>>0]=n>>>8;a[b+10>>0]=n>>>16;a[b+11>>0]=n>>>24;a[b+12>>0]=s;a[b+13>>0]=s>>>8;a[b+14>>0]=s>>>16;a[b+15>>0]=s>>>24;a[b+16>>0]=g;a[b+17>>0]=g>>>8;a[b+18>>0]=g>>>16;a[b+19>>0]=g>>>24;a[b+20>>0]=h;a[b+21>>0]=h>>>8;a[b+22>>0]=h>>>16;a[b+23>>0]=h>>>24;a[b+24>>0]=i;a[b+25>>0]=i>>>8;a[b+26>>0]=i>>>16;a[b+27>>0]=i>>>24;a[b+28>>0]=f;a[b+29>>0]=f>>>8;a[b+30>>0]=f>>>16;a[b+31>>0]=f>>>24;return}function cb(b,c,e,f){b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;F=(d[f+1>>0]|0)<<8|(d[f>>0]|0)|(d[f+2>>0]|0)<<16|(d[f+3>>0]|0)<<24;G=(d[e+1>>0]|0)<<8|(d[e>>0]|0)|(d[e+2>>0]|0)<<16|(d[e+3>>0]|0)<<24;H=(d[e+5>>0]|0)<<8|(d[e+4>>0]|0)|(d[e+6>>0]|0)<<16|(d[e+7>>0]|0)<<24;I=(d[e+9>>0]|0)<<8|(d[e+8>>0]|0)|(d[e+10>>0]|0)<<16|(d[e+11>>0]|0)<<24;J=(d[e+13>>0]|0)<<8|(d[e+12>>0]|0)|(d[e+14>>0]|0)<<16|(d[e+15>>0]|0)<<24;B=(d[f+5>>0]|0)<<8|(d[f+4>>0]|0)|(d[f+6>>0]|0)<<16|(d[f+7>>0]|0)<<24;C=(d[c+1>>0]|0)<<8|(d[c>>0]|0)|(d[c+2>>0]|0)<<16|(d[c+3>>0]|0)<<24;D=(d[c+5>>0]|0)<<8|(d[c+4>>0]|0)|(d[c+6>>0]|0)<<16|(d[c+7>>0]|0)<<24;E=(d[c+9>>0]|0)<<8|(d[c+8>>0]|0)|(d[c+10>>0]|0)<<16|(d[c+11>>0]|0)<<24;w=(d[c+13>>0]|0)<<8|(d[c+12>>0]|0)|(d[c+14>>0]|0)<<16|(d[c+15>>0]|0)<<24;x=(d[f+9>>0]|0)<<8|(d[f+8>>0]|0)|(d[f+10>>0]|0)<<16|(d[f+11>>0]|0)<<24;y=(d[e+17>>0]|0)<<8|(d[e+16>>0]|0)|(d[e+18>>0]|0)<<16|(d[e+19>>0]|0)<<24;z=(d[e+21>>0]|0)<<8|(d[e+20>>0]|0)|(d[e+22>>0]|0)<<16|(d[e+23>>0]|0)<<24;A=(d[e+25>>0]|0)<<8|(d[e+24>>0]|0)|(d[e+26>>0]|0)<<16|(d[e+27>>0]|0)<<24;v=(d[e+29>>0]|0)<<8|(d[e+28>>0]|0)|(d[e+30>>0]|0)<<16|(d[e+31>>0]|0)<<24;f=(d[f+13>>0]|0)<<8|(d[f+12>>0]|0)|(d[f+14>>0]|0)<<16|(d[f+15>>0]|0)<<24;e=20;c=F;g=G;h=x;i=y;j=z;k=A;l=v;m=f;n=H;o=I;p=J;q=B;r=C;s=D;t=E;u=w;do{T=c+j|0;T=(T>>>25|T<<7)^p;Q=T+c|0;Q=(Q>>>23|Q<<9)^t;N=Q+T|0;N=(N>>>19|N<<13)^j;W=N+Q|0;W=(W>>>14|W<<18)^c;P=g+q|0;P=(P>>>25|P<<7)^u;M=P+q|0;M=(M>>>23|M<<9)^k;Z=M+P|0;Z=(Z>>>19|Z<<13)^g;S=Z+M|0;S=(S>>>14|S<<18)^q;L=r+h|0;L=(L>>>25|L<<7)^l;Y=L+h|0;Y=(Y>>>23|Y<<9)^n;V=Y+L|0;V=(V>>>19|V<<13)^r;O=V+Y|0;O=(O>>>14|O<<18)^h;X=i+m|0;X=o^(X>>>25|X<<7);U=X+m|0;U=(U>>>23|U<<9)^s;R=U+X|0;R=(R>>>19|R<<13)^i;K=R+U|0;K=(K>>>14|K<<18)^m;_=W+X|0;g=(_>>>25|_<<7)^Z;Z=g+W|0;n=(Z>>>23|Z<<9)^Y;Y=n+g|0;o=(Y>>>19|Y<<13)^X;X=o+n|0;c=(X>>>14|X<<18)^W;W=S+T|0;r=(W>>>25|W<<7)^V;V=r+S|0;s=(V>>>23|V<<9)^U;U=s+r|0;p=(U>>>19|U<<13)^T;T=p+s|0;q=(T>>>14|T<<18)^S;S=O+P|0;i=(S>>>25|S<<7)^R;R=i+O|0;t=(R>>>23|R<<9)^Q;Q=t+i|0;u=(Q>>>19|Q<<13)^P;P=u+t|0;h=(P>>>14|P<<18)^O;O=K+L|0;j=(O>>>25|O<<7)^N;N=j+K|0;k=(N>>>23|N<<9)^M;M=k+j|0;l=(M>>>19|M<<13)^L;L=l+k|0;m=(L>>>14|L<<18)^K;e=e+-2|0}while((e|0)>0);L=c+F|0;M=g+G|0;N=n+H|0;O=o+I|0;P=p+J|0;Q=q+B|0;R=r+C|0;S=s+D|0;T=t+E|0;U=u+w|0;V=h+x|0;W=i+y|0;X=j+z|0;Y=k+A|0;Z=l+v|0;_=m+f|0;a[b>>0]=L;a[b+1>>0]=L>>>8;a[b+2>>0]=L>>>16;a[b+3>>0]=L>>>24;a[b+4>>0]=M;a[b+5>>0]=M>>>8;a[b+6>>0]=M>>>16;a[b+7>>0]=M>>>24;a[b+8>>0]=N;a[b+9>>0]=N>>>8;a[b+10>>0]=N>>>16;a[b+11>>0]=N>>>24;a[b+12>>0]=O;a[b+13>>0]=O>>>8;a[b+14>>0]=O>>>16;a[b+15>>0]=O>>>24;a[b+16>>0]=P;a[b+17>>0]=P>>>8;a[b+18>>0]=P>>>16;a[b+19>>0]=P>>>24;a[b+20>>0]=Q;a[b+21>>0]=Q>>>8;a[b+22>>0]=Q>>>16;a[b+23>>0]=Q>>>24;a[b+24>>0]=R;a[b+25>>0]=R>>>8;a[b+26>>0]=R>>>16;a[b+27>>0]=R>>>24;a[b+28>>0]=S;a[b+29>>0]=S>>>8;a[b+30>>0]=S>>>16;a[b+31>>0]=S>>>24;a[b+32>>0]=T;a[b+33>>0]=T>>>8;a[b+34>>0]=T>>>16;a[b+35>>0]=T>>>24;a[b+36>>0]=U;a[b+37>>0]=U>>>8;a[b+38>>0]=U>>>16;a[b+39>>0]=U>>>24;a[b+40>>0]=V;a[b+41>>0]=V>>>8;a[b+42>>0]=V>>>16;a[b+43>>0]=V>>>24;a[b+44>>0]=W;a[b+45>>0]=W>>>8;a[b+46>>0]=W>>>16;a[b+47>>0]=W>>>24;a[b+48>>0]=X;a[b+49>>0]=X>>>8;a[b+50>>0]=X>>>16;a[b+51>>0]=X>>>24;a[b+52>>0]=Y;a[b+53>>0]=Y>>>8;a[b+54>>0]=Y>>>16;a[b+55>>0]=Y>>>24;a[b+56>>0]=Z;a[b+57>>0]=Z>>>8;a[b+58>>0]=Z>>>16;a[b+59>>0]=Z>>>24;a[b+60>>0]=_;a[b+61>>0]=_>>>8;a[b+62>>0]=_>>>16;a[b+63>>0]=_>>>24;return}function db(){return 16}function eb(){return 64}function fb(){return 32}function gb(){return 16}function hb(){return 64}function ib(){return 32}function jb(){return 357}function kb(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;y=i;w=i=i+63&-64;i=i+496|0;x=w+360|0;if((e+-1|0)>>>0>63|k>>>0>64){b=-1;i=y;return b|0}if(e>>>0>=256)ha(40,64,18,120);if(k>>>0>=256)ha(152,64,19,120);v=e&255;if((f|0)==0|(b|0)==0){b=-1;i=y;return b|0}m=(j|0)==0;n=m?0:k&255;k=(v+-1&255)>63;do if(!(n<<24>>24))if(k){b=-1;i=y;return b|0}else{gd(w|0,0,357)|0;l=w;c[l>>2]=e&255^-222443256;c[l+4>>2]=1779033703;l=w+8|0;c[l>>2]=-2067093701;c[l+4>>2]=-1150833019;l=w+16|0;c[l>>2]=-23791573;c[l+4>>2]=1013904242;l=w+24|0;c[l>>2]=1595750129;c[l+4>>2]=-1521486534;l=w+32|0;c[l>>2]=-1377402159;c[l+4>>2]=1359893119;l=w+40|0;c[l>>2]=725511199;c[l+4>>2]=-1694144372;l=w+48|0;c[l>>2]=-79577749;c[l+4>>2]=528734635;l=w+56|0;c[l>>2]=327033209;c[l+4>>2]=1541459225;l=0;break}else if(k|(m|(n&255)>64)){b=-1;i=y;return b|0}else{k=n&255;gd(w|0,0,357)|0;p=id(n&255|0,0,8)|0;o=w;c[o>>2]=(p|e&255)^-222443256;c[o+4>>2]=C^1779033703;o=w+8|0;c[o>>2]=-2067093701;c[o+4>>2]=-1150833019;o=w+16|0;c[o>>2]=-23791573;c[o+4>>2]=1013904242;o=w+24|0;c[o>>2]=1595750129;c[o+4>>2]=-1521486534;o=w+32|0;c[o>>2]=-1377402159;c[o+4>>2]=1359893119;o=w+40|0;c[o>>2]=725511199;c[o+4>>2]=-1694144372;o=w+48|0;c[o>>2]=-79577749;c[o+4>>2]=528734635;o=w+56|0;c[o>>2]=327033209;c[o+4>>2]=1541459225;o=x+0|0;p=o+128|0;do{a[o>>0]=0;o=o+1|0}while((o|0)<(p|0));kd(x|0,j|0,k|0)|0;k=w+352|0;o=w+96|0;l=x+0|0;p=o+128|0;do{a[o>>0]=a[l>>0]|0;o=o+1|0;l=l+1|0}while((o|0)<(p|0));c[k>>2]=128;l=128;break}while(0);a:do if(!((g|0)==0&(h|0)==0)){q=w+352|0;r=w+96|0;s=w+64|0;t=w+72|0;u=w+224|0;m=h;n=g;while(1){k=256-l|0;j=w+l+96|0;if(!(m>>>0>0|(m|0)==0&n>>>0>k>>>0))break;kd(j|0,f|0,k|0)|0;c[q>>2]=(c[q>>2]|0)+k;p=s;o=c[p>>2]|0;p=c[p+4>>2]|0;g=fd(o|0,p|0,128,0)|0;l=s;c[l>>2]=g;c[l+4>>2]=C;l=t;l=fd((p>>>0>4294967295|(p|0)==-1&o>>>0>4294967167)&1|0,0,c[l>>2]|0,c[l+4>>2]|0)|0;o=t;c[o>>2]=l;c[o+4>>2]=C;ob(w,r);o=r+0|0;l=u+0|0;p=o+128|0;do{c[o>>2]=c[l>>2];o=o+4|0;l=l+4|0}while((o|0)<(p|0));l=(c[q>>2]|0)+-128|0;c[q>>2]=l;j=ed(n|0,m|0,k|0,0)|0;if((n|0)==(k|0)&(m|0)==0)break a;else{f=f+k|0;m=C;n=j}}kd(j|0,f|0,n|0)|0;l=fd(c[q>>2]|0,0,n|0,m|0)|0;c[q>>2]=l}while(0);j=e&255;if((v&255)>64){b=0;i=y;return b|0}m=w+352|0;k=w+64|0;if(l>>>0>128){e=k;v=c[e>>2]|0;e=c[e+4>>2]|0;l=fd(v|0,e|0,128,0)|0;n=k;c[n>>2]=l;c[n+4>>2]=C;n=w+72|0;l=n;l=fd((e>>>0>4294967295|(e|0)==-1&v>>>0>4294967167)&1|0,0,c[l>>2]|0,c[l+4>>2]|0)|0;v=n;c[v>>2]=l;c[v+4>>2]=C;v=w+96|0;ob(w,v);l=(c[m>>2]|0)+-128|0;c[m>>2]=l;ld(v|0,w+224|0,l|0)|0;l=c[m>>2]|0}else n=w+72|0;u=k;v=c[u>>2]|0;u=c[u+4>>2]|0;g=fd(v|0,u|0,l|0,0)|0;t=C;h=k;c[h>>2]=g;c[h+4>>2]=t;h=n;e=h;h=h+4|0;h=fd((t>>>0<u>>>0|(t|0)==(u|0)&g>>>0<v>>>0)&1|0,0,d[e>>0]|d[e+1>>0]<<8|d[e+2>>0]<<16|d[e+3>>0]<<24|0,d[h>>0]|d[h+1>>0]<<8|d[h+2>>0]<<16|d[h+3>>0]<<24|0)|0;e=C;v=n;g=v;a[g>>0]=h;a[g+1>>0]=h>>8;a[g+2>>0]=h>>16;a[g+3>>0]=h>>24;v=v+4|0;a[v>>0]=e;a[v+1>>0]=e>>8;a[v+2>>0]=e>>16;a[v+3>>0]=e>>24;if(a[w+356>>0]|0){v=w+88|0;c[v>>2]=-1;c[v+4>>2]=-1}o=w+80|0;c[o>>2]=-1;c[o+4>>2]=-1;gd(w+l+96|0,0,256-l|0)|0;ob(w,w+96|0);o=x+0|0;l=w+0|0;p=o+64|0;do{a[o>>0]=a[l>>0]|0;o=o+1|0;l=l+1|0}while((o|0)<(p|0));kd(b|0,x|0,j|0)|0;b=0;i=y;return b|0}function lb(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;j=i;h=i=i+63&-64;i=i+128|0;if((e+-1|0)>>>0>63|d>>>0>64){b=-1;i=j;return b|0}if(e>>>0>=256)ha(40,64,53,176);if(d>>>0>=256)ha(152,64,54,176);f=((e&255)+-1&255)>63;if((c|0)==0|(d|0)==0){if(f){b=-1;i=j;return b|0}gd(b|0,0,357)|0;g=e&255^-222443256;h=b;c=h;a[c>>0]=g;a[c+1>>0]=g>>8;a[c+2>>0]=g>>16;a[c+3>>0]=g>>24;h=h+4|0;a[h>>0]=103;a[h+1>>0]=230;a[h+2>>0]=9;a[h+3>>0]=106;h=b+8|0;c=h;a[c>>0]=-2067093701;a[c+1>>0]=-2067093701>>8;a[c+2>>0]=-2067093701>>16;a[c+3>>0]=-2067093701>>24;h=h+4|0;a[h>>0]=-1150833019;a[h+1>>0]=-1150833019>>8;a[h+2>>0]=-1150833019>>16;a[h+3>>0]=-1150833019>>24;h=b+16|0;c=h;a[c>>0]=-23791573;a[c+1>>0]=-23791573>>8;a[c+2>>0]=-23791573>>16;a[c+3>>0]=-23791573>>24;h=h+4|0;a[h>>0]=114;a[h+1>>0]=243;a[h+2>>0]=110;a[h+3>>0]=60;h=b+24|0;c=h;a[c>>0]=241;a[c+1>>0]=54;a[c+2>>0]=29;a[c+3>>0]=95;h=h+4|0;a[h>>0]=-1521486534;a[h+1>>0]=-1521486534>>8;a[h+2>>0]=-1521486534>>16;a[h+3>>0]=-1521486534>>24;h=b+32|0;c=h;a[c>>0]=-1377402159;a[c+1>>0]=-1377402159>>8;a[c+2>>0]=-1377402159>>16;a[c+3>>0]=-1377402159>>24;h=h+4|0;a[h>>0]=127;a[h+1>>0]=82;a[h+2>>0]=14;a[h+3>>0]=81;h=b+40|0;c=h;a[c>>0]=31;a[c+1>>0]=108;a[c+2>>0]=62;a[c+3>>0]=43;h=h+4|0;a[h>>0]=-1694144372;a[h+1>>0]=-1694144372>>8;a[h+2>>0]=-1694144372>>16;a[h+3>>0]=-1694144372>>24;h=b+48|0;c=h;a[c>>0]=-79577749;a[c+1>>0]=-79577749>>8;a[c+2>>0]=-79577749>>16;a[c+3>>0]=-79577749>>24;h=h+4|0;a[h>>0]=171;a[h+1>>0]=217;a[h+2>>0]=131;a[h+3>>0]=31;b=b+56|0;h=b;a[h>>0]=121;a[h+1>>0]=33;a[h+2>>0]=126;a[h+3>>0]=19;b=b+4|0;a[b>>0]=25;a[b+1>>0]=205;a[b+2>>0]=224;a[b+3>>0]=91;b=0;i=j;return b|0}if(f){b=-1;i=j;return b|0}if(((d&255)+-1&255)>63){b=-1;i=j;return b|0}d=d&255;gd(b|0,0,357)|0;k=id(d|0,0,8)|0;k=(k|e&255)^-222443256;g=C^1779033703;e=b;f=e;a[f>>0]=k;a[f+1>>0]=k>>8;a[f+2>>0]=k>>16;a[f+3>>0]=k>>24;e=e+4|0;a[e>>0]=g;a[e+1>>0]=g>>8;a[e+2>>0]=g>>16;a[e+3>>0]=g>>24;e=b+8|0;g=e;a[g>>0]=-2067093701;a[g+1>>0]=-2067093701>>8;a[g+2>>0]=-2067093701>>16;a[g+3>>0]=-2067093701>>24;e=e+4|0;a[e>>0]=-1150833019;a[e+1>>0]=-1150833019>>8;a[e+2>>0]=-1150833019>>16;a[e+3>>0]=-1150833019>>24;e=b+16|0;g=e;a[g>>0]=-23791573;a[g+1>>0]=-23791573>>8;a[g+2>>0]=-23791573>>16;a[g+3>>0]=-23791573>>24;e=e+4|0;a[e>>0]=114;a[e+1>>0]=243;a[e+2>>0]=110;a[e+3>>0]=60;e=b+24|0;g=e;a[g>>0]=241;a[g+1>>0]=54;a[g+2>>0]=29;a[g+3>>0]=95;e=e+4|0;a[e>>0]=-1521486534;a[e+1>>0]=-1521486534>>8;a[e+2>>0]=-1521486534>>16;a[e+3>>0]=-1521486534>>24;e=b+32|0;g=e;a[g>>0]=-1377402159;a[g+1>>0]=-1377402159>>8;a[g+2>>0]=-1377402159>>16;a[g+3>>0]=-1377402159>>24;e=e+4|0;a[e>>0]=127;a[e+1>>0]=82;a[e+2>>0]=14;a[e+3>>0]=81;e=b+40|0;g=e;a[g>>0]=31;a[g+1>>0]=108;a[g+2>>0]=62;a[g+3>>0]=43;e=e+4|0;a[e>>0]=-1694144372;a[e+1>>0]=-1694144372>>8;a[e+2>>0]=-1694144372>>16;a[e+3>>0]=-1694144372>>24;e=b+48|0;g=e;a[g>>0]=-79577749;a[g+1>>0]=-79577749>>8;a[g+2>>0]=-79577749>>16;a[g+3>>0]=-79577749>>24;e=e+4|0;a[e>>0]=171;a[e+1>>0]=217;a[e+2>>0]=131;a[e+3>>0]=31;e=b+56|0;g=e;a[g>>0]=121;a[g+1>>0]=33;a[g+2>>0]=126;a[g+3>>0]=19;e=e+4|0;a[e>>0]=25;a[e+1>>0]=205;a[e+2>>0]=224;a[e+3>>0]=91;e=h+0|0;g=e+128|0;do{a[e>>0]=0;e=e+1|0}while((e|0)<(g|0));kd(h|0,c|0,d|0)|0;d=b+352|0;e=b+96|0;f=h+0|0;g=e+128|0;do{a[e>>0]=a[f>>0]|0;e=e+1|0;f=f+1|0}while((e|0)<(g|0));a[d>>0]=128;a[d+1>>0]=0;a[d+2>>0]=0;a[d+3>>0]=0;k=0;i=j;return k|0}function mb(b,c,e,f){b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;if((e|0)==0&(f|0)==0)return 0;k=b+352|0;l=b+96|0;m=b+64|0;n=b+72|0;o=b+224|0;h=d[k>>0]|d[k+1>>0]<<8|d[k+2>>0]<<16|d[k+3>>0]<<24;j=e;while(1){i=256-h|0;e=b+h+96|0;if(!(f>>>0>0|(f|0)==0&j>>>0>i>>>0))break;kd(e|0,c|0,i|0)|0;h=(d[k>>0]|d[k+1>>0]<<8|d[k+2>>0]<<16|d[k+3>>0]<<24)+i|0;a[k>>0]=h;a[k+1>>0]=h>>8;a[k+2>>0]=h>>16;a[k+3>>0]=h>>24;h=m;e=h;e=d[e>>0]|d[e+1>>0]<<8|d[e+2>>0]<<16|d[e+3>>0]<<24;h=h+4|0;h=d[h>>0]|d[h+1>>0]<<8|d[h+2>>0]<<16|d[h+3>>0]<<24;s=fd(e|0,h|0,128,0)|0;g=C;q=m;r=q;a[r>>0]=s;a[r+1>>0]=s>>8;a[r+2>>0]=s>>16;a[r+3>>0]=s>>24;q=q+4|0;a[q>>0]=g;a[q+1>>0]=g>>8;a[q+2>>0]=g>>16;a[q+3>>0]=g>>24;q=n;g=q;q=q+4|0;q=fd((h>>>0>4294967295|(h|0)==-1&e>>>0>4294967167)&1|0,0,d[g>>0]|d[g+1>>0]<<8|d[g+2>>0]<<16|d[g+3>>0]<<24|0,d[q>>0]|d[q+1>>0]<<8|d[q+2>>0]<<16|d[q+3>>0]<<24|0)|0;g=C;e=n;h=e;a[h>>0]=q;a[h+1>>0]=q>>8;a[h+2>>0]=q>>16;a[h+3>>0]=q>>24;e=e+4|0;a[e>>0]=g;a[e+1>>0]=g>>8;a[e+2>>0]=g>>16;a[e+3>>0]=g>>24;ob(b,l);e=l+0|0;g=o+0|0;h=e+128|0;do{a[e>>0]=a[g>>0]|0;e=e+1|0;g=g+1|0}while((e|0)<(h|0));h=(d[k>>0]|d[k+1>>0]<<8|d[k+2>>0]<<16|d[k+3>>0]<<24)+-128|0;a[k>>0]=h;a[k+1>>0]=h>>8;a[k+2>>0]=h>>16;a[k+3>>0]=h>>24;e=ed(j|0,f|0,i|0,0)|0;if((j|0)==(i|0)&(f|0)==0){p=6;break}else{c=c+i|0;f=C;j=e}}if((p|0)==6)return 0;kd(e|0,c|0,j|0)|0;s=fd(d[k>>0]|d[k+1>>0]<<8|d[k+2>>0]<<16|d[k+3>>0]<<24|0,0,j|0,f|0)|0;a[k>>0]=s;a[k+1>>0]=s>>8;a[k+2>>0]=s>>16;a[k+3>>0]=s>>24;return 0}function nb(b,c,e){b=b|0;c=c|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;l=i;k=i=i+63&-64;i=i+64|0;if(e>>>0>=256)ha(40,64,106,208);j=e&255;if((e&255)>64){c=-1;i=l;return c|0}g=b+352|0;f=d[g>>0]|d[g+1>>0]<<8|d[g+2>>0]<<16|d[g+3>>0]<<24;h=b+64|0;if(f>>>0>128){n=h;m=n;m=d[m>>0]|d[m+1>>0]<<8|d[m+2>>0]<<16|d[m+3>>0]<<24;n=n+4|0;n=d[n>>0]|d[n+1>>0]<<8|d[n+2>>0]<<16|d[n+3>>0]<<24;p=fd(m|0,n|0,128,0)|0;o=C;e=h;f=e;a[f>>0]=p;a[f+1>>0]=p>>8;a[f+2>>0]=p>>16;a[f+3>>0]=p>>24;e=e+4|0;a[e>>0]=o;a[e+1>>0]=o>>8;a[e+2>>0]=o>>16;a[e+3>>0]=o>>24;e=b+72|0;o=e;f=o;o=o+4|0;o=fd((n>>>0>4294967295|(n|0)==-1&m>>>0>4294967167)&1|0,0,d[f>>0]|d[f+1>>0]<<8|d[f+2>>0]<<16|d[f+3>>0]<<24|0,d[o>>0]|d[o+1>>0]<<8|d[o+2>>0]<<16|d[o+3>>0]<<24|0)|0;f=C;m=e;n=m;a[n>>0]=o;a[n+1>>0]=o>>8;a[n+2>>0]=o>>16;a[n+3>>0]=o>>24;m=m+4|0;a[m>>0]=f;a[m+1>>0]=f>>8;a[m+2>>0]=f>>16;a[m+3>>0]=f>>24;m=b+96|0;ob(b,m);f=(d[g>>0]|d[g+1>>0]<<8|d[g+2>>0]<<16|d[g+3>>0]<<24)+-128|0;a[g>>0]=f;a[g+1>>0]=f>>8;a[g+2>>0]=f>>16;a[g+3>>0]=f>>24;ld(m|0,b+224|0,f|0)|0;f=d[g>>0]|d[g+1>>0]<<8|d[g+2>>0]<<16|d[g+3>>0]<<24}else e=b+72|0;g=h;p=g;p=d[p>>0]|d[p+1>>0]<<8|d[p+2>>0]<<16|d[p+3>>0]<<24;g=g+4|0;g=d[g>>0]|d[g+1>>0]<<8|d[g+2>>0]<<16|d[g+3>>0]<<24;n=fd(p|0,g|0,f|0,0)|0;q=C;m=h;o=m;a[o>>0]=n;a[o+1>>0]=n>>8;a[o+2>>0]=n>>16;a[o+3>>0]=n>>24;m=m+4|0;a[m>>0]=q;a[m+1>>0]=q>>8;a[m+2>>0]=q>>16;a[m+3>>0]=q>>24;m=e;o=m;m=m+4|0;m=fd((q>>>0<g>>>0|(q|0)==(g|0)&n>>>0<p>>>0)&1|0,0,d[o>>0]|d[o+1>>0]<<8|d[o+2>>0]<<16|d[o+3>>0]<<24|0,d[m>>0]|d[m+1>>0]<<8|d[m+2>>0]<<16|d[m+3>>0]<<24|0)|0;o=C;p=e;n=p;a[n>>0]=m;a[n+1>>0]=m>>8;a[n+2>>0]=m>>16;a[n+3>>0]=m>>24;p=p+4|0;a[p>>0]=o;a[p+1>>0]=o>>8;a[p+2>>0]=o>>16;a[p+3>>0]=o>>24;if(a[b+356>>0]|0){q=b+88|0;p=q;a[p>>0]=-1;a[p+1>>0]=-1>>8;a[p+2>>0]=-1>>16;a[p+3>>0]=-1>>24;q=q+4|0;a[q>>0]=-1;a[q+1>>0]=-1>>8;a[q+2>>0]=-1>>16;a[q+3>>0]=-1>>24}g=b+80|0;e=g;a[e>>0]=-1;a[e+1>>0]=-1>>8;a[e+2>>0]=-1>>16;a[e+3>>0]=-1>>24;g=g+4|0;a[g>>0]=-1;a[g+1>>0]=-1>>8;a[g+2>>0]=-1>>16;a[g+3>>0]=-1>>24;gd(b+f+96|0,0,256-f|0)|0;ob(b,b+96|0);g=k+0|0;e=b+0|0;f=g+64|0;do{a[g>>0]=a[e>>0]|0;g=g+1|0;e=e+1|0}while((g|0)<(f|0));kd(c|0,k|0,j|0)|0;q=0;i=l;return q|0}function ob(b,c){b=b|0;c=c|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0;P=c;R=P;R=d[R>>0]|d[R+1>>0]<<8|d[R+2>>0]<<16|d[R+3>>0]<<24;P=P+4|0;P=d[P>>0]|d[P+1>>0]<<8|d[P+2>>0]<<16|d[P+3>>0]<<24;U=c+8|0;W=U;W=d[W>>0]|d[W+1>>0]<<8|d[W+2>>0]<<16|d[W+3>>0]<<24;U=U+4|0;U=d[U>>0]|d[U+1>>0]<<8|d[U+2>>0]<<16|d[U+3>>0]<<24;x=c+16|0;t=x;t=d[t>>0]|d[t+1>>0]<<8|d[t+2>>0]<<16|d[t+3>>0]<<24;x=x+4|0;x=d[x>>0]|d[x+1>>0]<<8|d[x+2>>0]<<16|d[x+3>>0]<<24;l=c+24|0;h=l;h=d[h>>0]|d[h+1>>0]<<8|d[h+2>>0]<<16|d[h+3>>0]<<24;l=l+4|0;l=d[l>>0]|d[l+1>>0]<<8|d[l+2>>0]<<16|d[l+3>>0]<<24;$=c+32|0;p=$;p=d[p>>0]|d[p+1>>0]<<8|d[p+2>>0]<<16|d[p+3>>0]<<24;$=$+4|0;$=d[$>>0]|d[$+1>>0]<<8|d[$+2>>0]<<16|d[$+3>>0]<<24;F=c+40|0;H=F;H=d[H>>0]|d[H+1>>0]<<8|d[H+2>>0]<<16|d[H+3>>0]<<24;F=F+4|0;F=d[F>>0]|d[F+1>>0]<<8|d[F+2>>0]<<16|d[F+3>>0]<<24;u=c+48|0;s=u;s=d[s>>0]|d[s+1>>0]<<8|d[s+2>>0]<<16|d[s+3>>0]<<24;u=u+4|0;u=d[u>>0]|d[u+1>>0]<<8|d[u+2>>0]<<16|d[u+3>>0]<<24;r=c+56|0;n=r;n=d[n>>0]|d[n+1>>0]<<8|d[n+2>>0]<<16|d[n+3>>0]<<24;r=r+4|0;r=d[r>>0]|d[r+1>>0]<<8|d[r+2>>0]<<16|d[r+3>>0]<<24;i=c+64|0;g=i;g=d[g>>0]|d[g+1>>0]<<8|d[g+2>>0]<<16|d[g+3>>0]<<24;i=i+4|0;i=d[i>>0]|d[i+1>>0]<<8|d[i+2>>0]<<16|d[i+3>>0]<<24;Y=c+72|0;j=Y;j=d[j>>0]|d[j+1>>0]<<8|d[j+2>>0]<<16|d[j+3>>0]<<24;Y=Y+4|0;Y=d[Y>>0]|d[Y+1>>0]<<8|d[Y+2>>0]<<16|d[Y+3>>0]<<24;o=c+80|0;m=o;m=d[m>>0]|d[m+1>>0]<<8|d[m+2>>0]<<16|d[m+3>>0]<<24;o=o+4|0;o=d[o>>0]|d[o+1>>0]<<8|d[o+2>>0]<<16|d[o+3>>0]<<24;K=c+88|0;M=K;M=d[M>>0]|d[M+1>>0]<<8|d[M+2>>0]<<16|d[M+3>>0]<<24;K=K+4|0;K=d[K>>0]|d[K+1>>0]<<8|d[K+2>>0]<<16|d[K+3>>0]<<24;f=c+96|0;e=f;e=d[e>>0]|d[e+1>>0]<<8|d[e+2>>0]<<16|d[e+3>>0]<<24;f=f+4|0;f=d[f>>0]|d[f+1>>0]<<8|d[f+2>>0]<<16|d[f+3>>0]<<24;S=c+104|0;B=S;B=d[B>>0]|d[B+1>>0]<<8|d[B+2>>0]<<16|d[B+3>>0]<<24;S=S+4|0;S=d[S>>0]|d[S+1>>0]<<8|d[S+2>>0]<<16|d[S+3>>0]<<24;sa=c+112|0;ra=sa;ra=d[ra>>0]|d[ra+1>>0]<<8|d[ra+2>>0]<<16|d[ra+3>>0]<<24;sa=sa+4|0;sa=d[sa>>0]|d[sa+1>>0]<<8|d[sa+2>>0]<<16|d[sa+3>>0]<<24;A=c+120|0;y=A;y=d[y>>0]|d[y+1>>0]<<8|d[y+2>>0]<<16|d[y+3>>0]<<24;A=A+4|0;A=d[A>>0]|d[A+1>>0]<<8|d[A+2>>0]<<16|d[A+3>>0]<<24;ca=b;v=ca;ca=ca+4|0;N=b+8|0;oa=N;na=oa;na=d[na>>0]|d[na+1>>0]<<8|d[na+2>>0]<<16|d[na+3>>0]<<24;oa=oa+4|0;oa=d[oa>>0]|d[oa+1>>0]<<8|d[oa+2>>0]<<16|d[oa+3>>0]<<24;I=b+16|0;ka=I;ja=ka;ja=d[ja>>0]|d[ja+1>>0]<<8|d[ja+2>>0]<<16|d[ja+3>>0]<<24;ka=ka+4|0;ka=d[ka>>0]|d[ka+1>>0]<<8|d[ka+2>>0]<<16|d[ka+3>>0]<<24;D=b+24|0;ga=D;fa=ga;fa=d[fa>>0]|d[fa+1>>0]<<8|d[fa+2>>0]<<16|d[fa+3>>0]<<24;ga=ga+4|0;ga=d[ga>>0]|d[ga+1>>0]<<8|d[ga+2>>0]<<16|d[ga+3>>0]<<24;w=b+32|0;ma=w;la=ma;la=d[la>>0]|d[la+1>>0]<<8|d[la+2>>0]<<16|d[la+3>>0]<<24;ma=ma+4|0;ma=d[ma>>0]|d[ma+1>>0]<<8|d[ma+2>>0]<<16|d[ma+3>>0]<<24;q=b+40|0;ia=q;ha=ia;ha=d[ha>>0]|d[ha+1>>0]<<8|d[ha+2>>0]<<16|d[ha+3>>0]<<24;ia=ia+4|0;ia=d[ia>>0]|d[ia+1>>0]<<8|d[ia+2>>0]<<16|d[ia+3>>0]<<24;k=b+48|0;ua=k;ta=ua;ta=d[ta>>0]|d[ta+1>>0]<<8|d[ta+2>>0]<<16|d[ta+3>>0]<<24;ua=ua+4|0;ua=d[ua>>0]|d[ua+1>>0]<<8|d[ua+2>>0]<<16|d[ua+3>>0]<<24;c=b+56|0;qa=c;pa=qa;pa=d[pa>>0]|d[pa+1>>0]<<8|d[pa+2>>0]<<16|d[pa+3>>0]<<24;qa=qa+4|0;qa=d[qa>>0]|d[qa+1>>0]<<8|d[qa+2>>0]<<16|d[qa+3>>0]<<24;ba=b+64|0;aa=ba;ba=ba+4|0;aa=(d[aa>>0]|d[aa+1>>0]<<8|d[aa+2>>0]<<16|d[aa+3>>0]<<24)^-1377402159;ba=(d[ba>>0]|d[ba+1>>0]<<8|d[ba+2>>0]<<16|d[ba+3>>0]<<24)^1359893119;_=b+72|0;Z=_;_=_+4|0;Z=(d[Z>>0]|d[Z+1>>0]<<8|d[Z+2>>0]<<16|d[Z+3>>0]<<24)^725511199;_=(d[_>>0]|d[_+1>>0]<<8|d[_+2>>0]<<16|d[_+3>>0]<<24)^-1694144372;X=b+80|0;V=X;X=X+4|0;V=(d[V>>0]|d[V+1>>0]<<8|d[V+2>>0]<<16|d[V+3>>0]<<24)^-79577749;X=(d[X>>0]|d[X+1>>0]<<8|d[X+2>>0]<<16|d[X+3>>0]<<24)^528734635;ea=b+88|0;da=ea;ea=ea+4|0;da=(d[da>>0]|d[da+1>>0]<<8|d[da+2>>0]<<16|d[da+3>>0]<<24)^327033209;ea=(d[ea>>0]|d[ea+1>>0]<<8|d[ea+2>>0]<<16|d[ea+3>>0]<<24)^1541459225;ca=fd(la|0,ma|0,d[v>>0]|d[v+1>>0]<<8|d[v+2>>0]<<16|d[v+3>>0]<<24|0,d[ca>>0]|d[ca+1>>0]<<8|d[ca+2>>0]<<16|d[ca+3>>0]<<24|0)|0;ca=fd(ca|0,C|0,R|0,P|0)|0;v=C;aa=aa^ca;ba=ba^v;Q=fd(ba|0,aa|0,-205731576,1779033703)|0;T=C;la=Q^la;ma=T^ma;O=hd(la|0,ma|0,24)|0;L=C;ma=id(la|0,ma|0,40)|0;O=ma|O;L=C|L;v=fd(W|0,U|0,ca|0,v|0)|0;v=fd(v|0,C|0,O|0,L|0)|0;ca=C;ba=v^ba;aa=ca^aa;ma=hd(ba|0,aa|0,16)|0;la=C;aa=id(ba|0,aa|0,48)|0;ma=aa|ma;la=C|la;T=fd(ma|0,la|0,Q|0,T|0)|0;Q=C;O=T^O;L=Q^L;aa=hd(O|0,L|0,63)|0;ba=C;L=id(O|0,L|0,1)|0;aa=L|aa;ba=C|ba;oa=fd(ha|0,ia|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,t|0,x|0)|0;na=C;Z=Z^oa;_=_^na;L=fd(_|0,Z|0,-2067093701,-1150833019)|0;O=C;ha=L^ha;ia=O^ia;J=hd(ha|0,ia|0,24)|0;G=C;ia=id(ha|0,ia|0,40)|0;J=ia|J;G=C|G;na=fd(h|0,l|0,oa|0,na|0)|0;na=fd(na|0,C|0,J|0,G|0)|0;oa=C;_=na^_;Z=oa^Z;ia=hd(_|0,Z|0,16)|0;ha=C;Z=id(_|0,Z|0,48)|0;ia=Z|ia;ha=C|ha;O=fd(ia|0,ha|0,L|0,O|0)|0;L=C;J=O^J;G=L^G;Z=hd(J|0,G|0,63)|0;_=C;G=id(J|0,G|0,1)|0;Z=G|Z;_=C|_;ka=fd(ta|0,ua|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,p|0,$|0)|0;ja=C;V=V^ka;X=X^ja;G=fd(X|0,V|0,-23791573,1013904242)|0;J=C;ta=G^ta;ua=J^ua;E=hd(ta|0,ua|0,24)|0;z=C;ua=id(ta|0,ua|0,40)|0;E=ua|E;z=C|z;ja=fd(H|0,F|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,E|0,z|0)|0;ka=C;X=ja^X;V=ka^V;ua=hd(X|0,V|0,16)|0;ta=C;V=id(X|0,V|0,48)|0;ua=V|ua;ta=C|ta;J=fd(ua|0,ta|0,G|0,J|0)|0;G=C;E=J^E;z=G^z;V=hd(E|0,z|0,63)|0;X=C;z=id(E|0,z|0,1)|0;V=z|V;X=C|X;ga=fd(pa|0,qa|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,s|0,u|0)|0;fa=C;da=da^ga;ea=ea^fa;z=fd(ea|0,da|0,1595750129,-1521486534)|0;E=C;pa=z^pa;qa=E^qa;wa=hd(pa|0,qa|0,24)|0;va=C;qa=id(pa|0,qa|0,40)|0;wa=qa|wa;va=C|va;fa=fd(n|0,r|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ea=fa^ea;da=ga^da;qa=hd(ea|0,da|0,16)|0;pa=C;da=id(ea|0,da|0,48)|0;qa=da|qa;pa=C|pa;E=fd(qa|0,pa|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;da=hd(wa|0,va|0,63)|0;ea=C;va=id(wa|0,va|0,1)|0;da=va|da;ea=C|ea;ca=fd(Z|0,_|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,g|0,i|0)|0;v=C;qa=qa^ca;pa=pa^v;G=fd(pa|0,qa|0,J|0,G|0)|0;J=C;Z=G^Z;_=J^_;va=hd(Z|0,_|0,24)|0;wa=C;_=id(Z|0,_|0,40)|0;va=_|va;wa=C|wa;v=fd(j|0,Y|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;pa=v^pa;qa=ca^qa;_=hd(pa|0,qa|0,16)|0;Z=C;qa=id(pa|0,qa|0,48)|0;_=qa|_;Z=C|Z;J=fd(_|0,Z|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;qa=hd(va|0,wa|0,63)|0;pa=C;wa=id(va|0,wa|0,1)|0;qa=wa|qa;pa=C|pa;oa=fd(V|0,X|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,m|0,o|0)|0;na=C;ma=ma^oa;la=la^na;z=fd(la|0,ma|0,E|0,z|0)|0;E=C;V=z^V;X=E^X;wa=hd(V|0,X|0,24)|0;va=C;X=id(V|0,X|0,40)|0;wa=X|wa;va=C|va;na=fd(M|0,K|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;la=na^la;ma=oa^ma;X=hd(la|0,ma|0,16)|0;V=C;ma=id(la|0,ma|0,48)|0;X=ma|X;V=C|V;E=fd(X|0,V|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ma=hd(wa|0,va|0,63)|0;la=C;va=id(wa|0,va|0,1)|0;ma=va|ma;la=C|la;ka=fd(da|0,ea|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,e|0,f|0)|0;ja=C;ia=ia^ka;ha=ha^ja;Q=fd(ha|0,ia|0,T|0,Q|0)|0;T=C;da=Q^da;ea=T^ea;va=hd(da|0,ea|0,24)|0;wa=C;ea=id(da|0,ea|0,40)|0;va=ea|va;wa=C|wa;ja=fd(B|0,S|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;ha=ja^ha;ia=ka^ia;ea=hd(ha|0,ia|0,16)|0;da=C;ia=id(ha|0,ia|0,48)|0;ea=ia|ea;da=C|da;T=fd(ea|0,da|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;ia=hd(va|0,wa|0,63)|0;ha=C;wa=id(va|0,wa|0,1)|0;ia=wa|ia;ha=C|ha;ga=fd(aa|0,ba|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,ra|0,sa|0)|0;fa=C;ua=ua^ga;ta=ta^fa;L=fd(ta|0,ua|0,O|0,L|0)|0;O=C;aa=L^aa;ba=O^ba;wa=hd(aa|0,ba|0,24)|0;va=C;ba=id(aa|0,ba|0,40)|0;wa=ba|wa;va=C|va;fa=fd(y|0,A|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ta=fa^ta;ua=ga^ua;ba=hd(ta|0,ua|0,16)|0;aa=C;ua=id(ta|0,ua|0,48)|0;ba=ua|ba;aa=C|aa;O=fd(ba|0,aa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ua=hd(wa|0,va|0,63)|0;ta=C;va=id(wa|0,va|0,1)|0;ua=va|ua;ta=C|ta;ca=fd(ra|0,sa|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,ua|0,ta|0)|0;v=C;X=ca^X;V=v^V;Q=fd(V|0,X|0,T|0,Q|0)|0;T=C;ua=Q^ua;ta=T^ta;va=hd(ua|0,ta|0,24)|0;wa=C;ta=id(ua|0,ta|0,40)|0;va=ta|va;wa=C|wa;v=fd(m|0,o|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;V=v^V;X=ca^X;ta=hd(V|0,X|0,16)|0;ua=C;X=id(V|0,X|0,48)|0;ta=X|ta;ua=C|ua;T=fd(ta|0,ua|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;X=hd(va|0,wa|0,63)|0;V=C;wa=id(va|0,wa|0,1)|0;X=wa|X;V=C|V;oa=fd(qa|0,pa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,p|0,$|0)|0;na=C;ea=ea^oa;da=da^na;L=fd(da|0,ea|0,O|0,L|0)|0;O=C;qa=L^qa;pa=O^pa;wa=hd(qa|0,pa|0,24)|0;va=C;pa=id(qa|0,pa|0,40)|0;wa=pa|wa;va=C|va;na=fd(g|0,i|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;da=na^da;ea=oa^ea;pa=hd(da|0,ea|0,16)|0;qa=C;ea=id(da|0,ea|0,48)|0;pa=ea|pa;qa=C|qa;O=fd(pa|0,qa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ea=hd(wa|0,va|0,63)|0;da=C;va=id(wa|0,va|0,1)|0;ea=va|ea;da=C|da;ka=fd(ma|0,la|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,j|0,Y|0)|0;ja=C;ba=ba^ka;aa=aa^ja;G=fd(aa|0,ba|0,J|0,G|0)|0;J=C;ma=G^ma;la=J^la;va=hd(ma|0,la|0,24)|0;wa=C;la=id(ma|0,la|0,40)|0;va=la|va;wa=C|wa;ja=fd(y|0,A|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;aa=ja^aa;ba=ka^ba;la=hd(aa|0,ba|0,16)|0;ma=C;ba=id(aa|0,ba|0,48)|0;la=ba|la;ma=C|ma;J=fd(la|0,ma|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ba=hd(va|0,wa|0,63)|0;aa=C;wa=id(va|0,wa|0,1)|0;ba=wa|ba;aa=C|aa;ga=fd(ia|0,ha|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,B|0,S|0)|0;fa=C;_=_^ga;Z=Z^fa;z=fd(Z|0,_|0,E|0,z|0)|0;E=C;ia=z^ia;ha=E^ha;wa=hd(ia|0,ha|0,24)|0;va=C;ha=id(ia|0,ha|0,40)|0;wa=ha|wa;va=C|va;fa=fd(s|0,u|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;Z=fa^Z;_=ga^_;ha=hd(Z|0,_|0,16)|0;ia=C;_=id(Z|0,_|0,48)|0;ha=_|ha;ia=C|ia;E=fd(ha|0,ia|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;_=hd(wa|0,va|0,63)|0;Z=C;va=id(wa|0,va|0,1)|0;_=va|_;Z=C|Z;ca=fd(ea|0,da|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,W|0,U|0)|0;v=C;ha=ha^ca;ia=ia^v;G=fd(ia|0,ha|0,J|0,G|0)|0;J=C;ea=G^ea;da=J^da;va=hd(ea|0,da|0,24)|0;wa=C;da=id(ea|0,da|0,40)|0;va=da|va;wa=C|wa;v=fd(e|0,f|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ia=v^ia;ha=ca^ha;da=hd(ia|0,ha|0,16)|0;ea=C;ha=id(ia|0,ha|0,48)|0;da=ha|da;ea=C|ea;J=fd(da|0,ea|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ha=hd(va|0,wa|0,63)|0;ia=C;wa=id(va|0,wa|0,1)|0;ha=wa|ha;ia=C|ia;oa=fd(ba|0,aa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,R|0,P|0)|0;na=C;ta=ta^oa;ua=ua^na;z=fd(ua|0,ta|0,E|0,z|0)|0;E=C;ba=z^ba;aa=E^aa;wa=hd(ba|0,aa|0,24)|0;va=C;aa=id(ba|0,aa|0,40)|0;wa=aa|wa;va=C|va;na=fd(t|0,x|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;ua=na^ua;ta=oa^ta;aa=hd(ua|0,ta|0,16)|0;ba=C;ta=id(ua|0,ta|0,48)|0;aa=ta|aa;ba=C|ba;E=fd(aa|0,ba|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ta=hd(wa|0,va|0,63)|0;ua=C;va=id(wa|0,va|0,1)|0;ta=va|ta;ua=C|ua;ka=fd(_|0,Z|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,M|0,K|0)|0;ja=C;pa=pa^ka;qa=qa^ja;Q=fd(qa|0,pa|0,T|0,Q|0)|0;T=C;_=Q^_;Z=T^Z;va=hd(_|0,Z|0,24)|0;wa=C;Z=id(_|0,Z|0,40)|0;va=Z|va;wa=C|wa;ja=fd(n|0,r|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;qa=ja^qa;pa=ka^pa;Z=hd(qa|0,pa|0,16)|0;_=C;pa=id(qa|0,pa|0,48)|0;Z=pa|Z;_=C|_;T=fd(Z|0,_|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;pa=hd(va|0,wa|0,63)|0;qa=C;wa=id(va|0,wa|0,1)|0;pa=wa|pa;qa=C|qa;ga=fd(X|0,V|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,H|0,F|0)|0;fa=C;la=la^ga;ma=ma^fa;L=fd(ma|0,la|0,O|0,L|0)|0;O=C;X=L^X;V=O^V;wa=hd(X|0,V|0,24)|0;va=C;V=id(X|0,V|0,40)|0;wa=V|wa;va=C|va;fa=fd(h|0,l|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ma=fa^ma;la=ga^la;V=hd(ma|0,la|0,16)|0;X=C;la=id(ma|0,la|0,48)|0;V=la|V;X=C|X;O=fd(V|0,X|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;la=hd(wa|0,va|0,63)|0;ma=C;va=id(wa|0,va|0,1)|0;la=va|la;ma=C|ma;ca=fd(M|0,K|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,la|0,ma|0)|0;v=C;aa=ca^aa;ba=v^ba;Q=fd(ba|0,aa|0,T|0,Q|0)|0;T=C;la=Q^la;ma=T^ma;va=hd(la|0,ma|0,24)|0;wa=C;ma=id(la|0,ma|0,40)|0;va=ma|va;wa=C|wa;v=fd(g|0,i|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ba=v^ba;aa=ca^aa;ma=hd(ba|0,aa|0,16)|0;la=C;aa=id(ba|0,aa|0,48)|0;ma=aa|ma;la=C|la;T=fd(ma|0,la|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;aa=hd(va|0,wa|0,63)|0;ba=C;wa=id(va|0,wa|0,1)|0;aa=wa|aa;ba=C|ba;oa=fd(ha|0,ia|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,e|0,f|0)|0;na=C;Z=Z^oa;_=_^na;L=fd(_|0,Z|0,O|0,L|0)|0;O=C;ha=L^ha;ia=O^ia;wa=hd(ha|0,ia|0,24)|0;va=C;ia=id(ha|0,ia|0,40)|0;wa=ia|wa;va=C|va;na=fd(R|0,P|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;_=na^_;Z=oa^Z;ia=hd(_|0,Z|0,16)|0;ha=C;Z=id(_|0,Z|0,48)|0;ia=Z|ia;ha=C|ha;O=fd(ia|0,ha|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;Z=hd(wa|0,va|0,63)|0;_=C;va=id(wa|0,va|0,1)|0;Z=va|Z;_=C|_;ka=fd(ta|0,ua|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,H|0,F|0)|0;ja=C;V=V^ka;X=X^ja;G=fd(X|0,V|0,J|0,G|0)|0;J=C;ta=G^ta;ua=J^ua;va=hd(ta|0,ua|0,24)|0;wa=C;ua=id(ta|0,ua|0,40)|0;va=ua|va;wa=C|wa;ja=fd(t|0,x|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;X=ja^X;V=ka^V;ua=hd(X|0,V|0,16)|0;ta=C;V=id(X|0,V|0,48)|0;ua=V|ua;ta=C|ta;J=fd(ua|0,ta|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;V=hd(va|0,wa|0,63)|0;X=C;wa=id(va|0,wa|0,1)|0;V=wa|V;X=C|X;ga=fd(pa|0,qa|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,y|0,A|0)|0;fa=C;da=da^ga;ea=ea^fa;z=fd(ea|0,da|0,E|0,z|0)|0;E=C;pa=z^pa;qa=E^qa;wa=hd(pa|0,qa|0,24)|0;va=C;qa=id(pa|0,qa|0,40)|0;wa=qa|wa;va=C|va;fa=fd(B|0,S|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ea=fa^ea;da=ga^da;qa=hd(ea|0,da|0,16)|0;pa=C;da=id(ea|0,da|0,48)|0;qa=da|qa;pa=C|pa;E=fd(qa|0,pa|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;da=hd(wa|0,va|0,63)|0;ea=C;va=id(wa|0,va|0,1)|0;da=va|da;ea=C|ea;ca=fd(Z|0,_|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,m|0,o|0)|0;v=C;qa=qa^ca;pa=pa^v;G=fd(pa|0,qa|0,J|0,G|0)|0;J=C;Z=G^Z;_=J^_;va=hd(Z|0,_|0,24)|0;wa=C;_=id(Z|0,_|0,40)|0;va=_|va;wa=C|wa;v=fd(ra|0,sa|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;pa=v^pa;qa=ca^qa;_=hd(pa|0,qa|0,16)|0;Z=C;qa=id(pa|0,qa|0,48)|0;_=qa|_;Z=C|Z;J=fd(_|0,Z|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;qa=hd(va|0,wa|0,63)|0;pa=C;wa=id(va|0,wa|0,1)|0;qa=wa|qa;pa=C|pa;oa=fd(V|0,X|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,h|0,l|0)|0;na=C;ma=ma^oa;la=la^na;z=fd(la|0,ma|0,E|0,z|0)|0;E=C;V=z^V;X=E^X;wa=hd(V|0,X|0,24)|0;va=C;X=id(V|0,X|0,40)|0;wa=X|wa;va=C|va;na=fd(s|0,u|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;la=na^la;ma=oa^ma;X=hd(la|0,ma|0,16)|0;V=C;ma=id(la|0,ma|0,48)|0;X=ma|X;V=C|V;E=fd(X|0,V|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ma=hd(wa|0,va|0,63)|0;la=C;va=id(wa|0,va|0,1)|0;ma=va|ma;la=C|la;ka=fd(da|0,ea|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,n|0,r|0)|0;ja=C;ia=ia^ka;ha=ha^ja;Q=fd(ha|0,ia|0,T|0,Q|0)|0;T=C;da=Q^da;ea=T^ea;va=hd(da|0,ea|0,24)|0;wa=C;ea=id(da|0,ea|0,40)|0;va=ea|va;wa=C|wa;ja=fd(W|0,U|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;ha=ja^ha;ia=ka^ia;ea=hd(ha|0,ia|0,16)|0;da=C;ia=id(ha|0,ia|0,48)|0;ea=ia|ea;da=C|da;T=fd(ea|0,da|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;ia=hd(va|0,wa|0,63)|0;ha=C;wa=id(va|0,wa|0,1)|0;ia=wa|ia;ha=C|ha;ga=fd(aa|0,ba|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,j|0,Y|0)|0;fa=C;ua=ua^ga;ta=ta^fa;L=fd(ta|0,ua|0,O|0,L|0)|0;O=C;aa=L^aa;ba=O^ba;wa=hd(aa|0,ba|0,24)|0;va=C;ba=id(aa|0,ba|0,40)|0;wa=ba|wa;va=C|va;fa=fd(p|0,$|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ta=fa^ta;ua=ga^ua;ba=hd(ta|0,ua|0,16)|0;aa=C;ua=id(ta|0,ua|0,48)|0;ba=ua|ba;aa=C|aa;O=fd(ba|0,aa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ua=hd(wa|0,va|0,63)|0;ta=C;va=id(wa|0,va|0,1)|0;ua=va|ua;ta=C|ta;ca=fd(n|0,r|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,ua|0,ta|0)|0;v=C;X=ca^X;V=v^V;Q=fd(V|0,X|0,T|0,Q|0)|0;T=C;ua=Q^ua;ta=T^ta;va=hd(ua|0,ta|0,24)|0;wa=C;ta=id(ua|0,ta|0,40)|0;va=ta|va;wa=C|wa;v=fd(j|0,Y|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;V=v^V;X=ca^X;ta=hd(V|0,X|0,16)|0;ua=C;X=id(V|0,X|0,48)|0;ta=X|ta;ua=C|ua;T=fd(ta|0,ua|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;X=hd(va|0,wa|0,63)|0;V=C;wa=id(va|0,wa|0,1)|0;X=wa|X;V=C|V;oa=fd(qa|0,pa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,h|0,l|0)|0;na=C;ea=ea^oa;da=da^na;L=fd(da|0,ea|0,O|0,L|0)|0;O=C;qa=L^qa;pa=O^pa;wa=hd(qa|0,pa|0,24)|0;va=C;pa=id(qa|0,pa|0,40)|0;wa=pa|wa;va=C|va;na=fd(W|0,U|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;da=na^da;ea=oa^ea;pa=hd(da|0,ea|0,16)|0;qa=C;ea=id(da|0,ea|0,48)|0;pa=ea|pa;qa=C|qa;O=fd(pa|0,qa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ea=hd(wa|0,va|0,63)|0;da=C;va=id(wa|0,va|0,1)|0;ea=va|ea;da=C|da;ka=fd(ma|0,la|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,B|0,S|0)|0;ja=C;ba=ba^ka;aa=aa^ja;G=fd(aa|0,ba|0,J|0,G|0)|0;J=C;ma=G^ma;la=J^la;va=hd(ma|0,la|0,24)|0;wa=C;la=id(ma|0,la|0,40)|0;va=la|va;wa=C|wa;ja=fd(e|0,f|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;aa=ja^aa;ba=ka^ba;la=hd(aa|0,ba|0,16)|0;ma=C;ba=id(aa|0,ba|0,48)|0;la=ba|la;ma=C|ma;J=fd(la|0,ma|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ba=hd(va|0,wa|0,63)|0;aa=C;wa=id(va|0,wa|0,1)|0;ba=wa|ba;aa=C|aa;ga=fd(ia|0,ha|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,M|0,K|0)|0;fa=C;_=_^ga;Z=Z^fa;z=fd(Z|0,_|0,E|0,z|0)|0;E=C;ia=z^ia;ha=E^ha;wa=hd(ia|0,ha|0,24)|0;va=C;ha=id(ia|0,ha|0,40)|0;wa=ha|wa;va=C|va;fa=fd(ra|0,sa|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;Z=fa^Z;_=ga^_;ha=hd(Z|0,_|0,16)|0;ia=C;_=id(Z|0,_|0,48)|0;ha=_|ha;ia=C|ia;E=fd(ha|0,ia|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;_=hd(wa|0,va|0,63)|0;Z=C;va=id(wa|0,va|0,1)|0;_=va|_;Z=C|Z;ca=fd(ea|0,da|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,t|0,x|0)|0;v=C;ha=ha^ca;ia=ia^v;G=fd(ia|0,ha|0,J|0,G|0)|0;J=C;ea=G^ea;da=J^da;va=hd(ea|0,da|0,24)|0;wa=C;da=id(ea|0,da|0,40)|0;va=da|va;wa=C|wa;v=fd(s|0,u|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ia=v^ia;ha=ca^ha;da=hd(ia|0,ha|0,16)|0;ea=C;ha=id(ia|0,ha|0,48)|0;da=ha|da;ea=C|ea;J=fd(da|0,ea|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ha=hd(va|0,wa|0,63)|0;ia=C;wa=id(va|0,wa|0,1)|0;ha=wa|ha;ia=C|ia;oa=fd(ba|0,aa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,H|0,F|0)|0;na=C;ta=ta^oa;ua=ua^na;z=fd(ua|0,ta|0,E|0,z|0)|0;E=C;ba=z^ba;aa=E^aa;wa=hd(ba|0,aa|0,24)|0;va=C;aa=id(ba|0,aa|0,40)|0;wa=aa|wa;va=C|va;na=fd(m|0,o|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;ua=na^ua;ta=oa^ta;aa=hd(ua|0,ta|0,16)|0;ba=C;ta=id(ua|0,ta|0,48)|0;aa=ta|aa;ba=C|ba;E=fd(aa|0,ba|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ta=hd(wa|0,va|0,63)|0;ua=C;va=id(wa|0,va|0,1)|0;ta=va|ta;ua=C|ua;ka=fd(_|0,Z|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,p|0,$|0)|0;ja=C;pa=pa^ka;qa=qa^ja;Q=fd(qa|0,pa|0,T|0,Q|0)|0;T=C;_=Q^_;Z=T^Z;va=hd(_|0,Z|0,24)|0;wa=C;Z=id(_|0,Z|0,40)|0;va=Z|va;wa=C|wa;ja=fd(R|0,P|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;qa=ja^qa;pa=ka^pa;Z=hd(qa|0,pa|0,16)|0;_=C;pa=id(qa|0,pa|0,48)|0;Z=pa|Z;_=C|_;T=fd(Z|0,_|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;pa=hd(va|0,wa|0,63)|0;qa=C;wa=id(va|0,wa|0,1)|0;pa=wa|pa;qa=C|qa;ga=fd(X|0,V|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,y|0,A|0)|0;fa=C;la=la^ga;ma=ma^fa;L=fd(ma|0,la|0,O|0,L|0)|0;O=C;X=L^X;V=O^V;wa=hd(X|0,V|0,24)|0;va=C;V=id(X|0,V|0,40)|0;wa=V|wa;va=C|va;fa=fd(g|0,i|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ma=fa^ma;la=ga^la;V=hd(ma|0,la|0,16)|0;X=C;la=id(ma|0,la|0,48)|0;V=la|V;X=C|X;O=fd(V|0,X|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;la=hd(wa|0,va|0,63)|0;ma=C;va=id(wa|0,va|0,1)|0;la=va|la;ma=C|ma;ca=fd(j|0,Y|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,la|0,ma|0)|0;v=C;aa=ca^aa;ba=v^ba;Q=fd(ba|0,aa|0,T|0,Q|0)|0;T=C;la=Q^la;ma=T^ma;va=hd(la|0,ma|0,24)|0;wa=C;ma=id(la|0,ma|0,40)|0;va=ma|va;wa=C|wa;v=fd(R|0,P|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ba=v^ba;aa=ca^aa;ma=hd(ba|0,aa|0,16)|0;la=C;aa=id(ba|0,aa|0,48)|0;ma=aa|ma;la=C|la;T=fd(ma|0,la|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;aa=hd(va|0,wa|0,63)|0;ba=C;wa=id(va|0,wa|0,1)|0;aa=wa|aa;ba=C|ba;oa=fd(ha|0,ia|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,H|0,F|0)|0;na=C;Z=Z^oa;_=_^na;L=fd(_|0,Z|0,O|0,L|0)|0;O=C;ha=L^ha;ia=O^ia;wa=hd(ha|0,ia|0,24)|0;va=C;ia=id(ha|0,ia|0,40)|0;wa=ia|wa;va=C|va;na=fd(n|0,r|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;_=na^_;Z=oa^Z;ia=hd(_|0,Z|0,16)|0;ha=C;Z=id(_|0,Z|0,48)|0;ia=Z|ia;ha=C|ha;O=fd(ia|0,ha|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;Z=hd(wa|0,va|0,63)|0;_=C;va=id(wa|0,va|0,1)|0;Z=va|Z;_=C|_;ka=fd(ta|0,ua|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,t|0,x|0)|0;ja=C;V=V^ka;X=X^ja;G=fd(X|0,V|0,J|0,G|0)|0;J=C;ta=G^ta;ua=J^ua;va=hd(ta|0,ua|0,24)|0;wa=C;ua=id(ta|0,ua|0,40)|0;va=ua|va;wa=C|wa;ja=fd(p|0,$|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;X=ja^X;V=ka^V;ua=hd(X|0,V|0,16)|0;ta=C;V=id(X|0,V|0,48)|0;ua=V|ua;ta=C|ta;J=fd(ua|0,ta|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;V=hd(va|0,wa|0,63)|0;X=C;wa=id(va|0,wa|0,1)|0;V=wa|V;X=C|X;ga=fd(pa|0,qa|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,m|0,o|0)|0;fa=C;da=da^ga;ea=ea^fa;z=fd(ea|0,da|0,E|0,z|0)|0;E=C;pa=z^pa;qa=E^qa;wa=hd(pa|0,qa|0,24)|0;va=C;qa=id(pa|0,qa|0,40)|0;wa=qa|wa;va=C|va;fa=fd(y|0,A|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ea=fa^ea;da=ga^da;qa=hd(ea|0,da|0,16)|0;pa=C;da=id(ea|0,da|0,48)|0;qa=da|qa;pa=C|pa;E=fd(qa|0,pa|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;da=hd(wa|0,va|0,63)|0;ea=C;va=id(wa|0,va|0,1)|0;da=va|da;ea=C|ea;ca=fd(Z|0,_|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,ra|0,sa|0)|0;v=C;qa=qa^ca;pa=pa^v;G=fd(pa|0,qa|0,J|0,G|0)|0;J=C;Z=G^Z;_=J^_;va=hd(Z|0,_|0,24)|0;wa=C;_=id(Z|0,_|0,40)|0;va=_|va;wa=C|wa;v=fd(W|0,U|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;pa=v^pa;qa=ca^qa;_=hd(pa|0,qa|0,16)|0;Z=C;qa=id(pa|0,qa|0,48)|0;_=qa|_;Z=C|Z;J=fd(_|0,Z|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;qa=hd(va|0,wa|0,63)|0;pa=C;wa=id(va|0,wa|0,1)|0;qa=wa|qa;pa=C|pa;oa=fd(V|0,X|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,M|0,K|0)|0;na=C;ma=ma^oa;la=la^na;z=fd(la|0,ma|0,E|0,z|0)|0;E=C;V=z^V;X=E^X;wa=hd(V|0,X|0,24)|0;va=C;X=id(V|0,X|0,40)|0;wa=X|wa;va=C|va;na=fd(e|0,f|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;la=na^la;ma=oa^ma;X=hd(la|0,ma|0,16)|0;V=C;ma=id(la|0,ma|0,48)|0;X=ma|X;V=C|V;E=fd(X|0,V|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ma=hd(wa|0,va|0,63)|0;la=C;va=id(wa|0,va|0,1)|0;ma=va|ma;la=C|la;ka=fd(da|0,ea|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,s|0,u|0)|0;ja=C;ia=ia^ka;ha=ha^ja;Q=fd(ha|0,ia|0,T|0,Q|0)|0;T=C;da=Q^da;ea=T^ea;va=hd(da|0,ea|0,24)|0;wa=C;ea=id(da|0,ea|0,40)|0;va=ea|va;wa=C|wa;ja=fd(g|0,i|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;ha=ja^ha;ia=ka^ia;ea=hd(ha|0,ia|0,16)|0;da=C;ia=id(ha|0,ia|0,48)|0;ea=ia|ea;da=C|da;T=fd(ea|0,da|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;ia=hd(va|0,wa|0,63)|0;ha=C;wa=id(va|0,wa|0,1)|0;ia=wa|ia;ha=C|ha;ga=fd(aa|0,ba|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,h|0,l|0)|0;fa=C;ua=ua^ga;ta=ta^fa;L=fd(ta|0,ua|0,O|0,L|0)|0;O=C;aa=L^aa;ba=O^ba;wa=hd(aa|0,ba|0,24)|0;va=C;ba=id(aa|0,ba|0,40)|0;wa=ba|wa;va=C|va;fa=fd(B|0,S|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ta=fa^ta;ua=ga^ua;ba=hd(ta|0,ua|0,16)|0;aa=C;ua=id(ta|0,ua|0,48)|0;ba=ua|ba;aa=C|aa;O=fd(ba|0,aa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ua=hd(wa|0,va|0,63)|0;ta=C;va=id(wa|0,va|0,1)|0;ua=va|ua;ta=C|ta;ca=fd(t|0,x|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,ua|0,ta|0)|0;v=C;X=ca^X;V=v^V;Q=fd(V|0,X|0,T|0,Q|0)|0;T=C;ua=Q^ua;ta=T^ta;va=hd(ua|0,ta|0,24)|0;wa=C;ta=id(ua|0,ta|0,40)|0;va=ta|va;wa=C|wa;v=fd(e|0,f|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;V=v^V;X=ca^X;ta=hd(V|0,X|0,16)|0;ua=C;X=id(V|0,X|0,48)|0;ta=X|ta;ua=C|ua;T=fd(ta|0,ua|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;X=hd(va|0,wa|0,63)|0;V=C;wa=id(va|0,wa|0,1)|0;X=wa|X;V=C|V;oa=fd(qa|0,pa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,s|0,u|0)|0;na=C;ea=ea^oa;da=da^na;L=fd(da|0,ea|0,O|0,L|0)|0;O=C;qa=L^qa;pa=O^pa;wa=hd(qa|0,pa|0,24)|0;va=C;pa=id(qa|0,pa|0,40)|0;wa=pa|wa;va=C|va;na=fd(m|0,o|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;da=na^da;ea=oa^ea;pa=hd(da|0,ea|0,16)|0;qa=C;ea=id(da|0,ea|0,48)|0;pa=ea|pa;qa=C|qa;O=fd(pa|0,qa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ea=hd(wa|0,va|0,63)|0;da=C;va=id(wa|0,va|0,1)|0;ea=va|ea;da=C|da;ka=fd(ma|0,la|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,R|0,P|0)|0;ja=C;ba=ba^ka;aa=aa^ja;G=fd(aa|0,ba|0,J|0,G|0)|0;J=C;ma=G^ma;la=J^la;va=hd(ma|0,la|0,24)|0;wa=C;la=id(ma|0,la|0,40)|0;va=la|va;wa=C|wa;ja=fd(M|0,K|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;aa=ja^aa;ba=ka^ba;la=hd(aa|0,ba|0,16)|0;ma=C;ba=id(aa|0,ba|0,48)|0;la=ba|la;ma=C|ma;J=fd(la|0,ma|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ba=hd(va|0,wa|0,63)|0;aa=C;wa=id(va|0,wa|0,1)|0;ba=wa|ba;aa=C|aa;ga=fd(ia|0,ha|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,g|0,i|0)|0;fa=C;_=_^ga;Z=Z^fa;z=fd(Z|0,_|0,E|0,z|0)|0;E=C;ia=z^ia;ha=E^ha;wa=hd(ia|0,ha|0,24)|0;va=C;ha=id(ia|0,ha|0,40)|0;wa=ha|wa;va=C|va;fa=fd(h|0,l|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;Z=fa^Z;_=ga^_;ha=hd(Z|0,_|0,16)|0;ia=C;_=id(Z|0,_|0,48)|0;ha=_|ha;ia=C|ia;E=fd(ha|0,ia|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;_=hd(wa|0,va|0,63)|0;Z=C;va=id(wa|0,va|0,1)|0;_=va|_;Z=C|Z;ca=fd(ea|0,da|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,p|0,$|0)|0;v=C;ha=ha^ca;ia=ia^v;G=fd(ia|0,ha|0,J|0,G|0)|0;J=C;ea=G^ea;da=J^da;va=hd(ea|0,da|0,24)|0;wa=C;da=id(ea|0,da|0,40)|0;va=da|va;wa=C|wa;v=fd(B|0,S|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ia=v^ia;ha=ca^ha;da=hd(ia|0,ha|0,16)|0;ea=C;ha=id(ia|0,ha|0,48)|0;da=ha|da;ea=C|ea;J=fd(da|0,ea|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ha=hd(va|0,wa|0,63)|0;ia=C;wa=id(va|0,wa|0,1)|0;ha=wa|ha;ia=C|ia;oa=fd(ba|0,aa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,n|0,r|0)|0;na=C;ta=ta^oa;ua=ua^na;z=fd(ua|0,ta|0,E|0,z|0)|0;E=C;ba=z^ba;aa=E^aa;wa=hd(ba|0,aa|0,24)|0;va=C;aa=id(ba|0,aa|0,40)|0;wa=aa|wa;va=C|va;na=fd(H|0,F|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;ua=na^ua;ta=oa^ta;aa=hd(ua|0,ta|0,16)|0;ba=C;ta=id(ua|0,ta|0,48)|0;aa=ta|aa;ba=C|ba;E=fd(aa|0,ba|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ta=hd(wa|0,va|0,63)|0;ua=C;va=id(wa|0,va|0,1)|0;ta=va|ta;ua=C|ua;ka=fd(_|0,Z|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,y|0,A|0)|0;ja=C;pa=pa^ka;qa=qa^ja;Q=fd(qa|0,pa|0,T|0,Q|0)|0;T=C;_=Q^_;Z=T^Z;va=hd(_|0,Z|0,24)|0;wa=C;Z=id(_|0,Z|0,40)|0;va=Z|va;wa=C|wa;ja=fd(ra|0,sa|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;qa=ja^qa;pa=ka^pa;Z=hd(qa|0,pa|0,16)|0;_=C;pa=id(qa|0,pa|0,48)|0;Z=pa|Z;_=C|_;T=fd(Z|0,_|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;pa=hd(va|0,wa|0,63)|0;qa=C;wa=id(va|0,wa|0,1)|0;pa=wa|pa;qa=C|qa;ga=fd(X|0,V|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,W|0,U|0)|0;fa=C;la=la^ga;ma=ma^fa;L=fd(ma|0,la|0,O|0,L|0)|0;O=C;X=L^X;V=O^V;wa=hd(X|0,V|0,24)|0;va=C;V=id(X|0,V|0,40)|0;wa=V|wa;va=C|va;fa=fd(j|0,Y|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ma=fa^ma;la=ga^la;V=hd(ma|0,la|0,16)|0;X=C;la=id(ma|0,la|0,48)|0;V=la|V;X=C|X;O=fd(V|0,X|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;la=hd(wa|0,va|0,63)|0;ma=C;va=id(wa|0,va|0,1)|0;la=va|la;ma=C|ma;ca=fd(e|0,f|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,la|0,ma|0)|0;v=C;aa=ca^aa;ba=v^ba;Q=fd(ba|0,aa|0,T|0,Q|0)|0;T=C;la=Q^la;ma=T^ma;va=hd(la|0,ma|0,24)|0;wa=C;ma=id(la|0,ma|0,40)|0;va=ma|va;wa=C|wa;v=fd(H|0,F|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ba=v^ba;aa=ca^aa;ma=hd(ba|0,aa|0,16)|0;la=C;aa=id(ba|0,aa|0,48)|0;ma=aa|ma;la=C|la;T=fd(ma|0,la|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;aa=hd(va|0,wa|0,63)|0;ba=C;wa=id(va|0,wa|0,1)|0;aa=wa|aa;ba=C|ba;oa=fd(ha|0,ia|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,W|0,U|0)|0;na=C;Z=Z^oa;_=_^na;L=fd(_|0,Z|0,O|0,L|0)|0;O=C;ha=L^ha;ia=O^ia;wa=hd(ha|0,ia|0,24)|0;va=C;ia=id(ha|0,ia|0,40)|0;wa=ia|wa;va=C|va;na=fd(y|0,A|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;_=na^_;Z=oa^Z;ia=hd(_|0,Z|0,16)|0;ha=C;Z=id(_|0,Z|0,48)|0;ia=Z|ia;ha=C|ha;O=fd(ia|0,ha|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;Z=hd(wa|0,va|0,63)|0;_=C;va=id(wa|0,va|0,1)|0;Z=va|Z;_=C|_;ka=fd(ta|0,ua|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,ra|0,sa|0)|0;ja=C;V=V^ka;X=X^ja;G=fd(X|0,V|0,J|0,G|0)|0;J=C;ta=G^ta;ua=J^ua;va=hd(ta|0,ua|0,24)|0;wa=C;ua=id(ta|0,ua|0,40)|0;va=ua|va;wa=C|wa;ja=fd(B|0,S|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;X=ja^X;V=ka^V;ua=hd(X|0,V|0,16)|0;ta=C;V=id(X|0,V|0,48)|0;ua=V|ua;ta=C|ta;J=fd(ua|0,ta|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;V=hd(va|0,wa|0,63)|0;X=C;wa=id(va|0,wa|0,1)|0;V=wa|V;X=C|X;ga=fd(pa|0,qa|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,p|0,$|0)|0;fa=C;da=da^ga;ea=ea^fa;z=fd(ea|0,da|0,E|0,z|0)|0;E=C;pa=z^pa;qa=E^qa;wa=hd(pa|0,qa|0,24)|0;va=C;qa=id(pa|0,qa|0,40)|0;wa=qa|wa;va=C|va;fa=fd(m|0,o|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ea=fa^ea;da=ga^da;qa=hd(ea|0,da|0,16)|0;pa=C;da=id(ea|0,da|0,48)|0;qa=da|qa;pa=C|pa;E=fd(qa|0,pa|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;da=hd(wa|0,va|0,63)|0;ea=C;va=id(wa|0,va|0,1)|0;da=va|da;ea=C|ea;ca=fd(Z|0,_|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,R|0,P|0)|0;v=C;qa=qa^ca;pa=pa^v;G=fd(pa|0,qa|0,J|0,G|0)|0;J=C;Z=G^Z;_=J^_;va=hd(Z|0,_|0,24)|0;wa=C;_=id(Z|0,_|0,40)|0;va=_|va;wa=C|wa;v=fd(n|0,r|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;pa=v^pa;qa=ca^qa;_=hd(pa|0,qa|0,16)|0;Z=C;qa=id(pa|0,qa|0,48)|0;_=qa|_;Z=C|Z;J=fd(_|0,Z|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;qa=hd(va|0,wa|0,63)|0;pa=C;wa=id(va|0,wa|0,1)|0;qa=wa|qa;pa=C|pa;oa=fd(V|0,X|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,s|0,u|0)|0;na=C;ma=ma^oa;la=la^na;z=fd(la|0,ma|0,E|0,z|0)|0;E=C;V=z^V;X=E^X;wa=hd(V|0,X|0,24)|0;va=C;X=id(V|0,X|0,40)|0;wa=X|wa;va=C|va;na=fd(h|0,l|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;la=na^la;ma=oa^ma;X=hd(la|0,ma|0,16)|0;V=C;ma=id(la|0,ma|0,48)|0;X=ma|X;V=C|V;E=fd(X|0,V|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ma=hd(wa|0,va|0,63)|0;la=C;va=id(wa|0,va|0,1)|0;ma=va|ma;la=C|la;ka=fd(da|0,ea|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,j|0,Y|0)|0;ja=C;ia=ia^ka;ha=ha^ja;Q=fd(ha|0,ia|0,T|0,Q|0)|0;T=C;da=Q^da;ea=T^ea;va=hd(da|0,ea|0,24)|0;wa=C;ea=id(da|0,ea|0,40)|0;va=ea|va;wa=C|wa;ja=fd(t|0,x|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;ha=ja^ha;ia=ka^ia;ea=hd(ha|0,ia|0,16)|0;da=C;ia=id(ha|0,ia|0,48)|0;ea=ia|ea;da=C|da;T=fd(ea|0,da|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;ia=hd(va|0,wa|0,63)|0;ha=C;wa=id(va|0,wa|0,1)|0;ia=wa|ia;ha=C|ha;ga=fd(aa|0,ba|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,g|0,i|0)|0;fa=C;ua=ua^ga;ta=ta^fa;L=fd(ta|0,ua|0,O|0,L|0)|0;O=C;aa=L^aa;ba=O^ba;wa=hd(aa|0,ba|0,24)|0;va=C;ba=id(aa|0,ba|0,40)|0;wa=ba|wa;va=C|va;fa=fd(M|0,K|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ta=fa^ta;ua=ga^ua;ba=hd(ta|0,ua|0,16)|0;aa=C;ua=id(ta|0,ua|0,48)|0;ba=ua|ba;aa=C|aa;O=fd(ba|0,aa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ua=hd(wa|0,va|0,63)|0;ta=C;va=id(wa|0,va|0,1)|0;ua=va|ua;ta=C|ta;ca=fd(B|0,S|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,ua|0,ta|0)|0;v=C;X=ca^X;V=v^V;Q=fd(V|0,X|0,T|0,Q|0)|0;T=C;ua=Q^ua;ta=T^ta;va=hd(ua|0,ta|0,24)|0;wa=C;ta=id(ua|0,ta|0,40)|0;va=ta|va;wa=C|wa;v=fd(M|0,K|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;V=v^V;X=ca^X;ta=hd(V|0,X|0,16)|0;ua=C;X=id(V|0,X|0,48)|0;ta=X|ta;ua=C|ua;T=fd(ta|0,ua|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;X=hd(va|0,wa|0,63)|0;V=C;wa=id(va|0,wa|0,1)|0;X=wa|X;V=C|V;oa=fd(qa|0,pa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,n|0,r|0)|0;na=C;ea=ea^oa;da=da^na;L=fd(da|0,ea|0,O|0,L|0)|0;O=C;qa=L^qa;pa=O^pa;wa=hd(qa|0,pa|0,24)|0;va=C;pa=id(qa|0,pa|0,40)|0;wa=pa|wa;va=C|va;na=fd(ra|0,sa|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;da=na^da;ea=oa^ea;pa=hd(da|0,ea|0,16)|0;qa=C;ea=id(da|0,ea|0,48)|0;pa=ea|pa;qa=C|qa;O=fd(pa|0,qa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ea=hd(wa|0,va|0,63)|0;da=C;va=id(wa|0,va|0,1)|0;ea=va|ea;da=C|da;ka=fd(ma|0,la|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,e|0,f|0)|0;ja=C;ba=ba^ka;aa=aa^ja;G=fd(aa|0,ba|0,J|0,G|0)|0;J=C;ma=G^ma;la=J^la;va=hd(ma|0,la|0,24)|0;wa=C;la=id(ma|0,la|0,40)|0;va=la|va;wa=C|wa;ja=fd(W|0,U|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;aa=ja^aa;ba=ka^ba;la=hd(aa|0,ba|0,16)|0;ma=C;ba=id(aa|0,ba|0,48)|0;la=ba|la;ma=C|ma;J=fd(la|0,ma|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ba=hd(va|0,wa|0,63)|0;aa=C;wa=id(va|0,wa|0,1)|0;ba=wa|ba;aa=C|aa;ga=fd(ia|0,ha|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,h|0,l|0)|0;fa=C;_=_^ga;Z=Z^fa;z=fd(Z|0,_|0,E|0,z|0)|0;E=C;ia=z^ia;ha=E^ha;wa=hd(ia|0,ha|0,24)|0;va=C;ha=id(ia|0,ha|0,40)|0;wa=ha|wa;va=C|va;fa=fd(j|0,Y|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;Z=fa^Z;_=ga^_;ha=hd(Z|0,_|0,16)|0;ia=C;_=id(Z|0,_|0,48)|0;ha=_|ha;ia=C|ia;E=fd(ha|0,ia|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;_=hd(wa|0,va|0,63)|0;Z=C;va=id(wa|0,va|0,1)|0;_=va|_;Z=C|Z;ca=fd(ea|0,da|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,H|0,F|0)|0;v=C;ha=ha^ca;ia=ia^v;G=fd(ia|0,ha|0,J|0,G|0)|0;J=C;ea=G^ea;da=J^da;va=hd(ea|0,da|0,24)|0;wa=C;da=id(ea|0,da|0,40)|0;va=da|va;wa=C|wa;v=fd(R|0,P|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ia=v^ia;ha=ca^ha;da=hd(ia|0,ha|0,16)|0;ea=C;ha=id(ia|0,ha|0,48)|0;da=ha|da;ea=C|ea;J=fd(da|0,ea|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ha=hd(va|0,wa|0,63)|0;ia=C;wa=id(va|0,wa|0,1)|0;ha=wa|ha;ia=C|ia;oa=fd(ba|0,aa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,y|0,A|0)|0;na=C;ta=ta^oa;ua=ua^na;z=fd(ua|0,ta|0,E|0,z|0)|0;E=C;ba=z^ba;aa=E^aa;wa=hd(ba|0,aa|0,24)|0;va=C;aa=id(ba|0,aa|0,40)|0;wa=aa|wa;va=C|va;na=fd(p|0,$|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;ua=na^ua;ta=oa^ta;aa=hd(ua|0,ta|0,16)|0;ba=C;ta=id(ua|0,ta|0,48)|0;aa=ta|aa;ba=C|ba;E=fd(aa|0,ba|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ta=hd(wa|0,va|0,63)|0;ua=C;va=id(wa|0,va|0,1)|0;ta=va|ta;ua=C|ua;ka=fd(_|0,Z|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,g|0,i|0)|0;ja=C;pa=pa^ka;qa=qa^ja;Q=fd(qa|0,pa|0,T|0,Q|0)|0;T=C;_=Q^_;Z=T^Z;va=hd(_|0,Z|0,24)|0;wa=C;Z=id(_|0,Z|0,40)|0;va=Z|va;wa=C|wa;ja=fd(s|0,u|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;qa=ja^qa;pa=ka^pa;Z=hd(qa|0,pa|0,16)|0;_=C;pa=id(qa|0,pa|0,48)|0;Z=pa|Z;_=C|_;T=fd(Z|0,_|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;pa=hd(va|0,wa|0,63)|0;qa=C;wa=id(va|0,wa|0,1)|0;pa=wa|pa;qa=C|qa;ga=fd(X|0,V|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,t|0,x|0)|0;fa=C;la=la^ga;ma=ma^fa;L=fd(ma|0,la|0,O|0,L|0)|0;O=C;X=L^X;V=O^V;wa=hd(X|0,V|0,24)|0;va=C;V=id(X|0,V|0,40)|0;wa=V|wa;va=C|va;fa=fd(m|0,o|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ma=fa^ma;la=ga^la;V=hd(ma|0,la|0,16)|0;X=C;la=id(ma|0,la|0,48)|0;V=la|V;X=C|X;O=fd(V|0,X|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;la=hd(wa|0,va|0,63)|0;ma=C;va=id(wa|0,va|0,1)|0;la=va|la;ma=C|ma;ca=fd(s|0,u|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,la|0,ma|0)|0;v=C;aa=ca^aa;ba=v^ba;Q=fd(ba|0,aa|0,T|0,Q|0)|0;T=C;la=Q^la;ma=T^ma;va=hd(la|0,ma|0,24)|0;wa=C;ma=id(la|0,ma|0,40)|0;va=ma|va;wa=C|wa;v=fd(y|0,A|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ba=v^ba;aa=ca^aa;ma=hd(ba|0,aa|0,16)|0;la=C;aa=id(ba|0,aa|0,48)|0;ma=aa|ma;la=C|la;T=fd(ma|0,la|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;aa=hd(va|0,wa|0,63)|0;ba=C;wa=id(va|0,wa|0,1)|0;aa=wa|aa;ba=C|ba;oa=fd(ha|0,ia|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,ra|0,sa|0)|0;na=C;Z=Z^oa;_=_^na;L=fd(_|0,Z|0,O|0,L|0)|0;O=C;ha=L^ha;ia=O^ia;wa=hd(ha|0,ia|0,24)|0;va=C;ia=id(ha|0,ia|0,40)|0;wa=ia|wa;va=C|va;na=fd(j|0,Y|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;_=na^_;Z=oa^Z;ia=hd(_|0,Z|0,16)|0;ha=C;Z=id(_|0,Z|0,48)|0;ia=Z|ia;ha=C|ha;O=fd(ia|0,ha|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;Z=hd(wa|0,va|0,63)|0;_=C;va=id(wa|0,va|0,1)|0;Z=va|Z;_=C|_;ka=fd(ta|0,ua|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,M|0,K|0)|0;ja=C;V=V^ka;X=X^ja;G=fd(X|0,V|0,J|0,G|0)|0;J=C;ta=G^ta;ua=J^ua;va=hd(ta|0,ua|0,24)|0;wa=C;ua=id(ta|0,ua|0,40)|0;va=ua|va;wa=C|wa;ja=fd(h|0,l|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;X=ja^X;V=ka^V;ua=hd(X|0,V|0,16)|0;ta=C;V=id(X|0,V|0,48)|0;ua=V|ua;ta=C|ta;J=fd(ua|0,ta|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;V=hd(va|0,wa|0,63)|0;X=C;wa=id(va|0,wa|0,1)|0;V=wa|V;X=C|X;ga=fd(pa|0,qa|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,R|0,P|0)|0;fa=C;da=da^ga;ea=ea^fa;z=fd(ea|0,da|0,E|0,z|0)|0;E=C;pa=z^pa;qa=E^qa;wa=hd(pa|0,qa|0,24)|0;va=C;qa=id(pa|0,qa|0,40)|0;wa=qa|wa;va=C|va;fa=fd(g|0,i|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ea=fa^ea;da=ga^da;qa=hd(ea|0,da|0,16)|0;pa=C;da=id(ea|0,da|0,48)|0;qa=da|qa;pa=C|pa;E=fd(qa|0,pa|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;da=hd(wa|0,va|0,63)|0;ea=C;va=id(wa|0,va|0,1)|0;da=va|da;ea=C|ea;ca=fd(Z|0,_|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,e|0,f|0)|0;v=C;qa=qa^ca;pa=pa^v;G=fd(pa|0,qa|0,J|0,G|0)|0;J=C;Z=G^Z;_=J^_;va=hd(Z|0,_|0,24)|0;wa=C;_=id(Z|0,_|0,40)|0;va=_|va;wa=C|wa;v=fd(t|0,x|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;pa=v^pa;qa=ca^qa;_=hd(pa|0,qa|0,16)|0;Z=C;qa=id(pa|0,qa|0,48)|0;_=qa|_;Z=C|Z;J=fd(_|0,Z|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;qa=hd(va|0,wa|0,63)|0;pa=C;wa=id(va|0,wa|0,1)|0;qa=wa|qa;pa=C|pa;oa=fd(V|0,X|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,B|0,S|0)|0;na=C;ma=ma^oa;la=la^na;z=fd(la|0,ma|0,E|0,z|0)|0;E=C;V=z^V;X=E^X;wa=hd(V|0,X|0,24)|0;va=C;X=id(V|0,X|0,40)|0;wa=X|wa;va=C|va;na=fd(n|0,r|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;la=na^la;ma=oa^ma;X=hd(la|0,ma|0,16)|0;V=C;ma=id(la|0,ma|0,48)|0;X=ma|X;V=C|V;E=fd(X|0,V|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ma=hd(wa|0,va|0,63)|0;la=C;va=id(wa|0,va|0,1)|0;ma=va|ma;la=C|la;ka=fd(da|0,ea|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,W|0,U|0)|0;ja=C;ia=ia^ka;ha=ha^ja;Q=fd(ha|0,ia|0,T|0,Q|0)|0;T=C;da=Q^da;ea=T^ea;va=hd(da|0,ea|0,24)|0;wa=C;ea=id(da|0,ea|0,40)|0;va=ea|va;wa=C|wa;ja=fd(p|0,$|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;ha=ja^ha;ia=ka^ia;ea=hd(ha|0,ia|0,16)|0;da=C;ia=id(ha|0,ia|0,48)|0;ea=ia|ea;da=C|da;T=fd(ea|0,da|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;ia=hd(va|0,wa|0,63)|0;ha=C;wa=id(va|0,wa|0,1)|0;ia=wa|ia;ha=C|ha;ga=fd(aa|0,ba|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,m|0,o|0)|0;fa=C;ua=ua^ga;ta=ta^fa;L=fd(ta|0,ua|0,O|0,L|0)|0;O=C;aa=L^aa;ba=O^ba;wa=hd(aa|0,ba|0,24)|0;va=C;ba=id(aa|0,ba|0,40)|0;wa=ba|wa;va=C|va;fa=fd(H|0,F|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ta=fa^ta;ua=ga^ua;ba=hd(ta|0,ua|0,16)|0;aa=C;ua=id(ta|0,ua|0,48)|0;ba=ua|ba;aa=C|aa;O=fd(ba|0,aa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ua=hd(wa|0,va|0,63)|0;ta=C;va=id(wa|0,va|0,1)|0;ua=va|ua;ta=C|ta;ca=fd(m|0,o|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,ua|0,ta|0)|0;v=C;X=ca^X;V=v^V;Q=fd(V|0,X|0,T|0,Q|0)|0;T=C;ua=Q^ua;ta=T^ta;va=hd(ua|0,ta|0,24)|0;wa=C;ta=id(ua|0,ta|0,40)|0;va=ta|va;wa=C|wa;v=fd(t|0,x|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;V=v^V;X=ca^X;ta=hd(V|0,X|0,16)|0;ua=C;X=id(V|0,X|0,48)|0;ta=X|ta;ua=C|ua;T=fd(ta|0,ua|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;X=hd(va|0,wa|0,63)|0;V=C;wa=id(va|0,wa|0,1)|0;X=wa|X;V=C|V;oa=fd(qa|0,pa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,g|0,i|0)|0;na=C;ea=ea^oa;da=da^na;L=fd(da|0,ea|0,O|0,L|0)|0;O=C;qa=L^qa;pa=O^pa;wa=hd(qa|0,pa|0,24)|0;va=C;pa=id(qa|0,pa|0,40)|0;wa=pa|wa;va=C|va;na=fd(p|0,$|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;da=na^da;ea=oa^ea;pa=hd(da|0,ea|0,16)|0;qa=C;ea=id(da|0,ea|0,48)|0;pa=ea|pa;qa=C|qa;O=fd(pa|0,qa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ea=hd(wa|0,va|0,63)|0;da=C;va=id(wa|0,va|0,1)|0;ea=va|ea;da=C|da;ka=fd(ma|0,la|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,n|0,r|0)|0;ja=C;ba=ba^ka;aa=aa^ja;G=fd(aa|0,ba|0,J|0,G|0)|0;J=C;ma=G^ma;la=J^la;va=hd(ma|0,la|0,24)|0;wa=C;la=id(ma|0,la|0,40)|0;va=la|va;wa=C|wa;ja=fd(s|0,u|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;aa=ja^aa;ba=ka^ba;la=hd(aa|0,ba|0,16)|0;ma=C;ba=id(aa|0,ba|0,48)|0;la=ba|la;ma=C|ma;J=fd(la|0,ma|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ba=hd(va|0,wa|0,63)|0;aa=C;wa=id(va|0,wa|0,1)|0;ba=wa|ba;aa=C|aa;ga=fd(ia|0,ha|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,W|0,U|0)|0;fa=C;_=_^ga;Z=Z^fa;z=fd(Z|0,_|0,E|0,z|0)|0;E=C;ia=z^ia;ha=E^ha;wa=hd(ia|0,ha|0,24)|0;va=C;ha=id(ia|0,ha|0,40)|0;wa=ha|wa;va=C|va;fa=fd(H|0,F|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;Z=fa^Z;_=ga^_;ha=hd(Z|0,_|0,16)|0;ia=C;_=id(Z|0,_|0,48)|0;ha=_|ha;ia=C|ia;E=fd(ha|0,ia|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;_=hd(wa|0,va|0,63)|0;Z=C;va=id(wa|0,va|0,1)|0;_=va|_;Z=C|Z;ca=fd(ea|0,da|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,y|0,A|0)|0;v=C;ha=ha^ca;ia=ia^v;G=fd(ia|0,ha|0,J|0,G|0)|0;J=C;ea=G^ea;da=J^da;va=hd(ea|0,da|0,24)|0;wa=C;da=id(ea|0,da|0,40)|0;va=da|va;wa=C|wa;v=fd(M|0,K|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ia=v^ia;ha=ca^ha;da=hd(ia|0,ha|0,16)|0;ea=C;ha=id(ia|0,ha|0,48)|0;da=ha|da;ea=C|ea;J=fd(da|0,ea|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;ha=hd(va|0,wa|0,63)|0;ia=C;wa=id(va|0,wa|0,1)|0;ha=wa|ha;ia=C|ia;oa=fd(ba|0,aa|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,j|0,Y|0)|0;na=C;ta=ta^oa;ua=ua^na;z=fd(ua|0,ta|0,E|0,z|0)|0;E=C;ba=z^ba;aa=E^aa;wa=hd(ba|0,aa|0,24)|0;va=C;aa=id(ba|0,aa|0,40)|0;wa=aa|wa;va=C|va;na=fd(ra|0,sa|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;ua=na^ua;ta=oa^ta;aa=hd(ua|0,ta|0,16)|0;ba=C;ta=id(ua|0,ta|0,48)|0;aa=ta|aa;ba=C|ba;E=fd(aa|0,ba|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ta=hd(wa|0,va|0,63)|0;ua=C;va=id(wa|0,va|0,1)|0;ta=va|ta;ua=C|ua;ka=fd(_|0,Z|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,h|0,l|0)|0;ja=C;pa=pa^ka;qa=qa^ja;Q=fd(qa|0,pa|0,T|0,Q|0)|0;T=C;_=Q^_;Z=T^Z;va=hd(_|0,Z|0,24)|0;wa=C;Z=id(_|0,Z|0,40)|0;va=Z|va;wa=C|wa;ja=fd(e|0,f|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;qa=ja^qa;pa=ka^pa;Z=hd(qa|0,pa|0,16)|0;_=C;pa=id(qa|0,pa|0,48)|0;Z=pa|Z;_=C|_;T=fd(Z|0,_|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;pa=hd(va|0,wa|0,63)|0;qa=C;wa=id(va|0,wa|0,1)|0;pa=wa|pa;qa=C|qa;ga=fd(X|0,V|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,B|0,S|0)|0;fa=C;la=la^ga;ma=ma^fa;L=fd(ma|0,la|0,O|0,L|0)|0;O=C;X=L^X;V=O^V;wa=hd(X|0,V|0,24)|0;va=C;V=id(X|0,V|0,40)|0;wa=V|wa;va=C|va;fa=fd(R|0,P|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ma=fa^ma;la=ga^la;V=hd(ma|0,la|0,16)|0;X=C;la=id(ma|0,la|0,48)|0;V=la|V;X=C|X;O=fd(V|0,X|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;la=hd(wa|0,va|0,63)|0;ma=C;va=id(wa|0,va|0,1)|0;la=va|la;ma=C|ma;ca=fd(R|0,P|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,la|0,ma|0)|0;v=C;aa=ca^aa;ba=v^ba;Q=fd(ba|0,aa|0,T|0,Q|0)|0;T=C;la=Q^la;ma=T^ma;va=hd(la|0,ma|0,24)|0;wa=C;ma=id(la|0,ma|0,40)|0;va=ma|va;wa=C|wa;v=fd(W|0,U|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;ba=v^ba;aa=ca^aa;ma=hd(ba|0,aa|0,16)|0;la=C;aa=id(ba|0,aa|0,48)|0;ma=aa|ma;la=C|la;T=fd(ma|0,la|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;aa=hd(va|0,wa|0,63)|0;ba=C;wa=id(va|0,wa|0,1)|0;aa=wa|aa;ba=C|ba;oa=fd(ha|0,ia|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,t|0,x|0)|0;na=C;Z=Z^oa;_=_^na;L=fd(_|0,Z|0,O|0,L|0)|0;O=C;ha=L^ha;ia=O^ia;wa=hd(ha|0,ia|0,24)|0;va=C;ia=id(ha|0,ia|0,40)|0;wa=ia|wa;va=C|va;na=fd(h|0,l|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;_=na^_;Z=oa^Z;ia=hd(_|0,Z|0,16)|0;ha=C;Z=id(_|0,Z|0,48)|0;ia=Z|ia;ha=C|ha;O=fd(ia|0,ha|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;Z=hd(wa|0,va|0,63)|0;_=C;va=id(wa|0,va|0,1)|0;Z=va|Z;_=C|_;ka=fd(ta|0,ua|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,p|0,$|0)|0;ja=C;V=V^ka;X=X^ja;G=fd(X|0,V|0,J|0,G|0)|0;J=C;ta=G^ta;ua=J^ua;va=hd(ta|0,ua|0,24)|0;wa=C;ua=id(ta|0,ua|0,40)|0;va=ua|va;wa=C|wa;ja=fd(H|0,F|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;X=ja^X;V=ka^V;ua=hd(X|0,V|0,16)|0;ta=C;V=id(X|0,V|0,48)|0;ua=V|ua;ta=C|ta;J=fd(ua|0,ta|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;V=hd(va|0,wa|0,63)|0;X=C;wa=id(va|0,wa|0,1)|0;V=wa|V;X=C|X;ga=fd(pa|0,qa|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,s|0,u|0)|0;fa=C;da=da^ga;ea=ea^fa;z=fd(ea|0,da|0,E|0,z|0)|0;E=C;pa=z^pa;qa=E^qa;wa=hd(pa|0,qa|0,24)|0;va=C;qa=id(pa|0,qa|0,40)|0;wa=qa|wa;va=C|va;fa=fd(n|0,r|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ea=fa^ea;da=ga^da;qa=hd(ea|0,da|0,16)|0;pa=C;da=id(ea|0,da|0,48)|0;qa=da|qa;pa=C|pa;E=fd(qa|0,pa|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;da=hd(wa|0,va|0,63)|0;ea=C;va=id(wa|0,va|0,1)|0;da=va|da;ea=C|ea;ca=fd(Z|0,_|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,g|0,i|0)|0;v=C;qa=qa^ca;pa=pa^v;G=fd(pa|0,qa|0,J|0,G|0)|0;J=C;Z=G^Z;_=J^_;va=hd(Z|0,_|0,24)|0;wa=C;_=id(Z|0,_|0,40)|0;va=_|va;wa=C|wa;v=fd(j|0,Y|0,ca|0,v|0)|0;v=fd(v|0,C|0,va|0,wa|0)|0;ca=C;pa=v^pa;qa=ca^qa;_=hd(pa|0,qa|0,16)|0;Z=C;qa=id(pa|0,qa|0,48)|0;_=qa|_;Z=C|Z;J=fd(_|0,Z|0,G|0,J|0)|0;G=C;va=J^va;wa=G^wa;qa=hd(va|0,wa|0,63)|0;pa=C;wa=id(va|0,wa|0,1)|0;qa=wa|qa;pa=C|pa;oa=fd(V|0,X|0,na|0,oa|0)|0;oa=fd(oa|0,C|0,m|0,o|0)|0;na=C;ma=ma^oa;la=la^na;z=fd(la|0,ma|0,E|0,z|0)|0;E=C;V=z^V;X=E^X;wa=hd(V|0,X|0,24)|0;va=C;X=id(V|0,X|0,40)|0;wa=X|wa;va=C|va;na=fd(M|0,K|0,oa|0,na|0)|0;na=fd(na|0,C|0,wa|0,va|0)|0;oa=C;la=na^la;ma=oa^ma;X=hd(la|0,ma|0,16)|0;V=C;ma=id(la|0,ma|0,48)|0;X=ma|X;V=C|V;E=fd(X|0,V|0,z|0,E|0)|0;z=C;wa=E^wa;va=z^va;ma=hd(wa|0,va|0,63)|0;la=C;va=id(wa|0,va|0,1)|0;ma=va|ma;la=C|la;ka=fd(da|0,ea|0,ja|0,ka|0)|0;ka=fd(ka|0,C|0,e|0,f|0)|0;ja=C;ia=ia^ka;ha=ha^ja;Q=fd(ha|0,ia|0,T|0,Q|0)|0;T=C;da=Q^da;ea=T^ea;va=hd(da|0,ea|0,24)|0;wa=C;ea=id(da|0,ea|0,40)|0;va=ea|va;wa=C|wa;ja=fd(B|0,S|0,ka|0,ja|0)|0;ja=fd(ja|0,C|0,va|0,wa|0)|0;ka=C;ha=ja^ha;ia=ka^ia;ea=hd(ha|0,ia|0,16)|0;da=C;ia=id(ha|0,ia|0,48)|0;ea=ia|ea;da=C|da;T=fd(ea|0,da|0,Q|0,T|0)|0;Q=C;va=T^va;wa=Q^wa;ia=hd(va|0,wa|0,63)|0;ha=C;wa=id(va|0,wa|0,1)|0;ia=wa|ia;ha=C|ha;ga=fd(aa|0,ba|0,fa|0,ga|0)|0;ga=fd(ga|0,C|0,ra|0,sa|0)|0;fa=C;ua=ua^ga;ta=ta^fa;L=fd(ta|0,ua|0,O|0,L|0)|0;O=C;aa=L^aa;ba=O^ba;wa=hd(aa|0,ba|0,24)|0;va=C;ba=id(aa|0,ba|0,40)|0;wa=ba|wa;va=C|va;fa=fd(y|0,A|0,ga|0,fa|0)|0;fa=fd(fa|0,C|0,wa|0,va|0)|0;ga=C;ta=fa^ta;ua=ga^ua;ba=hd(ta|0,ua|0,16)|0;aa=C;ua=id(ta|0,ua|0,48)|0;ba=ua|ba;aa=C|aa;O=fd(ba|0,aa|0,L|0,O|0)|0;L=C;wa=O^wa;va=L^va;ua=hd(wa|0,va|0,63)|0;ta=C;va=id(wa|0,va|0,1)|0;ua=va|ua;ta=C|ta;ca=fd(ra|0,sa|0,v|0,ca|0)|0;ca=fd(ca|0,C|0,ua|0,ta|0)|0;v=C;X=ca^X;V=v^V;Q=fd(V|0,X|0,T|0,Q|0)|0;T=C;ua=Q^ua;ta=T^ta;sa=hd(ua|0,ta|0,24)|0;ra=C;ta=id(ua|0,ta|0,40)|0;sa=ta|sa;ra=C|ra;v=fd(m|0,o|0,ca|0,v|0)|0;v=fd(v|0,C|0,sa|0,ra|0)|0;ca=C;V=v^V;X=ca^X;o=hd(V|0,X|0,16)|0;m=C;X=id(V|0,X|0,48)|0;o=X|o;m=C|m;T=fd(o|0,m|0,Q|0,T|0)|0;Q=C;sa=T^sa;ra=Q^ra;X=hd(sa|0,ra|0,63)|0;V=C;ra=id(sa|0,ra|0,1)|0;X=ra|X;V=C|V;oa=fd(qa|0,pa|0,na|0,oa|0)|0;$=fd(oa|0,C|0,p|0,$|0)|0;p=C;ea=ea^$;da=da^p;L=fd(da|0,ea|0,O|0,L|0)|0;O=C;qa=L^qa;pa=O^pa;oa=hd(qa|0,pa|0,24)|0;na=C;pa=id(qa|0,pa|0,40)|0;oa=pa|oa;na=C|na;p=fd(g|0,i|0,$|0,p|0)|0;p=fd(p|0,C|0,oa|0,na|0)|0;$=C;da=p^da;ea=$^ea;i=hd(da|0,ea|0,16)|0;g=C;ea=id(da|0,ea|0,48)|0;i=ea|i;g=C|g;O=fd(i|0,g|0,L|0,O|0)|0;L=C;oa=O^oa;na=L^na;ea=hd(oa|0,na|0,63)|0;da=C;na=id(oa|0,na|0,1)|0;ea=na|ea;da=C|da;ka=fd(ma|0,la|0,ja|0,ka|0)|0;Y=fd(ka|0,C|0,j|0,Y|0)|0;j=C;ba=ba^Y;aa=aa^j;G=fd(aa|0,ba|0,J|0,G|0)|0;J=C;ma=G^ma;la=J^la;ka=hd(ma|0,la|0,24)|0;ja=C;la=id(ma|0,la|0,40)|0;ka=la|ka;ja=C|ja;j=fd(y|0,A|0,Y|0,j|0)|0;j=fd(j|0,C|0,ka|0,ja|0)|0;Y=C;aa=j^aa;ba=Y^ba;A=hd(aa|0,ba|0,16)|0;y=C;ba=id(aa|0,ba|0,48)|0;A=ba|A;y=C|y;J=fd(A|0,y|0,G|0,J|0)|0;G=C;ka=J^ka;ja=G^ja;ba=hd(ka|0,ja|0,63)|0;aa=C;ja=id(ka|0,ja|0,1)|0;ba=ja|ba;aa=C|aa;ga=fd(ia|0,ha|0,fa|0,ga|0)|0;S=fd(ga|0,C|0,B|0,S|0)|0;B=C;_=_^S;Z=Z^B;z=fd(Z|0,_|0,E|0,z|0)|0;E=C;ia=z^ia;ha=E^ha;ga=hd(ia|0,ha|0,24)|0;fa=C;ha=id(ia|0,ha|0,40)|0;ga=ha|ga;fa=C|fa;B=fd(s|0,u|0,S|0,B|0)|0;B=fd(B|0,C|0,ga|0,fa|0)|0;S=C;Z=B^Z;_=S^_;u=hd(Z|0,_|0,16)|0;s=C;_=id(Z|0,_|0,48)|0;u=_|u;s=C|s;E=fd(u|0,s|0,z|0,E|0)|0;z=C;ga=E^ga;fa=z^fa;_=hd(ga|0,fa|0,63)|0;Z=C;fa=id(ga|0,fa|0,1)|0;_=fa|_;Z=C|Z;ca=fd(ea|0,da|0,v|0,ca|0)|0;U=fd(ca|0,C|0,W|0,U|0)|0;W=C;u=u^U;s=s^W;G=fd(s|0,u|0,J|0,G|0)|0;J=C;ea=G^ea;da=J^da;ca=hd(ea|0,da|0,24)|0;v=C;da=id(ea|0,da|0,40)|0;ca=da|ca;v=C|v;W=fd(e|0,f|0,U|0,W|0)|0;W=fd(W|0,C|0,ca|0,v|0)|0;U=C;s=W^s;u=U^u;f=hd(s|0,u|0,16)|0;e=C;u=id(s|0,u|0,48)|0;f=u|f;e=C|e;J=fd(f|0,e|0,G|0,J|0)|0;G=C;ca=J^ca;v=G^v;u=hd(ca|0,v|0,63)|0;s=C;v=id(ca|0,v|0,1)|0;s=C|s;$=fd(ba|0,aa|0,p|0,$|0)|0;P=fd($|0,C|0,R|0,P|0)|0;R=C;o=o^P;m=m^R;z=fd(m|0,o|0,E|0,z|0)|0;E=C;ba=z^ba;aa=E^aa;$=hd(ba|0,aa|0,24)|0;p=C;aa=id(ba|0,aa|0,40)|0;$=aa|$;p=C|p;R=fd(t|0,x|0,P|0,R|0)|0;R=fd(R|0,C|0,$|0,p|0)|0;P=C;m=R^m;o=P^o;x=hd(m|0,o|0,16)|0;t=C;o=id(m|0,o|0,48)|0;x=o|x;t=C|t;E=fd(x|0,t|0,z|0,E|0)|0;z=C;$=E^$;p=z^p;o=hd($|0,p|0,63)|0;m=C;p=id($|0,p|0,1)|0;m=C|m;Y=fd(_|0,Z|0,j|0,Y|0)|0;K=fd(Y|0,C|0,M|0,K|0)|0;M=C;i=i^K;g=g^M;Q=fd(g|0,i|0,T|0,Q|0)|0;T=C;_=Q^_;Z=T^Z;Y=hd(_|0,Z|0,24)|0;j=C;Z=id(_|0,Z|0,40)|0;Y=Z|Y;j=C|j;M=fd(n|0,r|0,K|0,M|0)|0;M=fd(M|0,C|0,Y|0,j|0)|0;K=C;g=M^g;i=K^i;r=hd(g|0,i|0,16)|0;n=C;i=id(g|0,i|0,48)|0;r=i|r;n=C|n;T=fd(r|0,n|0,Q|0,T|0)|0;Q=C;Y=T^Y;j=Q^j;i=hd(Y|0,j|0,63)|0;g=C;j=id(Y|0,j|0,1)|0;g=C|g;S=fd(X|0,V|0,B|0,S|0)|0;F=fd(S|0,C|0,H|0,F|0)|0;H=C;A=A^F;y=y^H;L=fd(y|0,A|0,O|0,L|0)|0;O=C;X=L^X;V=O^V;S=hd(X|0,V|0,24)|0;B=C;V=id(X|0,V|0,40)|0;S=V|S;B=C|B;H=fd(h|0,l|0,F|0,H|0)|0;H=fd(H|0,C|0,S|0,B|0)|0;F=C;y=H^y;A=F^A;l=hd(y|0,A|0,16)|0;h=C;A=id(y|0,A|0,48)|0;l=A|l;h=C|h;O=fd(l|0,h|0,L|0,O|0)|0;L=C;S=O^S;B=L^B;A=hd(S|0,B|0,63)|0;y=C;B=id(S|0,B|0,1)|0;S=b;V=S;S=S+4|0;T=W^(d[V>>0]|d[V+1>>0]<<8|d[V+2>>0]<<16|d[V+3>>0]<<24)^T;Q=U^(d[S>>0]|d[S+1>>0]<<8|d[S+2>>0]<<16|d[S+3>>0]<<24)^Q;S=b;a[S>>0]=T;a[S+1>>0]=T>>8;a[S+2>>0]=T>>16;a[S+3>>0]=T>>24;b=b+4|0;a[b>>0]=Q;a[b+1>>0]=Q>>8;a[b+2>>0]=Q>>16;a[b+3>>0]=Q>>24;b=N;Q=b;b=b+4|0;O=R^(d[Q>>0]|d[Q+1>>0]<<8|d[Q+2>>0]<<16|d[Q+3>>0]<<24)^O;L=P^(d[b>>0]|d[b+1>>0]<<8|d[b+2>>0]<<16|d[b+3>>0]<<24)^L;b=N;N=b;a[N>>0]=O;a[N+1>>0]=O>>8;a[N+2>>0]=O>>16;a[N+3>>0]=O>>24;b=b+4|0;a[b>>0]=L;a[b+1>>0]=L>>8;a[b+2>>0]=L>>16;a[b+3>>0]=L>>24;b=I;L=b;b=b+4|0;J=M^(d[L>>0]|d[L+1>>0]<<8|d[L+2>>0]<<16|d[L+3>>0]<<24)^J;G=K^(d[b>>0]|d[b+1>>0]<<8|d[b+2>>0]<<16|d[b+3>>0]<<24)^G;b=I;I=b;a[I>>0]=J;a[I+1>>0]=J>>8;a[I+2>>0]=J>>16;a[I+3>>0]=J>>24;b=b+4|0;a[b>>0]=G;a[b+1>>0]=G>>8;a[b+2>>0]=G>>16;a[b+3>>0]=G>>24;b=D;G=b;b=b+4|0;E=H^(d[G>>0]|d[G+1>>0]<<8|d[G+2>>0]<<16|d[G+3>>0]<<24)^E;z=F^(d[b>>0]|d[b+1>>0]<<8|d[b+2>>0]<<16|d[b+3>>0]<<24)^z;b=D;D=b;a[D>>0]=E;a[D+1>>0]=E>>8;a[D+2>>0]=E>>16;a[D+3>>0]=E>>24;b=b+4|0;a[b>>0]=z;a[b+1>>0]=z>>8;a[b+2>>0]=z>>16;a[b+3>>0]=z>>24;b=w;z=b;b=b+4|0;x=(B|A)^(d[z>>0]|d[z+1>>0]<<8|d[z+2>>0]<<16|d[z+3>>0]<<24)^x;t=(C|y)^(d[b>>0]|d[b+1>>0]<<8|d[b+2>>0]<<16|d[b+3>>0]<<24)^t;b=w;w=b;a[w>>0]=x;a[w+1>>0]=x>>8;a[w+2>>0]=x>>16;a[w+3>>0]=x>>24;b=b+4|0;a[b>>0]=t;a[b+1>>0]=t>>8;a[b+2>>0]=t>>16;a[b+3>>0]=t>>24;b=q;t=b;b=b+4|0;r=(v|u)^(d[t>>0]|d[t+1>>0]<<8|d[t+2>>0]<<16|d[t+3>>0]<<24)^r;n=s^(d[b>>0]|d[b+1>>0]<<8|d[b+2>>0]<<16|d[b+3>>0]<<24)^n;b=q;q=b;a[q>>0]=r;a[q+1>>0]=r>>8;a[q+2>>0]=r>>16;a[q+3>>0]=r>>24;b=b+4|0;a[b>>0]=n;a[b+1>>0]=n>>8;a[b+2>>0]=n>>16;a[b+3>>0]=n>>24;b=k;n=b;b=b+4|0;l=(p|o)^(d[n>>0]|d[n+1>>0]<<8|d[n+2>>0]<<16|d[n+3>>0]<<24)^l;h=m^(d[b>>0]|d[b+1>>0]<<8|d[b+2>>0]<<16|d[b+3>>0]<<24)^h;b=k;k=b;a[k>>0]=l;a[k+1>>0]=l>>8;a[k+2>>0]=l>>16;a[k+3>>0]=l>>24;b=b+4|0;a[b>>0]=h;a[b+1>>0]=h>>8;a[b+2>>0]=h>>16;a[b+3>>0]=h>>24;b=c;h=b;b=b+4|0;f=(j|i)^(d[h>>0]|d[h+1>>0]<<8|d[h+2>>0]<<16|d[h+3>>0]<<24)^f;b=g^(d[b>>0]|d[b+1>>0]<<8|d[b+2>>0]<<16|d[b+3>>0]<<24)^e;e=c;a[e>>0]=f;a[e+1>>0]=f>>8;a[e+2>>0]=f>>16;a[e+3>>0]=f>>24;c=c+4|0;a[c>>0]=b;a[c+1>>0]=b>>8;a[c+2>>0]=b>>16;a[c+3>>0]=b>>24;return}function pb(){return 64}function qb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;wb(a,b,c,d);return 0}function rb(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;f=a+36|0;j=c[f>>2]|0;k=j>>>3&63;h=hd(d|0,e|0,29)|0;i=j+(d<<3)|0;c[f>>2]=i;f=a+32|0;g=c[f>>2]|0;if(i>>>0<j>>>0){g=g+1|0;c[f>>2]=g}c[f>>2]=g+h;i=64-k|0;g=a+k+40|0;if(0>e>>>0|0==(e|0)&i>>>0>d>>>0){kd(g|0,b|0,d|0)|0;return}kd(g|0,b|0,i|0)|0;j=a+40|0;tb(a,j);g=b+i|0;f=ed(d|0,e|0,i|0,0)|0;h=C;if(h>>>0>0|(h|0)==0&f>>>0>63){d=fd(d|0,e|0,-64,0)|0;d=ed(d|0,C|0,i|0,0)|0;i=d+128&-64;while(1){tb(a,g);f=fd(f|0,h|0,-64,-1)|0;h=C;if(!(h>>>0>0|(h|0)==0&f>>>0>63))break;else g=g+64|0}g=b+(i-k)|0;f=d&63}kd(j|0,g|0,f|0)|0;return}function sb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=i;o=i=i+63&-64;i=i+16|0;n=b+32|0;f=c[n>>2]|0;a[o+3>>0]=f;a[o+2>>0]=f>>>8;a[o+1>>0]=f>>>16;a[o>>0]=f>>>24;m=b+36|0;k=c[m>>2]|0;a[o+7>>0]=k;a[o+6>>0]=k>>>8;a[o+5>>0]=k>>>16;a[o+4>>0]=k>>>24;l=k>>>3&63;j=(l>>>0<56?56:120)-l|0;h=k+(j<<3)|0;c[m>>2]=h;if(h>>>0<k>>>0){f=f+1|0;c[n>>2]=f}c[n>>2]=f+(j>>>29);e=64-l|0;f=b+l+40|0;if(j>>>0<e>>>0)kd(f|0,248,j|0)|0;else{kd(f|0,248,e|0)|0;k=b+40|0;tb(b,k);g=248+e|0;f=ed(j|0,0,e|0,0)|0;h=C;if(h>>>0>0|(h|0)==0&f>>>0>63){j=j+(-64-e)|0;while(1){tb(b,g);f=fd(f|0,h|0,-64,-1)|0;h=C;if(!(h>>>0>0|(h|0)==0&f>>>0>63))break;else g=g+64|0}g=248+((j+128&-64)-l)|0;f=j&63}kd(k|0,g|0,f|0)|0}l=c[m>>2]|0;k=l>>>3&63;c[m>>2]=l+64;f=c[n>>2]|0;if(l>>>0>4294967231){f=f+1|0;c[n>>2]=f}c[n>>2]=f;h=64-k|0;f=b+k+40|0;if(h>>>0>8){m=c[o>>2]|0;o=c[o+4>>2]|0;n=f;a[n>>0]=m;a[n+1>>0]=m>>8;a[n+2>>0]=m>>16;a[n+3>>0]=m>>24;f=f+4|0;a[f>>0]=o;a[f+1>>0]=o>>8;a[f+2>>0]=o>>16;a[f+3>>0]=o>>24;f=0}else{kd(f|0,o|0,h|0)|0;j=b+40|0;tb(b,j);e=o+h|0;f=ed(8,0,h|0,0)|0;g=C;if(g>>>0>0|(g|0)==0&f>>>0>63){h=-56-h|0;while(1){tb(b,e);f=fd(f|0,g|0,-64,-1)|0;g=C;if(!(g>>>0>0|(g|0)==0&f>>>0>63))break;else e=e+64|0}e=o+((h+128&-64)-k)|0;f=h&63}kd(j|0,e|0,f|0)|0;f=0}do{o=f<<2;n=c[b+(f<<2)>>2]|0;a[d+(o|3)>>0]=n;a[d+(o|2)>>0]=n>>>8;a[d+(o|1)>>0]=n>>>16;a[d+o>>0]=n>>>24;f=f+1|0}while((f|0)!=8);e=b+0|0;f=e+104|0;do{a[e>>0]=0;e=e+1|0}while((e|0)<(f|0));i=p;return}function tb(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;f=i=i+63&-64;i=i+256|0;e=0;do{h=e<<2;c[f+(e<<2)>>2]=(d[b+(h|2)>>0]|0)<<8|(d[b+(h|3)>>0]|0)|(d[b+(h|1)>>0]|0)<<16|(d[b+h>>0]|0)<<24;e=e+1|0}while((e|0)!=16);b=c[f>>2]|0;e=16;do{h=c[f+(e+-2<<2)>>2]|0;j=b;b=c[f+(e+-15<<2)>>2]|0;c[f+(e<<2)>>2]=j+(c[f+(e+-7<<2)>>2]|0)+((h>>>19|h<<13)^h>>>10^(h>>>17|h<<15))+((b>>>18|b<<14)^b>>>3^(b>>>7|b<<25));e=e+1|0}while((e|0)!=64);u=c[a>>2]|0;s=a+4|0;t=c[s>>2]|0;q=a+8|0;r=c[q>>2]|0;o=a+12|0;m=a+16|0;n=c[m>>2]|0;k=a+20|0;l=c[k>>2]|0;e=a+24|0;b=c[e>>2]|0;j=a+28|0;h=(c[j>>2]|0)+1116352408+(c[f>>2]|0)+((n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7))+((b^l)&n^b)|0;p=(c[o>>2]|0)+h|0;h=((r|t)&u|r&t)+((u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10))+h|0;b=b+1899447441+(c[f+4>>2]|0)+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<7))+((l^n)&p^l)|0;r=r+b|0;b=((t|u)&h|t&u)+((h>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10))+b|0;l=l+-1245643825+(c[f+8>>2]|0)+((r>>>6|r<<26)^(r>>>11|r<<21)^(r>>>25|r<<7))+((n^p)&r^n)|0;t=t+l|0;l=((u|h)&b|u&h)+((b>>>2|b<<30)^(b>>>13|b<<19)^(b>>>22|b<<10))+l|0;n=n+-373957723+(c[f+12>>2]|0)+((t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7))+((p^r)&t^p)|0;u=u+n|0;n=((h|b)&l|h&b)+((l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10))+n|0;p=p+961987163+(c[f+16>>2]|0)+((u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7))+((r^t)&u^r)|0;h=h+p|0;p=((b|l)&n|b&l)+((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+p|0;r=r+1508970993+(c[f+20>>2]|0)+((h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+((t^u)&h^t)|0;b=b+r|0;r=((l|n)&p|l&n)+((p>>>2|p<<30)^(p>>>13|p<<19)^(p>>>22|p<<10))+r|0;t=t+-1841331548+(c[f+24>>2]|0)+((b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7))+((u^h)&b^u)|0;l=l+t|0;t=((n|p)&r|n&p)+((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+t|0;u=u+-1424204075+(c[f+28>>2]|0)+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+((h^b)&l^h)|0;n=n+u|0;u=((p|r)&t|p&r)+((t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10))+u|0;h=h+-670586216+(c[f+32>>2]|0)+((n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7))+((b^l)&n^b)|0;p=p+h|0;h=((r|t)&u|r&t)+((u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10))+h|0;b=b+310598401+(c[f+36>>2]|0)+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<7))+((l^n)&p^l)|0;r=r+b|0;b=((t|u)&h|t&u)+((h>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10))+b|0;l=l+607225278+(c[f+40>>2]|0)+((r>>>6|r<<26)^(r>>>11|r<<21)^(r>>>25|r<<7))+((n^p)&r^n)|0;t=t+l|0;l=((u|h)&b|u&h)+((b>>>2|b<<30)^(b>>>13|b<<19)^(b>>>22|b<<10))+l|0;n=n+1426881987+(c[f+44>>2]|0)+((t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7))+((p^r)&t^p)|0;u=u+n|0;n=((h|b)&l|h&b)+((l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10))+n|0;p=p+1925078388+(c[f+48>>2]|0)+((u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7))+((r^t)&u^r)|0;h=h+p|0;p=((b|l)&n|b&l)+((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+p|0;r=r+-2132889090+(c[f+52>>2]|0)+((h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+((t^u)&h^t)|0;b=b+r|0;r=((l|n)&p|l&n)+((p>>>2|p<<30)^(p>>>13|p<<19)^(p>>>22|p<<10))+r|0;t=t+-1680079193+(c[f+56>>2]|0)+((b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7))+((u^h)&b^u)|0;l=l+t|0;t=((n|p)&r|n&p)+((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+t|0;u=u+-1046744716+(c[f+60>>2]|0)+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+((h^b)&l^h)|0;n=n+u|0;u=((p|r)&t|p&r)+((t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10))+u|0;h=h+-459576895+(c[f+64>>2]|0)+((n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7))+((b^l)&n^b)|0;p=p+h|0;h=((r|t)&u|r&t)+((u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10))+h|0;b=b+-272742522+(c[f+68>>2]|0)+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<7))+((l^n)&p^l)|0;r=r+b|0;b=((t|u)&h|t&u)+((h>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10))+b|0;l=l+264347078+(c[f+72>>2]|0)+((r>>>6|r<<26)^(r>>>11|r<<21)^(r>>>25|r<<7))+((n^p)&r^n)|0;t=t+l|0;l=((u|h)&b|u&h)+((b>>>2|b<<30)^(b>>>13|b<<19)^(b>>>22|b<<10))+l|0;n=n+604807628+(c[f+76>>2]|0)+((t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7))+((p^r)&t^p)|0;u=u+n|0;n=((h|b)&l|h&b)+((l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10))+n|0;p=p+770255983+(c[f+80>>2]|0)+((u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7))+((r^t)&u^r)|0;h=h+p|0;p=((b|l)&n|b&l)+((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+p|0;r=r+1249150122+(c[f+84>>2]|0)+((h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+((t^u)&h^t)|0;b=b+r|0;r=((l|n)&p|l&n)+((p>>>2|p<<30)^(p>>>13|p<<19)^(p>>>22|p<<10))+r|0;t=t+1555081692+(c[f+88>>2]|0)+((b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7))+((u^h)&b^u)|0;l=l+t|0;t=((n|p)&r|n&p)+((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+t|0;u=u+1996064986+(c[f+92>>2]|0)+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+((h^b)&l^h)|0;n=n+u|0;u=((p|r)&t|p&r)+((t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10))+u|0;h=h+-1740746414+(c[f+96>>2]|0)+((n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7))+((b^l)&n^b)|0;p=p+h|0;h=((r|t)&u|r&t)+((u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10))+h|0;b=b+-1473132947+(c[f+100>>2]|0)+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<7))+((l^n)&p^l)|0;r=r+b|0;b=((t|u)&h|t&u)+((h>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10))+b|0;l=l+-1341970488+(c[f+104>>2]|0)+((r>>>6|r<<26)^(r>>>11|r<<21)^(r>>>25|r<<7))+((n^p)&r^n)|0;t=t+l|0;l=((u|h)&b|u&h)+((b>>>2|b<<30)^(b>>>13|b<<19)^(b>>>22|b<<10))+l|0;n=n+-1084653625+(c[f+108>>2]|0)+((t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7))+((p^r)&t^p)|0;u=u+n|0;n=((h|b)&l|h&b)+((l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10))+n|0;p=p+-958395405+(c[f+112>>2]|0)+((u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7))+((r^t)&u^r)|0;h=h+p|0;p=((b|l)&n|b&l)+((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+p|0;r=r+-710438585+(c[f+116>>2]|0)+((h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+((t^u)&h^t)|0;b=b+r|0;r=((l|n)&p|l&n)+((p>>>2|p<<30)^(p>>>13|p<<19)^(p>>>22|p<<10))+r|0;t=t+113926993+(c[f+120>>2]|0)+((b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7))+((u^h)&b^u)|0;l=l+t|0;t=((n|p)&r|n&p)+((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+t|0;u=u+338241895+(c[f+124>>2]|0)+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+((h^b)&l^h)|0;n=n+u|0;u=((p|r)&t|p&r)+((t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10))+u|0;h=h+666307205+(c[f+128>>2]|0)+((n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7))+((b^l)&n^b)|0;p=p+h|0;h=((r|t)&u|r&t)+((u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10))+h|0;b=b+773529912+(c[f+132>>2]|0)+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<7))+((l^n)&p^l)|0;r=r+b|0;b=((t|u)&h|t&u)+((h>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10))+b|0;l=l+1294757372+(c[f+136>>2]|0)+((r>>>6|r<<26)^(r>>>11|r<<21)^(r>>>25|r<<7))+((n^p)&r^n)|0;t=t+l|0;l=((u|h)&b|u&h)+((b>>>2|b<<30)^(b>>>13|b<<19)^(b>>>22|b<<10))+l|0;n=n+1396182291+(c[f+140>>2]|0)+((t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7))+((p^r)&t^p)|0;u=u+n|0;n=((h|b)&l|h&b)+((l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10))+n|0;p=p+1695183700+(c[f+144>>2]|0)+((u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7))+((r^t)&u^r)|0;h=h+p|0;p=((b|l)&n|b&l)+((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+p|0;r=r+1986661051+(c[f+148>>2]|0)+((h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+((t^u)&h^t)|0;b=b+r|0;r=((l|n)&p|l&n)+((p>>>2|p<<30)^(p>>>13|p<<19)^(p>>>22|p<<10))+r|0;t=t+-2117940946+(c[f+152>>2]|0)+((b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7))+((u^h)&b^u)|0;l=l+t|0;t=((n|p)&r|n&p)+((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+t|0;u=u+-1838011259+(c[f+156>>2]|0)+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+((h^b)&l^h)|0;n=n+u|0;u=((p|r)&t|p&r)+((t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10))+u|0;h=h+-1564481375+(c[f+160>>2]|0)+((n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7))+((b^l)&n^b)|0;p=p+h|0;h=((r|t)&u|r&t)+((u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10))+h|0;b=b+-1474664885+(c[f+164>>2]|0)+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<7))+((l^n)&p^l)|0;r=r+b|0;b=((t|u)&h|t&u)+((h>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10))+b|0;l=l+-1035236496+(c[f+168>>2]|0)+((r>>>6|r<<26)^(r>>>11|r<<21)^(r>>>25|r<<7))+((n^p)&r^n)|0;t=t+l|0;l=((u|h)&b|u&h)+((b>>>2|b<<30)^(b>>>13|b<<19)^(b>>>22|b<<10))+l|0;n=n+-949202525+(c[f+172>>2]|0)+((t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7))+((p^r)&t^p)|0;u=u+n|0;n=((h|b)&l|h&b)+((l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10))+n|0;p=p+-778901479+(c[f+176>>2]|0)+((u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7))+((r^t)&u^r)|0;h=h+p|0;p=((b|l)&n|b&l)+((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+p|0;r=r+-694614492+(c[f+180>>2]|0)+((h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+((t^u)&h^t)|0;b=b+r|0;r=((l|n)&p|l&n)+((p>>>2|p<<30)^(p>>>13|p<<19)^(p>>>22|p<<10))+r|0;t=t+-200395387+(c[f+184>>2]|0)+((b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7))+((u^h)&b^u)|0;l=l+t|0;t=((n|p)&r|n&p)+((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+t|0;u=u+275423344+(c[f+188>>2]|0)+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+((h^b)&l^h)|0;n=n+u|0;u=((p|r)&t|p&r)+((t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10))+u|0;h=h+430227734+(c[f+192>>2]|0)+((n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7))+((b^l)&n^b)|0;p=p+h|0;h=((r|t)&u|r&t)+((u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10))+h|0;b=b+506948616+(c[f+196>>2]|0)+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<7))+((l^n)&p^l)|0;r=r+b|0;b=((t|u)&h|t&u)+((h>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10))+b|0;l=l+659060556+(c[f+200>>2]|0)+((r>>>6|r<<26)^(r>>>11|r<<21)^(r>>>25|r<<7))+((n^p)&r^n)|0;t=t+l|0;l=((u|h)&b|u&h)+((b>>>2|b<<30)^(b>>>13|b<<19)^(b>>>22|b<<10))+l|0;n=n+883997877+(c[f+204>>2]|0)+((t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7))+((p^r)&t^p)|0;u=u+n|0;n=((h|b)&l|h&b)+((l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10))+n|0;p=p+958139571+(c[f+208>>2]|0)+((u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7))+((r^t)&u^r)|0;h=h+p|0;p=((b|l)&n|b&l)+((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+p|0;r=r+1322822218+(c[f+212>>2]|0)+((h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+((t^u)&h^t)|0;b=b+r|0;r=((l|n)&p|l&n)+((p>>>2|p<<30)^(p>>>13|p<<19)^(p>>>22|p<<10))+r|0;t=t+1537002063+(c[f+216>>2]|0)+((b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7))+((u^h)&b^u)|0;l=l+t|0;t=((n|p)&r|n&p)+((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+t|0;u=u+1747873779+(c[f+220>>2]|0)+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+((h^b)&l^h)|0;n=n+u|0;u=((p|r)&t|p&r)+((t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10))+u|0;h=h+1955562222+(c[f+224>>2]|0)+((n>>>6|n<<26)^(n>>>11|n<<21)^(n>>>25|n<<7))+((b^l)&n^b)|0;p=p+h|0;h=((r|t)&u|r&t)+((u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10))+h|0;b=b+2024104815+(c[f+228>>2]|0)+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<7))+((l^n)&p^l)|0;r=r+b|0;b=((t|u)&h|t&u)+((h>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10))+b|0;l=l+-2067236844+(c[f+232>>2]|0)+((r>>>6|r<<26)^(r>>>11|r<<21)^(r>>>25|r<<7))+((n^p)&r^n)|0;t=t+l|0;l=((u|h)&b|u&h)+((b>>>2|b<<30)^(b>>>13|b<<19)^(b>>>22|b<<10))+l|0;n=n+-1933114872+(c[f+236>>2]|0)+((t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7))+((p^r)&t^p)|0;u=u+n|0;n=((h|b)&l|h&b)+((l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10))+n|0;p=p+-1866530822+(c[f+240>>2]|0)+((u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7))+((r^t)&u^r)|0;h=h+p|0;p=((b|l)&n|b&l)+((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+p|0;r=r+-1538233109+(c[f+244>>2]|0)+((h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+((t^u)&h^t)|0;b=b+r|0;r=((l|n)&p|l&n)+((p>>>2|p<<30)^(p>>>13|p<<19)^(p>>>22|p<<10))+r|0;t=t+-1090935817+(c[f+248>>2]|0)+((b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7))+((u^h)&b^u)|0;l=l+t|0;t=((n|p)&r|n&p)+((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+t|0;f=u+-965641998+(c[f+252>>2]|0)+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+((h^b)&l^h)|0;c[a>>2]=(c[a>>2]|0)+(((p|r)&t|p&r)+((t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10))+f);c[s>>2]=(c[s>>2]|0)+t;c[q>>2]=(c[q>>2]|0)+r;c[o>>2]=(c[o>>2]|0)+p;c[m>>2]=(c[m>>2]|0)+(n+f);c[k>>2]=(c[k>>2]|0)+l;c[e>>2]=(c[e>>2]|0)+b;c[j>>2]=(c[j>>2]|0)+h;i=g;return}function ub(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;j=a+72|0;o=j;l=c[o>>2]|0;o=c[o+4>>2]|0;m=hd(l|0,o|0,3)|0;k=m&127;p=id(d|0,e|0,3)|0;n=C;i=hd(d|0,e|0,61)|0;f=C;n=fd(l|0,o|0,p|0,n|0)|0;p=C;c[j>>2]=n;c[j+4>>2]=p;j=a+64|0;g=j;h=c[g>>2]|0;g=c[g+4>>2]|0;if(p>>>0<o>>>0|(p|0)==(o|0)&n>>>0<l>>>0){h=fd(h|0,g|0,1,0)|0;g=C;p=j;c[p>>2]=h;c[p+4>>2]=g}i=fd(h|0,g|0,i|0,f|0)|0;h=j;c[h>>2]=i;c[h+4>>2]=C;h=ed(128,0,k|0,0)|0;i=C;g=a+k+80|0;if(i>>>0>e>>>0|(i|0)==(e|0)&h>>>0>d>>>0){kd(g|0,b|0,d|0)|0;return}kd(g|0,b|0,h|0)|0;l=a+80|0;xb(a,l);f=b+h|0;g=ed(d|0,e|0,h|0,i|0)|0;h=C;if(h>>>0>0|(h|0)==0&g>>>0>127){j=fd(k|0,0,d|0,e|0)|0;j=fd(j|0,C|0,-256,0)|0;d=j+256|0;i=m&127;while(1){xb(a,f);g=fd(g|0,h|0,-128,-1)|0;h=C;if(!(h>>>0>0|(h|0)==0&g>>>0>127))break;else f=f+128|0}g=j&127;f=b+((d&-128)-i)|0}kd(l|0,f|0,g|0)|0;return}function vb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;r=i;q=i=i+63&-64;i=i+16|0;p=b+64|0;h=p;g=c[h>>2]|0;h=c[h+4>>2]|0;a[q+7>>0]=g;o=hd(g|0,h|0,8)|0;a[q+6>>0]=o;o=hd(g|0,h|0,16)|0;a[q+5>>0]=o;o=hd(g|0,h|0,24)|0;a[q+4>>0]=o;a[q+3>>0]=h;o=hd(g|0,h|0,40)|0;a[q+2>>0]=o;o=hd(g|0,h|0,48)|0;a[q+1>>0]=o;o=hd(g|0,h|0,56)|0;a[q>>0]=o;o=b+72|0;u=o;s=c[u>>2]|0;u=c[u+4>>2]|0;a[q+15>>0]=s;n=hd(s|0,u|0,8)|0;a[q+14>>0]=n;n=hd(s|0,u|0,16)|0;a[q+13>>0]=n;n=hd(s|0,u|0,24)|0;a[q+12>>0]=n;a[q+11>>0]=u;n=hd(s|0,u|0,40)|0;a[q+10>>0]=n;n=hd(s|0,u|0,48)|0;a[q+9>>0]=n;n=hd(s|0,u|0,56)|0;a[q+8>>0]=n;n=hd(s|0,u|0,3)|0;k=n&127;j=0<0|0==0&k>>>0<112;m=j?112:240;j=ed(m|0,(j?0:0)|0,k|0,0)|0;l=C;v=id(j|0,l|0,3)|0;t=C;f=hd(j|0,l|0,61)|0;e=C;t=fd(s|0,u|0,v|0,t|0)|0;v=C;w=o;c[w>>2]=t;c[w+4>>2]=v;if(v>>>0<u>>>0|(v|0)==(u|0)&t>>>0<s>>>0){g=fd(g|0,h|0,1,0)|0;h=C;w=p;c[w>>2]=g;c[w+4>>2]=h}e=fd(g|0,h|0,f|0,e|0)|0;f=p;c[f>>2]=e;c[f+4>>2]=C;f=ed(128,0,k|0,0)|0;e=C;h=b+k+80|0;if(l>>>0<e>>>0|(l|0)==(e|0)&j>>>0<f>>>0)kd(h|0,312,j|0)|0;else{kd(h|0,312,f|0)|0;k=b+80|0;xb(b,k);g=312+f|0;h=ed(j|0,l|0,f|0,e|0)|0;f=C;if(f>>>0>0|(f|0)==0&h>>>0>127){e=m|-256;while(1){xb(b,g);h=fd(h|0,f|0,-128,-1)|0;f=C;if(!(f>>>0>0|(f|0)==0&h>>>0>127))break;else g=g+128|0}h=112;g=312+((e+256&-128)-(n&127))|0}kd(k|0,g|0,h|0)|0}v=o;w=c[v>>2]|0;v=c[v+4>>2]|0;l=hd(w|0,v|0,3)|0;k=l&127;g=fd(w|0,v|0,128,0)|0;f=o;c[f>>2]=g;c[f+4>>2]=C;f=p;g=c[f>>2]|0;f=c[f+4>>2]|0;if(v>>>0>4294967295|(v|0)==-1&w>>>0>4294967167){g=fd(g|0,f|0,1,0)|0;f=C;w=p;c[w>>2]=g;c[w+4>>2]=f}h=p;c[h>>2]=g;c[h+4>>2]=f;f=ed(128,0,k|0,0)|0;h=C;g=b+k+80|0;if(h>>>0>0|(h|0)==0&f>>>0>16){g=g+0|0;e=q+0|0;f=g+16|0;do{a[g>>0]=a[e>>0]|0;g=g+1|0;e=e+1|0}while((g|0)<(f|0));e=0}else{kd(g|0,q|0,f|0)|0;j=b+80|0;xb(b,j);e=q+f|0;g=ed(16,0,f|0,h|0)|0;h=C;if(h>>>0>0|(h|0)==0&g>>>0>127){f=fd(k|0,0,-240,0)|0;while(1){xb(b,e);g=fd(g|0,h|0,-128,-1)|0;h=C;if(!(h>>>0>0|(h|0)==0&g>>>0>127))break;else e=e+128|0}g=f&127;e=q+((f+256&-128)-(l&127))|0}kd(j|0,e|0,g|0)|0;e=0}do{w=e<<3;v=b+(e<<3)|0;u=c[v>>2]|0;v=c[v+4>>2]|0;a[d+(w|7)>>0]=u;t=hd(u|0,v|0,8)|0;a[d+(w|6)>>0]=t;t=hd(u|0,v|0,16)|0;a[d+(w|5)>>0]=t;t=hd(u|0,v|0,24)|0;a[d+(w|4)>>0]=t;a[d+(w|3)>>0]=v;t=hd(u|0,v|0,40)|0;a[d+(w|2)>>0]=t;t=hd(u|0,v|0,48)|0;a[d+(w|1)>>0]=t;v=hd(u|0,v|0,56)|0;a[d+w>>0]=v;e=e+1|0}while((e|0)!=8);gd(b|0,0,208)|0;i=r;return}function wb(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;m=i;l=i=i+63&-64;i=i+208|0;g=l;c[g>>2]=-205731576;c[g+4>>2]=1779033703;g=l+8|0;c[g>>2]=-2067093701;c[g+4>>2]=-1150833019;g=l+16|0;c[g>>2]=-23791573;c[g+4>>2]=1013904242;g=l+24|0;c[g>>2]=1595750129;c[g+4>>2]=-1521486534;g=l+32|0;c[g>>2]=-1377402159;c[g+4>>2]=1359893119;g=l+40|0;c[g>>2]=725511199;c[g+4>>2]=-1694144372;g=l+48|0;c[g>>2]=-79577749;c[g+4>>2]=528734635;g=l+56|0;c[g>>2]=327033209;c[g+4>>2]=1541459225;g=id(e|0,f|0,3)|0;h=C;j=hd(e|0,f|0,61)|0;k=l+72|0;c[k>>2]=g;c[k+4>>2]=h;k=l+64|0;c[k>>2]=j;c[k+4>>2]=C;k=l+80|0;if(f>>>0<0|(f|0)==0&e>>>0<128){kd(k|0,d|0,e|0)|0;vb(l,b);i=m;return}h=k+0|0;g=d+0|0;j=h+128|0;do{a[h>>0]=a[g>>0]|0;h=h+1|0;g=g+1|0}while((h|0)<(j|0));xb(l,k);g=d+128|0;h=fd(e|0,f|0,-128,-1)|0;j=C;if(j>>>0>0|(j|0)==0&h>>>0>127){e=fd(e|0,f|0,-256,0)|0;f=d;while(1){xb(l,g);h=fd(h|0,j|0,-128,-1)|0;j=C;if(!(j>>>0>0|(j|0)==0&h>>>0>127))break;else{n=g;g=f+256|0;f=n}}h=e&127;g=d+(e+256&-128)|0}kd(k|0,g|0,h|0)|0;vb(l,b);i=m;return}
function $c(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;do if(a>>>0<245){if(a>>>0<11)o=16;else o=a+11&-8;a=o>>>3;k=c[8270]|0;j=k>>>a;if(j&3){e=(j&1^1)+a|0;f=e<<1;b=33120+(f<<2)|0;f=33120+(f+2<<2)|0;g=c[f>>2]|0;h=g+8|0;i=c[h>>2]|0;do if((b|0)!=(i|0)){if(i>>>0<(c[8274]|0)>>>0)ia();d=i+12|0;if((c[d>>2]|0)==(g|0)){c[d>>2]=b;c[f>>2]=i;break}else ia()}else c[8270]=k&~(1<<e);while(0);J=e<<3;c[g+4>>2]=J|3;J=g+(J|4)|0;c[J>>2]=c[J>>2]|1;J=h;return J|0}i=c[8272]|0;if(o>>>0>i>>>0){if(j){f=2<<a;f=j<<a&(f|0-f);f=(f&0-f)+-1|0;a=f>>>12&16;f=f>>>a;e=f>>>5&8;f=f>>>e;d=f>>>2&4;f=f>>>d;g=f>>>1&2;f=f>>>g;h=f>>>1&1;h=(e|a|d|g|h)+(f>>>h)|0;f=h<<1;g=33120+(f<<2)|0;f=33120+(f+2<<2)|0;d=c[f>>2]|0;a=d+8|0;e=c[a>>2]|0;do if((g|0)!=(e|0)){if(e>>>0<(c[8274]|0)>>>0)ia();i=e+12|0;if((c[i>>2]|0)==(d|0)){c[i>>2]=g;c[f>>2]=e;l=c[8272]|0;break}else ia()}else{c[8270]=k&~(1<<h);l=i}while(0);J=h<<3;b=J-o|0;c[d+4>>2]=o|3;j=d+o|0;c[d+(o|4)>>2]=b|1;c[d+J>>2]=b;if(l){e=c[8275]|0;g=l>>>3;i=g<<1;f=33120+(i<<2)|0;h=c[8270]|0;g=1<<g;if(h&g){h=33120+(i+2<<2)|0;i=c[h>>2]|0;if(i>>>0<(c[8274]|0)>>>0)ia();else{m=h;n=i}}else{c[8270]=h|g;m=33120+(i+2<<2)|0;n=f}c[m>>2]=e;c[n+12>>2]=e;c[e+8>>2]=n;c[e+12>>2]=f}c[8272]=b;c[8275]=j;J=a;return J|0}j=c[8271]|0;if(j){k=(j&0-j)+-1|0;I=k>>>12&16;k=k>>>I;H=k>>>5&8;k=k>>>H;J=k>>>2&4;k=k>>>J;i=k>>>1&2;k=k>>>i;l=k>>>1&1;l=c[33384+((H|I|J|i|l)+(k>>>l)<<2)>>2]|0;k=(c[l+4>>2]&-8)-o|0;i=l;while(1){d=c[i+16>>2]|0;if(!d){d=c[i+20>>2]|0;if(!d)break}i=(c[d+4>>2]&-8)-o|0;J=i>>>0<k>>>0;k=J?i:k;i=d;l=J?d:l}j=c[8274]|0;if(l>>>0<j>>>0)ia();b=l+o|0;if(l>>>0>=b>>>0)ia();a=c[l+24>>2]|0;g=c[l+12>>2]|0;do if((g|0)==(l|0)){h=l+20|0;i=c[h>>2]|0;if(!i){h=l+16|0;i=c[h>>2]|0;if(!i){e=0;break}}while(1){g=i+20|0;f=c[g>>2]|0;if(f){i=f;h=g;continue}g=i+16|0;f=c[g>>2]|0;if(!f)break;else{i=f;h=g}}if(h>>>0<j>>>0)ia();else{c[h>>2]=0;e=i;break}}else{f=c[l+8>>2]|0;if(f>>>0<j>>>0)ia();i=f+12|0;if((c[i>>2]|0)!=(l|0))ia();h=g+8|0;if((c[h>>2]|0)==(l|0)){c[i>>2]=g;c[h>>2]=f;e=g;break}else ia()}while(0);do if(a){i=c[l+28>>2]|0;h=33384+(i<<2)|0;if((l|0)==(c[h>>2]|0)){c[h>>2]=e;if(!e){c[8271]=c[8271]&~(1<<i);break}}else{if(a>>>0<(c[8274]|0)>>>0)ia();i=a+16|0;if((c[i>>2]|0)==(l|0))c[i>>2]=e;else c[a+20>>2]=e;if(!e)break}h=c[8274]|0;if(e>>>0<h>>>0)ia();c[e+24>>2]=a;i=c[l+16>>2]|0;do if(i)if(i>>>0<h>>>0)ia();else{c[e+16>>2]=i;c[i+24>>2]=e;break}while(0);i=c[l+20>>2]|0;if(i)if(i>>>0<(c[8274]|0)>>>0)ia();else{c[e+20>>2]=i;c[i+24>>2]=e;break}}while(0);if(k>>>0<16){J=k+o|0;c[l+4>>2]=J|3;J=l+(J+4)|0;c[J>>2]=c[J>>2]|1}else{c[l+4>>2]=o|3;c[l+(o|4)>>2]=k|1;c[l+(k+o)>>2]=k;d=c[8272]|0;if(d){e=c[8275]|0;g=d>>>3;i=g<<1;f=33120+(i<<2)|0;h=c[8270]|0;g=1<<g;if(h&g){i=33120+(i+2<<2)|0;h=c[i>>2]|0;if(h>>>0<(c[8274]|0)>>>0)ia();else{q=i;p=h}}else{c[8270]=h|g;q=33120+(i+2<<2)|0;p=f}c[q>>2]=e;c[p+12>>2]=e;c[e+8>>2]=p;c[e+12>>2]=f}c[8272]=k;c[8275]=b}J=l+8|0;return J|0}}}else if(a>>>0<=4294967231){a=a+11|0;o=a&-8;l=c[8271]|0;if(l){i=0-o|0;a=a>>>8;if(a)if(o>>>0>16777215)k=31;else{p=(a+1048320|0)>>>16&8;q=a<<p;n=(q+520192|0)>>>16&4;q=q<<n;k=(q+245760|0)>>>16&2;k=14-(n|p|k)+(q<<k>>>15)|0;k=o>>>(k+7|0)&1|k<<1}else k=0;h=c[33384+(k<<2)>>2]|0;a:do if(!h){a=0;j=0}else{if((k|0)==31)j=0;else j=25-(k>>>1)|0;f=i;a=0;e=o<<j;j=0;while(1){g=c[h+4>>2]&-8;i=g-o|0;if(i>>>0<f>>>0)if((g|0)==(o|0)){a=h;j=h;break a}else j=h;else i=f;q=c[h+20>>2]|0;h=c[h+(e>>>31<<2)+16>>2]|0;a=(q|0)==0|(q|0)==(h|0)?a:q;if(!h)break;else{f=i;e=e<<1}}}while(0);if((a|0)==0&(j|0)==0){a=2<<k;a=l&(a|0-a);if(!a)break;q=(a&0-a)+-1|0;m=q>>>12&16;q=q>>>m;l=q>>>5&8;q=q>>>l;n=q>>>2&4;q=q>>>n;p=q>>>1&2;q=q>>>p;a=q>>>1&1;a=c[33384+((l|m|n|p|a)+(q>>>a)<<2)>>2]|0}if(!a){m=i;l=j}else while(1){q=(c[a+4>>2]&-8)-o|0;h=q>>>0<i>>>0;i=h?q:i;j=h?a:j;h=c[a+16>>2]|0;if(h){a=h;continue}a=c[a+20>>2]|0;if(!a){m=i;l=j;break}}if((l|0)!=0?m>>>0<((c[8272]|0)-o|0)>>>0:0){j=c[8274]|0;if(l>>>0<j>>>0)ia();n=l+o|0;if(l>>>0>=n>>>0)ia();a=c[l+24>>2]|0;g=c[l+12>>2]|0;do if((g|0)==(l|0)){h=l+20|0;i=c[h>>2]|0;if(!i){h=l+16|0;i=c[h>>2]|0;if(!i){d=0;break}}while(1){g=i+20|0;f=c[g>>2]|0;if(f){i=f;h=g;continue}g=i+16|0;f=c[g>>2]|0;if(!f)break;else{i=f;h=g}}if(h>>>0<j>>>0)ia();else{c[h>>2]=0;d=i;break}}else{f=c[l+8>>2]|0;if(f>>>0<j>>>0)ia();i=f+12|0;if((c[i>>2]|0)!=(l|0))ia();h=g+8|0;if((c[h>>2]|0)==(l|0)){c[i>>2]=g;c[h>>2]=f;d=g;break}else ia()}while(0);do if(a){i=c[l+28>>2]|0;h=33384+(i<<2)|0;if((l|0)==(c[h>>2]|0)){c[h>>2]=d;if(!d){c[8271]=c[8271]&~(1<<i);break}}else{if(a>>>0<(c[8274]|0)>>>0)ia();i=a+16|0;if((c[i>>2]|0)==(l|0))c[i>>2]=d;else c[a+20>>2]=d;if(!d)break}h=c[8274]|0;if(d>>>0<h>>>0)ia();c[d+24>>2]=a;i=c[l+16>>2]|0;do if(i)if(i>>>0<h>>>0)ia();else{c[d+16>>2]=i;c[i+24>>2]=d;break}while(0);i=c[l+20>>2]|0;if(i)if(i>>>0<(c[8274]|0)>>>0)ia();else{c[d+20>>2]=i;c[i+24>>2]=d;break}}while(0);b:do if(m>>>0>=16){c[l+4>>2]=o|3;c[l+(o|4)>>2]=m|1;c[l+(m+o)>>2]=m;i=m>>>3;if(m>>>0<256){h=i<<1;f=33120+(h<<2)|0;g=c[8270]|0;i=1<<i;do if(!(g&i)){c[8270]=g|i;b=33120+(h+2<<2)|0;s=f}else{i=33120+(h+2<<2)|0;h=c[i>>2]|0;if(h>>>0>=(c[8274]|0)>>>0){b=i;s=h;break}ia()}while(0);c[b>>2]=n;c[s+12>>2]=n;c[l+(o+8)>>2]=s;c[l+(o+12)>>2]=f;break}d=m>>>8;if(d)if(m>>>0>16777215)f=31;else{I=(d+1048320|0)>>>16&8;J=d<<I;H=(J+520192|0)>>>16&4;J=J<<H;f=(J+245760|0)>>>16&2;f=14-(H|I|f)+(J<<f>>>15)|0;f=m>>>(f+7|0)&1|f<<1}else f=0;i=33384+(f<<2)|0;c[l+(o+28)>>2]=f;c[l+(o+20)>>2]=0;c[l+(o+16)>>2]=0;h=c[8271]|0;g=1<<f;if(!(h&g)){c[8271]=h|g;c[i>>2]=n;c[l+(o+24)>>2]=i;c[l+(o+12)>>2]=n;c[l+(o+8)>>2]=n;break}i=c[i>>2]|0;if((f|0)==31)d=0;else d=25-(f>>>1)|0;c:do if((c[i+4>>2]&-8|0)!=(m|0)){f=m<<d;while(1){g=i+(f>>>31<<2)+16|0;h=c[g>>2]|0;if(!h)break;if((c[h+4>>2]&-8|0)==(m|0)){u=h;break c}else{f=f<<1;i=h}}if(g>>>0<(c[8274]|0)>>>0)ia();else{c[g>>2]=n;c[l+(o+24)>>2]=i;c[l+(o+12)>>2]=n;c[l+(o+8)>>2]=n;break b}}else u=i;while(0);d=u+8|0;b=c[d>>2]|0;J=c[8274]|0;if(u>>>0>=J>>>0&b>>>0>=J>>>0){c[b+12>>2]=n;c[d>>2]=n;c[l+(o+8)>>2]=b;c[l+(o+12)>>2]=u;c[l+(o+24)>>2]=0;break}else ia()}else{J=m+o|0;c[l+4>>2]=J|3;J=l+(J+4)|0;c[J>>2]=c[J>>2]|1}while(0);J=l+8|0;return J|0}}}else o=-1;while(0);j=c[8272]|0;if(j>>>0>=o>>>0){b=j-o|0;d=c[8275]|0;if(b>>>0>15){c[8275]=d+o;c[8272]=b;c[d+(o+4)>>2]=b|1;c[d+j>>2]=b;c[d+4>>2]=o|3}else{c[8272]=0;c[8275]=0;c[d+4>>2]=j|3;J=d+(j+4)|0;c[J>>2]=c[J>>2]|1}J=d+8|0;return J|0}j=c[8273]|0;if(j>>>0>o>>>0){I=j-o|0;c[8273]=I;J=c[8276]|0;c[8276]=J+o;c[J+(o+4)>>2]=I|1;c[J+4>>2]=o|3;J=J+8|0;return J|0}do if(!(c[8388]|0)){j=oa(30)|0;if(!(j+-1&j)){c[8390]=j;c[8389]=j;c[8391]=-1;c[8392]=-1;c[8393]=0;c[8381]=0;c[8388]=(la(0)|0)&-16^1431655768;break}else ia()}while(0);k=o+48|0;g=c[8390]|0;f=o+47|0;h=g+f|0;g=0-g|0;l=h&g;if(l>>>0<=o>>>0){J=0;return J|0}a=c[8380]|0;if((a|0)!=0?(s=c[8378]|0,u=s+l|0,u>>>0<=s>>>0|u>>>0>a>>>0):0){J=0;return J|0}d:do if(!(c[8381]&4)){i=c[8276]|0;e:do if(i){a=33528|0;while(1){j=c[a>>2]|0;if(j>>>0<=i>>>0?(r=a+4|0,(j+(c[r>>2]|0)|0)>>>0>i>>>0):0)break;a=c[a+8>>2]|0;if(!a){z=181;break e}}if(a){j=h-(c[8273]|0)&g;if(j>>>0<2147483647){i=ka(j|0)|0;if((i|0)==((c[a>>2]|0)+(c[r>>2]|0)|0))z=190;else z=191}else j=0}else z=181}else z=181;while(0);do if((z|0)==181){i=ka(0)|0;if((i|0)!=(-1|0)){a=i;j=c[8389]|0;h=j+-1|0;if(!(h&a))j=l;else j=l-a+(h+a&0-j)|0;a=c[8378]|0;h=a+j|0;if(j>>>0>o>>>0&j>>>0<2147483647){u=c[8380]|0;if((u|0)!=0?h>>>0<=a>>>0|h>>>0>u>>>0:0){j=0;break}h=ka(j|0)|0;if((h|0)==(i|0))z=190;else{i=h;z=191}}else j=0}else j=0}while(0);f:do if((z|0)==190){if((i|0)!=(-1|0)){v=i;r=j;z=201;break d}}else if((z|0)==191){h=0-j|0;do if((i|0)!=(-1|0)&j>>>0<2147483647&k>>>0>j>>>0?(t=c[8390]|0,t=f-j+t&0-t,t>>>0<2147483647):0)if((ka(t|0)|0)==(-1|0)){ka(h|0)|0;j=0;break f}else{j=t+j|0;break}while(0);if((i|0)==(-1|0))j=0;else{v=i;r=j;z=201;break d}}while(0);c[8381]=c[8381]|4;z=198}else{j=0;z=198}while(0);if((((z|0)==198?l>>>0<2147483647:0)?(v=ka(l|0)|0,w=ka(0)|0,(v|0)!=(-1|0)&(w|0)!=(-1|0)&v>>>0<w>>>0):0)?(x=w-v|0,y=x>>>0>(o+40|0)>>>0,y):0){r=y?x:j;z=201}if((z|0)==201){i=(c[8378]|0)+r|0;c[8378]=i;if(i>>>0>(c[8379]|0)>>>0)c[8379]=i;n=c[8276]|0;g:do if(n){f=33528|0;while(1){j=c[f>>2]|0;i=f+4|0;h=c[i>>2]|0;if((v|0)==(j+h|0)){z=213;break}g=c[f+8>>2]|0;if(!g)break;else f=g}if(((z|0)==213?(c[f+12>>2]&8|0)==0:0)?n>>>0>=j>>>0&n>>>0<v>>>0:0){c[i>>2]=h+r;b=(c[8273]|0)+r|0;d=n+8|0;if(!(d&7))d=0;else d=0-d&7;J=b-d|0;c[8276]=n+d;c[8273]=J;c[n+(d+4)>>2]=J|1;c[n+(b+4)>>2]=40;c[8277]=c[8392];break}j=c[8274]|0;if(v>>>0<j>>>0){c[8274]=v;j=v}i=v+r|0;g=33528|0;while(1){if((c[g>>2]|0)==(i|0)){z=223;break}h=c[g+8>>2]|0;if(!h)break;else g=h}if((z|0)==223?(c[g+12>>2]&8|0)==0:0){c[g>>2]=v;i=g+4|0;c[i>>2]=(c[i>>2]|0)+r;i=v+8|0;if(!(i&7))q=0;else q=0-i&7;i=v+(r+8)|0;if(!(i&7))k=0;else k=0-i&7;i=v+(k+r)|0;m=q+o|0;p=v+m|0;b=i-(v+q)-o|0;c[v+(q+4)>>2]=o|3;h:do if((i|0)!=(n|0)){if((i|0)==(c[8275]|0)){J=(c[8272]|0)+b|0;c[8272]=J;c[8275]=p;c[v+(m+4)>>2]=J|1;c[v+(J+m)>>2]=J;break}d=r+4|0;h=c[v+(d+k)>>2]|0;if((h&3|0)==1){l=h&-8;e=h>>>3;i:do if(h>>>0>=256){a=c[v+((k|24)+r)>>2]|0;g=c[v+(r+12+k)>>2]|0;do if((g|0)==(i|0)){g=k|16;f=v+(d+g)|0;h=c[f>>2]|0;if(!h){g=v+(g+r)|0;h=c[g>>2]|0;if(!h){G=0;break}}else g=f;while(1){f=h+20|0;e=c[f>>2]|0;if(e){h=e;g=f;continue}f=h+16|0;e=c[f>>2]|0;if(!e)break;else{h=e;g=f}}if(g>>>0<j>>>0)ia();else{c[g>>2]=0;G=h;break}}else{f=c[v+((k|8)+r)>>2]|0;if(f>>>0<j>>>0)ia();j=f+12|0;if((c[j>>2]|0)!=(i|0))ia();h=g+8|0;if((c[h>>2]|0)==(i|0)){c[j>>2]=g;c[h>>2]=f;G=g;break}else ia()}while(0);if(!a)break;j=c[v+(r+28+k)>>2]|0;h=33384+(j<<2)|0;do if((i|0)!=(c[h>>2]|0)){if(a>>>0<(c[8274]|0)>>>0)ia();j=a+16|0;if((c[j>>2]|0)==(i|0))c[j>>2]=G;else c[a+20>>2]=G;if(!G)break i}else{c[h>>2]=G;if(G)break;c[8271]=c[8271]&~(1<<j);break i}while(0);h=c[8274]|0;if(G>>>0<h>>>0)ia();c[G+24>>2]=a;j=k|16;i=c[v+(j+r)>>2]|0;do if(i)if(i>>>0<h>>>0)ia();else{c[G+16>>2]=i;c[i+24>>2]=G;break}while(0);i=c[v+(d+j)>>2]|0;if(!i)break;if(i>>>0<(c[8274]|0)>>>0)ia();else{c[G+20>>2]=i;c[i+24>>2]=G;break}}else{g=c[v+((k|8)+r)>>2]|0;f=c[v+(r+12+k)>>2]|0;h=33120+(e<<1<<2)|0;do if((g|0)!=(h|0)){if(g>>>0<j>>>0)ia();if((c[g+12>>2]|0)==(i|0))break;ia()}while(0);if((f|0)==(g|0)){c[8270]=c[8270]&~(1<<e);break}do if((f|0)==(h|0))C=f+8|0;else{if(f>>>0<j>>>0)ia();j=f+8|0;if((c[j>>2]|0)==(i|0)){C=j;break}ia()}while(0);c[g+12>>2]=f;c[C>>2]=g}while(0);i=v+((l|k)+r)|0;j=l+b|0}else j=b;i=i+4|0;c[i>>2]=c[i>>2]&-2;c[v+(m+4)>>2]=j|1;c[v+(j+m)>>2]=j;i=j>>>3;if(j>>>0<256){h=i<<1;f=33120+(h<<2)|0;g=c[8270]|0;i=1<<i;do if(!(g&i)){c[8270]=g|i;H=33120+(h+2<<2)|0;I=f}else{i=33120+(h+2<<2)|0;h=c[i>>2]|0;if(h>>>0>=(c[8274]|0)>>>0){H=i;I=h;break}ia()}while(0);c[H>>2]=p;c[I+12>>2]=p;c[v+(m+8)>>2]=I;c[v+(m+12)>>2]=f;break}d=j>>>8;do if(!d)f=0;else{if(j>>>0>16777215){f=31;break}H=(d+1048320|0)>>>16&8;I=d<<H;G=(I+520192|0)>>>16&4;I=I<<G;f=(I+245760|0)>>>16&2;f=14-(G|H|f)+(I<<f>>>15)|0;f=j>>>(f+7|0)&1|f<<1}while(0);i=33384+(f<<2)|0;c[v+(m+28)>>2]=f;c[v+(m+20)>>2]=0;c[v+(m+16)>>2]=0;h=c[8271]|0;g=1<<f;if(!(h&g)){c[8271]=h|g;c[i>>2]=p;c[v+(m+24)>>2]=i;c[v+(m+12)>>2]=p;c[v+(m+8)>>2]=p;break}h=c[i>>2]|0;if((f|0)==31)i=0;else i=25-(f>>>1)|0;j:do if((c[h+4>>2]&-8|0)!=(j|0)){f=j<<i;while(1){g=h+(f>>>31<<2)+16|0;i=c[g>>2]|0;if(!i)break;if((c[i+4>>2]&-8|0)==(j|0)){J=i;break j}else{f=f<<1;h=i}}if(g>>>0<(c[8274]|0)>>>0)ia();else{c[g>>2]=p;c[v+(m+24)>>2]=h;c[v+(m+12)>>2]=p;c[v+(m+8)>>2]=p;break h}}else J=h;while(0);d=J+8|0;b=c[d>>2]|0;I=c[8274]|0;if(J>>>0>=I>>>0&b>>>0>=I>>>0){c[b+12>>2]=p;c[d>>2]=p;c[v+(m+8)>>2]=b;c[v+(m+12)>>2]=J;c[v+(m+24)>>2]=0;break}else ia()}else{J=(c[8273]|0)+b|0;c[8273]=J;c[8276]=p;c[v+(m+4)>>2]=J|1}while(0);J=v+(q|8)|0;return J|0}i=33528|0;while(1){h=c[i>>2]|0;if(h>>>0<=n>>>0?(A=c[i+4>>2]|0,B=h+A|0,B>>>0>n>>>0):0)break;i=c[i+8>>2]|0}i=h+(A+-39)|0;if(!(i&7))i=0;else i=0-i&7;g=h+(A+-47+i)|0;g=g>>>0<(n+16|0)>>>0?n:g;h=g+8|0;i=v+8|0;if(!(i&7))i=0;else i=0-i&7;J=r+-40-i|0;c[8276]=v+i;c[8273]=J;c[v+(i+4)>>2]=J|1;c[v+(r+-36)>>2]=40;c[8277]=c[8392];c[g+4>>2]=27;c[h+0>>2]=c[8382];c[h+4>>2]=c[8383];c[h+8>>2]=c[8384];c[h+12>>2]=c[8385];c[8382]=v;c[8383]=r;c[8385]=0;c[8384]=h;i=g+28|0;c[i>>2]=7;if((g+32|0)>>>0<B>>>0)do{J=i;i=i+4|0;c[i>>2]=7}while((J+8|0)>>>0<B>>>0);if((g|0)!=(n|0)){j=g-n|0;i=n+(j+4)|0;c[i>>2]=c[i>>2]&-2;c[n+4>>2]=j|1;c[n+j>>2]=j;i=j>>>3;if(j>>>0<256){h=i<<1;f=33120+(h<<2)|0;g=c[8270]|0;i=1<<i;do if(!(g&i)){c[8270]=g|i;D=33120+(h+2<<2)|0;E=f}else{d=33120+(h+2<<2)|0;b=c[d>>2]|0;if(b>>>0>=(c[8274]|0)>>>0){D=d;E=b;break}ia()}while(0);c[D>>2]=n;c[E+12>>2]=n;c[n+8>>2]=E;c[n+12>>2]=f;break}d=j>>>8;if(d)if(j>>>0>16777215)i=31;else{I=(d+1048320|0)>>>16&8;J=d<<I;H=(J+520192|0)>>>16&4;J=J<<H;i=(J+245760|0)>>>16&2;i=14-(H|I|i)+(J<<i>>>15)|0;i=j>>>(i+7|0)&1|i<<1}else i=0;d=33384+(i<<2)|0;c[n+28>>2]=i;c[n+20>>2]=0;c[n+16>>2]=0;b=c[8271]|0;e=1<<i;if(!(b&e)){c[8271]=b|e;c[d>>2]=n;c[n+24>>2]=d;c[n+12>>2]=n;c[n+8>>2]=n;break}e=c[d>>2]|0;if((i|0)==31)d=0;else d=25-(i>>>1)|0;k:do if((c[e+4>>2]&-8|0)!=(j|0)){i=j<<d;while(1){b=e+(i>>>31<<2)+16|0;d=c[b>>2]|0;if(!d)break;if((c[d+4>>2]&-8|0)==(j|0)){F=d;break k}else{i=i<<1;e=d}}if(b>>>0<(c[8274]|0)>>>0)ia();else{c[b>>2]=n;c[n+24>>2]=e;c[n+12>>2]=n;c[n+8>>2]=n;break g}}else F=e;while(0);d=F+8|0;b=c[d>>2]|0;J=c[8274]|0;if(F>>>0>=J>>>0&b>>>0>=J>>>0){c[b+12>>2]=n;c[d>>2]=n;c[n+8>>2]=b;c[n+12>>2]=F;c[n+24>>2]=0;break}else ia()}}else{J=c[8274]|0;if((J|0)==0|v>>>0<J>>>0)c[8274]=v;c[8382]=v;c[8383]=r;c[8385]=0;c[8279]=c[8388];c[8278]=-1;d=0;do{J=d<<1;I=33120+(J<<2)|0;c[33120+(J+3<<2)>>2]=I;c[33120+(J+2<<2)>>2]=I;d=d+1|0}while((d|0)!=32);d=v+8|0;if(!(d&7))d=0;else d=0-d&7;J=r+-40-d|0;c[8276]=v+d;c[8273]=J;c[v+(d+4)>>2]=J|1;c[v+(r+-36)>>2]=40;c[8277]=c[8392]}while(0);b=c[8273]|0;if(b>>>0>o>>>0){I=b-o|0;c[8273]=I;J=c[8276]|0;c[8276]=J+o;c[J+(o+4)>>2]=I|1;c[J+4>>2]=o|3;J=J+8|0;return J|0}}c[(pa()|0)>>2]=12;J=0;return J|0}function ad(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if(!a)return;g=a+-8|0;h=c[8274]|0;if(g>>>0<h>>>0)ia();f=c[a+-4>>2]|0;e=f&3;if((e|0)==1)ia();o=f&-8;q=a+(o+-8)|0;do if(!(f&1)){g=c[g>>2]|0;if(!e)return;i=-8-g|0;l=a+i|0;m=g+o|0;if(l>>>0<h>>>0)ia();if((l|0)==(c[8275]|0)){g=a+(o+-4)|0;f=c[g>>2]|0;if((f&3|0)!=3){u=l;k=m;break}c[8272]=m;c[g>>2]=f&-2;c[a+(i+4)>>2]=m|1;c[q>>2]=m;return}d=g>>>3;if(g>>>0<256){e=c[a+(i+8)>>2]|0;f=c[a+(i+12)>>2]|0;g=33120+(d<<1<<2)|0;if((e|0)!=(g|0)){if(e>>>0<h>>>0)ia();if((c[e+12>>2]|0)!=(l|0))ia()}if((f|0)==(e|0)){c[8270]=c[8270]&~(1<<d);u=l;k=m;break}if((f|0)!=(g|0)){if(f>>>0<h>>>0)ia();g=f+8|0;if((c[g>>2]|0)==(l|0))b=g;else ia()}else b=f+8|0;c[e+12>>2]=f;c[b>>2]=e;u=l;k=m;break}b=c[a+(i+24)>>2]|0;e=c[a+(i+12)>>2]|0;do if((e|0)==(l|0)){f=a+(i+20)|0;g=c[f>>2]|0;if(!g){f=a+(i+16)|0;g=c[f>>2]|0;if(!g){j=0;break}}while(1){e=g+20|0;d=c[e>>2]|0;if(d){g=d;f=e;continue}e=g+16|0;d=c[e>>2]|0;if(!d)break;else{g=d;f=e}}if(f>>>0<h>>>0)ia();else{c[f>>2]=0;j=g;break}}else{d=c[a+(i+8)>>2]|0;if(d>>>0<h>>>0)ia();g=d+12|0;if((c[g>>2]|0)!=(l|0))ia();f=e+8|0;if((c[f>>2]|0)==(l|0)){c[g>>2]=e;c[f>>2]=d;j=e;break}else ia()}while(0);if(b){g=c[a+(i+28)>>2]|0;f=33384+(g<<2)|0;if((l|0)==(c[f>>2]|0)){c[f>>2]=j;if(!j){c[8271]=c[8271]&~(1<<g);u=l;k=m;break}}else{if(b>>>0<(c[8274]|0)>>>0)ia();g=b+16|0;if((c[g>>2]|0)==(l|0))c[g>>2]=j;else c[b+20>>2]=j;if(!j){u=l;k=m;break}}f=c[8274]|0;if(j>>>0<f>>>0)ia();c[j+24>>2]=b;g=c[a+(i+16)>>2]|0;do if(g)if(g>>>0<f>>>0)ia();else{c[j+16>>2]=g;c[g+24>>2]=j;break}while(0);g=c[a+(i+20)>>2]|0;if(g)if(g>>>0<(c[8274]|0)>>>0)ia();else{c[j+20>>2]=g;c[g+24>>2]=j;u=l;k=m;break}else{u=l;k=m}}else{u=l;k=m}}else{u=g;k=o}while(0);if(u>>>0>=q>>>0)ia();g=a+(o+-4)|0;f=c[g>>2]|0;if(!(f&1))ia();if(!(f&2)){if((q|0)==(c[8276]|0)){t=(c[8273]|0)+k|0;c[8273]=t;c[8276]=u;c[u+4>>2]=t|1;if((u|0)!=(c[8275]|0))return;c[8275]=0;c[8272]=0;return}if((q|0)==(c[8275]|0)){t=(c[8272]|0)+k|0;c[8272]=t;c[8275]=u;c[u+4>>2]=t|1;c[u+t>>2]=t;return}h=(f&-8)+k|0;b=f>>>3;do if(f>>>0>=256){b=c[a+(o+16)>>2]|0;g=c[a+(o|4)>>2]|0;do if((g|0)==(q|0)){f=a+(o+12)|0;g=c[f>>2]|0;if(!g){f=a+(o+8)|0;g=c[f>>2]|0;if(!g){p=0;break}}while(1){e=g+20|0;d=c[e>>2]|0;if(d){g=d;f=e;continue}e=g+16|0;d=c[e>>2]|0;if(!d)break;else{g=d;f=e}}if(f>>>0<(c[8274]|0)>>>0)ia();else{c[f>>2]=0;p=g;break}}else{f=c[a+o>>2]|0;if(f>>>0<(c[8274]|0)>>>0)ia();e=f+12|0;if((c[e>>2]|0)!=(q|0))ia();d=g+8|0;if((c[d>>2]|0)==(q|0)){c[e>>2]=g;c[d>>2]=f;p=g;break}else ia()}while(0);if(b){g=c[a+(o+20)>>2]|0;f=33384+(g<<2)|0;if((q|0)==(c[f>>2]|0)){c[f>>2]=p;if(!p){c[8271]=c[8271]&~(1<<g);break}}else{if(b>>>0<(c[8274]|0)>>>0)ia();g=b+16|0;if((c[g>>2]|0)==(q|0))c[g>>2]=p;else c[b+20>>2]=p;if(!p)break}g=c[8274]|0;if(p>>>0<g>>>0)ia();c[p+24>>2]=b;f=c[a+(o+8)>>2]|0;do if(f)if(f>>>0<g>>>0)ia();else{c[p+16>>2]=f;c[f+24>>2]=p;break}while(0);d=c[a+(o+12)>>2]|0;if(d)if(d>>>0<(c[8274]|0)>>>0)ia();else{c[p+20>>2]=d;c[d+24>>2]=p;break}}}else{d=c[a+o>>2]|0;e=c[a+(o|4)>>2]|0;g=33120+(b<<1<<2)|0;if((d|0)!=(g|0)){if(d>>>0<(c[8274]|0)>>>0)ia();if((c[d+12>>2]|0)!=(q|0))ia()}if((e|0)==(d|0)){c[8270]=c[8270]&~(1<<b);break}if((e|0)!=(g|0)){if(e>>>0<(c[8274]|0)>>>0)ia();f=e+8|0;if((c[f>>2]|0)==(q|0))n=f;else ia()}else n=e+8|0;c[d+12>>2]=e;c[n>>2]=d}while(0);c[u+4>>2]=h|1;c[u+h>>2]=h;if((u|0)==(c[8275]|0)){c[8272]=h;return}else g=h}else{c[g>>2]=f&-2;c[u+4>>2]=k|1;c[u+k>>2]=k;g=k}f=g>>>3;if(g>>>0<256){e=f<<1;g=33120+(e<<2)|0;b=c[8270]|0;d=1<<f;if(b&d){d=33120+(e+2<<2)|0;b=c[d>>2]|0;if(b>>>0<(c[8274]|0)>>>0)ia();else{r=d;s=b}}else{c[8270]=b|d;r=33120+(e+2<<2)|0;s=g}c[r>>2]=u;c[s+12>>2]=u;c[u+8>>2]=s;c[u+12>>2]=g;return}b=g>>>8;if(b)if(g>>>0>16777215)f=31;else{r=(b+1048320|0)>>>16&8;s=b<<r;q=(s+520192|0)>>>16&4;s=s<<q;f=(s+245760|0)>>>16&2;f=14-(q|r|f)+(s<<f>>>15)|0;f=g>>>(f+7|0)&1|f<<1}else f=0;d=33384+(f<<2)|0;c[u+28>>2]=f;c[u+20>>2]=0;c[u+16>>2]=0;b=c[8271]|0;e=1<<f;a:do if(b&e){e=c[d>>2]|0;if((f|0)==31)d=0;else d=25-(f>>>1)|0;b:do if((c[e+4>>2]&-8|0)!=(g|0)){f=g<<d;while(1){b=e+(f>>>31<<2)+16|0;d=c[b>>2]|0;if(!d)break;if((c[d+4>>2]&-8|0)==(g|0)){t=d;break b}else{f=f<<1;e=d}}if(b>>>0<(c[8274]|0)>>>0)ia();else{c[b>>2]=u;c[u+24>>2]=e;c[u+12>>2]=u;c[u+8>>2]=u;break a}}else t=e;while(0);b=t+8|0;d=c[b>>2]|0;s=c[8274]|0;if(t>>>0>=s>>>0&d>>>0>=s>>>0){c[d+12>>2]=u;c[b>>2]=u;c[u+8>>2]=d;c[u+12>>2]=t;c[u+24>>2]=0;break}else ia()}else{c[8271]=b|e;c[d>>2]=u;c[u+24>>2]=d;c[u+12>>2]=u;c[u+8>>2]=u}while(0);u=(c[8278]|0)+-1|0;c[8278]=u;if(!u)b=33536|0;else return;while(1){b=c[b>>2]|0;if(!b)break;else b=b+8|0}c[8278]=-1;return}function bd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;q=a+b|0;h=c[a+4>>2]|0;do if(!(h&1)){j=c[a>>2]|0;if(!(h&3))return;n=a+(0-j)|0;m=j+b|0;i=c[8274]|0;if(n>>>0<i>>>0)ia();if((n|0)==(c[8275]|0)){g=a+(b+4)|0;h=c[g>>2]|0;if((h&3|0)!=3){t=n;l=m;break}c[8272]=m;c[g>>2]=h&-2;c[a+(4-j)>>2]=m|1;c[q>>2]=m;return}e=j>>>3;if(j>>>0<256){f=c[a+(8-j)>>2]|0;g=c[a+(12-j)>>2]|0;h=33120+(e<<1<<2)|0;if((f|0)!=(h|0)){if(f>>>0<i>>>0)ia();if((c[f+12>>2]|0)!=(n|0))ia()}if((g|0)==(f|0)){c[8270]=c[8270]&~(1<<e);t=n;l=m;break}if((g|0)!=(h|0)){if(g>>>0<i>>>0)ia();h=g+8|0;if((c[h>>2]|0)==(n|0))d=h;else ia()}else d=g+8|0;c[f+12>>2]=g;c[d>>2]=f;t=n;l=m;break}d=c[a+(24-j)>>2]|0;f=c[a+(12-j)>>2]|0;do if((f|0)==(n|0)){g=16-j|0;f=a+(g+4)|0;h=c[f>>2]|0;if(!h){g=a+g|0;h=c[g>>2]|0;if(!h){k=0;break}}else g=f;while(1){f=h+20|0;e=c[f>>2]|0;if(e){h=e;g=f;continue}f=h+16|0;e=c[f>>2]|0;if(!e)break;else{h=e;g=f}}if(g>>>0<i>>>0)ia();else{c[g>>2]=0;k=h;break}}else{e=c[a+(8-j)>>2]|0;if(e>>>0<i>>>0)ia();h=e+12|0;if((c[h>>2]|0)!=(n|0))ia();g=f+8|0;if((c[g>>2]|0)==(n|0)){c[h>>2]=f;c[g>>2]=e;k=f;break}else ia()}while(0);if(d){h=c[a+(28-j)>>2]|0;g=33384+(h<<2)|0;if((n|0)==(c[g>>2]|0)){c[g>>2]=k;if(!k){c[8271]=c[8271]&~(1<<h);t=n;l=m;break}}else{if(d>>>0<(c[8274]|0)>>>0)ia();h=d+16|0;if((c[h>>2]|0)==(n|0))c[h>>2]=k;else c[d+20>>2]=k;if(!k){t=n;l=m;break}}f=c[8274]|0;if(k>>>0<f>>>0)ia();c[k+24>>2]=d;h=16-j|0;g=c[a+h>>2]|0;do if(g)if(g>>>0<f>>>0)ia();else{c[k+16>>2]=g;c[g+24>>2]=k;break}while(0);h=c[a+(h+4)>>2]|0;if(h)if(h>>>0<(c[8274]|0)>>>0)ia();else{c[k+20>>2]=h;c[h+24>>2]=k;t=n;l=m;break}else{t=n;l=m}}else{t=n;l=m}}else{t=a;l=b}while(0);i=c[8274]|0;if(q>>>0<i>>>0)ia();h=a+(b+4)|0;g=c[h>>2]|0;if(!(g&2)){if((q|0)==(c[8276]|0)){s=(c[8273]|0)+l|0;c[8273]=s;c[8276]=t;c[t+4>>2]=s|1;if((t|0)!=(c[8275]|0))return;c[8275]=0;c[8272]=0;return}if((q|0)==(c[8275]|0)){s=(c[8272]|0)+l|0;c[8272]=s;c[8275]=t;c[t+4>>2]=s|1;c[t+s>>2]=s;return}j=(g&-8)+l|0;d=g>>>3;do if(g>>>0>=256){d=c[a+(b+24)>>2]|0;f=c[a+(b+12)>>2]|0;do if((f|0)==(q|0)){g=a+(b+20)|0;h=c[g>>2]|0;if(!h){g=a+(b+16)|0;h=c[g>>2]|0;if(!h){p=0;break}}while(1){f=h+20|0;e=c[f>>2]|0;if(e){h=e;g=f;continue}f=h+16|0;e=c[f>>2]|0;if(!e)break;else{h=e;g=f}}if(g>>>0<i>>>0)ia();else{c[g>>2]=0;p=h;break}}else{e=c[a+(b+8)>>2]|0;if(e>>>0<i>>>0)ia();h=e+12|0;if((c[h>>2]|0)!=(q|0))ia();g=f+8|0;if((c[g>>2]|0)==(q|0)){c[h>>2]=f;c[g>>2]=e;p=f;break}else ia()}while(0);if(d){h=c[a+(b+28)>>2]|0;g=33384+(h<<2)|0;if((q|0)==(c[g>>2]|0)){c[g>>2]=p;if(!p){c[8271]=c[8271]&~(1<<h);break}}else{if(d>>>0<(c[8274]|0)>>>0)ia();g=d+16|0;if((c[g>>2]|0)==(q|0))c[g>>2]=p;else c[d+20>>2]=p;if(!p)break}f=c[8274]|0;if(p>>>0<f>>>0)ia();c[p+24>>2]=d;g=c[a+(b+16)>>2]|0;do if(g)if(g>>>0<f>>>0)ia();else{c[p+16>>2]=g;c[g+24>>2]=p;break}while(0);f=c[a+(b+20)>>2]|0;if(f)if(f>>>0<(c[8274]|0)>>>0)ia();else{c[p+20>>2]=f;c[f+24>>2]=p;break}}}else{e=c[a+(b+8)>>2]|0;f=c[a+(b+12)>>2]|0;h=33120+(d<<1<<2)|0;if((e|0)!=(h|0)){if(e>>>0<i>>>0)ia();if((c[e+12>>2]|0)!=(q|0))ia()}if((f|0)==(e|0)){c[8270]=c[8270]&~(1<<d);break}if((f|0)!=(h|0)){if(f>>>0<i>>>0)ia();g=f+8|0;if((c[g>>2]|0)==(q|0))o=g;else ia()}else o=f+8|0;c[e+12>>2]=f;c[o>>2]=e}while(0);c[t+4>>2]=j|1;c[t+j>>2]=j;if((t|0)==(c[8275]|0)){c[8272]=j;return}else h=j}else{c[h>>2]=g&-2;c[t+4>>2]=l|1;c[t+l>>2]=l;h=l}g=h>>>3;if(h>>>0<256){e=g<<1;h=33120+(e<<2)|0;d=c[8270]|0;f=1<<g;if(d&f){f=33120+(e+2<<2)|0;e=c[f>>2]|0;if(e>>>0<(c[8274]|0)>>>0)ia();else{r=f;s=e}}else{c[8270]=d|f;r=33120+(e+2<<2)|0;s=h}c[r>>2]=t;c[s+12>>2]=t;c[t+8>>2]=s;c[t+12>>2]=h;return}d=h>>>8;if(d)if(h>>>0>16777215)g=31;else{r=(d+1048320|0)>>>16&8;s=d<<r;q=(s+520192|0)>>>16&4;s=s<<q;g=(s+245760|0)>>>16&2;g=14-(q|r|g)+(s<<g>>>15)|0;g=h>>>(g+7|0)&1|g<<1}else g=0;f=33384+(g<<2)|0;c[t+28>>2]=g;c[t+20>>2]=0;c[t+16>>2]=0;e=c[8271]|0;d=1<<g;if(!(e&d)){c[8271]=e|d;c[f>>2]=t;c[t+24>>2]=f;c[t+12>>2]=t;c[t+8>>2]=t;return}f=c[f>>2]|0;if((g|0)==31)d=0;else d=25-(g>>>1)|0;a:do if((c[f+4>>2]&-8|0)!=(h|0)){g=h<<d;d=f;while(1){e=d+(g>>>31<<2)+16|0;f=c[e>>2]|0;if(!f)break;if((c[f+4>>2]&-8|0)==(h|0))break a;else{g=g<<1;d=f}}if(e>>>0<(c[8274]|0)>>>0)ia();c[e>>2]=t;c[t+24>>2]=d;c[t+12>>2]=t;c[t+8>>2]=t;return}while(0);d=f+8|0;e=c[d>>2]|0;s=c[8274]|0;if(!(f>>>0>=s>>>0&e>>>0>=s>>>0))ia();c[e+12>>2]=t;c[d>>2]=t;c[t+8>>2]=e;c[t+12>>2]=f;c[t+24>>2]=0;return}function cd(){}function dd(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){C=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}C=(b|0)<0?-1:0;return b>>c-32|0}function ed(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (C=d,a-c>>>0|0)|0}function fd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (C=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function gd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;h=b&3;i=d|d<<8|d<<16|d<<24;g=f&~3;if(h){h=b+4-h|0;while((b|0)<(h|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(g|0)){c[b>>2]=i;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function hd(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){C=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}C=0;return b>>>c-32|0}function id(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){C=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}C=a<<c-32;return 0}function jd(b){b=b|0;var c=0;c=b;while(a[c>>0]|0)c=c+1|0;return c-b|0}function kd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return ma(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if(!e)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function ld(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b>>0]=a[c>>0]|0}b=e}else kd(b,c,d)|0;return b|0}function md(b){b=b|0;var c=0;c=a[m+(b&255)>>0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return (a[m+(b>>>24)>>0]|0)+24|0}function nd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=_(e,f)|0;d=a>>>16;a=(c>>>16)+(_(e,d)|0)|0;e=b>>>16;b=_(e,f)|0;return (C=(a>>>16)+(_(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function od(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=ed(j^a,i^b,j,i)|0;g=C;a=f^j;b=e^i;d=ed((td(h,g,ed(f^c,e^d,f,e)|0,C,0)|0)^a,C^b,a,b)|0;return d|0}function pd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;i=i+8|0;j=f|0;h=b>>31|((b|0)<0?-1:0)<<1;g=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;l=e>>31|((e|0)<0?-1:0)<<1;k=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;a=ed(h^a,g^b,h,g)|0;b=C;td(a,b,ed(l^d,k^e,l,k)|0,C,j)|0;e=ed(c[j>>2]^h,c[j+4>>2]^g,h,g)|0;d=C;i=f;return (C=d,e)|0}function qd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=nd(e,f)|0;a=C;return (C=(_(b,f)|0)+(_(d,e)|0)+a|a&0,c|0|0)|0}function rd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=td(a,b,c,d,0)|0;return d|0}function sd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=i;i=i+8|0;f=g|0;td(a,b,d,e,f)|0;i=g;return (C=c[f+4>>2]|0,c[f>>2]|0)|0}function td(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;n=a;l=b;m=l;k=d;o=e;i=o;if(!m){g=(f|0)!=0;if(!i){if(g){c[f>>2]=(n>>>0)%(k>>>0);c[f+4>>2]=0}o=0;f=(n>>>0)/(k>>>0)>>>0;return (C=o,f)|0}else{if(!g){o=0;f=0;return (C=o,f)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;o=0;f=0;return (C=o,f)|0}}j=(i|0)==0;do if(k){if(!j){h=(aa(i|0)|0)-(aa(m|0)|0)|0;if(h>>>0<=31){g=h+1|0;l=31-h|0;k=h-31>>31;i=g;j=n>>>(g>>>0)&k|m<<l;k=m>>>(g>>>0)&k;g=0;h=n<<l;break}if(!f){o=0;f=0;return (C=o,f)|0}c[f>>2]=a|0;c[f+4>>2]=l|b&0;o=0;f=0;return (C=o,f)|0}j=k-1|0;if(j&k){h=(aa(k|0)|0)+33-(aa(m|0)|0)|0;p=64-h|0;l=32-h|0;a=l>>31;b=h-32|0;k=b>>31;i=h;j=l-1>>31&m>>>(b>>>0)|(m<<l|n>>>(h>>>0))&k;k=k&m>>>(h>>>0);g=n<<p&a;h=(m<<p|n>>>(b>>>0))&a|n<<l&h-33>>31;break}if(f){c[f>>2]=j&n;c[f+4>>2]=0}if((k|0)==1){f=l|b&0;p=a|0|0;return (C=f,p)|0}else{p=md(k|0)|0;f=m>>>(p>>>0)|0;p=m<<32-p|n>>>(p>>>0)|0;return (C=f,p)|0}}else{if(j){if(f){c[f>>2]=(m>>>0)%(k>>>0);c[f+4>>2]=0}f=0;p=(m>>>0)/(k>>>0)>>>0;return (C=f,p)|0}if(!n){if(f){c[f>>2]=0;c[f+4>>2]=(m>>>0)%(i>>>0)}f=0;p=(m>>>0)/(i>>>0)>>>0;return (C=f,p)|0}j=i-1|0;if(!(j&i)){if(f){c[f>>2]=a|0;c[f+4>>2]=j&m|b&0}f=0;p=m>>>((md(i|0)|0)>>>0);return (C=f,p)|0}h=(aa(i|0)|0)-(aa(m|0)|0)|0;if(h>>>0<=30){k=h+1|0;h=31-h|0;i=k;j=m<<h|n>>>(k>>>0);k=m>>>(k>>>0);g=0;h=n<<h;break}if(!f){f=0;p=0;return (C=f,p)|0}c[f>>2]=a|0;c[f+4>>2]=l|b&0;f=0;p=0;return (C=f,p)|0}while(0);if(!i){l=h;i=0;h=0}else{m=d|0|0;l=o|e&0;b=fd(m,l,-1,-1)|0;a=C;d=h;h=0;do{n=d;d=g>>>31|d<<1;g=h|g<<1;n=j<<1|n>>>31|0;e=j>>>31|k<<1|0;ed(b,a,n,e)|0;p=C;o=p>>31|((p|0)<0?-1:0)<<1;h=o&1;j=ed(n,e,o&m,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l)|0;k=C;i=i-1|0}while((i|0)!=0);l=d;i=0}d=0;if(f){c[f>>2]=j;c[f+4>>2]=k}f=(g|0)>>>31|(l|d)<<1|(d<<1|g>>>31)&0|i;p=(g<<1|0>>>31)&-2|h;return (C=f,p)|0}function ud(a){a=a|0;return ra[a&31]()|0}function vd(){return da(0)|0}function wd(){return da(1)|0}function xd(){return da(2)|0}function yd(){return da(3)|0}function zd(){return da(4)|0}function Ad(){return da(5)|0}function Bd(){return da(6)|0}function Cd(){return da(7)|0}function Dd(a,b){a=a|0;b=b|0;return sa[a&31](b|0)|0}function Ed(a){a=a|0;return da(0,a|0)|0}function Fd(a){a=a|0;return da(1,a|0)|0}function Gd(a){a=a|0;return da(2,a|0)|0}function Hd(a){a=a|0;return da(3,a|0)|0}function Id(a){a=a|0;return da(4,a|0)|0}function Jd(a){a=a|0;return da(5,a|0)|0}function Kd(a){a=a|0;return da(6,a|0)|0}function Ld(a){a=a|0;return da(7,a|0)|0}function Md(){ba(0);return 0}function Nd(a){a=a|0;ba(1);return 0}

// EMSCRIPTEN_END_FUNCS
var ra=[Md,Md,vd,Md,wd,Md,xd,Md,yd,Md,zd,Md,Ad,Md,Bd,Md,Cd,Md,Md,Md,Md,Md,Md,Md,Md,Md,Md,Md,Md,Md,Md,Md];var sa=[Nd,Nd,Ed,Nd,Fd,Nd,Gd,Nd,Hd,Nd,Id,Nd,Jd,Nd,Kd,Nd,Ld,Nd,Nd,Nd,Nd,Nd,Nd,Nd,Nd,Nd,Nd,Nd,Nd,Nd,Nd,Nd];return{_sodium_library_version_minor:Vc,_strlen:jd,_sodium_version_string:Tc,_sodium_hex2bin:Sc,_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive:Lb,_bitshift64Lshr:hd,_crypto_pwhash_scryptsalsa208sha256:Mb,_crypto_box_noncebytes:Qa,_crypto_box_beforenm:Ua,_crypto_scalarmult_base:Ub,_crypto_aead_chacha20poly1305_abytes:Ga,_crypto_auth_bytes:Ha,_crypto_sign_open:lc,_memcpy:kd,_crypto_box_seed_keypair:Sa,_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive:Jb,_crypto_box_open_easy_afternm:$a,_crypto_sign_ed25519_sk_to_curve25519:Ac,_sodium_memzero:Pc,_crypto_aead_chacha20poly1305_keybytes:Da,_free:ad,_crypto_shorthash:dc,_crypto_auth_keybytes:Ia,_crypto_pwhash_scryptsalsa208sha256_saltbytes:Fb,_crypto_aead_chacha20poly1305_npubbytes:Ea,_crypto_sign_seedbytes:fc,_crypto_box_detached_afternm:Va,_crypto_auth:Ja,_randombytes_random:Jc,_crypto_sign_keypair:jc,_crypto_shorthash_keybytes:cc,_crypto_generichash_statebytes:jb,_crypto_pwhash_scryptsalsa208sha256_str_verify:Ob,_crypto_generichash_init:lb,_crypto_generichash_keybytes_max:hb,_crypto_sign_ed25519_pk_to_curve25519:zc,_i64Add:fd,_crypto_box_beforenmbytes:Pa,_crypto_generichash:kb,_sodium_library_version_major:Uc,_randombytes_stir:Kc,_randombytes_close:Nc,_crypto_shorthash_bytes:bc,_crypto_box_secretkeybytes:Oa,_crypto_aead_chacha20poly1305_encrypt:Ba,_crypto_pwhash_scryptsalsa208sha256_ll:Db,_crypto_box_detached:Wa,_randombytes_buf:Mc,_crypto_pwhash_scryptsalsa208sha256_str:Nb,_bitshift64Ashr:dd,_crypto_box_open_detached:_a,_crypto_scalarmult_bytes:Sb,_crypto_auth_verify:Ka,_crypto_secretbox_detached:Zb,_crypto_secretbox_easy:_b,_crypto_pwhash_scryptsalsa208sha256_strbytes:Gb,_memset:gd,_crypto_box_open_detached_afternm:Za,_sodium_bin2hex:Rc,_i64Subtract:ed,_crypto_pwhash_scryptsalsa208sha256_strprefix:Hb,_crypto_box_seedbytes:Ma,_crypto_hash:qb,_crypto_box_easy_afternm:Xa,_crypto_box_macbytes:Ra,_crypto_box_publickeybytes:Na,_crypto_sign_secretkeybytes:hc,_crypto_scalarmult_scalarbytes:Tb,_crypto_generichash_keybytes_min:gb,_malloc:$c,_crypto_aead_chacha20poly1305_decrypt:Ca,_memmove:ld,_crypto_sign:kc,_crypto_secretbox_noncebytes:Xb,_randombytes_set_implementation:Ic,_crypto_box_keypair:Ta,_crypto_generichash_keybytes:ib,_crypto_generichash_bytes_min:db,_sodium_init:Oc,_crypto_secretbox_macbytes:Yb,_crypto_secretbox_keybytes:Wb,_bitshift64Shl:id,_crypto_hash_bytes:pb,_crypto_generichash_bytes:fb,_crypto_generichash_bytes_max:eb,_crypto_secretbox_open_detached:$b,_sodium_memcmp:Qc,_crypto_sign_verify_detached:nc,_crypto_box_open_easy:ab,_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive:Kb,_crypto_sign_publickeybytes:gc,_crypto_aead_chacha20poly1305_nsecbytes:Fa,_crypto_sign_bytes:ec,_crypto_generichash_update:mb,_crypto_scalarmult:Vb,_crypto_sign_detached:mc,_crypto_box_easy:Ya,_crypto_secretbox_open_easy:ac,_crypto_generichash_final:nb,_randombytes_uniform:Lc,_crypto_sign_seed_keypair:ic,_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive:Ib,runPostSets:cd,stackAlloc:ta,stackSave:ua,stackRestore:va,setThrew:wa,setTempRet0:za,getTempRet0:Aa,dynCall_i:ud,dynCall_ii:Dd}})


// EMSCRIPTEN_END_ASM
(s.Ga,s.Ha,O);s._sodium_library_version_minor=S._sodium_library_version_minor;var kb=s._strlen=S._strlen;s._sodium_version_string=S._sodium_version_string;s._sodium_hex2bin=S._sodium_hex2bin;s._crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive=S._crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive;var ib=s._bitshift64Lshr=S._bitshift64Lshr;
s._crypto_pwhash_scryptsalsa208sha256=S._crypto_pwhash_scryptsalsa208sha256;s._crypto_box_noncebytes=S._crypto_box_noncebytes;s._crypto_box_beforenm=S._crypto_box_beforenm;s._crypto_scalarmult_base=S._crypto_scalarmult_base;s._crypto_aead_chacha20poly1305_abytes=S._crypto_aead_chacha20poly1305_abytes;s._crypto_auth_bytes=S._crypto_auth_bytes;s._crypto_sign_open=S._crypto_sign_open;var lb=s._memcpy=S._memcpy;s._crypto_box_seed_keypair=S._crypto_box_seed_keypair;
s._crypto_pwhash_scryptsalsa208sha256_memlimit_interactive=S._crypto_pwhash_scryptsalsa208sha256_memlimit_interactive;s._crypto_box_open_easy_afternm=S._crypto_box_open_easy_afternm;s._crypto_sign_ed25519_sk_to_curve25519=S._crypto_sign_ed25519_sk_to_curve25519;s._sodium_memzero=S._sodium_memzero;s._crypto_aead_chacha20poly1305_keybytes=S._crypto_aead_chacha20poly1305_keybytes;var Ga=s._free=S._free;s._crypto_shorthash=S._crypto_shorthash;s._crypto_auth_keybytes=S._crypto_auth_keybytes;
s._crypto_pwhash_scryptsalsa208sha256_saltbytes=S._crypto_pwhash_scryptsalsa208sha256_saltbytes;s._crypto_aead_chacha20poly1305_npubbytes=S._crypto_aead_chacha20poly1305_npubbytes;s._crypto_sign_seedbytes=S._crypto_sign_seedbytes;s._crypto_box_detached_afternm=S._crypto_box_detached_afternm;s._crypto_auth=S._crypto_auth;s._randombytes_random=S._randombytes_random;s._crypto_sign_keypair=S._crypto_sign_keypair;s._crypto_shorthash_keybytes=S._crypto_shorthash_keybytes;
s._crypto_generichash_statebytes=S._crypto_generichash_statebytes;s._crypto_pwhash_scryptsalsa208sha256_str_verify=S._crypto_pwhash_scryptsalsa208sha256_str_verify;s._crypto_generichash_init=S._crypto_generichash_init;s._crypto_generichash_keybytes_max=S._crypto_generichash_keybytes_max;s._crypto_sign_ed25519_pk_to_curve25519=S._crypto_sign_ed25519_pk_to_curve25519;var gb=s._i64Add=S._i64Add;s._crypto_box_beforenmbytes=S._crypto_box_beforenmbytes;s._crypto_generichash=S._crypto_generichash;
s._sodium_library_version_major=S._sodium_library_version_major;s._randombytes_stir=S._randombytes_stir;s._randombytes_close=S._randombytes_close;s._crypto_shorthash_bytes=S._crypto_shorthash_bytes;s._crypto_box_secretkeybytes=S._crypto_box_secretkeybytes;s._crypto_aead_chacha20poly1305_encrypt=S._crypto_aead_chacha20poly1305_encrypt;s._crypto_pwhash_scryptsalsa208sha256_ll=S._crypto_pwhash_scryptsalsa208sha256_ll;s._crypto_box_detached=S._crypto_box_detached;s._randombytes_buf=S._randombytes_buf;
s._crypto_pwhash_scryptsalsa208sha256_str=S._crypto_pwhash_scryptsalsa208sha256_str;var eb=s._bitshift64Ashr=S._bitshift64Ashr;s._crypto_box_open_detached=S._crypto_box_open_detached;s._crypto_scalarmult_bytes=S._crypto_scalarmult_bytes;s._crypto_auth_verify=S._crypto_auth_verify;s._crypto_secretbox_detached=S._crypto_secretbox_detached;s._crypto_secretbox_easy=S._crypto_secretbox_easy;s._crypto_pwhash_scryptsalsa208sha256_strbytes=S._crypto_pwhash_scryptsalsa208sha256_strbytes;var hb=s._memset=S._memset;
s._crypto_box_open_detached_afternm=S._crypto_box_open_detached_afternm;s._sodium_bin2hex=S._sodium_bin2hex;var fb=s._i64Subtract=S._i64Subtract;s._crypto_pwhash_scryptsalsa208sha256_strprefix=S._crypto_pwhash_scryptsalsa208sha256_strprefix;s._crypto_box_seedbytes=S._crypto_box_seedbytes;s._crypto_hash=S._crypto_hash;s._crypto_box_easy_afternm=S._crypto_box_easy_afternm;s._crypto_box_macbytes=S._crypto_box_macbytes;s._crypto_box_publickeybytes=S._crypto_box_publickeybytes;
s._crypto_sign_secretkeybytes=S._crypto_sign_secretkeybytes;s._crypto_scalarmult_scalarbytes=S._crypto_scalarmult_scalarbytes;s._crypto_generichash_keybytes_min=S._crypto_generichash_keybytes_min;var Aa=s._malloc=S._malloc;s._crypto_aead_chacha20poly1305_decrypt=S._crypto_aead_chacha20poly1305_decrypt;var pb=s._memmove=S._memmove;s._crypto_sign=S._crypto_sign;s._crypto_secretbox_noncebytes=S._crypto_secretbox_noncebytes;s._randombytes_set_implementation=S._randombytes_set_implementation;
s._crypto_box_keypair=S._crypto_box_keypair;s._crypto_generichash_keybytes=S._crypto_generichash_keybytes;s._crypto_generichash_bytes_min=S._crypto_generichash_bytes_min;s._sodium_init=S._sodium_init;s._crypto_secretbox_macbytes=S._crypto_secretbox_macbytes;s._crypto_secretbox_keybytes=S._crypto_secretbox_keybytes;var jb=s._bitshift64Shl=S._bitshift64Shl;s._crypto_hash_bytes=S._crypto_hash_bytes;s._crypto_generichash_bytes=S._crypto_generichash_bytes;s._crypto_generichash_bytes_max=S._crypto_generichash_bytes_max;
s._crypto_secretbox_open_detached=S._crypto_secretbox_open_detached;s._sodium_memcmp=S._sodium_memcmp;s._crypto_sign_verify_detached=S._crypto_sign_verify_detached;s._crypto_box_open_easy=S._crypto_box_open_easy;s._crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive=S._crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive;s._crypto_sign_publickeybytes=S._crypto_sign_publickeybytes;s._crypto_aead_chacha20poly1305_nsecbytes=S._crypto_aead_chacha20poly1305_nsecbytes;s._crypto_sign_bytes=S._crypto_sign_bytes;
s._crypto_generichash_update=S._crypto_generichash_update;s._crypto_scalarmult=S._crypto_scalarmult;s._crypto_sign_detached=S._crypto_sign_detached;s._crypto_box_easy=S._crypto_box_easy;s._crypto_secretbox_open_easy=S._crypto_secretbox_open_easy;s._crypto_generichash_final=S._crypto_generichash_final;s._randombytes_uniform=S._randombytes_uniform;s._crypto_sign_seed_keypair=S._crypto_sign_seed_keypair;s._crypto_pwhash_scryptsalsa208sha256_opslimit_interactive=S._crypto_pwhash_scryptsalsa208sha256_opslimit_interactive;
s.runPostSets=S.runPostSets;s.dynCall_i=S.dynCall_i;s.dynCall_ii=S.dynCall_ii;A.S=S.stackAlloc;A.ha=S.stackSave;A.ga=S.stackRestore;A.Va=S.setTempRet0;A.Oa=S.getTempRet0;function T(a,b){a!=l&&("number"==typeof a?this.A(a):b==l&&"string"!=typeof a?this.q(a,256):this.q(a,b))}function U(){return new T(l)}function rb(a,b){var c=sb[a.charCodeAt(b)];return c==l?-1:c}function tb(a){var b=U();b.H(a);return b}function V(a,b){this.n=a|0;this.p=b|0}V.la={};
V.H=function(a){if(-128<=a&&128>a){var b=V.la[a];if(b)return b}b=new V(a|0,0>a?-1:0);-128<=a&&128>a&&(V.la[a]=b);return b};V.A=function(a){return isNaN(a)||!isFinite(a)?V.ZERO:a<=-V.na?V.MIN_VALUE:a+1>=V.na?V.MAX_VALUE:0>a?V.A(-a).o():new V(a%V.F|0,a/V.F|0)};V.D=function(a,b){return new V(a,b)};
V.q=function(a,b){0==a.length&&d(Error("number format error: empty string"));var c=b||10;(2>c||36<c)&&d(Error("radix out of range: "+c));if("-"==a.charAt(0))return V.q(a.substring(1),c).o();0<=a.indexOf("-")&&d(Error('number format error: interior "-" character: '+a));for(var e=V.A(Math.pow(c,8)),g=V.ZERO,f=0;f<a.length;f+=8){var i=Math.min(8,a.length-f),k=parseInt(a.substring(f,f+i),c);8>i?(i=V.A(Math.pow(c,i)),g=g.multiply(i).add(V.A(k))):(g=g.multiply(e),g=g.add(V.A(k)))}return g};V.V=65536;
V.Za=16777216;V.F=V.V*V.V;V.$a=V.F/2;V.ab=V.F*V.V;V.Da=V.F*V.F;V.na=V.Da/2;V.ZERO=V.H(0);V.ONE=V.H(1);V.ma=V.H(-1);V.MAX_VALUE=V.D(-1,2147483647);V.MIN_VALUE=V.D(0,-2147483648);V.Ca=V.H(16777216);n=V.prototype;n.T=function(){return this.p*V.F+this.Ma()};
n.toString=function(a){a=a||10;(2>a||36<a)&&d(Error("radix out of range: "+a));if(this.J())return"0";if(this.r()){if(this.u(V.MIN_VALUE)){var b=V.A(a),c=this.I(b),b=c.multiply(b).N(this);return c.toString(a)+b.n.toString(a)}return"-"+this.o().toString(a)}for(var c=V.A(Math.pow(a,6)),b=this,e="";;){var g=b.I(c),f=b.N(g.multiply(c)).n.toString(a),b=g;if(b.J())return f+e;for(;6>f.length;)f="0"+f;e=""+f+e}};n.Ma=function(){return 0<=this.n?this.n:V.F+this.n};n.J=function(){return 0==this.p&&0==this.n};
n.r=function(){return 0>this.p};n.wa=function(){return 1==(this.n&1)};n.u=function(a){return this.p==a.p&&this.n==a.n};n.ya=function(){return 0>this.aa(V.Ca)};n.Pa=function(a){return 0<this.aa(a)};n.Qa=function(a){return 0<=this.aa(a)};n.aa=function(a){if(this.u(a))return 0;var b=this.r(),c=a.r();return b&&!c?-1:!b&&c?1:this.N(a).r()?-1:1};n.o=function(){return this.u(V.MIN_VALUE)?V.MIN_VALUE:this.Sa().add(V.ONE)};
n.add=function(a){var b=this.p>>>16,c=this.p&65535,e=this.n>>>16,g=a.p>>>16,f=a.p&65535,i=a.n>>>16,k;k=0+((this.n&65535)+(a.n&65535));a=0+(k>>>16);a+=e+i;e=0+(a>>>16);e+=c+f;c=0+(e>>>16);c=c+(b+g)&65535;return V.D((a&65535)<<16|k&65535,c<<16|e&65535)};n.N=function(a){return this.add(a.o())};
n.multiply=function(a){if(this.J()||a.J())return V.ZERO;if(this.u(V.MIN_VALUE))return a.wa()?V.MIN_VALUE:V.ZERO;if(a.u(V.MIN_VALUE))return this.wa()?V.MIN_VALUE:V.ZERO;if(this.r())return a.r()?this.o().multiply(a.o()):this.o().multiply(a).o();if(a.r())return this.multiply(a.o()).o();if(this.ya()&&a.ya())return V.A(this.T()*a.T());var b=this.p>>>16,c=this.p&65535,e=this.n>>>16,g=this.n&65535,f=a.p>>>16,i=a.p&65535,k=a.n>>>16,a=a.n&65535,p,q,x,r;r=0+g*a;x=0+(r>>>16);x+=e*a;q=0+(x>>>16);x=(x&65535)+
g*k;q+=x>>>16;x&=65535;q+=c*a;p=0+(q>>>16);q=(q&65535)+e*k;p+=q>>>16;q&=65535;q+=g*i;p+=q>>>16;q&=65535;p=p+(b*a+c*k+e*i+g*f)&65535;return V.D(x<<16|r&65535,p<<16|q)};
n.I=function(a){a.J()&&d(Error("division by zero"));if(this.J())return V.ZERO;if(this.u(V.MIN_VALUE)){if(a.u(V.ONE)||a.u(V.ma))return V.MIN_VALUE;if(a.u(V.MIN_VALUE))return V.ONE;var b=this.Wa().I(a).shiftLeft(1);if(b.u(V.ZERO))return a.r()?V.ONE:V.ma;var c=this.N(a.multiply(b));return b.add(c.I(a))}if(a.u(V.MIN_VALUE))return V.ZERO;if(this.r())return a.r()?this.o().I(a.o()):this.o().I(a).o();if(a.r())return this.I(a.o()).o();for(var e=V.ZERO,c=this;c.Qa(a);){for(var b=Math.max(1,Math.floor(c.T()/
a.T())),g=Math.ceil(Math.log(b)/Math.LN2),g=48>=g?1:Math.pow(2,g-48),f=V.A(b),i=f.multiply(a);i.r()||i.Pa(c);)b-=g,f=V.A(b),i=f.multiply(a);f.J()&&(f=V.ONE);e=e.add(f);c=c.N(i)}return e};n.Sa=function(){return V.D(~this.n,~this.p)};n.shiftLeft=function(a){a&=63;if(0==a)return this;var b=this.n;return 32>a?V.D(b<<a,this.p<<a|b>>>32-a):V.D(0,b<<a-32)};n.Wa=function(){var a;a=1;if(0==a)return this;var b=this.p;return 32>a?V.D(this.n>>>a|b<<32-a,b>>a):V.D(b>>a-32,0<=b?0:-1)};n=T.prototype;
n.Y=function(a,b,c,e){for(var g=0,f=0;0<=--e;){var i=a*this[g++]+b[c]+f,f=Math.floor(i/67108864);b[c++]=i&67108863}return f};n.k=26;n.C=67108863;n.L=67108864;n.Ba=Math.pow(2,52);n.ja=26;n.ka=0;var sb=[],ub,W;ub=48;for(W=0;9>=W;++W)sb[ub++]=W;ub=97;for(W=10;36>W;++W)sb[ub++]=W;ub=65;for(W=10;36>W;++W)sb[ub++]=W;n=T.prototype;n.copyTo=function(a){for(var b=this.e-1;0<=b;--b)a[b]=this[b];a.e=this.e;a.g=this.g};n.H=function(a){this.e=1;this.g=0>a?-1:0;0<a?this[0]=a:-1>a?this[0]=a+DV:this.e=0};
n.q=function(a,b){var c;if(16==b)c=4;else if(8==b)c=3;else if(256==b)c=8;else if(2==b)c=1;else if(32==b)c=5;else if(4==b)c=2;else{this.La(a,b);return}this.g=this.e=0;for(var e=a.length,g=m,f=0;0<=--e;){var i=8==c?a[e]&255:rb(a,e);0>i?"-"==a.charAt(e)&&(g=j):(g=m,0==f?this[this.e++]=i:f+c>this.k?(this[this.e-1]|=(i&(1<<this.k-f)-1)<<f,this[this.e++]=i>>this.k-f):this[this.e-1]|=i<<f,f+=c,f>=this.k&&(f-=this.k))}8==c&&0!=(a[0]&128)&&(this.g=-1,0<f&&(this[this.e-1]|=(1<<this.k-f)-1<<f));this.G();g&&
T.ZERO.B(this,this)};n.G=function(){for(var a=this.g&this.C;0<this.e&&this[this.e-1]==a;)--this.e};n.ba=function(a,b){var c;for(c=this.e-1;0<=c;--c)b[c+a]=this[c];for(c=a-1;0<=c;--c)b[c]=0;b.e=this.e+a;b.g=this.g};n.Ja=function(a,b){for(var c=a;c<this.e;++c)b[c-a]=this[c];b.e=Math.max(this.e-a,0);b.g=this.g};
n.xa=function(a,b){var c=a%this.k,e=this.k-c,g=(1<<e)-1,f=Math.floor(a/this.k),i=this.g<<c&this.C,k;for(k=this.e-1;0<=k;--k)b[k+f+1]=this[k]>>e|i,i=(this[k]&g)<<c;for(k=f-1;0<=k;--k)b[k]=0;b[f]=i;b.e=this.e+f+1;b.g=this.g;b.G()};n.Ta=function(a,b){b.g=this.g;var c=Math.floor(a/this.k);if(c>=this.e)b.e=0;else{var e=a%this.k,g=this.k-e,f=(1<<e)-1;b[0]=this[c]>>e;for(var i=c+1;i<this.e;++i)b[i-c-1]|=(this[i]&f)<<g,b[i-c]=this[i]>>e;0<e&&(b[this.e-c-1]|=(this.g&f)<<g);b.e=this.e-c;b.G()}};
n.B=function(a,b){for(var c=0,e=0,g=Math.min(a.e,this.e);c<g;)e+=this[c]-a[c],b[c++]=e&this.C,e>>=this.k;if(a.e<this.e){for(e-=a.g;c<this.e;)e+=this[c],b[c++]=e&this.C,e>>=this.k;e+=this.g}else{for(e+=this.g;c<a.e;)e-=a[c],b[c++]=e&this.C,e>>=this.k;e-=a.g}b.g=0>e?-1:0;-1>e?b[c++]=this.L+e:0<e&&(b[c++]=e);b.e=c;b.G()};n.Ra=function(a){var b=X.Aa,c=this.abs(),e=b.abs(),g=c.e;for(a.e=g+e.e;0<=--g;)a[g]=0;for(g=0;g<e.e;++g)a[g+c.e]=c.Y(e[g],a,g,c.e);a.g=0;a.G();this.g!=b.g&&T.ZERO.B(a,a)};
n.ra=function(a,b,c){var e=a.abs();if(!(0>=e.e)){var g=this.abs();if(g.e<e.e)b!=l&&b.H(0),c!=l&&this.copyTo(c);else{c==l&&(c=U());var f=U(),i=this.g,a=a.g,k=e[e.e-1],p=1,q;if(0!=(q=k>>>16))k=q,p+=16;if(0!=(q=k>>8))k=q,p+=8;if(0!=(q=k>>4))k=q,p+=4;if(0!=(q=k>>2))k=q,p+=2;0!=k>>1&&(p+=1);k=this.k-p;0<k?(e.xa(k,f),g.xa(k,c)):(e.copyTo(f),g.copyTo(c));e=f.e;g=f[e-1];if(0!=g){q=g*(1<<this.ja)+(1<e?f[e-2]>>this.ka:0);p=this.Ba/q;q=(1<<this.ja)/q;var x=1<<this.ka,r=c.e,z=r-e,y=b==l?U():b;f.ba(z,y);0<=c.Q(y)&&
(c[c.e++]=1,c.B(y,c));T.ONE.ba(e,y);for(y.B(f,f);f.e<e;)f[f.e++]=0;for(;0<=--z;){var Y=c[--r]==g?this.C:Math.floor(c[r]*p+(c[r-1]+x)*q);if((c[r]+=f.Y(Y,c,z,e))<Y){f.ba(z,y);for(c.B(y,c);c[r]<--Y;)c.B(y,c)}}b!=l&&(c.Ja(e,b),i!=a&&T.ZERO.B(b,b));c.e=e;c.G();0<k&&c.Ta(k,c);0>i&&T.ZERO.B(c,c)}}}};
n.toString=function(a){if(0>this.g)return"-"+this.o().toString(a);if(16==a)a=4;else if(8==a)a=3;else if(2==a)a=1;else if(32==a)a=5;else if(4==a)a=2;else return this.Xa(a);var b=(1<<a)-1,c,e=m,g="",f=this.e,i=this.k-f*this.k%a;if(0<f--){if(i<this.k&&0<(c=this[f]>>i))e=j,g="0123456789abcdefghijklmnopqrstuvwxyz".charAt(c);for(;0<=f;)i<a?(c=(this[f]&(1<<i)-1)<<a-i,c|=this[--f]>>(i+=this.k-a)):(c=this[f]>>(i-=a)&b,0>=i&&(i+=this.k,--f)),0<c&&(e=j),e&&(g+="0123456789abcdefghijklmnopqrstuvwxyz".charAt(c))}return e?
g:"0"};n.o=function(){var a=U();T.ZERO.B(this,a);return a};n.abs=function(){return 0>this.g?this.o():this};n.Q=function(a){var b=this.g-a.g;if(0!=b)return b;var c=this.e,b=c-a.e;if(0!=b)return 0>this.g?-b:b;for(;0<=--c;)if(0!=(b=this[c]-a[c]))return b;return 0};T.ZERO=tb(0);T.ONE=tb(1);n=T.prototype;
n.La=function(a,b){this.H(0);b==l&&(b=10);for(var c=this.oa(b),e=Math.pow(b,c),g=m,f=0,i=0,k=0;k<a.length;++k){var p=rb(a,k);0>p?"-"==a.charAt(k)&&0==this.fa()&&(g=j):(i=b*i+p,++f>=c&&(this.qa(e),this.pa(i),i=f=0))}0<f&&(this.qa(Math.pow(b,f)),this.pa(i));g&&T.ZERO.B(this,this)};n.oa=function(a){return Math.floor(Math.LN2*this.k/Math.log(a))};n.fa=function(){return 0>this.g?-1:0>=this.e||1==this.e&&0>=this[0]?0:1};n.qa=function(a){this[this.e]=this.Y(a-1,this,0,this.e);++this.e;this.G()};
n.pa=function(a){var b=0;if(0!=a){for(;this.e<=b;)this[this.e++]=0;for(this[b]+=a;this[b]>=this.L;)this[b]-=this.L,++b>=this.e&&(this[this.e++]=0),++this[b]}};n.Xa=function(a){a==l&&(a=10);if(0==this.fa()||2>a||36<a)return"0";var b=this.oa(a),b=Math.pow(a,b),c=tb(b),e=U(),g=U(),f="";for(this.ra(c,e,g);0<e.fa();)f=(b+g.va()).toString(a).substr(1)+f,e.ra(c,e,g);return g.va().toString(a)+f};
n.va=function(){if(0>this.g){if(1==this.e)return this[0]-this.L;if(0==this.e)return-1}else{if(1==this.e)return this[0];if(0==this.e)return 0}return(this[1]&(1<<32-this.k)-1)<<this.k|this[0]};
n.W=function(a,b){for(var c=0,e=0,g=Math.min(a.e,this.e);c<g;)e+=this[c]+a[c],b[c++]=e&this.C,e>>=this.k;if(a.e<this.e){for(e+=a.g;c<this.e;)e+=this[c],b[c++]=e&this.C,e>>=this.k;e+=this.g}else{for(e+=this.g;c<a.e;)e+=a[c],b[c++]=e&this.C,e>>=this.k;e+=a.g}b.g=0>e?-1:0;0<e?b[c++]=e:-1>e&&(b[c++]=this.L+e);b.e=c;b.G()};
var X={abs:function(a,b){var c=new V(a,b),c=c.r()?c.o():c;J[db>>2]=c.n;J[db+4>>2]=c.p},sa:function(){X.Ka||(X.Ka=j,X.Aa=new T,X.Aa.q("4294967296",10),X.ia=new T,X.ia.q("18446744073709551616",10),X.vb=new T,X.wb=new T)},sb:function(a,b){var c=new T;c.q(b.toString(),10);var e=new T;c.Ra(e);c=new T;c.q(a.toString(),10);var g=new T;c.W(e,g);return g},stringify:function(a,b,c){a=(new V(a,b)).toString();c&&"-"==a[0]&&(X.sa(),c=new T,c.q(a,10),a=new T,X.ia.W(c,a),a=a.toString(10));return a},q:function(a,
b,c,e,g){X.sa();var f=new T;f.q(a,b);a=new T;a.q(c,10);c=new T;c.q(e,10);g&&0>f.Q(T.ZERO)&&(e=new T,f.W(X.ia,e),f=e);e=m;0>f.Q(a)?(f=a,e=j):0<f.Q(c)&&(f=c,e=j);f=V.q(f.toString());J[db>>2]=f.n;J[db+4>>2]=f.p;e&&d("range error")}};
if(R)if("function"===typeof s.locateFile?R=s.locateFile(R):s.memoryInitializerPrefixURL&&(R=s.memoryInitializerPrefixURL+R),ba||ea){var vb=s.readBinary(R);M.set(vb,Ka)}else{bb();var wb=function(a){a.byteLength&&(a=new Uint8Array(a));M.set(a,Ka);cb()},$=s.memoryInitializerRequest;$?$.response?setTimeout(function(){wb($.response)},0):$.addEventListener("load",function(){200!==$.status&&0!==$.status&&console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: "+$.status);
(!$.response||"object"!==typeof $.response||!$.response.byteLength)&&console.warn("a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): "+$.response);wb($.response)}):Browser.ib(R,wb,function(){d("could not load memory initializer "+R)})}function ia(a){this.name="ExitStatus";this.message="Program terminated with exit("+a+")";this.status=a}ia.prototype=Error();var xb,yb=l,ab=function zb(){s.calledRun||Ab();s.calledRun||(ab=zb)};
s.callMain=s.jb=function(a){function b(){for(var a=0;3>a;a++)e.push(0)}u(0==P,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");u(0==Qa.length,"cannot call main when preRun functions remain to be called");a=a||[];Va||(Va=j,Pa(Ra));var c=a.length+1,e=[L(Za(s.thisProgram),"i8",0)];b();for(var g=0;g<c-1;g+=1)e.push(L(Za(a[g]),"i8",0)),b();e.push(0);e=L(e,"i32",0);xb=v;try{var f=s._main(c,e,0);Bb(f)}catch(i){i instanceof ia||("SimulateInfiniteLoop"==i?s.noExitRuntime=j:(i&&("object"===
typeof i&&i.stack)&&s.K("exception thrown: "+[i,i.stack]),d(i)))}finally{}};
function Ab(a){function b(){if(!s.calledRun&&(s.calledRun=j,!ka)){Va||(Va=j,Pa(Ra));Pa(Sa);ca&&yb!==l&&s.K("pre-main prep time: "+(Date.now()-yb)+" ms");if(s.onRuntimeInitialized)s.onRuntimeInitialized();s._main&&Cb&&s.callMain(a);if(s.postRun)for("function"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;)Ya(s.postRun.shift());Pa(Ua)}}a=a||s.arguments;yb===l&&(yb=Date.now());if(!(0<P)){if(s.preRun)for("function"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)Xa(s.preRun.shift());
Pa(Qa);!(0<P)&&!s.calledRun&&(s.setStatus?(s.setStatus("Running..."),setTimeout(function(){setTimeout(function(){s.setStatus("")},1);b()},1)):b())}}s.run=s.ub=Ab;function Bb(a){if(!s.noExitRuntime){ka=j;v=xb;Pa(Ta);if(s.onExit)s.onExit(a);ba?(process.stdout.once("drain",function(){process.exit(a)}),console.log(" "),setTimeout(function(){process.exit(a)},500)):ea&&"function"===typeof quit&&quit(a);d(new ia(a))}}s.exit=s.lb=Bb;var Db=[];
function C(a){a!==h?(s.print(a),s.K(a),a=JSON.stringify(a)):a="";ka=j;var b="abort("+a+") at "+Ha()+"\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";Db.forEach(function(c){b=c(b,a)});d(b)}s.abort=s.abort=C;if(s.preInit)for("function"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();var Cb=j;s.noInitialRun&&(Cb=m);Ab();


}).call(this,require('_process'),"/node_modules/libsodium-wrappers/node_modules/libsodium/dist/modules")
},{"_process":318,"fs":173,"path":317}],371:[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var crypto = global.crypto || global.msCrypto
if(crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}
function randomBytes(size, cb) {
  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
    /* This will not work in older browsers.
     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
     */

  crypto.getRandomValues(bytes);
  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }
  return bytes;
}
function oldBrowser() {
  throw new Error(
      'secure random number generation not supported by this browser\n'+
      'use chrome, FireFox or Internet Explorer 11'
    )
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":318,"buffer":176}],372:[function(require,module,exports){
var ECKey, HDNode, MultiWallet, bitcoin, bs58, randomBytes, txUtils;

bitcoin = require("bitcoinjs-lib");

HDNode = bitcoin.HDNode, ECKey = bitcoin.ECKey;

randomBytes = require('randombytes');

bs58 = require('bs58');

txUtils = require('./transaction_utils');

module.exports = MultiWallet = (function() {
  var NETWORKMAP, getNode;

  NETWORKMAP = {
    testnet3: 'testnet',
    testnet: 'testnet',
    bitcoin_testnet: 'testnet',
    bitcoin: 'bitcoin',
    mainnet: 'bitcoin'
  };

  getNode = function(arg, network) {
    if (arg instanceof HDNode) {
      return arg;
    } else if (typeof arg === 'string') {
      return HDNode.fromSeedHex(arg, bitcoin.networks[network]);
    } else {
      throw Error("Unusable type " + (typeof arg));
    }
  };

  MultiWallet.generate = function(names, networkName) {
    var i, len, masters, name, network, networkDetails, node, seed;
    if (networkName == null) {
      networkName = 'testnet';
    }
    if (!(networkName in NETWORKMAP)) {
      throw Error("Unknown network " + networkName);
    }
    network = NETWORKMAP[networkName];
    networkDetails = bitcoin.networks[network];
    masters = {};
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      seed = randomBytes(32);
      node = HDNode.fromSeedBuffer(seed, networkDetails);
      node.seed = seed;
      masters[name] = node;
    }
    return new this({
      "private": masters,
      network: network
    });
  };

  function MultiWallet(options) {
    var arg, name, privateTrees, ref;
    this.privateTrees = {};
    this.publicTrees = {};
    this.trees = {};
    if ('network' in options && options.network in NETWORKMAP) {
      this.network = NETWORKMAP[options.network];
    } else {
      this.network = NETWORKMAP['testnet'];
    }
    privateTrees = options["private"];
    if (privateTrees == null) {
      throw Error("Must supply private");
    }
    for (name in privateTrees) {
      arg = privateTrees[name];
      this.privateTrees[name] = this.trees[name] = getNode(arg, this.network);
    }
    if ('public' in options) {
      ref = options["public"];
      for (name in ref) {
        arg = ref[name];
        this.publicTrees[name] = this.trees[name] = getNode(arg, this.network);
      }
    }
  }

  MultiWallet.prototype.prepareTransaction = function(transactionContent, txb) {
    var encodedSignatures, inputs, outputs, paths, signatures;
    txb = txb || new bitcoin.TransactionBuilder();
    inputs = transactionContent.inputs, outputs = transactionContent.outputs;
    this.addInputs(inputs, txb);
    this.addOutputs(outputs, txb);
    paths = txUtils.getPathsForInputs(inputs);
    signatures = this.signAllInputs(paths, txb);
    encodedSignatures = this.encodeSignatures(signatures);
    return {
      signatures: encodedSignatures,
      txHash: txb.tx.getHash().toString('hex')
    };
  };

  MultiWallet.prototype.addInputs = function(inputs, transactionBuilder) {
    return inputs.forEach(function(input) {
      var ASM, index, prevOutScript, prevTx;
      prevTx = input.output.transaction_hash;
      index = input.output.index;
      ASM = input.output.script.string;
      prevOutScript = bitcoin.Script.fromASM(ASM);
      return transactionBuilder.addInput(prevTx, index, void 0, prevOutScript);
    });
  };

  MultiWallet.prototype.addOutputs = function(outputs, transactionBuilder) {
    return outputs.forEach(function(output) {
      var ASM, scriptPubKey, value;
      ASM = output.script.string;
      scriptPubKey = bitcoin.Script.fromASM(ASM);
      value = output.value;
      return transactionBuilder.addOutput(scriptPubKey, value);
    });
  };

  MultiWallet.prototype.getPubKeysForPath = function(path) {
    var masterNodes, pubKeys, trees;
    trees = trees;
    masterNodes = ['backup', 'cosigner', 'primary'].map((function(_this) {
      return function(nodeName) {
        var masterNode;
        masterNode = _this.trees[nodeName];
        return _this.deriveNodeForPath(masterNode, path);
      };
    })(this));
    return pubKeys = masterNodes.map(function(node) {
      return node.pubKey;
    });
  };

  MultiWallet.prototype.getPrivKeyForPath = function(path) {
    var primaryChildNode, primaryMasterNode, privKey;
    primaryMasterNode = this.privateTrees.primary;
    primaryChildNode = this.deriveNodeForPath(primaryMasterNode, path);
    return privKey = primaryChildNode.privKey;
  };

  MultiWallet.prototype.createRedeemScript = function(pubKeys, numberOfSigs) {
    if (numberOfSigs == null) {
      numberOfSigs = 2;
    }
    return bitcoin.scripts.multisigOutput(numberOfSigs, pubKeys);
  };

  MultiWallet.prototype.deriveNodeForPath = function(parent, path) {
    var node;
    node = parent;
    path.forEach(function(index) {
      return node = node.derive(index);
    });
    return node;
  };

  MultiWallet.prototype.signAllInputs = function(paths, txb) {
    var inputs, signatures;
    signatures = [];
    inputs = txb.tx.ins;
    inputs.forEach((function(_this) {
      return function(input, index) {
        var path, privKey, pubKeys, redeemScript, signature;
        path = paths[index];
        pubKeys = _this.getPubKeysForPath(path);
        privKey = _this.getPrivKeyForPath(path);
        redeemScript = _this.createRedeemScript(pubKeys);
        txb.sign(index, privKey, redeemScript);
        signature = txb.signatures[index].signatures[0];
        return signatures.push(signature);
      };
    })(this));
    return signatures;
  };

  MultiWallet.prototype.encodeSignature = function(signature, hashType) {
    if (hashType == null) {
      hashType = 1;
    }
    return bs58.encode(signature.toScriptSignature(hashType));
  };

  MultiWallet.prototype.encodeSignatures = function(signatures) {
    var encodedSignatures;
    return encodedSignatures = signatures.map((function(_this) {
      return function(signature) {
        return _this.encodeSignature(signature);
      };
    })(this));
  };

  return MultiWallet;

})();



},{"./transaction_utils":373,"bitcoinjs-lib":163,"bs58":336,"randombytes":371}],373:[function(require,module,exports){
var getPathForInput, getPathsForInputs, parsePath;

getPathsForInputs = function(inputs) {
  var paths;
  return paths = inputs.map(function(input) {
    var parsedPath, path;
    path = input.output.metadata.wallet_path;
    return parsedPath = parsePath(path);
  });
};

parsePath = function(path) {
  var indices, parts;
  parts = path.split('/');
  return indices = parts.slice(1).map(function(index) {
    return +index;
  });
};

getPathForInput = function(paymentResource, index) {
  var path;
  path = paymentResource.inputs[index].output.metadata.wallet_path;
  return parsePath(path);
};

module.exports = {
  getPathsForInputs: getPathsForInputs,
  parsePath: parsePath,
  getPathForInput: getPathForInput
};



},{}],374:[function(require,module,exports){
var crypto;

crypto = require('crypto');

module.exports = {
  pbkdf2: crypto.pbkdf2
};



},{"crypto":180}],375:[function(require,module,exports){
var DIGEST, ITERATIONS, crypto, decrypt, encrypt, sodium;

crypto = require("./crypto");

sodium = require("libsodium-wrappers");

DIGEST = 'sha1';

ITERATIONS = 10000;

encrypt = function(passphrase, plaintext, callback) {
  var salt;
  salt = sodium.randombytes_buf(sodium.crypto_shorthash_KEYBYTES);
  return crypto.pbkdf2(passphrase, salt, ITERATIONS, sodium.crypto_secretbox_KEYBYTES, DIGEST, function(error, key) {
    var ciphertext, nonce;
    if (error) {
      return callback(error);
    }
    nonce = sodium.randombytes_buf(sodium.crypto_secretbox_NONCEBYTES);
    ciphertext = sodium.crypto_secretbox_easy(plaintext, nonce, key, 'hex');
    return callback(null, {
      iterations: ITERATIONS,
      salt: sodium.to_hex(salt),
      nonce: sodium.to_hex(nonce),
      ciphertext: ciphertext
    });
  });
};

decrypt = function(passphrase, encryptionData, callback) {
  var ciphertext, iterations, nonce, salt;
  salt = encryptionData.salt, iterations = encryptionData.iterations, nonce = encryptionData.nonce, ciphertext = encryptionData.ciphertext;
  salt = sodium.from_hex(salt);
  nonce = sodium.from_hex(nonce);
  ciphertext = sodium.from_hex(ciphertext);
  return crypto.pbkdf2(passphrase, salt, iterations, sodium.crypto_secretbox_KEYBYTES, DIGEST, function(error, key) {
    var plaintext;
    if (error) {
      return callback(error);
    }
    plaintext = sodium.crypto_secretbox_open_easy(ciphertext, nonce, key, 'text');
    return callback(null, plaintext);
  });
};

module.exports = {
  encrypt: encrypt,
  decrypt: decrypt
};



},{"./crypto":374,"libsodium-wrappers":369}],376:[function(require,module,exports){
module.exports={
  "encryptionData": [
    {
      "salt": "d2bb97377f342aea5d4acb93ad83c6f2",
      "iterations": 100000,
      "nonce": "ebdd0583b48a0c3258e034aa8b17b46999f5a354c04e6838",
      "ciphertext": "96ef27fd163c80e924621c586dc67210ac43759eaea37d05775f8d",
      "passphrase": "passphrase 1",
      "plaintext": "plaintext 1"
    },
    {
      "salt": "4cb84d5c2081de55e28956606a730a27",
      "iterations": 100000,
      "nonce": "b73aa51f451adbd63a5d8652c150d55cc8fd12629213e65a",
      "ciphertext": "91f3d7f8e56a3f5244ed502c859524b40b4ea97664f69509495ba2",
      "passphrase": "passphrase 2",
      "plaintext": "plaintext 2"
    },
    {
      "salt": "3bbe96d6c5597b32756fc0f39ee6f486",
      "iterations": 100000,
      "nonce": "397b64e7e268e1c41bb8a0e1e35f527abee8beef2c5ec348",
      "ciphertext": "94db606be4cbd1e3386361158e5fc8b2c403a9becf2193fd545532",
      "passphrase": "passphrase 3",
      "plaintext": "plaintext 3"
    },
    {
      "salt": "6ccaea070cba768179c2254dcefacdd0",
      "iterations": 100000,
      "nonce": "09d28dfc37d6391644fb5e9dde6ca70ad53a91f3d6014eca",
      "ciphertext": "d2150e910171e02fc518f50966cb66b15a913174ff1975dab43352",
      "passphrase": "passphrase 4",
      "plaintext": "plaintext 4"
    }
  ]
}
},{}],377:[function(require,module,exports){
module.exports=
{
  "base58_seeds": {
    "backup": "tpubD6NzVbkrYhZ4WMWvaEt65AYVU8j4A3XBT3vNYE7qAJA9jPr3foQ1eMhmATpwaCP3Ct7RrKSxttFBTTBiEx55zbQKLuaCmiNNdBRY3byAuhY",
    "cosigner": "tpubD6NzVbkrYhZ4YFcw3cmsKtpicuTZ5NtL7fGJE4pJRx8M8ENnbpu3jAp6FE7VDpEArMMd19BQCUm2sKbb4VevxYJrqTSCGsNebySnmbStBxF",
    "primary": "tprv8ZgxMBicQKsPejnGnyVTjmwWEwEjBjUdmrfZ5esxW4JhJ99mesRgYpgs7BSvQ6R1DKRpbXurkEfMtL2TYcXAgUiotbRpXK7Q71QFgpyvS8W"
  },
  "base58_derived_seeds": {
    "backup": "tpubDGtJ1WC5Apc2962KKfhdAYLtiEfPhnH7eFh3VvUYyjdYsXxH67jxk491pD2pQzKhX1kN1yZhNJhvTttxKmpxbrZk7kHRZXiFkdykD7Y4Hd1",
    "cosigner": "tpubDFqXHqWQbFR3SSEtvFrsJiXf8qHeHHqTPaoS4Rd7yYv8brsWfZB5pmJWANvMpAGjCST17xFDmkunUo6cdEGqNkKZSMoZrhpzhdLaDeeQyJK",
    "primary": "tprv8kPvHNdGMvELSAjFASJFNwV2KkH1HeKzTL7PHvTWo51JtapNsNk2sB8sruE1FDFCHV7PxjqAxGQ1WgiojM8nDEJF6mx9uEnzi6tut3g9jgf"
  },
  "derived_pubkeys_hex": {
    "backup": "02713f2b21e9026c303edc7a6a421a497d7a3ac76b1c06a0af244b332ca908af2f",
    "cosigner": "029b71b219b2e3267ade5a6bed1b07e1646fc9bcd1abace41f718851bc8c4a60dd",
    "primary": "02da1ca905615ede7b997ce05bc162a39f16302132963add975f685e3759710f9e"
  },
  "primary_WIF": "L4BtgNWtKHHsSkG7CeNkLzxmQAbD9UcwSz6ux23RRK3ji9jSF4p4",
  "payment_resource": {
    "key":"bwgC2K7aLKoVeXaaDNHOXQ",
    "type":"outgoing",
    "status":"unsigned",
    "value":-10100,
    "fee":10000,
    "created_at":"2014-12-18 01:50:21 +0000",
    "version":1,
    "lock_time":0,
    "hash":"6b1ffcc10501d7f871e24f4f7c266ca6d4b3db2048a750d4b67318c5cdde0af9",
    "inputs":[
      {
        "output":{
          "transaction_hash":"e422acbc206d8da6ee3c5acfd33d4f258100ab677f80dab8a469678c92bad959",
          "index":0,
          "value":5900000,
          "script":{
            "type":"script_hash",
            "string":"OP_HASH160 5b100319fc97514cd8cf1d5f546186e161572ceb OP_EQUAL"
          },
          "address":"2N1YifHJD3gqh6crUBv9qeiCqUKPeFNoZ6j",
          "metadata":{
            "confirmations":1171,
            "wallet_path":"m/44/1/0/0/0"
          }
        },
        "signatures":[

        ],
        "sig_hash":"6aaea963b47f57d24c82f643eb4b7a24bdf6801990ff491b03160916fab9e0e5",
        "script_sig":""
      }
    ],
    "outputs":[
      {
        "transaction_hash":"6b1ffcc10501d7f871e24f4f7c266ca6d4b3db2048a750d4b67318c5cdde0af9",
        "index":0,
        "value":100,
        "script":{
          "type":"pubkey_hash",
          "string":"OP_DUP OP_HASH160 7c9744f7752e644f9e222ea60b8f5d53b2f733a3 OP_EQUALVERIFY OP_CHECKSIG"
        },
        "address":"2N4bzzTEgM37sA8fzsm31qFJ4h4JRyCAUGt",
        "metadata":{
          "confirmations":null
        }
      },
      {
        "transaction_hash":"6b1ffcc10501d7f871e24f4f7c266ca6d4b3db2048a750d4b67318c5cdde0af9",
        "index":1,
        "value":5889900,
        "script":{
          "type":"script_hash",
          "string":"OP_HASH160 c56b09b16a53b4683413c212b5dd3f16f04c53ff OP_EQUAL"
        },
        "address":"2NBF5LCJWCuKTL7Ssqn2riQvxdc6PjvVQKp",
        "metadata":{
          "memo":"change",
          "wallet_path":"m/44/1/0/1/290",
          "confirmations":null
        }
      }
    ],
    "url":"http://localhost:8999/transactions/bwgC2K7aLKoVeXaaDNHOXQ"
  }
}
},{}],378:[function(require,module,exports){
var ECKey, ECSignature, HDNode, MultiWallet, base58_seeds, bitcoin, bs58, expect, payment_resource, transaction_data, txUtils,
  hasProp = {}.hasOwnProperty;

bitcoin = require('bitcoinjs-lib');

HDNode = bitcoin.HDNode, ECKey = bitcoin.ECKey, ECSignature = bitcoin.ECSignature;

bs58 = require('bs58');

MultiWallet = require('../../src/bit/multiwallet');

txUtils = require('../../src/bit/transaction_utils');

transaction_data = require('../data/transaction.json');

base58_seeds = transaction_data.base58_seeds;

payment_resource = transaction_data.payment_resource;

expect = require('chai').expect;

describe('MultiWallet', function() {
  describe("MultiWallet.generate", function() {
    var multiwallet;
    multiwallet = MultiWallet.generate(['primary', 'backup'], 'testnet');
    it("should generate return a MultiWallet", function() {
      return expect(multiwallet).to.be.an["instanceof"](MultiWallet);
    });
    it("should have a property @network", function() {
      return expect(multiwallet.network).to.equal('testnet');
    });
    it("@privateTrees @trees should have properties 'primary' and 'backup'", function() {
      expect(multiwallet.privateTrees).to.have.a.property('primary');
      expect(multiwallet.privateTrees).to.have.a.property('backup');
      expect(multiwallet.trees).to.have.a.property('primary');
      return expect(multiwallet.trees).to.have.a.property('backup');
    });
    return it('@privateTrees.primary and @privateTrees.backup should be HDNodes', function() {
      var backup, primary;
      primary = multiwallet.privateTrees.primary;
      backup = multiwallet.privateTrees.backup;
      expect(primary).to.be.an["instanceof"](HDNode);
      return expect(backup).to.be.an["instanceof"](HDNode);
    });
  });
  describe("Constructor", function() {
    var multiwallet;
    multiwallet = null;
    before(function() {
      return multiwallet = new MultiWallet({
        "private": {
          primary: base58_seeds.primary
        },
        "public": {
          backup: base58_seeds.backup,
          cosigner: base58_seeds.cosigner
        }
      });
    });
    it('should have prublicTrees, privateTrees, and trees properties', function() {
      expect(multiwallet).to.have.a.property('publicTrees');
      expect(multiwallet).to.have.a.property('privateTrees');
      return expect(multiwallet).to.have.a.property('trees');
    });
    it('should create HDNodes for all seeds', function() {
      var backupNode, cosignerNode, primaryNode;
      primaryNode = multiwallet.privateTrees.primary;
      backupNode = multiwallet.publicTrees.backup;
      cosignerNode = multiwallet.publicTrees.cosigner;
      expect(primaryNode).to.be.an["instanceof"](HDNode);
      expect(backupNode).to.be.an["instanceof"](HDNode);
      return expect(cosignerNode).to.be.an["instanceof"](HDNode);
    });
    it('should throw an error when no private seed is provided', function() {
      var createMultiWallet;
      createMultiWallet = function() {
        return new MultiWallet({});
      };
      return expect(createMultiWallet).to["throw"](Error);
    });
    return it('should not throw an error if no public seeds are provided', function() {
      var createMultiWallet;
      createMultiWallet = function() {
        return new MultiWallet({
          "private": {
            primary: base58_seeds.primary
          }
        });
      };
      return expect(createMultiWallet).to.not["throw"](Error);
    });
  });
  return describe('transaction Preperation', function() {
    var multiwallet;
    multiwallet = null;
    beforeEach(function() {
      return multiwallet = new MultiWallet({
        "private": {
          primary: base58_seeds.primary
        },
        "public": {
          backup: base58_seeds.backup,
          cosigner: base58_seeds.cosigner
        }
      });
    });
    describe('addInputs', function() {
      it('should add every input to the provided transaction object', function() {
        var inputs, txb;
        txb = new bitcoin.TransactionBuilder();
        inputs = payment_resource.inputs;
        multiwallet.addInputs(inputs, txb);
        return expect(txb.tx.ins).to.have.length(inputs.length);
      });
      it('should add the right index for each input', function() {
        var inputs, txb;
        txb = new bitcoin.TransactionBuilder();
        inputs = payment_resource.inputs;
        multiwallet.addInputs(inputs, txb);
        return inputs.forEach(function(input, i) {
          var indexFromResource, indexFromTx;
          indexFromResource = input.output.index;
          indexFromTx = txb.tx.ins[i].index;
          return expect(indexFromResource).to.equal(indexFromTx);
        });
      });
      return it('should add the right prevOutScript for each input', function() {
        var inputs, txb;
        txb = new bitcoin.TransactionBuilder();
        inputs = payment_resource.inputs;
        multiwallet.addInputs(inputs, txb);
        return inputs.forEach(function(input, i) {
          var scriptFromResource, scriptFromTX;
          scriptFromResource = input.output.script.string;
          scriptFromTX = txb.prevOutScripts[i.toString()];
          return expect(scriptFromResource).to.equal(scriptFromTX.toASM());
        });
      });
    });
    describe("addOutputs", function() {
      it("should add every output to the provided transaction object", function() {
        var outputs, txb;
        txb = new bitcoin.TransactionBuilder();
        outputs = payment_resource.outputs;
        multiwallet.addOutputs(outputs, txb);
        return expect(txb.tx.outs).to.have.length(outputs.length);
      });
      it("should add the right value for each output", function() {
        var outputs, txb;
        txb = new bitcoin.TransactionBuilder();
        outputs = payment_resource.outputs;
        multiwallet.addOutputs(outputs, txb);
        return outputs.forEach(function(output, i) {
          var valueFromResource, valueFromTx;
          valueFromResource = output.value;
          valueFromTx = txb.tx.outs[i].value;
          return expect(valueFromResource).to.equal(valueFromTx);
        });
      });
      return it("should add the right script for each output", function() {
        var outputs, txb;
        txb = new bitcoin.TransactionBuilder();
        outputs = payment_resource.outputs;
        multiwallet.addOutputs(outputs, txb);
        return outputs.forEach(function(output, i) {
          var scriptFromResource, scriptFromTx;
          scriptFromResource = output.script.string;
          scriptFromTx = txb.tx.outs[i].script.toASM();
          return expect(scriptFromResource).to.have.a.equal(scriptFromTx);
        });
      });
    });
    describe("deriveNodeForPath", function() {
      return it('should derive the correct child node', function() {
        var derivedPrimaryNode, derivedPrimarySeed, derived_primary_seed, path, primaryMasterNode;
        path = [44, 1, 0, 0, 0];
        derived_primary_seed = transaction_data.base58_derived_seeds.primary;
        primaryMasterNode = multiwallet.trees.primary;
        derivedPrimaryNode = multiwallet.deriveNodeForPath(primaryMasterNode, path);
        derivedPrimarySeed = derivedPrimaryNode.toBase58();
        return expect(derived_primary_seed).to.equal(derivedPrimarySeed);
      });
    });
    describe("getPubKeysForPath", function() {
      return it("should derive the correct pubKeys for a given path", function() {
        var backup, cosigner, derived_pubkeys_hex, derivedpubKeys, derivedpubKeysHex, primary;
        derived_pubkeys_hex = transaction_data.derived_pubkeys_hex;
        backup = derived_pubkeys_hex.backup, cosigner = derived_pubkeys_hex.cosigner, primary = derived_pubkeys_hex.primary;
        derivedpubKeys = multiwallet.getPubKeysForPath([44, 1, 0, 0, 0]);
        derivedpubKeysHex = derivedpubKeys.map(function(node) {
          return node.toHex();
        });
        return expect([backup, cosigner, primary]).to.deep.equal(derivedpubKeysHex);
      });
    });
    describe("getPrivKeyForPath", function() {
      return it("should derive the correct privkey for a given path", function() {
        var WIF, primary_WIF, privKey;
        privKey = multiwallet.getPrivKeyForPath([44, 1, 0, 0, 0]);
        WIF = privKey.toWIF();
        primary_WIF = transaction_data.primary_WIF;
        return expect(WIF).to.equal(primary_WIF);
      });
    });
    describe("createRedeemScript", function() {
      it("should contain hex of all provided pubkeys", function() {
        var derived_pubkeys_hex, name, pubKey, pubKeys, redeemScript, results;
        derived_pubkeys_hex = transaction_data.derived_pubkeys_hex;
        pubKeys = multiwallet.getPubKeysForPath([44, 1, 0, 0, 0]);
        redeemScript = multiwallet.createRedeemScript(pubKeys).toASM();
        results = [];
        for (name in derived_pubkeys_hex) {
          if (!hasProp.call(derived_pubkeys_hex, name)) continue;
          pubKey = derived_pubkeys_hex[name];
          results.push(expect(redeemScript).to.contain(pubKey));
        }
        return results;
      });
      return it("should contain OP_CHECKMULTISIG", function() {
        var pubKeys, redeemScript;
        pubKeys = multiwallet.getPubKeysForPath([44, 1, 0, 0, 0]);
        redeemScript = multiwallet.createRedeemScript(pubKeys).toASM();
        return expect(redeemScript).to.contain("OP_CHECKMULTISIG");
      });
    });
    describe("payment.sign", function() {
      return it("should generate the same hash for the same tx", function() {
        var encodedSig, encodedSignature, inputs, outputs, path, privKey, pubKeys, redeemScript, signature, txb;
        inputs = payment_resource.inputs, outputs = payment_resource.outputs;
        txb = new bitcoin.TransactionBuilder();
        multiwallet.addInputs(inputs, txb);
        multiwallet.addOutputs(outputs, txb);
        path = txUtils.getPathForInput(payment_resource, 0);
        pubKeys = multiwallet.getPubKeysForPath(path);
        privKey = multiwallet.getPrivKeyForPath(path);
        redeemScript = multiwallet.createRedeemScript(pubKeys);
        txb.sign(0, privKey, redeemScript);
        signature = txb.signatures[0].signatures[0];
        encodedSignature = bs58.encode(signature.toScriptSignature(1));
        encodedSig = "iKkkiYrAqRKBWUpyCH2qWrnZ8VvJ2eQodjWhnvq1ScdxyAMLE5j9tVcw7BQg1Qr2M2BiLtqegtdxd9YP3tVaC4WzWNnzpPP4ak";
        return expect(encodedSignature).to.equal(encodedSig);
      });
    });
    describe("signAllInputs", function() {
      var signatures, txb;
      signatures = null;
      txb = null;
      beforeEach(function() {
        var inputs, outputs, paths;
        txb = new bitcoin.TransactionBuilder();
        inputs = payment_resource.inputs, outputs = payment_resource.outputs;
        multiwallet.addInputs(inputs, txb);
        multiwallet.addOutputs(outputs, txb);
        paths = txUtils.getPathsForInputs(inputs);
        return signatures = multiwallet.signAllInputs(paths, txb);
      });
      it("should return an array of bitcoin.ECSignature objects", function() {
        return signatures.forEach(function(signature) {
          return expect(signature).to.be.an["instanceof"](ECSignature);
        });
      });
      return it("should return as many signatures as there are inputs", function() {
        return expect(signatures).to.have.length(txb.tx.ins.length);
      });
    });
    describe("encodeSignature", function() {
      var signatures, txb;
      signatures = null;
      txb = null;
      beforeEach(function() {
        var inputs, outputs, paths;
        txb = new bitcoin.TransactionBuilder();
        inputs = payment_resource.inputs, outputs = payment_resource.outputs;
        multiwallet.addInputs(inputs, txb);
        multiwallet.addOutputs(outputs, txb);
        paths = txUtils.getPathsForInputs(inputs);
        return signatures = multiwallet.signAllInputs(paths, txb);
      });
      return it("should properly encode a signature", function() {
        var encodedSig, encodedSignature, signature;
        signature = txb.signatures[0].signatures[0];
        encodedSignature = multiwallet.encodeSignature(signature);
        encodedSig = "iKkkiYrAqRKBWUpyCH2qWrnZ8VvJ2eQodjWhnvq1ScdxyAMLE5j9tVcw7BQg1Qr2M2BiLtqegtdxd9YP3tVaC4WzWNnzpPP4ak";
        return expect(encodedSignature).to.equal(encodedSig);
      });
    });
    describe("encodeSignatures", function() {
      var signatures, txb;
      signatures = null;
      txb = null;
      beforeEach(function() {
        var inputs, outputs, paths;
        txb = new bitcoin.TransactionBuilder();
        inputs = payment_resource.inputs, outputs = payment_resource.outputs;
        multiwallet.addInputs(inputs, txb);
        multiwallet.addOutputs(outputs, txb);
        paths = txUtils.getPathsForInputs(inputs);
        return signatures = multiwallet.signAllInputs(paths, txb);
      });
      return it("return an array of encoded signatures", function() {
        var encodedSig, encodedSignatures;
        encodedSignatures = multiwallet.encodeSignatures(signatures);
        encodedSig = "iKkkiYrAqRKBWUpyCH2qWrnZ8VvJ2eQodjWhnvq1ScdxyAMLE5j9tVcw7BQg1Qr2M2BiLtqegtdxd9YP3tVaC4WzWNnzpPP4ak";
        return expect(encodedSignatures).to.deep.equal([encodedSig]);
      });
    });
    return describe("prepareTransaction", function() {
      return it('return an array of encoded signatures', function() {
        var encodedSig, signatures;
        signatures = multiwallet.prepareTransaction(payment_resource).signatures;
        encodedSig = "iKkkiYrAqRKBWUpyCH2qWrnZ8VvJ2eQodjWhnvq1ScdxyAMLE5j9tVcw7BQg1Qr2M2BiLtqegtdxd9YP3tVaC4WzWNnzpPP4ak";
        return expect(signatures).to.deep.equal([encodedSig]);
      });
    });
  });
});



},{"../../src/bit/multiwallet":372,"../../src/bit/transaction_utils":373,"../data/transaction.json":377,"bitcoinjs-lib":163,"bs58":336,"chai":337}],379:[function(require,module,exports){
var PassphraseBox, encryptionData, expect;

PassphraseBox = require('../../src/crypto/passphrase_box_browser');

expect = require('chai').expect;

encryptionData = require('../data/passphrase_box.json').encryptionData;

describe('PassphraseBox', function() {
  describe('encrypt', function() {
    return it('should return an object containing ciphertext, salt, noce, and iterations', function(done) {
      return PassphraseBox.encrypt('passphrase', 'secret', function(error, encryptedData) {
        expect(encryptedData).to.include.keys('iterations', 'salt', 'nonce', 'ciphertext');
        return done(error);
      });
    });
  });
  describe('decrypt', function() {
    this.timeout(0);
    return it('should decrypt the plain text', function(done) {
      var data;
      data = encryptionData[0];
      return PassphraseBox.decrypt(data.passphrase, data, function(error, plaintext) {
        expect(plaintext).to.equal(data.plaintext);
        return done(error);
      });
    });
  });
  return describe('full-circle encryption/decryption', function() {
    this.timeout(0);
    return it('should decrypt the encrypted', function(done) {
      var data;
      data = encryptionData[0];
      return PassphraseBox.encrypt(data.passphrase, data.plaintext, function(error, encryptedData) {
        return PassphraseBox.decrypt(data.passphrase, encryptedData, function(error, plaintext) {
          expect(plaintext).to.equal(data.plaintext);
          return done(error);
        });
      });
    });
  });
});



},{"../../src/crypto/passphrase_box_browser":375,"../data/passphrase_box.json":376,"chai":337}]},{},[1]);
