// Generated by CoffeeScript 1.8.0
(function() {
  var Const, Key, PassphraseBox, Random, SecretBox, crypto, _ref;

  crypto = require("crypto");

  _ref = require("sodium"), Const = _ref.Const, SecretBox = _ref.SecretBox, Key = _ref.Key, Random = _ref.Random;

  module.exports = PassphraseBox = (function() {
    var ITERATIONS;

    ITERATIONS = 10000;

    PassphraseBox.encrypt = function(passphrase, plaintext) {
      var box;
      box = new this({
        passphrase: passphrase
      });
      return box.encrypt(plaintext);
    };

    PassphraseBox.decrypt = function(passphrase, encrypted) {
      var box, ciphertext, iterations, nonce, salt;
      salt = encrypted.salt, iterations = encrypted.iterations, nonce = encrypted.nonce, ciphertext = encrypted.ciphertext;
      box = new this({
        passphrase: passphrase,
        salt: salt,
        iterations: iterations
      });
      return box.decrypt(ciphertext, nonce);
    };

    function PassphraseBox(_arg) {
      var buffer, key, passphrase, salt;
      passphrase = _arg.passphrase, salt = _arg.salt, this.iterations = _arg.iterations;
      if (salt) {
        this.salt = new Buffer(salt, "hex");
      } else {
        this.salt = new Buffer(16);
        Random.buffer(this.salt);
      }
      if (this.iterations == null) {
        this.iterations = ITERATIONS;
      }
      buffer = crypto.pbkdf2Sync(passphrase, this.salt, this.iterations, 32);
      key = new Key.SecretBox(buffer);
      this.box = new SecretBox(key);
    }

    PassphraseBox.prototype.encrypt = function(plaintext) {
      var cipherText, ciphertext, nonce, _ref1;
      _ref1 = this.box.encrypt(plaintext, "utf8"), cipherText = _ref1.cipherText, nonce = _ref1.nonce;
      ciphertext = cipherText.slice(16);
      return {
        iterations: this.iterations,
        salt: this.salt.toString("hex"),
        nonce: nonce.toString("hex"),
        ciphertext: ciphertext.toString("hex")
      };
    };

    PassphraseBox.prototype.decrypt = function(ciphertext, nonce) {
      var cipherText, plaintext;
      ciphertext = "00000000000000000000000000000000" + ciphertext;
      cipherText = new Buffer(ciphertext, "hex");
      nonce = new Buffer(nonce, "hex");
      plaintext = this.box.decrypt({
        cipherText: cipherText,
        nonce: nonce
      }, "utf8");
      if (plaintext == null) {
        throw new Error;
      }
      return plaintext;
    };

    return PassphraseBox;

  })();

}).call(this);
