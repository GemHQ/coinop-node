// Generated by CoffeeScript 1.9.3
(function() {
  var DIGEST, ITERATIONS, crypto, decrypt, encrypt, sodium;

  crypto = require("./crypto");

  sodium = require("libsodium-wrappers");

  DIGEST = 'sha1';

  ITERATIONS = 10000;

  encrypt = function(passphrase, plaintext, callback) {
    var salt;
    salt = sodium.randombytes_buf(sodium.crypto_shorthash_KEYBYTES);
    return crypto.pbkdf2(passphrase, salt, ITERATIONS, sodium.crypto_secretbox_KEYBYTES, DIGEST, function(error, key) {
      var ciphertext, nonce;
      if (error) {
        return callback(error);
      }
      nonce = sodium.randombytes_buf(sodium.crypto_secretbox_NONCEBYTES);
      ciphertext = sodium.crypto_secretbox_easy(plaintext, nonce, key, 'hex');
      return callback(null, {
        iterations: ITERATIONS,
        salt: sodium.to_hex(salt),
        nonce: sodium.to_hex(nonce),
        ciphertext: ciphertext
      });
    });
  };

  decrypt = function(passphrase, encryptionData, callback) {
    var ciphertext, iterations, nonce, salt;
    salt = encryptionData.salt, iterations = encryptionData.iterations, nonce = encryptionData.nonce, ciphertext = encryptionData.ciphertext;
    salt = sodium.from_hex(salt);
    nonce = sodium.from_hex(nonce);
    ciphertext = sodium.from_hex(ciphertext);
    return crypto.pbkdf2(passphrase, salt, iterations, sodium.crypto_secretbox_KEYBYTES, DIGEST, function(error, key) {
      var plaintext;
      if (error) {
        return callback(error);
      }
      plaintext = sodium.crypto_secretbox_open_easy(ciphertext, nonce, key, 'text');
      return callback(null, plaintext);
    });
  };

  module.exports = {
    encrypt: encrypt,
    decrypt: decrypt
  };

}).call(this);
